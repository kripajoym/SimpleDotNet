<?xml version="1.0" encoding="UTF-8"?>
<api_info>
	<package name="System.CodeDom.Compiler">
		<class name="GeneratedCodeAttribute" uniqueID="System.CodeDom.Compiler.GeneratedCodeAttribute">
			<method accessibility="Public" methodKind="Member" name="GeneratedCodeAttribute" uniqueID="GeneratedCodeAttribute(string;string):void">
				<signature>System.CodeDom.Compiler.GeneratedCodeAttribute.GeneratedCodeAttribute(string;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Tool" uniqueID="get_Tool():string">
				<signature>System.CodeDom.Compiler.GeneratedCodeAttribute.get_Tool():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Version" uniqueID="get_Version():string">
				<signature>System.CodeDom.Compiler.GeneratedCodeAttribute.get_Version():string</signature>
			</method>
		</class>
	</package>
	<package name="System.Reflection">
		<class name="Binder" uniqueID="System.Reflection.Binder">
			<method accessibility="Public" methodKind="Member" name="BindToField" uniqueID="BindToField(System.Reflection.BindingFlags;System.Reflection.FieldInfo[];object;System.Globalization.CultureInfo):System.Reflection.FieldInfo">
				<signature>System.Reflection.Binder.BindToField(System.Reflection.BindingFlags;System.Reflection.FieldInfo[];object;System.Globalization.CultureInfo):System.Reflection.FieldInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BindToMethod" uniqueID="BindToMethod(System.Reflection.BindingFlags;System.Reflection.MethodBase[];object[];System.Reflection.ParameterModifier[];System.Globalization.CultureInfo;string[];object):System.Reflection.MethodBase">
				<signature>System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags;System.Reflection.MethodBase[];object[];System.Reflection.ParameterModifier[];System.Globalization.CultureInfo;string[];object):System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Binder" uniqueID="Binder():void">
				<signature>System.Reflection.Binder.Binder():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ChangeType" uniqueID="ChangeType(object;System.Type;System.Globalization.CultureInfo):object">
				<signature>System.Reflection.Binder.ChangeType(object;System.Type;System.Globalization.CultureInfo):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ReorderArgumentArray" uniqueID="ReorderArgumentArray(object[];object):void">
				<signature>System.Reflection.Binder.ReorderArgumentArray(object[];object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SelectMethod" uniqueID="SelectMethod(System.Reflection.BindingFlags;System.Reflection.MethodBase[];System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodBase">
				<signature>System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags;System.Reflection.MethodBase[];System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SelectProperty" uniqueID="SelectProperty(System.Reflection.BindingFlags;System.Reflection.PropertyInfo[];System.Type;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.PropertyInfo">
				<signature>System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags;System.Reflection.PropertyInfo[];System.Type;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.PropertyInfo</signature>
			</method>
		</class>
		<class name="ManifestResourceInfo" uniqueID="System.Reflection.ManifestResourceInfo">
			<method accessibility="Protected" methodKind="Member" name="ManifestResourceInfo" uniqueID="ManifestResourceInfo(System.Reflection.Assembly;string;System.Reflection.ResourceLocation):void">
				<signature>System.Reflection.ManifestResourceInfo.ManifestResourceInfo(System.Reflection.Assembly;string;System.Reflection.ResourceLocation):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FileName" uniqueID="get_FileName():string">
				<signature>System.Reflection.ManifestResourceInfo.get_FileName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReferencedAssembly" uniqueID="get_ReferencedAssembly():System.Reflection.Assembly">
				<signature>System.Reflection.ManifestResourceInfo.get_ReferencedAssembly():System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ResourceLocation" uniqueID="get_ResourceLocation():System.Reflection.ResourceLocation">
				<signature>System.Reflection.ManifestResourceInfo.get_ResourceLocation():System.Reflection.ResourceLocation</signature>
			</method>
		</class>
		<class name="ModuleResolveEventHandler" uniqueID="System.Reflection.ModuleResolveEventHandler">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(object;System.ResolveEventArgs;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Reflection.ModuleResolveEventHandler.BeginInvoke(object;System.ResolveEventArgs;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):System.Reflection.Module">
				<signature>System.Reflection.ModuleResolveEventHandler.EndInvoke(System.IAsyncResult):System.Reflection.Module</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(object;System.ResolveEventArgs):System.Reflection.Module">
				<signature>System.Reflection.ModuleResolveEventHandler.Invoke(object;System.ResolveEventArgs):System.Reflection.Module</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ModuleResolveEventHandler" uniqueID="ModuleResolveEventHandler(object;native signed int):void">
				<signature>System.Reflection.ModuleResolveEventHandler.ModuleResolveEventHandler(object;native signed int):void</signature>
			</method>
		</class>
		<class name="RuntimePropertyInfo" uniqueID="System.Reflection.RuntimePropertyInfo">
			<method accessibility="Protected" methodKind="Member" name="CacheEquals" uniqueID="CacheEquals(object):bool">
				<signature>System.Reflection.RuntimePropertyInfo.CacheEquals(object):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EqualsSig" uniqueID="EqualsSig(System.Reflection.RuntimePropertyInfo):bool">
				<signature>System.Reflection.RuntimePropertyInfo.EqualsSig(System.Reflection.RuntimePropertyInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAccessors" uniqueID="GetAccessors(bool):System.Reflection.MethodInfo[]">
				<signature>System.Reflection.RuntimePropertyInfo.GetAccessors(bool):System.Reflection.MethodInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetConstantValue" uniqueID="GetConstantValue():object">
				<signature>System.Reflection.RuntimePropertyInfo.GetConstantValue():object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetConstantValue" uniqueID="GetConstantValue(bool):object">
				<signature>System.Reflection.RuntimePropertyInfo.GetConstantValue(bool):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.Reflection.RuntimePropertyInfo.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.Reflection.RuntimePropertyInfo.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetGetMethod" uniqueID="GetGetMethod(bool):System.Reflection.MethodInfo">
				<signature>System.Reflection.RuntimePropertyInfo.GetGetMethod(bool):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetIndexParameters" uniqueID="GetIndexParameters():System.Reflection.ParameterInfo[]">
				<signature>System.Reflection.RuntimePropertyInfo.GetIndexParameters():System.Reflection.ParameterInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetObjectData" uniqueID="GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Reflection.RuntimePropertyInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetOptionalCustomModifiers" uniqueID="GetOptionalCustomModifiers():System.Type[]">
				<signature>System.Reflection.RuntimePropertyInfo.GetOptionalCustomModifiers():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRawConstantValue" uniqueID="GetRawConstantValue():object">
				<signature>System.Reflection.RuntimePropertyInfo.GetRawConstantValue():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRequiredCustomModifiers" uniqueID="GetRequiredCustomModifiers():System.Type[]">
				<signature>System.Reflection.RuntimePropertyInfo.GetRequiredCustomModifiers():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSetMethod" uniqueID="GetSetMethod(bool):System.Reflection.MethodInfo">
				<signature>System.Reflection.RuntimePropertyInfo.GetSetMethod(bool):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValue" uniqueID="GetValue(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object">
				<signature>System.Reflection.RuntimePropertyInfo.GetValue(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValue" uniqueID="GetValue(object;object[]):object">
				<signature>System.Reflection.RuntimePropertyInfo.GetValue(object;object[]):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.Reflection.RuntimePropertyInfo.IsDefined(System.Type;bool):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RuntimePropertyInfo" uniqueID="RuntimePropertyInfo(int;System.RuntimeType;System.RuntimeType+RuntimeTypeCache;bool):void">
				<signature>System.Reflection.RuntimePropertyInfo.RuntimePropertyInfo(int;System.RuntimeType;System.RuntimeType+RuntimeTypeCache;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetValue" uniqueID="SetValue(object;object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):void">
				<signature>System.Reflection.RuntimePropertyInfo.SetValue(object;object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetValue" uniqueID="SetValue(object;object;object[]):void">
				<signature>System.Reflection.RuntimePropertyInfo.SetValue(object;object;object[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Reflection.RuntimePropertyInfo.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Attributes" uniqueID="get_Attributes():System.Reflection.PropertyAttributes">
				<signature>System.Reflection.RuntimePropertyInfo.get_Attributes():System.Reflection.PropertyAttributes</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_BindingFlags" uniqueID="get_BindingFlags():System.Reflection.BindingFlags">
				<signature>System.Reflection.RuntimePropertyInfo.get_BindingFlags():System.Reflection.BindingFlags</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CanRead" uniqueID="get_CanRead():bool">
				<signature>System.Reflection.RuntimePropertyInfo.get_CanRead():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CanWrite" uniqueID="get_CanWrite():bool">
				<signature>System.Reflection.RuntimePropertyInfo.get_CanWrite():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringType" uniqueID="get_DeclaringType():System.Type">
				<signature>System.Reflection.RuntimePropertyInfo.get_DeclaringType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MemberType" uniqueID="get_MemberType():System.Reflection.MemberTypes">
				<signature>System.Reflection.RuntimePropertyInfo.get_MemberType():System.Reflection.MemberTypes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MetadataToken" uniqueID="get_MetadataToken():int">
				<signature>System.Reflection.RuntimePropertyInfo.get_MetadataToken():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Module" uniqueID="get_Module():System.Reflection.Module">
				<signature>System.Reflection.RuntimePropertyInfo.get_Module():System.Reflection.Module</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Reflection.RuntimePropertyInfo.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PropertyType" uniqueID="get_PropertyType():System.Type">
				<signature>System.Reflection.RuntimePropertyInfo.get_PropertyType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReflectedType" uniqueID="get_ReflectedType():System.Type">
				<signature>System.Reflection.RuntimePropertyInfo.get_ReflectedType():System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Signature" uniqueID="get_Signature():System.Signature">
				<signature>System.Reflection.RuntimePropertyInfo.get_Signature():System.Signature</signature>
			</method>
		</class>
		<class name="Assembly" uniqueID="System.Reflection.Assembly">
			<method accessibility="Private" methodKind="Static" name="AddStrongName" uniqueID="AddStrongName(System.Security.Policy.Evidence;byte[];string;int;int;int;int;System.Reflection.Assembly):void">
				<signature>System.Reflection.Assembly.AddStrongName(System.Security.Policy.Evidence;byte[];string;int;int;int;int;System.Reflection.Assembly):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="AddX509Certificate" uniqueID="AddX509Certificate(System.Security.Policy.Evidence;byte[]):void">
				<signature>System.Reflection.Assembly.AddX509Certificate(System.Security.Policy.Evidence;byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CreateQualifiedName" uniqueID="CreateQualifiedName(string;string):string">
				<signature>System.Reflection.Assembly.CreateQualifiedName(string;string):string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CreateSecurityIdentity" uniqueID="CreateSecurityIdentity(System.Reflection.Assembly;string;int;byte[];byte[];string;int;int;int;int;byte[];System.Security.Policy.Evidence):System.Security.Policy.Evidence">
				<signature>System.Reflection.Assembly.CreateSecurityIdentity(System.Reflection.Assembly;string;int;byte[];byte[];string;int;int;int;int;byte[];System.Security.Policy.Evidence):System.Security.Policy.Evidence</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CreateWebPermission" uniqueID="CreateWebPermission(string):System.Security.IPermission">
				<signature>System.Reflection.Assembly.CreateWebPermission(string):System.Security.IPermission</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CulturesEqual" uniqueID="CulturesEqual(System.Globalization.CultureInfo;System.Globalization.CultureInfo):bool">
				<signature>System.Reflection.Assembly.CulturesEqual(System.Globalization.CultureInfo;System.Globalization.CultureInfo):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="DecodeSerializedEvidence" uniqueID="DecodeSerializedEvidence(System.Security.Policy.Evidence;byte[]):void">
				<signature>System.Reflection.Assembly.DecodeSerializedEvidence(System.Security.Policy.Evidence;byte[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="DemandPermission" uniqueID="DemandPermission(string;bool;int):void">
				<signature>System.Reflection.Assembly.DemandPermission(string;bool;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="EnumerateCache" uniqueID="EnumerateCache(System.Reflection.AssemblyName):System.Reflection.AssemblyName">
				<signature>System.Reflection.Assembly.EnumerateCache(System.Reflection.AssemblyName):System.Reflection.AssemblyName</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetAssembly" uniqueID="GetAssembly(System.Type):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.GetAssembly(System.Type):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCallingAssembly" uniqueID="GetCallingAssembly():System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.GetCallingAssembly():System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetEntryAssembly" uniqueID="GetEntryAssembly():System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.GetEntryAssembly():System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetExecutingAssembly" uniqueID="GetExecutingAssembly():System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.GetExecutingAssembly():System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalLoad" uniqueID="InternalLoad(System.Reflection.AssemblyName;System.Security.Policy.Evidence;System.Threading.StackCrawlMark;bool):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.InternalLoad(System.Reflection.AssemblyName;System.Security.Policy.Evidence;System.Threading.StackCrawlMark;bool):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalLoad" uniqueID="InternalLoad(string;System.Security.Policy.Evidence;System.Threading.StackCrawlMark;bool):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.InternalLoad(string;System.Security.Policy.Evidence;System.Threading.StackCrawlMark;bool):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalLoadFrom" uniqueID="InternalLoadFrom(string;System.Security.Policy.Evidence;byte[];System.Configuration.Assemblies.AssemblyHashAlgorithm;bool;System.Threading.StackCrawlMark):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.InternalLoadFrom(string;System.Security.Policy.Evidence;byte[];System.Configuration.Assemblies.AssemblyHashAlgorithm;bool;System.Threading.StackCrawlMark):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IsSimplyNamed" uniqueID="IsSimplyNamed(System.Reflection.AssemblyName):bool">
				<signature>System.Reflection.Assembly.IsSimplyNamed(System.Reflection.AssemblyName):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Load" uniqueID="Load(System.Reflection.AssemblyName):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.Load(System.Reflection.AssemblyName):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Load" uniqueID="Load(System.Reflection.AssemblyName;System.Security.Policy.Evidence):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.Load(System.Reflection.AssemblyName;System.Security.Policy.Evidence):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Load" uniqueID="Load(byte[]):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.Load(byte[]):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Load" uniqueID="Load(byte[];byte[]):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.Load(byte[];byte[]):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Load" uniqueID="Load(byte[];byte[];System.Security.Policy.Evidence):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.Load(byte[];byte[];System.Security.Policy.Evidence):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Load" uniqueID="Load(string):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.Load(string):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Load" uniqueID="Load(string;System.Security.Policy.Evidence):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.Load(string;System.Security.Policy.Evidence):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="LoadFile" uniqueID="LoadFile(string):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.LoadFile(string):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="LoadFile" uniqueID="LoadFile(string;System.Security.Policy.Evidence):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.LoadFile(string;System.Security.Policy.Evidence):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="LoadFrom" uniqueID="LoadFrom(string):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.LoadFrom(string):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="LoadFrom" uniqueID="LoadFrom(string;System.Security.Policy.Evidence):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.LoadFrom(string;System.Security.Policy.Evidence):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="LoadFrom" uniqueID="LoadFrom(string;System.Security.Policy.Evidence;byte[];System.Configuration.Assemblies.AssemblyHashAlgorithm):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.LoadFrom(string;System.Security.Policy.Evidence;byte[];System.Configuration.Assemblies.AssemblyHashAlgorithm):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="LoadWithPartialName" uniqueID="LoadWithPartialName(string):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.LoadWithPartialName(string):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="LoadWithPartialName" uniqueID="LoadWithPartialName(string;System.Security.Policy.Evidence):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.LoadWithPartialName(string;System.Security.Policy.Evidence):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="LoadWithPartialNameHack" uniqueID="LoadWithPartialNameHack(string;bool):native signed int">
				<signature>System.Reflection.Assembly.LoadWithPartialNameHack(string;bool):native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="LoadWithPartialNameInternal" uniqueID="LoadWithPartialNameInternal(string;System.Security.Policy.Evidence;System.Threading.StackCrawlMark):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.LoadWithPartialNameInternal(string;System.Security.Policy.Evidence;System.Threading.StackCrawlMark):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ReflectionOnlyLoad" uniqueID="ReflectionOnlyLoad(byte[]):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.ReflectionOnlyLoad(byte[]):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ReflectionOnlyLoad" uniqueID="ReflectionOnlyLoad(string):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.ReflectionOnlyLoad(string):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ReflectionOnlyLoadFrom" uniqueID="ReflectionOnlyLoadFrom(string):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.ReflectionOnlyLoadFrom(string):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="VerifyCodeBase" uniqueID="VerifyCodeBase(string):string">
				<signature>System.Reflection.Assembly.VerifyCodeBase(string):string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_nDefineDynamicModule" uniqueID="_nDefineDynamicModule(System.Reflection.Assembly;bool;string;System.Threading.StackCrawlMark):System.Reflection.Module">
				<signature>System.Reflection.Assembly._nDefineDynamicModule(System.Reflection.Assembly;bool;string;System.Threading.StackCrawlMark):System.Reflection.Module</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_nLoad" uniqueID="_nLoad(System.Reflection.AssemblyName;string;System.Security.Policy.Evidence;System.Reflection.Assembly;System.Threading.StackCrawlMark;bool;bool):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly._nLoad(System.Reflection.AssemblyName;string;System.Security.Policy.Evidence;System.Reflection.Assembly;System.Threading.StackCrawlMark;bool;bool):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nDefineDynamicModule" uniqueID="nDefineDynamicModule(System.Reflection.Assembly;bool;string;System.Threading.StackCrawlMark):System.Reflection.Module">
				<signature>System.Reflection.Assembly.nDefineDynamicModule(System.Reflection.Assembly;bool;string;System.Threading.StackCrawlMark):System.Reflection.Module</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nDefineVersionInfoResource" uniqueID="nDefineVersionInfoResource(string;string;string;string;string;string;string;string;string;string;int;bool):string">
				<signature>System.Reflection.Assembly.nDefineVersionInfoResource(string;string;string;string;string;string;string;string;string;string;int;bool):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nGetExecutingAssembly" uniqueID="nGetExecutingAssembly(System.Threading.StackCrawlMark):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.nGetExecutingAssembly(System.Threading.StackCrawlMark):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="nLoad" uniqueID="nLoad(System.Reflection.AssemblyName;string;System.Security.Policy.Evidence;System.Reflection.Assembly;System.Threading.StackCrawlMark;bool;bool):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.nLoad(System.Reflection.AssemblyName;string;System.Security.Policy.Evidence;System.Reflection.Assembly;System.Threading.StackCrawlMark;bool;bool):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nLoadFile" uniqueID="nLoadFile(string;System.Security.Policy.Evidence):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.nLoadFile(string;System.Security.Policy.Evidence):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nLoadImage" uniqueID="nLoadImage(byte[];byte[];System.Security.Policy.Evidence;System.Threading.StackCrawlMark;bool):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.nLoadImage(byte[];byte[];System.Security.Policy.Evidence;System.Threading.StackCrawlMark;bool):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AptcaCheck" uniqueID="AptcaCheck(System.Reflection.Assembly):bool">
				<signature>System.Reflection.Assembly.AptcaCheck(System.Reflection.Assembly):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Assembly" uniqueID="Assembly():void">
				<signature>System.Reflection.Assembly.Assembly():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ComputeProcArchIndex" uniqueID="ComputeProcArchIndex():System.Reflection.ProcessorArchitecture">
				<signature>System.Reflection.Assembly.ComputeProcArchIndex():System.Reflection.ProcessorArchitecture</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateInstance" uniqueID="CreateInstance(string):object">
				<signature>System.Reflection.Assembly.CreateInstance(string):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateInstance" uniqueID="CreateInstance(string;bool):object">
				<signature>System.Reflection.Assembly.CreateInstance(string;bool):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateInstance" uniqueID="CreateInstance(string;bool;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo;object[]):object">
				<signature>System.Reflection.Assembly.CreateInstance(string;bool;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo;object[]):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Reflection.Assembly.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.Reflection.Assembly.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.Reflection.Assembly.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetExportedTypes" uniqueID="GetExportedTypes():System.Type[]">
				<signature>System.Reflection.Assembly.GetExportedTypes():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFile" uniqueID="GetFile(string):System.IO.FileStream">
				<signature>System.Reflection.Assembly.GetFile(string):System.IO.FileStream</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFiles" uniqueID="GetFiles():System.IO.FileStream[]">
				<signature>System.Reflection.Assembly.GetFiles():System.IO.FileStream[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFiles" uniqueID="GetFiles(bool):System.IO.FileStream[]">
				<signature>System.Reflection.Assembly.GetFiles(bool):System.IO.FileStream[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetFullName" uniqueID="GetFullName():string">
				<signature>System.Reflection.Assembly.GetFullName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Reflection.Assembly.GetHashCode():int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetHostContext" uniqueID="GetHostContext():long">
				<signature>System.Reflection.Assembly.GetHostContext():long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetLoadedModules" uniqueID="GetLoadedModules():System.Reflection.Module[]">
				<signature>System.Reflection.Assembly.GetLoadedModules():System.Reflection.Module[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetLoadedModules" uniqueID="GetLoadedModules(bool):System.Reflection.Module[]">
				<signature>System.Reflection.Assembly.GetLoadedModules(bool):System.Reflection.Module[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetLocale" uniqueID="GetLocale():System.Globalization.CultureInfo">
				<signature>System.Reflection.Assembly.GetLocale():System.Globalization.CultureInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetLocation" uniqueID="GetLocation():string">
				<signature>System.Reflection.Assembly.GetLocation():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetManifestResourceInfo" uniqueID="GetManifestResourceInfo(string):System.Reflection.ManifestResourceInfo">
				<signature>System.Reflection.Assembly.GetManifestResourceInfo(string):System.Reflection.ManifestResourceInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetManifestResourceNames" uniqueID="GetManifestResourceNames():string[]">
				<signature>System.Reflection.Assembly.GetManifestResourceNames():string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetManifestResourceStream" uniqueID="GetManifestResourceStream(System.Type;string):System.IO.Stream">
				<signature>System.Reflection.Assembly.GetManifestResourceStream(System.Type;string):System.IO.Stream</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetManifestResourceStream" uniqueID="GetManifestResourceStream(System.Type;string;bool;System.Threading.StackCrawlMark):System.IO.Stream">
				<signature>System.Reflection.Assembly.GetManifestResourceStream(System.Type;string;bool;System.Threading.StackCrawlMark):System.IO.Stream</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetManifestResourceStream" uniqueID="GetManifestResourceStream(string):System.IO.Stream">
				<signature>System.Reflection.Assembly.GetManifestResourceStream(string):System.IO.Stream</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetManifestResourceStream" uniqueID="GetManifestResourceStream(string;System.Threading.StackCrawlMark;bool):System.IO.Stream">
				<signature>System.Reflection.Assembly.GetManifestResourceStream(string;System.Threading.StackCrawlMark;bool):System.IO.Stream</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetModule" uniqueID="GetModule(string):System.Reflection.Module">
				<signature>System.Reflection.Assembly.GetModule(string):System.Reflection.Module</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetModuleInternal" uniqueID="GetModuleInternal(string):System.Reflection.Module">
				<signature>System.Reflection.Assembly.GetModuleInternal(string):System.Reflection.Module</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetModules" uniqueID="GetModules():System.Reflection.Module[]">
				<signature>System.Reflection.Assembly.GetModules():System.Reflection.Module[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetModules" uniqueID="GetModules(bool):System.Reflection.Module[]">
				<signature>System.Reflection.Assembly.GetModules(bool):System.Reflection.Module[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetName" uniqueID="GetName():System.Reflection.AssemblyName">
				<signature>System.Reflection.Assembly.GetName():System.Reflection.AssemblyName</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetName" uniqueID="GetName(bool):System.Reflection.AssemblyName">
				<signature>System.Reflection.Assembly.GetName(bool):System.Reflection.AssemblyName</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetObjectData" uniqueID="GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Reflection.Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetReferencedAssemblies" uniqueID="GetReferencedAssemblies():System.Reflection.AssemblyName[]">
				<signature>System.Reflection.Assembly.GetReferencedAssemblies():System.Reflection.AssemblyName[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetResource" uniqueID="GetResource(string;unsigned long;System.Threading.StackCrawlMark;bool):byte">
				<signature>System.Reflection.Assembly.GetResource(string;unsigned long;System.Threading.StackCrawlMark;bool):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSatelliteAssembly" uniqueID="GetSatelliteAssembly(System.Globalization.CultureInfo):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSatelliteAssembly" uniqueID="GetSatelliteAssembly(System.Globalization.CultureInfo;System.Version):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo;System.Version):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType(string):System.Type">
				<signature>System.Reflection.Assembly.GetType(string):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType(string;bool):System.Type">
				<signature>System.Reflection.Assembly.GetType(string;bool):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType(string;bool;bool):System.Type">
				<signature>System.Reflection.Assembly.GetType(string;bool;bool):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypes" uniqueID="GetTypes():System.Type[]">
				<signature>System.Reflection.Assembly.GetTypes():System.Type[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetVersion" uniqueID="GetVersion():System.Version">
				<signature>System.Reflection.Assembly.GetVersion():System.Version</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalGetSatelliteAssembly" uniqueID="InternalGetSatelliteAssembly(System.Globalization.CultureInfo;System.Version;bool):System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.InternalGetSatelliteAssembly(System.Globalization.CultureInfo;System.Version;bool):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="IsAssemblyUnderAppBase" uniqueID="IsAssemblyUnderAppBase():bool">
				<signature>System.Reflection.Assembly.IsAssemblyUnderAppBase():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.Reflection.Assembly.IsDefined(System.Type;bool):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsStrongNameVerified" uniqueID="IsStrongNameVerified():bool">
				<signature>System.Reflection.Assembly.IsStrongNameVerified():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LoadModule" uniqueID="LoadModule(string;byte[]):System.Reflection.Module">
				<signature>System.Reflection.Assembly.LoadModule(string;byte[]):System.Reflection.Module</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LoadModule" uniqueID="LoadModule(string;byte[];byte[]):System.Reflection.Module">
				<signature>System.Reflection.Assembly.LoadModule(string;byte[];byte[]):System.Reflection.Module</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="OnCacheClear" uniqueID="OnCacheClear(object;System.Reflection.Cache.ClearCacheEventArgs):void">
				<signature>System.Reflection.Assembly.OnCacheClear(object;System.Reflection.Cache.ClearCacheEventArgs):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnModuleResolveEvent" uniqueID="OnModuleResolveEvent(string):System.Reflection.Module">
				<signature>System.Reflection.Assembly.OnModuleResolveEvent(string):System.Reflection.Module</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._Assembly.GetType" uniqueID="System.Runtime.InteropServices._Assembly.GetType():System.Type">
				<signature>System.Reflection.Assembly.System.Runtime.InteropServices._Assembly.GetType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Reflection.Assembly.ToString():string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="VerifyCodeBaseDiscovery" uniqueID="VerifyCodeBaseDiscovery(string):void">
				<signature>System.Reflection.Assembly.VerifyCodeBaseDiscovery(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_GetExportedTypes" uniqueID="_GetExportedTypes():System.Type[]">
				<signature>System.Reflection.Assembly._GetExportedTypes():System.Type[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_GetFullName" uniqueID="_GetFullName():string">
				<signature>System.Reflection.Assembly._GetFullName():string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_GetHostContext" uniqueID="_GetHostContext():long">
				<signature>System.Reflection.Assembly._GetHostContext():long</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_GetLocation" uniqueID="_GetLocation():string">
				<signature>System.Reflection.Assembly._GetLocation():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="_GetModule" uniqueID="_GetModule(string):System.Reflection.Module">
				<signature>System.Reflection.Assembly._GetModule(string):System.Reflection.Module</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_GetReferencedAssemblies" uniqueID="_GetReferencedAssemblies():System.Reflection.AssemblyName[]">
				<signature>System.Reflection.Assembly._GetReferencedAssemblies():System.Reflection.AssemblyName[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_GetResource" uniqueID="_GetResource(string;unsigned long;System.Threading.StackCrawlMark;bool):byte">
				<signature>System.Reflection.Assembly._GetResource(string;unsigned long;System.Threading.StackCrawlMark;bool):byte</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_GetType" uniqueID="_GetType(string;bool;bool):System.Type">
				<signature>System.Reflection.Assembly._GetType(string;bool;bool):System.Type</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_nAddFileToInMemoryFileList" uniqueID="_nAddFileToInMemoryFileList(string;System.Reflection.Module):int">
				<signature>System.Reflection.Assembly._nAddFileToInMemoryFileList(string;System.Reflection.Module):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_nAddStandAloneResource" uniqueID="_nAddStandAloneResource(string;string;string;int):void">
				<signature>System.Reflection.Assembly._nAddStandAloneResource(string;string;string;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_nGetCodeBase" uniqueID="_nGetCodeBase(bool):string">
				<signature>System.Reflection.Assembly._nGetCodeBase(bool):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_nGetEntryPoint" uniqueID="_nGetEntryPoint():void">
				<signature>System.Reflection.Assembly._nGetEntryPoint():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="_nGetEvidence" uniqueID="_nGetEvidence():System.Security.Policy.Evidence">
				<signature>System.Reflection.Assembly._nGetEvidence():System.Security.Policy.Evidence</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_nGetFlags" uniqueID="_nGetFlags():System.Reflection.AssemblyNameFlags">
				<signature>System.Reflection.Assembly._nGetFlags():System.Reflection.AssemblyNameFlags</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="_nGetGrantSet" uniqueID="_nGetGrantSet(System.Security.PermissionSet;System.Security.PermissionSet):void">
				<signature>System.Reflection.Assembly._nGetGrantSet(System.Security.PermissionSet;System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_nGetHashAlgorithm" uniqueID="_nGetHashAlgorithm():System.Configuration.Assemblies.AssemblyHashAlgorithm">
				<signature>System.Reflection.Assembly._nGetHashAlgorithm():System.Configuration.Assemblies.AssemblyHashAlgorithm</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_nGetImageRuntimeVersion" uniqueID="_nGetImageRuntimeVersion():string">
				<signature>System.Reflection.Assembly._nGetImageRuntimeVersion():string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_nGetInMemoryAssemblyModule" uniqueID="_nGetInMemoryAssemblyModule():System.Reflection.Module">
				<signature>System.Reflection.Assembly._nGetInMemoryAssemblyModule():System.Reflection.Module</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_nGetLocale" uniqueID="_nGetLocale():string">
				<signature>System.Reflection.Assembly._nGetLocale():string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_nGetManifestResourceInfo" uniqueID="_nGetManifestResourceInfo(string;System.Reflection.Assembly;string;System.Threading.StackCrawlMark):int">
				<signature>System.Reflection.Assembly._nGetManifestResourceInfo(string;System.Reflection.Assembly;string;System.Threading.StackCrawlMark):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_nGetManifestResourceNames" uniqueID="_nGetManifestResourceNames():string[]">
				<signature>System.Reflection.Assembly._nGetManifestResourceNames():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="_nGetModules" uniqueID="_nGetModules(bool;bool):System.Reflection.Module[]">
				<signature>System.Reflection.Assembly._nGetModules(bool;bool):System.Reflection.Module[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_nGetOnDiskAssemblyModule" uniqueID="_nGetOnDiskAssemblyModule():System.Reflection.Module">
				<signature>System.Reflection.Assembly._nGetOnDiskAssemblyModule():System.Reflection.Module</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_nGetPublicKey" uniqueID="_nGetPublicKey():byte[]">
				<signature>System.Reflection.Assembly._nGetPublicKey():byte[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_nGetSimpleName" uniqueID="_nGetSimpleName():string">
				<signature>System.Reflection.Assembly._nGetSimpleName():string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_nGetVersion" uniqueID="_nGetVersion(int;int;int;int):void">
				<signature>System.Reflection.Assembly._nGetVersion(int;int;int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_nGlobalAssemblyCache" uniqueID="_nGlobalAssemblyCache():bool">
				<signature>System.Reflection.Assembly._nGlobalAssemblyCache():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_nIsDynamic" uniqueID="_nIsDynamic():bool">
				<signature>System.Reflection.Assembly._nIsDynamic():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_nLoadModule" uniqueID="_nLoadModule(string;byte[];byte[];System.Security.Policy.Evidence):System.Reflection.Module">
				<signature>System.Reflection.Assembly._nLoadModule(string;byte[];byte[];System.Security.Policy.Evidence):System.Reflection.Module</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_nPrepareForSavingManifestToDisk" uniqueID="_nPrepareForSavingManifestToDisk(System.Reflection.Module):void">
				<signature>System.Reflection.Assembly._nPrepareForSavingManifestToDisk(System.Reflection.Module):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_nReflection" uniqueID="_nReflection():bool">
				<signature>System.Reflection.Assembly._nReflection():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_nSaveExportedType" uniqueID="_nSaveExportedType(string;int;int;System.Reflection.TypeAttributes):int">
				<signature>System.Reflection.Assembly._nSaveExportedType(string;int;int;System.Reflection.TypeAttributes):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_nSaveManifestToDisk" uniqueID="_nSaveManifestToDisk(string;int;int;int;int):void">
				<signature>System.Reflection.Assembly._nSaveManifestToDisk(string;int;int;int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_nSavePermissionRequests" uniqueID="_nSavePermissionRequests(byte[];byte[];byte[]):void">
				<signature>System.Reflection.Assembly._nSavePermissionRequests(byte[];byte[];byte[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_nSaveToFileList" uniqueID="_nSaveToFileList(string):int">
				<signature>System.Reflection.Assembly._nSaveToFileList(string):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_nSetHashValue" uniqueID="_nSetHashValue(int;string):int">
				<signature>System.Reflection.Assembly._nSetHashValue(int;string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="add_ModuleResolve" uniqueID="add_ModuleResolve(System.Reflection.ModuleResolveEventHandler):void">
				<signature>System.Reflection.Assembly.add_ModuleResolve(System.Reflection.ModuleResolveEventHandler):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="add__ModuleResolve" uniqueID="add__ModuleResolve(System.Reflection.ModuleResolveEventHandler):void">
				<signature>System.Reflection.Assembly.add__ModuleResolve(System.Reflection.ModuleResolveEventHandler):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_AssemblyHandle" uniqueID="get_AssemblyHandle():System.AssemblyHandle">
				<signature>System.Reflection.Assembly.get_AssemblyHandle():System.AssemblyHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Cache" uniqueID="get_Cache():System.Reflection.Cache.InternalCache">
				<signature>System.Reflection.Assembly.get_Cache():System.Reflection.Cache.InternalCache</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CodeBase" uniqueID="get_CodeBase():string">
				<signature>System.Reflection.Assembly.get_CodeBase():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_EntryPoint" uniqueID="get_EntryPoint():System.Reflection.MethodInfo">
				<signature>System.Reflection.Assembly.get_EntryPoint():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_EscapedCodeBase" uniqueID="get_EscapedCodeBase():string">
				<signature>System.Reflection.Assembly.get_EscapedCodeBase():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Evidence" uniqueID="get_Evidence():System.Security.Policy.Evidence">
				<signature>System.Reflection.Assembly.get_Evidence():System.Security.Policy.Evidence</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FullName" uniqueID="get_FullName():string">
				<signature>System.Reflection.Assembly.get_FullName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_GlobalAssemblyCache" uniqueID="get_GlobalAssemblyCache():bool">
				<signature>System.Reflection.Assembly.get_GlobalAssemblyCache():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_HostContext" uniqueID="get_HostContext():long">
				<signature>System.Reflection.Assembly.get_HostContext():long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ImageRuntimeVersion" uniqueID="get_ImageRuntimeVersion():string">
				<signature>System.Reflection.Assembly.get_ImageRuntimeVersion():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_InternalAssembly" uniqueID="get_InternalAssembly():System.Reflection.Assembly">
				<signature>System.Reflection.Assembly.get_InternalAssembly():System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Location" uniqueID="get_Location():string">
				<signature>System.Reflection.Assembly.get_Location():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ManifestModule" uniqueID="get_ManifestModule():System.Reflection.Module">
				<signature>System.Reflection.Assembly.get_ManifestModule():System.Reflection.Module</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_ModuleResolveEvent" uniqueID="get_ModuleResolveEvent():System.Reflection.ModuleResolveEventHandler">
				<signature>System.Reflection.Assembly.get_ModuleResolveEvent():System.Reflection.ModuleResolveEventHandler</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReflectionOnly" uniqueID="get_ReflectionOnly():bool">
				<signature>System.Reflection.Assembly.get_ReflectionOnly():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_m_assembly" uniqueID="get_m_assembly():native signed int">
				<signature>System.Reflection.Assembly.get_m_assembly():native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_m_assemblyData" uniqueID="get_m_assemblyData():System.Reflection.Emit.AssemblyBuilderData">
				<signature>System.Reflection.Assembly.get_m_assemblyData():System.Reflection.Emit.AssemblyBuilderData</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_m_cachedData" uniqueID="get_m_cachedData():System.Reflection.Cache.InternalCache">
				<signature>System.Reflection.Assembly.get_m_cachedData():System.Reflection.Cache.InternalCache</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nAddFileToInMemoryFileList" uniqueID="nAddFileToInMemoryFileList(string;System.Reflection.Module):int">
				<signature>System.Reflection.Assembly.nAddFileToInMemoryFileList(string;System.Reflection.Module):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nAddStandAloneResource" uniqueID="nAddStandAloneResource(string;string;string;int):void">
				<signature>System.Reflection.Assembly.nAddStandAloneResource(string;string;string;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nGetCodeBase" uniqueID="nGetCodeBase(bool):string">
				<signature>System.Reflection.Assembly.nGetCodeBase(bool):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="nGetEntryPoint" uniqueID="nGetEntryPoint():System.RuntimeMethodHandle">
				<signature>System.Reflection.Assembly.nGetEntryPoint():System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nGetEvidence" uniqueID="nGetEvidence():System.Security.Policy.Evidence">
				<signature>System.Reflection.Assembly.nGetEvidence():System.Security.Policy.Evidence</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nGetFlags" uniqueID="nGetFlags():System.Reflection.AssemblyNameFlags">
				<signature>System.Reflection.Assembly.nGetFlags():System.Reflection.AssemblyNameFlags</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nGetGrantSet" uniqueID="nGetGrantSet(System.Security.PermissionSet;System.Security.PermissionSet):void">
				<signature>System.Reflection.Assembly.nGetGrantSet(System.Security.PermissionSet;System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nGetHashAlgorithm" uniqueID="nGetHashAlgorithm():System.Configuration.Assemblies.AssemblyHashAlgorithm">
				<signature>System.Reflection.Assembly.nGetHashAlgorithm():System.Configuration.Assemblies.AssemblyHashAlgorithm</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="nGetImageRuntimeVersion" uniqueID="nGetImageRuntimeVersion():string">
				<signature>System.Reflection.Assembly.nGetImageRuntimeVersion():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nGetInMemoryAssemblyModule" uniqueID="nGetInMemoryAssemblyModule():System.Reflection.Module">
				<signature>System.Reflection.Assembly.nGetInMemoryAssemblyModule():System.Reflection.Module</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="nGetLocale" uniqueID="nGetLocale():string">
				<signature>System.Reflection.Assembly.nGetLocale():string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="nGetManifestResourceInfo" uniqueID="nGetManifestResourceInfo(string;System.Reflection.Assembly;string;System.Threading.StackCrawlMark):int">
				<signature>System.Reflection.Assembly.nGetManifestResourceInfo(string;System.Reflection.Assembly;string;System.Threading.StackCrawlMark):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nGetManifestResourceNames" uniqueID="nGetManifestResourceNames():string[]">
				<signature>System.Reflection.Assembly.nGetManifestResourceNames():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nGetModules" uniqueID="nGetModules(bool;bool):System.Reflection.Module[]">
				<signature>System.Reflection.Assembly.nGetModules(bool;bool):System.Reflection.Module[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nGetOnDiskAssemblyModule" uniqueID="nGetOnDiskAssemblyModule():System.Reflection.Module">
				<signature>System.Reflection.Assembly.nGetOnDiskAssemblyModule():System.Reflection.Module</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nGetPublicKey" uniqueID="nGetPublicKey():byte[]">
				<signature>System.Reflection.Assembly.nGetPublicKey():byte[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nGetSimpleName" uniqueID="nGetSimpleName():string">
				<signature>System.Reflection.Assembly.nGetSimpleName():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nGetVersion" uniqueID="nGetVersion(int;int;int;int):void">
				<signature>System.Reflection.Assembly.nGetVersion(int;int;int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="nGlobalAssemblyCache" uniqueID="nGlobalAssemblyCache():bool">
				<signature>System.Reflection.Assembly.nGlobalAssemblyCache():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nIsDynamic" uniqueID="nIsDynamic():bool">
				<signature>System.Reflection.Assembly.nIsDynamic():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="nLoadModule" uniqueID="nLoadModule(string;byte[];byte[];System.Security.Policy.Evidence):System.Reflection.Module">
				<signature>System.Reflection.Assembly.nLoadModule(string;byte[];byte[];System.Security.Policy.Evidence):System.Reflection.Module</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nPrepareForSavingManifestToDisk" uniqueID="nPrepareForSavingManifestToDisk(System.Reflection.Module):void">
				<signature>System.Reflection.Assembly.nPrepareForSavingManifestToDisk(System.Reflection.Module):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nReflection" uniqueID="nReflection():bool">
				<signature>System.Reflection.Assembly.nReflection():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nSaveExportedType" uniqueID="nSaveExportedType(string;int;int;System.Reflection.TypeAttributes):int">
				<signature>System.Reflection.Assembly.nSaveExportedType(string;int;int;System.Reflection.TypeAttributes):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nSaveManifestToDisk" uniqueID="nSaveManifestToDisk(string;int;int;int;int):void">
				<signature>System.Reflection.Assembly.nSaveManifestToDisk(string;int;int;int;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nSavePermissionRequests" uniqueID="nSavePermissionRequests(byte[];byte[];byte[]):void">
				<signature>System.Reflection.Assembly.nSavePermissionRequests(byte[];byte[];byte[]):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nSaveToFileList" uniqueID="nSaveToFileList(string):int">
				<signature>System.Reflection.Assembly.nSaveToFileList(string):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nSetHashValue" uniqueID="nSetHashValue(int;string):int">
				<signature>System.Reflection.Assembly.nSetHashValue(int;string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="remove_ModuleResolve" uniqueID="remove_ModuleResolve(System.Reflection.ModuleResolveEventHandler):void">
				<signature>System.Reflection.Assembly.remove_ModuleResolve(System.Reflection.ModuleResolveEventHandler):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="remove__ModuleResolve" uniqueID="remove__ModuleResolve(System.Reflection.ModuleResolveEventHandler):void">
				<signature>System.Reflection.Assembly.remove__ModuleResolve(System.Reflection.ModuleResolveEventHandler):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_m_assembly" uniqueID="set_m_assembly(native signed int):void">
				<signature>System.Reflection.Assembly.set_m_assembly(native signed int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_m_assemblyData" uniqueID="set_m_assemblyData(System.Reflection.Emit.AssemblyBuilderData):void">
				<signature>System.Reflection.Assembly.set_m_assemblyData(System.Reflection.Emit.AssemblyBuilderData):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_m_cachedData" uniqueID="set_m_cachedData(System.Reflection.Cache.InternalCache):void">
				<signature>System.Reflection.Assembly.set_m_cachedData(System.Reflection.Cache.InternalCache):void</signature>
			</method>
		</class>
		<class name="CerArrayList&lt;System.Reflection.RuntimeConstructorInfo&gt;" uniqueID="System.Reflection.CerArrayList&lt;System.Reflection.RuntimeConstructorInfo&gt;">
			<method accessibility="Protected" methodKind="Member" name="Add" uniqueID="Add(System.Reflection.RuntimeConstructorInfo):void">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeConstructorInfo&gt;.Add(System.Reflection.RuntimeConstructorInfo):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CerArrayList&lt;System.Reflection.RuntimeConstructorInfo&gt;" uniqueID="CerArrayList&lt;System.Reflection.RuntimeConstructorInfo&gt;(System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;):void">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeConstructorInfo&gt;.CerArrayList&lt;System.Reflection.RuntimeConstructorInfo&gt;(System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CerArrayList&lt;System.Reflection.RuntimeConstructorInfo&gt;" uniqueID="CerArrayList&lt;System.Reflection.RuntimeConstructorInfo&gt;(int):void">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeConstructorInfo&gt;.CerArrayList&lt;System.Reflection.RuntimeConstructorInfo&gt;(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Preallocate" uniqueID="Preallocate(int):void">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeConstructorInfo&gt;.Preallocate(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Replace" uniqueID="Replace(int;System.Reflection.RuntimeConstructorInfo):void">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeConstructorInfo&gt;.Replace(int;System.Reflection.RuntimeConstructorInfo):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeConstructorInfo&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.Reflection.RuntimeConstructorInfo">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeConstructorInfo&gt;.get_Item(int):System.Reflection.RuntimeConstructorInfo</signature>
			</method>
		</class>
		<class name="MethodBase" uniqueID="System.Reflection.MethodBase">
			<method accessibility="Public" methodKind="Static" name="GetCurrentMethod" uniqueID="GetCurrentMethod():System.Reflection.MethodBase">
				<signature>System.Reflection.MethodBase.GetCurrentMethod():System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetMethodFromHandle" uniqueID="GetMethodFromHandle(System.RuntimeMethodHandle):System.Reflection.MethodBase">
				<signature>System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle):System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetMethodFromHandle" uniqueID="GetMethodFromHandle(System.RuntimeMethodHandle;System.RuntimeTypeHandle):System.Reflection.MethodBase">
				<signature>System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle;System.RuntimeTypeHandle):System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetSpecialSecurityFlags" uniqueID="GetSpecialSecurityFlags(System.RuntimeMethodHandle):unsigned int">
				<signature>System.Reflection.MethodBase.GetSpecialSecurityFlags(System.RuntimeMethodHandle):unsigned int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="PerformSecurityCheck" uniqueID="PerformSecurityCheck(object;System.RuntimeMethodHandle;native signed int;unsigned int):void">
				<signature>System.Reflection.MethodBase.PerformSecurityCheck(object;System.RuntimeMethodHandle;native signed int;unsigned int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckArguments" uniqueID="CheckArguments(object[];System.Reflection.Binder;System.Reflection.BindingFlags;System.Globalization.CultureInfo;System.Signature):object[]">
				<signature>System.Reflection.MethodBase.CheckArguments(object[];System.Reflection.Binder;System.Reflection.BindingFlags;System.Globalization.CultureInfo;System.Signature):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetGenericArguments" uniqueID="GetGenericArguments():System.Type[]">
				<signature>System.Reflection.MethodBase.GetGenericArguments():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethodBody" uniqueID="GetMethodBody():System.Reflection.MethodBody">
				<signature>System.Reflection.MethodBase.GetMethodBody():System.Reflection.MethodBody</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMethodHandle" uniqueID="GetMethodHandle():System.RuntimeMethodHandle">
				<signature>System.Reflection.MethodBase.GetMethodHandle():System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethodImplementationFlags" uniqueID="GetMethodImplementationFlags():System.Reflection.MethodImplAttributes">
				<signature>System.Reflection.MethodBase.GetMethodImplementationFlags():System.Reflection.MethodImplAttributes</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetOneTimeFlags" uniqueID="GetOneTimeFlags():unsigned int">
				<signature>System.Reflection.MethodBase.GetOneTimeFlags():unsigned int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetOneTimeSpecificFlags" uniqueID="GetOneTimeSpecificFlags():unsigned int">
				<signature>System.Reflection.MethodBase.GetOneTimeSpecificFlags():unsigned int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetParameterTypes" uniqueID="GetParameterTypes():System.Type[]">
				<signature>System.Reflection.MethodBase.GetParameterTypes():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetParameters" uniqueID="GetParameters():System.Reflection.ParameterInfo[]">
				<signature>System.Reflection.MethodBase.GetParameters():System.Reflection.ParameterInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetParametersNoCopy" uniqueID="GetParametersNoCopy():System.Reflection.ParameterInfo[]">
				<signature>System.Reflection.MethodBase.GetParametersNoCopy():System.Reflection.ParameterInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetReturnType" uniqueID="GetReturnType():System.Type">
				<signature>System.Reflection.MethodBase.GetReturnType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object">
				<signature>System.Reflection.MethodBase.Invoke(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(object;object[]):object">
				<signature>System.Reflection.MethodBase.Invoke(object;object[]):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MethodBase" uniqueID="MethodBase():void">
				<signature>System.Reflection.MethodBase.MethodBase():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MethodBase.GetIDsOfNames" uniqueID="System.Runtime.InteropServices._MethodBase.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MethodBase.GetType" uniqueID="System.Runtime.InteropServices._MethodBase.GetType():System.Type">
				<signature>System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.GetType():System.Type</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MethodBase.GetTypeInfo" uniqueID="System.Runtime.InteropServices._MethodBase.GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MethodBase.GetTypeInfoCount" uniqueID="System.Runtime.InteropServices._MethodBase.GetTypeInfoCount(unsigned int):void">
				<signature>System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MethodBase.Invoke" uniqueID="System.Runtime.InteropServices._MethodBase.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MethodBase.get_IsAbstract" uniqueID="System.Runtime.InteropServices._MethodBase.get_IsAbstract():bool">
				<signature>System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.get_IsAbstract():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MethodBase.get_IsAssembly" uniqueID="System.Runtime.InteropServices._MethodBase.get_IsAssembly():bool">
				<signature>System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.get_IsAssembly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MethodBase.get_IsConstructor" uniqueID="System.Runtime.InteropServices._MethodBase.get_IsConstructor():bool">
				<signature>System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.get_IsConstructor():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MethodBase.get_IsFamily" uniqueID="System.Runtime.InteropServices._MethodBase.get_IsFamily():bool">
				<signature>System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.get_IsFamily():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MethodBase.get_IsFamilyAndAssembly" uniqueID="System.Runtime.InteropServices._MethodBase.get_IsFamilyAndAssembly():bool">
				<signature>System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.get_IsFamilyAndAssembly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MethodBase.get_IsFamilyOrAssembly" uniqueID="System.Runtime.InteropServices._MethodBase.get_IsFamilyOrAssembly():bool">
				<signature>System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.get_IsFamilyOrAssembly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MethodBase.get_IsFinal" uniqueID="System.Runtime.InteropServices._MethodBase.get_IsFinal():bool">
				<signature>System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.get_IsFinal():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MethodBase.get_IsHideBySig" uniqueID="System.Runtime.InteropServices._MethodBase.get_IsHideBySig():bool">
				<signature>System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.get_IsHideBySig():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MethodBase.get_IsPrivate" uniqueID="System.Runtime.InteropServices._MethodBase.get_IsPrivate():bool">
				<signature>System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.get_IsPrivate():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MethodBase.get_IsPublic" uniqueID="System.Runtime.InteropServices._MethodBase.get_IsPublic():bool">
				<signature>System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.get_IsPublic():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MethodBase.get_IsSpecialName" uniqueID="System.Runtime.InteropServices._MethodBase.get_IsSpecialName():bool">
				<signature>System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.get_IsSpecialName():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MethodBase.get_IsStatic" uniqueID="System.Runtime.InteropServices._MethodBase.get_IsStatic():bool">
				<signature>System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.get_IsStatic():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MethodBase.get_IsVirtual" uniqueID="System.Runtime.InteropServices._MethodBase.get_IsVirtual():bool">
				<signature>System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.get_IsVirtual():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Attributes" uniqueID="get_Attributes():System.Reflection.MethodAttributes">
				<signature>System.Reflection.MethodBase.get_Attributes():System.Reflection.MethodAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CallingConvention" uniqueID="get_CallingConvention():System.Reflection.CallingConventions">
				<signature>System.Reflection.MethodBase.get_CallingConvention():System.Reflection.CallingConventions</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ContainsGenericParameters" uniqueID="get_ContainsGenericParameters():bool">
				<signature>System.Reflection.MethodBase.get_ContainsGenericParameters():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsAbstract" uniqueID="get_IsAbstract():bool">
				<signature>System.Reflection.MethodBase.get_IsAbstract():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsAssembly" uniqueID="get_IsAssembly():bool">
				<signature>System.Reflection.MethodBase.get_IsAssembly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsConstructor" uniqueID="get_IsConstructor():bool">
				<signature>System.Reflection.MethodBase.get_IsConstructor():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFamily" uniqueID="get_IsFamily():bool">
				<signature>System.Reflection.MethodBase.get_IsFamily():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFamilyAndAssembly" uniqueID="get_IsFamilyAndAssembly():bool">
				<signature>System.Reflection.MethodBase.get_IsFamilyAndAssembly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFamilyOrAssembly" uniqueID="get_IsFamilyOrAssembly():bool">
				<signature>System.Reflection.MethodBase.get_IsFamilyOrAssembly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFinal" uniqueID="get_IsFinal():bool">
				<signature>System.Reflection.MethodBase.get_IsFinal():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsGenericMethod" uniqueID="get_IsGenericMethod():bool">
				<signature>System.Reflection.MethodBase.get_IsGenericMethod():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsGenericMethodDefinition" uniqueID="get_IsGenericMethodDefinition():bool">
				<signature>System.Reflection.MethodBase.get_IsGenericMethodDefinition():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsHideBySig" uniqueID="get_IsHideBySig():bool">
				<signature>System.Reflection.MethodBase.get_IsHideBySig():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IsOverloaded" uniqueID="get_IsOverloaded():bool">
				<signature>System.Reflection.MethodBase.get_IsOverloaded():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsPrivate" uniqueID="get_IsPrivate():bool">
				<signature>System.Reflection.MethodBase.get_IsPrivate():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsPublic" uniqueID="get_IsPublic():bool">
				<signature>System.Reflection.MethodBase.get_IsPublic():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSpecialName" uniqueID="get_IsSpecialName():bool">
				<signature>System.Reflection.MethodBase.get_IsSpecialName():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsStatic" uniqueID="get_IsStatic():bool">
				<signature>System.Reflection.MethodBase.get_IsStatic():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsVirtual" uniqueID="get_IsVirtual():bool">
				<signature>System.Reflection.MethodBase.get_IsVirtual():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MethodHandle" uniqueID="get_MethodHandle():System.RuntimeMethodHandle">
				<signature>System.Reflection.MethodBase.get_MethodHandle():System.RuntimeMethodHandle</signature>
			</method>
		</class>
		<class name="MethodBody" uniqueID="System.Reflection.MethodBody">
			<method accessibility="Public" methodKind="Member" name="GetILAsByteArray" uniqueID="GetILAsByteArray():byte[]">
				<signature>System.Reflection.MethodBody.GetILAsByteArray():byte[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="MethodBody" uniqueID="MethodBody():void">
				<signature>System.Reflection.MethodBody.MethodBody():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ExceptionHandlingClauses" uniqueID="get_ExceptionHandlingClauses():System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt;">
				<signature>System.Reflection.MethodBody.get_ExceptionHandlingClauses():System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_InitLocals" uniqueID="get_InitLocals():bool">
				<signature>System.Reflection.MethodBody.get_InitLocals():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_LocalSignatureMetadataToken" uniqueID="get_LocalSignatureMetadataToken():int">
				<signature>System.Reflection.MethodBody.get_LocalSignatureMetadataToken():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_LocalVariables" uniqueID="get_LocalVariables():System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt;">
				<signature>System.Reflection.MethodBody.get_LocalVariables():System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MaxStackSize" uniqueID="get_MaxStackSize():int">
				<signature>System.Reflection.MethodBody.get_MaxStackSize():int</signature>
			</method>
		</class>
		<class name="Module" uniqueID="System.Reflection.Module">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Reflection.Module.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ConvertToTypeHandleArray" uniqueID="ConvertToTypeHandleArray(System.Type[]):System.RuntimeTypeHandle[]">
				<signature>System.Reflection.Module.ConvertToTypeHandleArray(System.Type[]):System.RuntimeTypeHandle[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Reflection.Module.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindTypes" uniqueID="FindTypes(System.Reflection.TypeFilter;object):System.Type[]">
				<signature>System.Reflection.Module.FindTypes(System.Reflection.TypeFilter;object):System.Type[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetAssemblyInternal" uniqueID="GetAssemblyInternal():System.Reflection.Assembly">
				<signature>System.Reflection.Module.GetAssemblyInternal():System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.Reflection.Module.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.Reflection.Module.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetField" uniqueID="GetField(string):System.Reflection.FieldInfo">
				<signature>System.Reflection.Module.GetField(string):System.Reflection.FieldInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetField" uniqueID="GetField(string;System.Reflection.BindingFlags):System.Reflection.FieldInfo">
				<signature>System.Reflection.Module.GetField(string;System.Reflection.BindingFlags):System.Reflection.FieldInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFields" uniqueID="GetFields():System.Reflection.FieldInfo[]">
				<signature>System.Reflection.Module.GetFields():System.Reflection.FieldInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFields" uniqueID="GetFields(System.Reflection.BindingFlags):System.Reflection.FieldInfo[]">
				<signature>System.Reflection.Module.GetFields(System.Reflection.BindingFlags):System.Reflection.FieldInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetHINSTANCE" uniqueID="GetHINSTANCE():native signed int">
				<signature>System.Reflection.Module.GetHINSTANCE():native signed int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Reflection.Module.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethod" uniqueID="GetMethod(string):System.Reflection.MethodInfo">
				<signature>System.Reflection.Module.GetMethod(string):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethod" uniqueID="GetMethod(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo">
				<signature>System.Reflection.Module.GetMethod(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethod" uniqueID="GetMethod(string;System.Type[]):System.Reflection.MethodInfo">
				<signature>System.Reflection.Module.GetMethod(string;System.Type[]):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMethodImpl" uniqueID="GetMethodImpl(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo">
				<signature>System.Reflection.Module.GetMethodImpl(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethods" uniqueID="GetMethods():System.Reflection.MethodInfo[]">
				<signature>System.Reflection.Module.GetMethods():System.Reflection.MethodInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethods" uniqueID="GetMethods(System.Reflection.BindingFlags):System.Reflection.MethodInfo[]">
				<signature>System.Reflection.Module.GetMethods(System.Reflection.BindingFlags):System.Reflection.MethodInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetModuleHandle" uniqueID="GetModuleHandle():System.ModuleHandle">
				<signature>System.Reflection.Module.GetModuleHandle():System.ModuleHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetObjectData" uniqueID="GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Reflection.Module.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetPEKind" uniqueID="GetPEKind(System.Reflection.PortableExecutableKinds;System.Reflection.ImageFileMachine):void">
				<signature>System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds;System.Reflection.ImageFileMachine):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSignerCertificate" uniqueID="GetSignerCertificate():System.Security.Cryptography.X509Certificates.X509Certificate">
				<signature>System.Reflection.Module.GetSignerCertificate():System.Security.Cryptography.X509Certificates.X509Certificate</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetSignerCertificateInternal" uniqueID="GetSignerCertificateInternal():System.Security.Cryptography.X509Certificates.X509Certificate">
				<signature>System.Reflection.Module.GetSignerCertificateInternal():System.Security.Cryptography.X509Certificates.X509Certificate</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType(string):System.Type">
				<signature>System.Reflection.Module.GetType(string):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType(string;bool):System.Type">
				<signature>System.Reflection.Module.GetType(string;bool):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType(string;bool;bool):System.Type">
				<signature>System.Reflection.Module.GetType(string;bool;bool):System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetTypeInternal" uniqueID="GetTypeInternal(string;bool;bool):System.Type">
				<signature>System.Reflection.Module.GetTypeInternal(string;bool;bool):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypes" uniqueID="GetTypes():System.Type[]">
				<signature>System.Reflection.Module.GetTypes():System.Type[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetTypesInternal" uniqueID="GetTypesInternal(System.Threading.StackCrawlMark):System.Type[]">
				<signature>System.Reflection.Module.GetTypesInternal(System.Threading.StackCrawlMark):System.Type[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalAddResource" uniqueID="InternalAddResource(string;byte[];int;int;int;int;int):void">
				<signature>System.Reflection.Module.InternalAddResource(string;byte[];int;int;int;int;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalDefineNativeResourceBytes" uniqueID="InternalDefineNativeResourceBytes(byte[];int;int):void">
				<signature>System.Reflection.Module.InternalDefineNativeResourceBytes(byte[];int;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalDefineNativeResourceFile" uniqueID="InternalDefineNativeResourceFile(string;int;int):void">
				<signature>System.Reflection.Module.InternalDefineNativeResourceFile(string;int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="InternalGetField" uniqueID="InternalGetField(string;System.Reflection.BindingFlags):System.Reflection.FieldInfo">
				<signature>System.Reflection.Module.InternalGetField(string;System.Reflection.BindingFlags):System.Reflection.FieldInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalGetFullyQualifiedName" uniqueID="InternalGetFullyQualifiedName():string">
				<signature>System.Reflection.Module.InternalGetFullyQualifiedName():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalGetMemberRef" uniqueID="InternalGetMemberRef(System.Reflection.Module;int;int):int">
				<signature>System.Reflection.Module.InternalGetMemberRef(System.Reflection.Module;int;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalGetMemberRefFromSignature" uniqueID="InternalGetMemberRefFromSignature(int;string;byte[];int):int">
				<signature>System.Reflection.Module.InternalGetMemberRefFromSignature(int;string;byte[];int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalGetMemberRefOfFieldInfo" uniqueID="InternalGetMemberRefOfFieldInfo(int;System.RuntimeTypeHandle;int):int">
				<signature>System.Reflection.Module.InternalGetMemberRefOfFieldInfo(int;System.RuntimeTypeHandle;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalGetMemberRefOfMethodInfo" uniqueID="InternalGetMemberRefOfMethodInfo(int;System.RuntimeMethodHandle):int">
				<signature>System.Reflection.Module.InternalGetMemberRefOfMethodInfo(int;System.RuntimeMethodHandle):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="InternalGetName" uniqueID="InternalGetName():string">
				<signature>System.Reflection.Module.InternalGetName():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalGetStringConstant" uniqueID="InternalGetStringConstant(string):int">
				<signature>System.Reflection.Module.InternalGetStringConstant(string):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalGetTypeSpecTokenWithBytes" uniqueID="InternalGetTypeSpecTokenWithBytes(byte[];int):int">
				<signature>System.Reflection.Module.InternalGetTypeSpecTokenWithBytes(byte[];int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalGetTypeToken" uniqueID="InternalGetTypeToken(string;System.Reflection.Module;string;int):int">
				<signature>System.Reflection.Module.InternalGetTypeToken(string;System.Reflection.Module;string;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalLoadInMemoryTypeByName" uniqueID="InternalLoadInMemoryTypeByName(string):System.Type">
				<signature>System.Reflection.Module.InternalLoadInMemoryTypeByName(string):System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalPreSavePEFile" uniqueID="InternalPreSavePEFile(int;int):void">
				<signature>System.Reflection.Module.InternalPreSavePEFile(int;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalSavePEFile" uniqueID="InternalSavePEFile(string;System.Reflection.Emit.MethodToken;int;bool):void">
				<signature>System.Reflection.Module.InternalSavePEFile(string;System.Reflection.Emit.MethodToken;int;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalSetFieldRVAContent" uniqueID="InternalSetFieldRVAContent(int;byte[];int):void">
				<signature>System.Reflection.Module.InternalSetFieldRVAContent(int;byte[];int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalSetModuleProps" uniqueID="InternalSetModuleProps(string):void">
				<signature>System.Reflection.Module.InternalSetModuleProps(string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalSetResourceCounts" uniqueID="InternalSetResourceCounts(int):void">
				<signature>System.Reflection.Module.InternalSetResourceCounts(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.Reflection.Module.IsDefined(System.Type;bool):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsDynamic" uniqueID="IsDynamic():bool">
				<signature>System.Reflection.Module.IsDynamic():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsResource" uniqueID="IsResource():bool">
				<signature>System.Reflection.Module.IsResource():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsResourceInternal" uniqueID="IsResourceInternal():bool">
				<signature>System.Reflection.Module.IsResourceInternal():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Module" uniqueID="Module():void">
				<signature>System.Reflection.Module.Module():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ResolveField" uniqueID="ResolveField(int):System.Reflection.FieldInfo">
				<signature>System.Reflection.Module.ResolveField(int):System.Reflection.FieldInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ResolveField" uniqueID="ResolveField(int;System.Type[];System.Type[]):System.Reflection.FieldInfo">
				<signature>System.Reflection.Module.ResolveField(int;System.Type[];System.Type[]):System.Reflection.FieldInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ResolveLiteralField" uniqueID="ResolveLiteralField(int;System.Type[];System.Type[]):System.Reflection.FieldInfo">
				<signature>System.Reflection.Module.ResolveLiteralField(int;System.Type[];System.Type[]):System.Reflection.FieldInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ResolveMember" uniqueID="ResolveMember(int):System.Reflection.MemberInfo">
				<signature>System.Reflection.Module.ResolveMember(int):System.Reflection.MemberInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ResolveMember" uniqueID="ResolveMember(int;System.Type[];System.Type[]):System.Reflection.MemberInfo">
				<signature>System.Reflection.Module.ResolveMember(int;System.Type[];System.Type[]):System.Reflection.MemberInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ResolveMethod" uniqueID="ResolveMethod(int):System.Reflection.MethodBase">
				<signature>System.Reflection.Module.ResolveMethod(int):System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ResolveMethod" uniqueID="ResolveMethod(int;System.Type[];System.Type[]):System.Reflection.MethodBase">
				<signature>System.Reflection.Module.ResolveMethod(int;System.Type[];System.Type[]):System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ResolveSignature" uniqueID="ResolveSignature(int):byte[]">
				<signature>System.Reflection.Module.ResolveSignature(int):byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ResolveString" uniqueID="ResolveString(int):string">
				<signature>System.Reflection.Module.ResolveString(int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ResolveType" uniqueID="ResolveType(int):System.Type">
				<signature>System.Reflection.Module.ResolveType(int):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ResolveType" uniqueID="ResolveType(int;System.Type[];System.Type[]):System.Type">
				<signature>System.Reflection.Module.ResolveType(int;System.Type[];System.Type[]):System.Type</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._Module.GetIDsOfNames" uniqueID="System.Runtime.InteropServices._Module.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Module.System.Runtime.InteropServices._Module.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._Module.GetTypeInfo" uniqueID="System.Runtime.InteropServices._Module.GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Module.System.Runtime.InteropServices._Module.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._Module.GetTypeInfoCount" uniqueID="System.Runtime.InteropServices._Module.GetTypeInfoCount(unsigned int):void">
				<signature>System.Reflection.Module.System.Runtime.InteropServices._Module.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._Module.Invoke" uniqueID="System.Runtime.InteropServices._Module.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Reflection.Module.System.Runtime.InteropServices._Module.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Reflection.Module.ToString():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="_GetAssemblyInternal" uniqueID="_GetAssemblyInternal():System.Reflection.Assembly">
				<signature>System.Reflection.Module._GetAssemblyInternal():System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_GetHINSTANCE" uniqueID="_GetHINSTANCE():native signed int">
				<signature>System.Reflection.Module._GetHINSTANCE():native signed int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_GetSignerCertificateInternal" uniqueID="_GetSignerCertificateInternal():System.Security.Cryptography.X509Certificates.X509Certificate">
				<signature>System.Reflection.Module._GetSignerCertificateInternal():System.Security.Cryptography.X509Certificates.X509Certificate</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_GetTypeInternal" uniqueID="_GetTypeInternal(string;bool;bool):System.Type">
				<signature>System.Reflection.Module._GetTypeInternal(string;bool;bool):System.Type</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_GetTypesInternal" uniqueID="_GetTypesInternal(System.Threading.StackCrawlMark):System.Type[]">
				<signature>System.Reflection.Module._GetTypesInternal(System.Threading.StackCrawlMark):System.Type[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_InternalAddResource" uniqueID="_InternalAddResource(string;byte[];int;int;int;int;int):void">
				<signature>System.Reflection.Module._InternalAddResource(string;byte[];int;int;int;int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_InternalDefineNativeResourceBytes" uniqueID="_InternalDefineNativeResourceBytes(byte[];int;int):void">
				<signature>System.Reflection.Module._InternalDefineNativeResourceBytes(byte[];int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_InternalDefineNativeResourceFile" uniqueID="_InternalDefineNativeResourceFile(string;int;int):void">
				<signature>System.Reflection.Module._InternalDefineNativeResourceFile(string;int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_InternalGetFullyQualifiedName" uniqueID="_InternalGetFullyQualifiedName():string">
				<signature>System.Reflection.Module._InternalGetFullyQualifiedName():string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_InternalGetMemberRef" uniqueID="_InternalGetMemberRef(System.Reflection.Module;int;int):int">
				<signature>System.Reflection.Module._InternalGetMemberRef(System.Reflection.Module;int;int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_InternalGetMemberRefFromSignature" uniqueID="_InternalGetMemberRefFromSignature(int;string;byte[];int):int">
				<signature>System.Reflection.Module._InternalGetMemberRefFromSignature(int;string;byte[];int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_InternalGetMemberRefOfFieldInfo" uniqueID="_InternalGetMemberRefOfFieldInfo(int;native signed int;int):int">
				<signature>System.Reflection.Module._InternalGetMemberRefOfFieldInfo(int;native signed int;int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_InternalGetMemberRefOfMethodInfo" uniqueID="_InternalGetMemberRefOfMethodInfo(int;native signed int):int">
				<signature>System.Reflection.Module._InternalGetMemberRefOfMethodInfo(int;native signed int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_InternalGetName" uniqueID="_InternalGetName():string">
				<signature>System.Reflection.Module._InternalGetName():string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_InternalGetStringConstant" uniqueID="_InternalGetStringConstant(string):int">
				<signature>System.Reflection.Module._InternalGetStringConstant(string):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_InternalGetTypeSpecTokenWithBytes" uniqueID="_InternalGetTypeSpecTokenWithBytes(byte[];int):int">
				<signature>System.Reflection.Module._InternalGetTypeSpecTokenWithBytes(byte[];int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_InternalGetTypeToken" uniqueID="_InternalGetTypeToken(string;System.Reflection.Module;string;int):int">
				<signature>System.Reflection.Module._InternalGetTypeToken(string;System.Reflection.Module;string;int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_InternalLoadInMemoryTypeByName" uniqueID="_InternalLoadInMemoryTypeByName(string):System.Type">
				<signature>System.Reflection.Module._InternalLoadInMemoryTypeByName(string):System.Type</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_InternalPreSavePEFile" uniqueID="_InternalPreSavePEFile(int;int):void">
				<signature>System.Reflection.Module._InternalPreSavePEFile(int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_InternalSavePEFile" uniqueID="_InternalSavePEFile(string;int;int;bool):void">
				<signature>System.Reflection.Module._InternalSavePEFile(string;int;int;bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_InternalSetFieldRVAContent" uniqueID="_InternalSetFieldRVAContent(int;byte[];int):void">
				<signature>System.Reflection.Module._InternalSetFieldRVAContent(int;byte[];int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_InternalSetModuleProps" uniqueID="_InternalSetModuleProps(string):void">
				<signature>System.Reflection.Module._InternalSetModuleProps(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_InternalSetResourceCounts" uniqueID="_InternalSetResourceCounts(int):void">
				<signature>System.Reflection.Module._InternalSetResourceCounts(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_IsResourceInternal" uniqueID="_IsResourceInternal():bool">
				<signature>System.Reflection.Module._IsResourceInternal():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_nativeGetArrayMethodToken" uniqueID="_nativeGetArrayMethodToken(int;string;byte[];int;int):int">
				<signature>System.Reflection.Module._nativeGetArrayMethodToken(int;string;byte[];int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Assembly" uniqueID="get_Assembly():System.Reflection.Assembly">
				<signature>System.Reflection.Module.get_Assembly():System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FullyQualifiedName" uniqueID="get_FullyQualifiedName():string">
				<signature>System.Reflection.Module.get_FullyQualifiedName():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_InternalModule" uniqueID="get_InternalModule():System.Reflection.Module">
				<signature>System.Reflection.Module.get_InternalModule():System.Reflection.Module</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MDStreamVersion" uniqueID="get_MDStreamVersion():int">
				<signature>System.Reflection.Module.get_MDStreamVersion():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_MetadataImport" uniqueID="get_MetadataImport():System.Reflection.MetadataImport">
				<signature>System.Reflection.Module.get_MetadataImport():System.Reflection.MetadataImport</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MetadataToken" uniqueID="get_MetadataToken():int">
				<signature>System.Reflection.Module.get_MetadataToken():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ModuleHandle" uniqueID="get_ModuleHandle():System.ModuleHandle">
				<signature>System.Reflection.Module.get_ModuleHandle():System.ModuleHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ModuleVersionId" uniqueID="get_ModuleVersionId():System.Guid">
				<signature>System.Reflection.Module.get_ModuleVersionId():System.Guid</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Reflection.Module.get_Name():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_RuntimeType" uniqueID="get_RuntimeType():System.RuntimeType">
				<signature>System.Reflection.Module.get_RuntimeType():System.RuntimeType</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ScopeName" uniqueID="get_ScopeName():string">
				<signature>System.Reflection.Module.get_ScopeName():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_m_EntryPoint" uniqueID="get_m_EntryPoint():System.Reflection.Emit.MethodToken">
				<signature>System.Reflection.Module.get_m_EntryPoint():System.Reflection.Emit.MethodToken</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_m_TypeBuilderList" uniqueID="get_m_TypeBuilderList():System.Collections.ArrayList">
				<signature>System.Reflection.Module.get_m_TypeBuilderList():System.Collections.ArrayList</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_m_iSymWriter" uniqueID="get_m_iSymWriter():System.Diagnostics.SymbolStore.ISymbolWriter">
				<signature>System.Reflection.Module.get_m_iSymWriter():System.Diagnostics.SymbolStore.ISymbolWriter</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_m_moduleData" uniqueID="get_m_moduleData():System.Reflection.Emit.ModuleBuilderData">
				<signature>System.Reflection.Module.get_m_moduleData():System.Reflection.Emit.ModuleBuilderData</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_m_pData" uniqueID="get_m_pData():native signed int">
				<signature>System.Reflection.Module.get_m_pData():native signed int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_m_pFields" uniqueID="get_m_pFields():native signed int">
				<signature>System.Reflection.Module.get_m_pFields():native signed int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_m_pGlobals" uniqueID="get_m_pGlobals():native signed int">
				<signature>System.Reflection.Module.get_m_pGlobals():native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_m_pInternalSymWriter" uniqueID="get_m_pInternalSymWriter():native signed int">
				<signature>System.Reflection.Module.get_m_pInternalSymWriter():native signed int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_m_pRefClass" uniqueID="get_m_pRefClass():native signed int">
				<signature>System.Reflection.Module.get_m_pRefClass():native signed int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_m_runtimeType" uniqueID="get_m_runtimeType():System.RuntimeType">
				<signature>System.Reflection.Module.get_m_runtimeType():System.RuntimeType</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nativeGetArrayMethodToken" uniqueID="nativeGetArrayMethodToken(int;string;byte[];int;int):int">
				<signature>System.Reflection.Module.nativeGetArrayMethodToken(int;string;byte[];int;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_m_EntryPoint" uniqueID="set_m_EntryPoint(System.Reflection.Emit.MethodToken):void">
				<signature>System.Reflection.Module.set_m_EntryPoint(System.Reflection.Emit.MethodToken):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_m_TypeBuilderList" uniqueID="set_m_TypeBuilderList(System.Collections.ArrayList):void">
				<signature>System.Reflection.Module.set_m_TypeBuilderList(System.Collections.ArrayList):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_m_iSymWriter" uniqueID="set_m_iSymWriter(System.Diagnostics.SymbolStore.ISymbolWriter):void">
				<signature>System.Reflection.Module.set_m_iSymWriter(System.Diagnostics.SymbolStore.ISymbolWriter):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_m_moduleData" uniqueID="set_m_moduleData(System.Reflection.Emit.ModuleBuilderData):void">
				<signature>System.Reflection.Module.set_m_moduleData(System.Reflection.Emit.ModuleBuilderData):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="set_m_runtimeType" uniqueID="set_m_runtimeType(System.RuntimeType):void">
				<signature>System.Reflection.Module.set_m_runtimeType(System.RuntimeType):void</signature>
			</method>
		</class>
		<class name="ParameterInfo" uniqueID="System.Reflection.ParameterInfo">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Reflection.ParameterInfo.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetParameters" uniqueID="GetParameters(System.Reflection.MethodBase;System.Reflection.MemberInfo;System.Signature):System.Reflection.ParameterInfo[]">
				<signature>System.Reflection.ParameterInfo.GetParameters(System.Reflection.MethodBase;System.Reflection.MemberInfo;System.Signature):System.Reflection.ParameterInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetParameters" uniqueID="GetParameters(System.Reflection.MethodBase;System.Reflection.MemberInfo;System.Signature;System.Reflection.ParameterInfo;bool):System.Reflection.ParameterInfo[]">
				<signature>System.Reflection.ParameterInfo.GetParameters(System.Reflection.MethodBase;System.Reflection.MemberInfo;System.Signature;System.Reflection.ParameterInfo;bool):System.Reflection.ParameterInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetReturnParameter" uniqueID="GetReturnParameter(System.Reflection.MethodBase;System.Reflection.MemberInfo;System.Signature):System.Reflection.ParameterInfo">
				<signature>System.Reflection.ParameterInfo.GetReturnParameter(System.Reflection.MethodBase;System.Reflection.MemberInfo;System.Signature):System.Reflection.ParameterInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.Reflection.ParameterInfo.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.Reflection.ParameterInfo.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetDefaultValue" uniqueID="GetDefaultValue(bool):object">
				<signature>System.Reflection.ParameterInfo.GetDefaultValue(bool):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetOptionalCustomModifiers" uniqueID="GetOptionalCustomModifiers():System.Type[]">
				<signature>System.Reflection.ParameterInfo.GetOptionalCustomModifiers():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRequiredCustomModifiers" uniqueID="GetRequiredCustomModifiers():System.Type[]">
				<signature>System.Reflection.ParameterInfo.GetRequiredCustomModifiers():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.Reflection.ParameterInfo.IsDefined(System.Type;bool):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="OnCacheClear" uniqueID="OnCacheClear(object;System.Reflection.Cache.ClearCacheEventArgs):void">
				<signature>System.Reflection.ParameterInfo.OnCacheClear(object;System.Reflection.Cache.ClearCacheEventArgs):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnDeserialized" uniqueID="OnDeserialized(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Reflection.ParameterInfo.OnDeserialized(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnSerializing" uniqueID="OnSerializing(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Reflection.ParameterInfo.OnSerializing(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ParameterInfo" uniqueID="ParameterInfo():void">
				<signature>System.Reflection.ParameterInfo.ParameterInfo():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ParameterInfo" uniqueID="ParameterInfo(System.Reflection.MethodInfo;string;System.RuntimeType;int):void">
				<signature>System.Reflection.ParameterInfo.ParameterInfo(System.Reflection.MethodInfo;string;System.RuntimeType;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ParameterInfo" uniqueID="ParameterInfo(System.Reflection.ParameterInfo;System.Reflection.Emit.MethodBuilderInstantiation):void">
				<signature>System.Reflection.ParameterInfo.ParameterInfo(System.Reflection.ParameterInfo;System.Reflection.Emit.MethodBuilderInstantiation):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ParameterInfo" uniqueID="ParameterInfo(System.Reflection.ParameterInfo;System.Reflection.MemberInfo):void">
				<signature>System.Reflection.ParameterInfo.ParameterInfo(System.Reflection.ParameterInfo;System.Reflection.MemberInfo):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ParameterInfo" uniqueID="ParameterInfo(System.Reflection.ParameterInfo;System.Reflection.RuntimePropertyInfo):void">
				<signature>System.Reflection.ParameterInfo.ParameterInfo(System.Reflection.ParameterInfo;System.Reflection.RuntimePropertyInfo):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ParameterInfo" uniqueID="ParameterInfo(System.Signature;System.Reflection.MetadataImport;int;int;System.Reflection.ParameterAttributes;System.Reflection.MemberInfo):void">
				<signature>System.Reflection.ParameterInfo.ParameterInfo(System.Signature;System.Reflection.MetadataImport;int;int;System.Reflection.ParameterAttributes;System.Reflection.MemberInfo):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetAttributes" uniqueID="SetAttributes(System.Reflection.ParameterAttributes):void">
				<signature>System.Reflection.ParameterInfo.SetAttributes(System.Reflection.ParameterAttributes):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetName" uniqueID="SetName(string):void">
				<signature>System.Reflection.ParameterInfo.SetName(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ParameterInfo.GetIDsOfNames" uniqueID="System.Runtime.InteropServices._ParameterInfo.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.ParameterInfo.System.Runtime.InteropServices._ParameterInfo.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ParameterInfo.GetTypeInfo" uniqueID="System.Runtime.InteropServices._ParameterInfo.GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.ParameterInfo.System.Runtime.InteropServices._ParameterInfo.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ParameterInfo.GetTypeInfoCount" uniqueID="System.Runtime.InteropServices._ParameterInfo.GetTypeInfoCount(unsigned int):void">
				<signature>System.Reflection.ParameterInfo.System.Runtime.InteropServices._ParameterInfo.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ParameterInfo.Invoke" uniqueID="System.Runtime.InteropServices._ParameterInfo.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Reflection.ParameterInfo.System.Runtime.InteropServices._ParameterInfo.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Reflection.ParameterInfo.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Attributes" uniqueID="get_Attributes():System.Reflection.ParameterAttributes">
				<signature>System.Reflection.ParameterInfo.get_Attributes():System.Reflection.ParameterAttributes</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Cache" uniqueID="get_Cache():System.Reflection.Cache.InternalCache">
				<signature>System.Reflection.ParameterInfo.get_Cache():System.Reflection.Cache.InternalCache</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DefaultValue" uniqueID="get_DefaultValue():object">
				<signature>System.Reflection.ParameterInfo.get_DefaultValue():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsIn" uniqueID="get_IsIn():bool">
				<signature>System.Reflection.ParameterInfo.get_IsIn():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsLcid" uniqueID="get_IsLcid():bool">
				<signature>System.Reflection.ParameterInfo.get_IsLcid():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_IsLegacyParameterInfo" uniqueID="get_IsLegacyParameterInfo():bool">
				<signature>System.Reflection.ParameterInfo.get_IsLegacyParameterInfo():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsOptional" uniqueID="get_IsOptional():bool">
				<signature>System.Reflection.ParameterInfo.get_IsOptional():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsOut" uniqueID="get_IsOut():bool">
				<signature>System.Reflection.ParameterInfo.get_IsOut():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsRetval" uniqueID="get_IsRetval():bool">
				<signature>System.Reflection.ParameterInfo.get_IsRetval():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Member" uniqueID="get_Member():System.Reflection.MemberInfo">
				<signature>System.Reflection.ParameterInfo.get_Member():System.Reflection.MemberInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MetadataToken" uniqueID="get_MetadataToken():int">
				<signature>System.Reflection.ParameterInfo.get_MetadataToken():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Reflection.ParameterInfo.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ParameterType" uniqueID="get_ParameterType():System.Type">
				<signature>System.Reflection.ParameterInfo.get_ParameterType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Position" uniqueID="get_Position():int">
				<signature>System.Reflection.ParameterInfo.get_Position():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_RawDefaultValue" uniqueID="get_RawDefaultValue():object">
				<signature>System.Reflection.ParameterInfo.get_RawDefaultValue():object</signature>
			</method>
		</class>
		<class name="CerArrayList&lt;System.Reflection.RuntimePropertyInfo&gt;" uniqueID="System.Reflection.CerArrayList&lt;System.Reflection.RuntimePropertyInfo&gt;">
			<method accessibility="Protected" methodKind="Member" name="Add" uniqueID="Add(System.Reflection.RuntimePropertyInfo):void">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimePropertyInfo&gt;.Add(System.Reflection.RuntimePropertyInfo):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CerArrayList&lt;System.Reflection.RuntimePropertyInfo&gt;" uniqueID="CerArrayList&lt;System.Reflection.RuntimePropertyInfo&gt;(System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;):void">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimePropertyInfo&gt;.CerArrayList&lt;System.Reflection.RuntimePropertyInfo&gt;(System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CerArrayList&lt;System.Reflection.RuntimePropertyInfo&gt;" uniqueID="CerArrayList&lt;System.Reflection.RuntimePropertyInfo&gt;(int):void">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimePropertyInfo&gt;.CerArrayList&lt;System.Reflection.RuntimePropertyInfo&gt;(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Preallocate" uniqueID="Preallocate(int):void">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimePropertyInfo&gt;.Preallocate(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Replace" uniqueID="Replace(int;System.Reflection.RuntimePropertyInfo):void">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimePropertyInfo&gt;.Replace(int;System.Reflection.RuntimePropertyInfo):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimePropertyInfo&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.Reflection.RuntimePropertyInfo">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimePropertyInfo&gt;.get_Item(int):System.Reflection.RuntimePropertyInfo</signature>
			</method>
		</class>
		<class name="MemberFilter" uniqueID="System.Reflection.MemberFilter">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(System.Reflection.MemberInfo;object;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Reflection.MemberFilter.BeginInvoke(System.Reflection.MemberInfo;object;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):bool">
				<signature>System.Reflection.MemberFilter.EndInvoke(System.IAsyncResult):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(System.Reflection.MemberInfo;object):bool">
				<signature>System.Reflection.MemberFilter.Invoke(System.Reflection.MemberInfo;object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MemberFilter" uniqueID="MemberFilter(object;native signed int):void">
				<signature>System.Reflection.MemberFilter.MemberFilter(object;native signed int):void</signature>
			</method>
		</class>
		<class name="RuntimeMethodInfo" uniqueID="System.Reflection.RuntimeMethodInfo">
			<method accessibility="Protected" methodKind="Static" name="ConstructName" uniqueID="ConstructName(System.Reflection.MethodBase):string">
				<signature>System.Reflection.RuntimeMethodInfo.ConstructName(System.Reflection.MethodBase):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ConstructParameters" uniqueID="ConstructParameters(System.Reflection.ParameterInfo[];System.Reflection.CallingConventions):string">
				<signature>System.Reflection.RuntimeMethodInfo.ConstructParameters(System.Reflection.ParameterInfo[];System.Reflection.CallingConventions):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ConstructParameters" uniqueID="ConstructParameters(System.Type[];System.Reflection.CallingConventions):string">
				<signature>System.Reflection.RuntimeMethodInfo.ConstructParameters(System.Type[];System.Reflection.CallingConventions):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalGetCurrentMethod" uniqueID="InternalGetCurrentMethod(System.Threading.StackCrawlMark):System.Reflection.MethodBase">
				<signature>System.Reflection.RuntimeMethodInfo.InternalGetCurrentMethod(System.Threading.StackCrawlMark):System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CacheEquals" uniqueID="CacheEquals(object):bool">
				<signature>System.Reflection.RuntimeMethodInfo.CacheEquals(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CheckConsistency" uniqueID="CheckConsistency(object):void">
				<signature>System.Reflection.RuntimeMethodInfo.CheckConsistency(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Reflection.RuntimeMethodInfo.Equals(object):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FetchNonReturnParameters" uniqueID="FetchNonReturnParameters():System.Reflection.ParameterInfo[]">
				<signature>System.Reflection.RuntimeMethodInfo.FetchNonReturnParameters():System.Reflection.ParameterInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FetchReturnParameter" uniqueID="FetchReturnParameter():System.Reflection.ParameterInfo">
				<signature>System.Reflection.RuntimeMethodInfo.FetchReturnParameter():System.Reflection.ParameterInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetBaseDefinition" uniqueID="GetBaseDefinition():System.Reflection.MethodInfo">
				<signature>System.Reflection.RuntimeMethodInfo.GetBaseDefinition():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.Reflection.RuntimeMethodInfo.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.Reflection.RuntimeMethodInfo.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetGenericArguments" uniqueID="GetGenericArguments():System.Type[]">
				<signature>System.Reflection.RuntimeMethodInfo.GetGenericArguments():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetGenericMethodDefinition" uniqueID="GetGenericMethodDefinition():System.Reflection.MethodInfo">
				<signature>System.Reflection.RuntimeMethodInfo.GetGenericMethodDefinition():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Reflection.RuntimeMethodInfo.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethodBody" uniqueID="GetMethodBody():System.Reflection.MethodBody">
				<signature>System.Reflection.RuntimeMethodInfo.GetMethodBody():System.Reflection.MethodBody</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMethodHandle" uniqueID="GetMethodHandle():System.RuntimeMethodHandle">
				<signature>System.Reflection.RuntimeMethodInfo.GetMethodHandle():System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethodImplementationFlags" uniqueID="GetMethodImplementationFlags():System.Reflection.MethodImplAttributes">
				<signature>System.Reflection.RuntimeMethodInfo.GetMethodImplementationFlags():System.Reflection.MethodImplAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetObjectData" uniqueID="GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Reflection.RuntimeMethodInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetOneTimeFlags" uniqueID="GetOneTimeFlags():unsigned int">
				<signature>System.Reflection.RuntimeMethodInfo.GetOneTimeFlags():unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetParameters" uniqueID="GetParameters():System.Reflection.ParameterInfo[]">
				<signature>System.Reflection.RuntimeMethodInfo.GetParameters():System.Reflection.ParameterInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetParametersNoCopy" uniqueID="GetParametersNoCopy():System.Reflection.ParameterInfo[]">
				<signature>System.Reflection.RuntimeMethodInfo.GetParametersNoCopy():System.Reflection.ParameterInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetParentDefinition" uniqueID="GetParentDefinition():System.Reflection.MethodInfo">
				<signature>System.Reflection.RuntimeMethodInfo.GetParentDefinition():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object">
				<signature>System.Reflection.RuntimeMethodInfo.Invoke(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Invoke" uniqueID="Invoke(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo;bool):object">
				<signature>System.Reflection.RuntimeMethodInfo.Invoke(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo;bool):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.Reflection.RuntimeMethodInfo.IsDefined(System.Type;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakeGenericMethod" uniqueID="MakeGenericMethod(System.Type[]):System.Reflection.MethodInfo">
				<signature>System.Reflection.RuntimeMethodInfo.MakeGenericMethod(System.Type[]):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RuntimeMethodInfo" uniqueID="RuntimeMethodInfo():void">
				<signature>System.Reflection.RuntimeMethodInfo.RuntimeMethodInfo():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RuntimeMethodInfo" uniqueID="RuntimeMethodInfo(System.RuntimeMethodHandle;System.RuntimeTypeHandle;System.RuntimeType+RuntimeTypeCache;System.Reflection.MethodAttributes;System.Reflection.BindingFlags):void">
				<signature>System.Reflection.RuntimeMethodInfo.RuntimeMethodInfo(System.RuntimeMethodHandle;System.RuntimeTypeHandle;System.RuntimeType+RuntimeTypeCache;System.Reflection.MethodAttributes;System.Reflection.BindingFlags):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ThrowNoInvokeException" uniqueID="ThrowNoInvokeException():void">
				<signature>System.Reflection.RuntimeMethodInfo.ThrowNoInvokeException():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Reflection.RuntimeMethodInfo.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Attributes" uniqueID="get_Attributes():System.Reflection.MethodAttributes">
				<signature>System.Reflection.RuntimeMethodInfo.get_Attributes():System.Reflection.MethodAttributes</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_BindingFlags" uniqueID="get_BindingFlags():System.Reflection.BindingFlags">
				<signature>System.Reflection.RuntimeMethodInfo.get_BindingFlags():System.Reflection.BindingFlags</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CallingConvention" uniqueID="get_CallingConvention():System.Reflection.CallingConventions">
				<signature>System.Reflection.RuntimeMethodInfo.get_CallingConvention():System.Reflection.CallingConventions</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ContainsGenericParameters" uniqueID="get_ContainsGenericParameters():bool">
				<signature>System.Reflection.RuntimeMethodInfo.get_ContainsGenericParameters():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringType" uniqueID="get_DeclaringType():System.Type">
				<signature>System.Reflection.RuntimeMethodInfo.get_DeclaringType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsGenericMethod" uniqueID="get_IsGenericMethod():bool">
				<signature>System.Reflection.RuntimeMethodInfo.get_IsGenericMethod():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsGenericMethodDefinition" uniqueID="get_IsGenericMethodDefinition():bool">
				<signature>System.Reflection.RuntimeMethodInfo.get_IsGenericMethodDefinition():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IsOverloaded" uniqueID="get_IsOverloaded():bool">
				<signature>System.Reflection.RuntimeMethodInfo.get_IsOverloaded():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MemberType" uniqueID="get_MemberType():System.Reflection.MemberTypes">
				<signature>System.Reflection.RuntimeMethodInfo.get_MemberType():System.Reflection.MemberTypes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MetadataToken" uniqueID="get_MetadataToken():int">
				<signature>System.Reflection.RuntimeMethodInfo.get_MetadataToken():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MethodHandle" uniqueID="get_MethodHandle():System.RuntimeMethodHandle">
				<signature>System.Reflection.RuntimeMethodInfo.get_MethodHandle():System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Module" uniqueID="get_Module():System.Reflection.Module">
				<signature>System.Reflection.RuntimeMethodInfo.get_Module():System.Reflection.Module</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Reflection.RuntimeMethodInfo.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReflectedType" uniqueID="get_ReflectedType():System.Type">
				<signature>System.Reflection.RuntimeMethodInfo.get_ReflectedType():System.Type</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_ReflectedTypeHandle" uniqueID="get_ReflectedTypeHandle():System.RuntimeTypeHandle">
				<signature>System.Reflection.RuntimeMethodInfo.get_ReflectedTypeHandle():System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReturnParameter" uniqueID="get_ReturnParameter():System.Reflection.ParameterInfo">
				<signature>System.Reflection.RuntimeMethodInfo.get_ReturnParameter():System.Reflection.ParameterInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReturnType" uniqueID="get_ReturnType():System.Type">
				<signature>System.Reflection.RuntimeMethodInfo.get_ReturnType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReturnTypeCustomAttributes" uniqueID="get_ReturnTypeCustomAttributes():System.Reflection.ICustomAttributeProvider">
				<signature>System.Reflection.RuntimeMethodInfo.get_ReturnTypeCustomAttributes():System.Reflection.ICustomAttributeProvider</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Signature" uniqueID="get_Signature():System.Signature">
				<signature>System.Reflection.RuntimeMethodInfo.get_Signature():System.Signature</signature>
			</method>
		</class>
		<class name="LocalVariableInfo" uniqueID="System.Reflection.LocalVariableInfo">
			<method accessibility="Protected" methodKind="Member" name="LocalVariableInfo" uniqueID="LocalVariableInfo():void">
				<signature>System.Reflection.LocalVariableInfo.LocalVariableInfo():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Reflection.LocalVariableInfo.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsPinned" uniqueID="get_IsPinned():bool">
				<signature>System.Reflection.LocalVariableInfo.get_IsPinned():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_LocalIndex" uniqueID="get_LocalIndex():int">
				<signature>System.Reflection.LocalVariableInfo.get_LocalIndex():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_LocalType" uniqueID="get_LocalType():System.Type">
				<signature>System.Reflection.LocalVariableInfo.get_LocalType():System.Type</signature>
			</method>
		</class>
		<class name="MetadataImport" uniqueID="System.Reflection.MetadataImport">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Reflection.MetadataImport.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetMarshalAs" uniqueID="GetMarshalAs(System.Reflection.ConstArray;System.Runtime.InteropServices.UnmanagedType;System.Runtime.InteropServices.VarEnum;string;System.Runtime.InteropServices.UnmanagedType;int;int;string;string;int):void">
				<signature>System.Reflection.MetadataImport.GetMarshalAs(System.Reflection.ConstArray;System.Runtime.InteropServices.UnmanagedType;System.Runtime.InteropServices.VarEnum;string;System.Runtime.InteropServices.UnmanagedType;int;int;string;string;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ThrowError" uniqueID="ThrowError(int):void">
				<signature>System.Reflection.MetadataImport.ThrowError(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_Enum" uniqueID="_Enum(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;int;int;int):void">
				<signature>System.Reflection.MetadataImport._Enum(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;int;int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_EnumCount" uniqueID="_EnumCount(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;int;int):int">
				<signature>System.Reflection.MetadataImport._EnumCount(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;int;int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_GetClassLayout" uniqueID="_GetClassLayout(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;int;int):void">
				<signature>System.Reflection.MetadataImport._GetClassLayout(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_GetCustomAttributeProps" uniqueID="_GetCustomAttributeProps(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;int;System.Reflection.ConstArray):void">
				<signature>System.Reflection.MetadataImport._GetCustomAttributeProps(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;int;System.Reflection.ConstArray):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_GetDefaultValue" uniqueID="_GetDefaultValue(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;long;int;int):void">
				<signature>System.Reflection.MetadataImport._GetDefaultValue(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;long;int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_GetEventProps" uniqueID="_GetEventProps(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;void;int):void">
				<signature>System.Reflection.MetadataImport._GetEventProps(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;void;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_GetFieldDefProps" uniqueID="_GetFieldDefProps(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;int):void">
				<signature>System.Reflection.MetadataImport._GetFieldDefProps(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_GetFieldMarshal" uniqueID="_GetFieldMarshal(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;System.Reflection.ConstArray):void">
				<signature>System.Reflection.MetadataImport._GetFieldMarshal(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;System.Reflection.ConstArray):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_GetFieldOffset" uniqueID="_GetFieldOffset(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;int;int):bool">
				<signature>System.Reflection.MetadataImport._GetFieldOffset(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;int;int):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_GetGenericParamProps" uniqueID="_GetGenericParamProps(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;int):void">
				<signature>System.Reflection.MetadataImport._GetGenericParamProps(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_GetMarshalAs" uniqueID="_GetMarshalAs(native signed int;int;int;int;string;int;int;int;string;string;int):void">
				<signature>System.Reflection.MetadataImport._GetMarshalAs(native signed int;int;int;int;string;int;int;int;string;string;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_GetMemberRefProps" uniqueID="_GetMemberRefProps(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;System.Reflection.ConstArray):void">
				<signature>System.Reflection.MetadataImport._GetMemberRefProps(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;System.Reflection.ConstArray):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_GetName" uniqueID="_GetName(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;void):void">
				<signature>System.Reflection.MetadataImport._GetName(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;void):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_GetNamespace" uniqueID="_GetNamespace(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;void):void">
				<signature>System.Reflection.MetadataImport._GetNamespace(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;void):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_GetPInvokeMap" uniqueID="_GetPInvokeMap(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;int;void;void):void">
				<signature>System.Reflection.MetadataImport._GetPInvokeMap(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;int;void;void):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_GetParamDefProps" uniqueID="_GetParamDefProps(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;int;int):void">
				<signature>System.Reflection.MetadataImport._GetParamDefProps(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_GetParentToken" uniqueID="_GetParentToken(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;int):void">
				<signature>System.Reflection.MetadataImport._GetParentToken(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_GetPropertyProps" uniqueID="_GetPropertyProps(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;void;int;System.Reflection.ConstArray):void">
				<signature>System.Reflection.MetadataImport._GetPropertyProps(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;void;int;System.Reflection.ConstArray):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_GetScopeProps" uniqueID="_GetScopeProps(native signed int;System.Reflection.MetadataArgs+SkipAddresses;System.Guid):void">
				<signature>System.Reflection.MetadataImport._GetScopeProps(native signed int;System.Reflection.MetadataArgs+SkipAddresses;System.Guid):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_GetSigOfFieldDef" uniqueID="_GetSigOfFieldDef(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;System.Reflection.ConstArray):void">
				<signature>System.Reflection.MetadataImport._GetSigOfFieldDef(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;System.Reflection.ConstArray):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_GetSigOfMethodDef" uniqueID="_GetSigOfMethodDef(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;System.Reflection.ConstArray):void">
				<signature>System.Reflection.MetadataImport._GetSigOfMethodDef(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;System.Reflection.ConstArray):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_GetSignatureFromToken" uniqueID="_GetSignatureFromToken(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;System.Reflection.ConstArray):void">
				<signature>System.Reflection.MetadataImport._GetSignatureFromToken(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;System.Reflection.ConstArray):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_GetUserString" uniqueID="_GetUserString(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;void;int):void">
				<signature>System.Reflection.MetadataImport._GetUserString(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int;void;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_IsValidToken" uniqueID="_IsValidToken(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int):bool">
				<signature>System.Reflection.MetadataImport._IsValidToken(native signed int;System.Reflection.MetadataArgs+SkipAddresses;int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Enum" uniqueID="Enum(int;int;int;int):void">
				<signature>System.Reflection.MetadataImport.Enum(int;int;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EnumCount" uniqueID="EnumCount(int;int):int">
				<signature>System.Reflection.MetadataImport.EnumCount(int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EnumCustomAttributes" uniqueID="EnumCustomAttributes(int;int;int):void">
				<signature>System.Reflection.MetadataImport.EnumCustomAttributes(int;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EnumCustomAttributesCount" uniqueID="EnumCustomAttributesCount(int):int">
				<signature>System.Reflection.MetadataImport.EnumCustomAttributesCount(int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EnumEvents" uniqueID="EnumEvents(int;int;int):void">
				<signature>System.Reflection.MetadataImport.EnumEvents(int;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EnumEventsCount" uniqueID="EnumEventsCount(int):int">
				<signature>System.Reflection.MetadataImport.EnumEventsCount(int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EnumFields" uniqueID="EnumFields(int;int;int):void">
				<signature>System.Reflection.MetadataImport.EnumFields(int;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EnumFieldsCount" uniqueID="EnumFieldsCount(int):int">
				<signature>System.Reflection.MetadataImport.EnumFieldsCount(int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EnumNestedTypes" uniqueID="EnumNestedTypes(int;int;int):void">
				<signature>System.Reflection.MetadataImport.EnumNestedTypes(int;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EnumNestedTypesCount" uniqueID="EnumNestedTypesCount(int):int">
				<signature>System.Reflection.MetadataImport.EnumNestedTypesCount(int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EnumParams" uniqueID="EnumParams(int;int;int):void">
				<signature>System.Reflection.MetadataImport.EnumParams(int;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EnumParamsCount" uniqueID="EnumParamsCount(int):int">
				<signature>System.Reflection.MetadataImport.EnumParamsCount(int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EnumProperties" uniqueID="EnumProperties(int;int;int):void">
				<signature>System.Reflection.MetadataImport.EnumProperties(int;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EnumPropertiesCount" uniqueID="EnumPropertiesCount(int):int">
				<signature>System.Reflection.MetadataImport.EnumPropertiesCount(int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Equals" uniqueID="Equals(System.Reflection.MetadataImport):bool">
				<signature>System.Reflection.MetadataImport.Equals(System.Reflection.MetadataImport):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Reflection.MetadataImport.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAssociates" uniqueID="GetAssociates(int;System.Reflection.AssociateRecord;int):void">
				<signature>System.Reflection.MetadataImport.GetAssociates(int;System.Reflection.AssociateRecord;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAssociatesCount" uniqueID="GetAssociatesCount(int):int">
				<signature>System.Reflection.MetadataImport.GetAssociatesCount(int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetClassLayout" uniqueID="GetClassLayout(int;int;int):void">
				<signature>System.Reflection.MetadataImport.GetClassLayout(int;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributeProps" uniqueID="GetCustomAttributeProps(int;int;System.Reflection.ConstArray):void">
				<signature>System.Reflection.MetadataImport.GetCustomAttributeProps(int;int;System.Reflection.ConstArray):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetDefaultValue" uniqueID="GetDefaultValue(int;long;int;System.Reflection.CorElementType):void">
				<signature>System.Reflection.MetadataImport.GetDefaultValue(int;long;int;System.Reflection.CorElementType):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEventProps" uniqueID="GetEventProps(int;void;System.Reflection.EventAttributes):void">
				<signature>System.Reflection.MetadataImport.GetEventProps(int;void;System.Reflection.EventAttributes):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFieldDefProps" uniqueID="GetFieldDefProps(int;System.Reflection.FieldAttributes):void">
				<signature>System.Reflection.MetadataImport.GetFieldDefProps(int;System.Reflection.FieldAttributes):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFieldMarshal" uniqueID="GetFieldMarshal(int):System.Reflection.ConstArray">
				<signature>System.Reflection.MetadataImport.GetFieldMarshal(int):System.Reflection.ConstArray</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFieldOffset" uniqueID="GetFieldOffset(int;int;int):bool">
				<signature>System.Reflection.MetadataImport.GetFieldOffset(int;int;int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetGenericParamProps" uniqueID="GetGenericParamProps(int;System.Reflection.GenericParameterAttributes):void">
				<signature>System.Reflection.MetadataImport.GetGenericParamProps(int;System.Reflection.GenericParameterAttributes):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Reflection.MetadataImport.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMemberRefProps" uniqueID="GetMemberRefProps(int):System.Reflection.ConstArray">
				<signature>System.Reflection.MetadataImport.GetMemberRefProps(int):System.Reflection.ConstArray</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethodSignature" uniqueID="GetMethodSignature(System.Reflection.MetadataToken):System.Reflection.ConstArray">
				<signature>System.Reflection.MetadataImport.GetMethodSignature(System.Reflection.MetadataToken):System.Reflection.ConstArray</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetName" uniqueID="GetName(int):System.Utf8String">
				<signature>System.Reflection.MetadataImport.GetName(int):System.Utf8String</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetNamespace" uniqueID="GetNamespace(int):System.Utf8String">
				<signature>System.Reflection.MetadataImport.GetNamespace(int):System.Utf8String</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetPInvokeMap" uniqueID="GetPInvokeMap(int;System.Reflection.PInvokeAttributes;string;string):void">
				<signature>System.Reflection.MetadataImport.GetPInvokeMap(int;System.Reflection.PInvokeAttributes;string;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetParamDefProps" uniqueID="GetParamDefProps(int;int;System.Reflection.ParameterAttributes):void">
				<signature>System.Reflection.MetadataImport.GetParamDefProps(int;int;System.Reflection.ParameterAttributes):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetParentToken" uniqueID="GetParentToken(int):int">
				<signature>System.Reflection.MetadataImport.GetParentToken(int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetPropertyProps" uniqueID="GetPropertyProps(int;void;System.Reflection.PropertyAttributes;System.Reflection.ConstArray):void">
				<signature>System.Reflection.MetadataImport.GetPropertyProps(int;void;System.Reflection.PropertyAttributes;System.Reflection.ConstArray):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetScopeProps" uniqueID="GetScopeProps(System.Guid):void">
				<signature>System.Reflection.MetadataImport.GetScopeProps(System.Guid):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSigOfFieldDef" uniqueID="GetSigOfFieldDef(int):System.Reflection.ConstArray">
				<signature>System.Reflection.MetadataImport.GetSigOfFieldDef(int):System.Reflection.ConstArray</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSigOfMethodDef" uniqueID="GetSigOfMethodDef(int):System.Reflection.ConstArray">
				<signature>System.Reflection.MetadataImport.GetSigOfMethodDef(int):System.Reflection.ConstArray</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSignatureFromToken" uniqueID="GetSignatureFromToken(int):System.Reflection.ConstArray">
				<signature>System.Reflection.MetadataImport.GetSignatureFromToken(int):System.Reflection.ConstArray</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetUserString" uniqueID="GetUserString(int):string">
				<signature>System.Reflection.MetadataImport.GetUserString(int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsValidToken" uniqueID="IsValidToken(int):bool">
				<signature>System.Reflection.MetadataImport.IsValidToken(int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MetadataImport" uniqueID="MetadataImport(native signed int):void">
				<signature>System.Reflection.MetadataImport.MetadataImport(native signed int):void</signature>
			</method>
		</class>
		<class name="TypeFilter" uniqueID="System.Reflection.TypeFilter">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(System.Type;object;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Reflection.TypeFilter.BeginInvoke(System.Type;object;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):bool">
				<signature>System.Reflection.TypeFilter.EndInvoke(System.IAsyncResult):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(System.Type;object):bool">
				<signature>System.Reflection.TypeFilter.Invoke(System.Type;object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TypeFilter" uniqueID="TypeFilter(object;native signed int):void">
				<signature>System.Reflection.TypeFilter.TypeFilter(object;native signed int):void</signature>
			</method>
		</class>
		<class name="CerArrayList&lt;System.Reflection.RuntimeFieldInfo&gt;" uniqueID="System.Reflection.CerArrayList&lt;System.Reflection.RuntimeFieldInfo&gt;">
			<method accessibility="Protected" methodKind="Member" name="Add" uniqueID="Add(System.Reflection.RuntimeFieldInfo):void">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeFieldInfo&gt;.Add(System.Reflection.RuntimeFieldInfo):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CerArrayList&lt;System.Reflection.RuntimeFieldInfo&gt;" uniqueID="CerArrayList&lt;System.Reflection.RuntimeFieldInfo&gt;(System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;):void">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeFieldInfo&gt;.CerArrayList&lt;System.Reflection.RuntimeFieldInfo&gt;(System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CerArrayList&lt;System.Reflection.RuntimeFieldInfo&gt;" uniqueID="CerArrayList&lt;System.Reflection.RuntimeFieldInfo&gt;(int):void">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeFieldInfo&gt;.CerArrayList&lt;System.Reflection.RuntimeFieldInfo&gt;(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Preallocate" uniqueID="Preallocate(int):void">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeFieldInfo&gt;.Preallocate(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Replace" uniqueID="Replace(int;System.Reflection.RuntimeFieldInfo):void">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeFieldInfo&gt;.Replace(int;System.Reflection.RuntimeFieldInfo):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeFieldInfo&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.Reflection.RuntimeFieldInfo">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeFieldInfo&gt;.get_Item(int):System.Reflection.RuntimeFieldInfo</signature>
			</method>
		</class>
		<class name="FieldInfo" uniqueID="System.Reflection.FieldInfo">
			<method accessibility="Public" methodKind="Static" name="GetFieldFromHandle" uniqueID="GetFieldFromHandle(System.RuntimeFieldHandle):System.Reflection.FieldInfo">
				<signature>System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle):System.Reflection.FieldInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetFieldFromHandle" uniqueID="GetFieldFromHandle(System.RuntimeFieldHandle;System.RuntimeTypeHandle):System.Reflection.FieldInfo">
				<signature>System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle;System.RuntimeTypeHandle):System.Reflection.FieldInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FieldInfo" uniqueID="FieldInfo():void">
				<signature>System.Reflection.FieldInfo.FieldInfo():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetOptionalCustomModifiers" uniqueID="GetOptionalCustomModifiers():System.Type[]">
				<signature>System.Reflection.FieldInfo.GetOptionalCustomModifiers():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRawConstantValue" uniqueID="GetRawConstantValue():object">
				<signature>System.Reflection.FieldInfo.GetRawConstantValue():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRequiredCustomModifiers" uniqueID="GetRequiredCustomModifiers():System.Type[]">
				<signature>System.Reflection.FieldInfo.GetRequiredCustomModifiers():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValue" uniqueID="GetValue(object):object">
				<signature>System.Reflection.FieldInfo.GetValue(object):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValueDirect" uniqueID="GetValueDirect(System.TypedReference):object">
				<signature>System.Reflection.FieldInfo.GetValueDirect(System.TypedReference):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetValue" uniqueID="SetValue(object;object):void">
				<signature>System.Reflection.FieldInfo.SetValue(object;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetValue" uniqueID="SetValue(object;object;System.Reflection.BindingFlags;System.Reflection.Binder;System.Globalization.CultureInfo):void">
				<signature>System.Reflection.FieldInfo.SetValue(object;object;System.Reflection.BindingFlags;System.Reflection.Binder;System.Globalization.CultureInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetValueDirect" uniqueID="SetValueDirect(System.TypedReference;object):void">
				<signature>System.Reflection.FieldInfo.SetValueDirect(System.TypedReference;object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._FieldInfo.GetIDsOfNames" uniqueID="System.Runtime.InteropServices._FieldInfo.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.FieldInfo.System.Runtime.InteropServices._FieldInfo.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._FieldInfo.GetType" uniqueID="System.Runtime.InteropServices._FieldInfo.GetType():System.Type">
				<signature>System.Reflection.FieldInfo.System.Runtime.InteropServices._FieldInfo.GetType():System.Type</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._FieldInfo.GetTypeInfo" uniqueID="System.Runtime.InteropServices._FieldInfo.GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.FieldInfo.System.Runtime.InteropServices._FieldInfo.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount" uniqueID="System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount(unsigned int):void">
				<signature>System.Reflection.FieldInfo.System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._FieldInfo.Invoke" uniqueID="System.Runtime.InteropServices._FieldInfo.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Reflection.FieldInfo.System.Runtime.InteropServices._FieldInfo.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Attributes" uniqueID="get_Attributes():System.Reflection.FieldAttributes">
				<signature>System.Reflection.FieldInfo.get_Attributes():System.Reflection.FieldAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FieldHandle" uniqueID="get_FieldHandle():System.RuntimeFieldHandle">
				<signature>System.Reflection.FieldInfo.get_FieldHandle():System.RuntimeFieldHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FieldType" uniqueID="get_FieldType():System.Type">
				<signature>System.Reflection.FieldInfo.get_FieldType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsAssembly" uniqueID="get_IsAssembly():bool">
				<signature>System.Reflection.FieldInfo.get_IsAssembly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFamily" uniqueID="get_IsFamily():bool">
				<signature>System.Reflection.FieldInfo.get_IsFamily():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFamilyAndAssembly" uniqueID="get_IsFamilyAndAssembly():bool">
				<signature>System.Reflection.FieldInfo.get_IsFamilyAndAssembly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFamilyOrAssembly" uniqueID="get_IsFamilyOrAssembly():bool">
				<signature>System.Reflection.FieldInfo.get_IsFamilyOrAssembly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsInitOnly" uniqueID="get_IsInitOnly():bool">
				<signature>System.Reflection.FieldInfo.get_IsInitOnly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsLiteral" uniqueID="get_IsLiteral():bool">
				<signature>System.Reflection.FieldInfo.get_IsLiteral():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsNotSerialized" uniqueID="get_IsNotSerialized():bool">
				<signature>System.Reflection.FieldInfo.get_IsNotSerialized():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsPinvokeImpl" uniqueID="get_IsPinvokeImpl():bool">
				<signature>System.Reflection.FieldInfo.get_IsPinvokeImpl():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsPrivate" uniqueID="get_IsPrivate():bool">
				<signature>System.Reflection.FieldInfo.get_IsPrivate():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsPublic" uniqueID="get_IsPublic():bool">
				<signature>System.Reflection.FieldInfo.get_IsPublic():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSpecialName" uniqueID="get_IsSpecialName():bool">
				<signature>System.Reflection.FieldInfo.get_IsSpecialName():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsStatic" uniqueID="get_IsStatic():bool">
				<signature>System.Reflection.FieldInfo.get_IsStatic():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MemberType" uniqueID="get_MemberType():System.Reflection.MemberTypes">
				<signature>System.Reflection.FieldInfo.get_MemberType():System.Reflection.MemberTypes</signature>
			</method>
		</class>
		<class name="IReflect" uniqueID="System.Reflection.IReflect">
			<method accessibility="Public" methodKind="Member" name="GetField" uniqueID="GetField(string;System.Reflection.BindingFlags):System.Reflection.FieldInfo">
				<signature>System.Reflection.IReflect.GetField(string;System.Reflection.BindingFlags):System.Reflection.FieldInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFields" uniqueID="GetFields(System.Reflection.BindingFlags):System.Reflection.FieldInfo[]">
				<signature>System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags):System.Reflection.FieldInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMember" uniqueID="GetMember(string;System.Reflection.BindingFlags):System.Reflection.MemberInfo[]">
				<signature>System.Reflection.IReflect.GetMember(string;System.Reflection.BindingFlags):System.Reflection.MemberInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMembers" uniqueID="GetMembers(System.Reflection.BindingFlags):System.Reflection.MemberInfo[]">
				<signature>System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags):System.Reflection.MemberInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethod" uniqueID="GetMethod(string;System.Reflection.BindingFlags):System.Reflection.MethodInfo">
				<signature>System.Reflection.IReflect.GetMethod(string;System.Reflection.BindingFlags):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethod" uniqueID="GetMethod(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo">
				<signature>System.Reflection.IReflect.GetMethod(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethods" uniqueID="GetMethods(System.Reflection.BindingFlags):System.Reflection.MethodInfo[]">
				<signature>System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags):System.Reflection.MethodInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetProperties" uniqueID="GetProperties(System.Reflection.BindingFlags):System.Reflection.PropertyInfo[]">
				<signature>System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags):System.Reflection.PropertyInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetProperty" uniqueID="GetProperty(string;System.Reflection.BindingFlags):System.Reflection.PropertyInfo">
				<signature>System.Reflection.IReflect.GetProperty(string;System.Reflection.BindingFlags):System.Reflection.PropertyInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetProperty" uniqueID="GetProperty(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Type;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.PropertyInfo">
				<signature>System.Reflection.IReflect.GetProperty(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Type;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.PropertyInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InvokeMember" uniqueID="InvokeMember(string;System.Reflection.BindingFlags;System.Reflection.Binder;object;object[];System.Reflection.ParameterModifier[];System.Globalization.CultureInfo;string[]):object">
				<signature>System.Reflection.IReflect.InvokeMember(string;System.Reflection.BindingFlags;System.Reflection.Binder;object;object[];System.Reflection.ParameterModifier[];System.Globalization.CultureInfo;string[]):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_UnderlyingSystemType" uniqueID="get_UnderlyingSystemType():System.Type">
				<signature>System.Reflection.IReflect.get_UnderlyingSystemType():System.Type</signature>
			</method>
		</class>
		<class name="RuntimeEventInfo" uniqueID="System.Reflection.RuntimeEventInfo">
			<method accessibility="Protected" methodKind="Member" name="CacheEquals" uniqueID="CacheEquals(object):bool">
				<signature>System.Reflection.RuntimeEventInfo.CacheEquals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAddMethod" uniqueID="GetAddMethod(bool):System.Reflection.MethodInfo">
				<signature>System.Reflection.RuntimeEventInfo.GetAddMethod(bool):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.Reflection.RuntimeEventInfo.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.Reflection.RuntimeEventInfo.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetObjectData" uniqueID="GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Reflection.RuntimeEventInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetOtherMethods" uniqueID="GetOtherMethods(bool):System.Reflection.MethodInfo[]">
				<signature>System.Reflection.RuntimeEventInfo.GetOtherMethods(bool):System.Reflection.MethodInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRaiseMethod" uniqueID="GetRaiseMethod(bool):System.Reflection.MethodInfo">
				<signature>System.Reflection.RuntimeEventInfo.GetRaiseMethod(bool):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRemoveMethod" uniqueID="GetRemoveMethod(bool):System.Reflection.MethodInfo">
				<signature>System.Reflection.RuntimeEventInfo.GetRemoveMethod(bool):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.Reflection.RuntimeEventInfo.IsDefined(System.Type;bool):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RuntimeEventInfo" uniqueID="RuntimeEventInfo():void">
				<signature>System.Reflection.RuntimeEventInfo.RuntimeEventInfo():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RuntimeEventInfo" uniqueID="RuntimeEventInfo(int;System.RuntimeType;System.RuntimeType+RuntimeTypeCache;bool):void">
				<signature>System.Reflection.RuntimeEventInfo.RuntimeEventInfo(int;System.RuntimeType;System.RuntimeType+RuntimeTypeCache;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Reflection.RuntimeEventInfo.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Attributes" uniqueID="get_Attributes():System.Reflection.EventAttributes">
				<signature>System.Reflection.RuntimeEventInfo.get_Attributes():System.Reflection.EventAttributes</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_BindingFlags" uniqueID="get_BindingFlags():System.Reflection.BindingFlags">
				<signature>System.Reflection.RuntimeEventInfo.get_BindingFlags():System.Reflection.BindingFlags</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringType" uniqueID="get_DeclaringType():System.Type">
				<signature>System.Reflection.RuntimeEventInfo.get_DeclaringType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MemberType" uniqueID="get_MemberType():System.Reflection.MemberTypes">
				<signature>System.Reflection.RuntimeEventInfo.get_MemberType():System.Reflection.MemberTypes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MetadataToken" uniqueID="get_MetadataToken():int">
				<signature>System.Reflection.RuntimeEventInfo.get_MetadataToken():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Module" uniqueID="get_Module():System.Reflection.Module">
				<signature>System.Reflection.RuntimeEventInfo.get_Module():System.Reflection.Module</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Reflection.RuntimeEventInfo.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReflectedType" uniqueID="get_ReflectedType():System.Type">
				<signature>System.Reflection.RuntimeEventInfo.get_ReflectedType():System.Type</signature>
			</method>
		</class>
		<class name="ConstructorInfo" uniqueID="System.Reflection.ConstructorInfo">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Reflection.ConstructorInfo.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ConstructorInfo" uniqueID="ConstructorInfo():void">
				<signature>System.Reflection.ConstructorInfo.ConstructorInfo():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetReturnType" uniqueID="GetReturnType():System.Type">
				<signature>System.Reflection.ConstructorInfo.GetReturnType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object">
				<signature>System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(object[]):object">
				<signature>System.Reflection.ConstructorInfo.Invoke(object[]):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ConstructorInfo.GetIDsOfNames" uniqueID="System.Runtime.InteropServices._ConstructorInfo.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.ConstructorInfo.System.Runtime.InteropServices._ConstructorInfo.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ConstructorInfo.GetType" uniqueID="System.Runtime.InteropServices._ConstructorInfo.GetType():System.Type">
				<signature>System.Reflection.ConstructorInfo.System.Runtime.InteropServices._ConstructorInfo.GetType():System.Type</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ConstructorInfo.GetTypeInfo" uniqueID="System.Runtime.InteropServices._ConstructorInfo.GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.ConstructorInfo.System.Runtime.InteropServices._ConstructorInfo.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ConstructorInfo.GetTypeInfoCount" uniqueID="System.Runtime.InteropServices._ConstructorInfo.GetTypeInfoCount(unsigned int):void">
				<signature>System.Reflection.ConstructorInfo.System.Runtime.InteropServices._ConstructorInfo.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ConstructorInfo.Invoke" uniqueID="System.Runtime.InteropServices._ConstructorInfo.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Reflection.ConstructorInfo.System.Runtime.InteropServices._ConstructorInfo.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ConstructorInfo.Invoke_2" uniqueID="System.Runtime.InteropServices._ConstructorInfo.Invoke_2(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object">
				<signature>System.Reflection.ConstructorInfo.System.Runtime.InteropServices._ConstructorInfo.Invoke_2(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ConstructorInfo.Invoke_3" uniqueID="System.Runtime.InteropServices._ConstructorInfo.Invoke_3(object;object[]):object">
				<signature>System.Reflection.ConstructorInfo.System.Runtime.InteropServices._ConstructorInfo.Invoke_3(object;object[]):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ConstructorInfo.Invoke_4" uniqueID="System.Runtime.InteropServices._ConstructorInfo.Invoke_4(System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object">
				<signature>System.Reflection.ConstructorInfo.System.Runtime.InteropServices._ConstructorInfo.Invoke_4(System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ConstructorInfo.Invoke_5" uniqueID="System.Runtime.InteropServices._ConstructorInfo.Invoke_5(object[]):object">
				<signature>System.Reflection.ConstructorInfo.System.Runtime.InteropServices._ConstructorInfo.Invoke_5(object[]):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MemberType" uniqueID="get_MemberType():System.Reflection.MemberTypes">
				<signature>System.Reflection.ConstructorInfo.get_MemberType():System.Reflection.MemberTypes</signature>
			</method>
		</class>
		<class name="PropertyInfo" uniqueID="System.Reflection.PropertyInfo">
			<method accessibility="Public" methodKind="Member" name="GetAccessors" uniqueID="GetAccessors():System.Reflection.MethodInfo[]">
				<signature>System.Reflection.PropertyInfo.GetAccessors():System.Reflection.MethodInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAccessors" uniqueID="GetAccessors(bool):System.Reflection.MethodInfo[]">
				<signature>System.Reflection.PropertyInfo.GetAccessors(bool):System.Reflection.MethodInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetConstantValue" uniqueID="GetConstantValue():object">
				<signature>System.Reflection.PropertyInfo.GetConstantValue():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetGetMethod" uniqueID="GetGetMethod():System.Reflection.MethodInfo">
				<signature>System.Reflection.PropertyInfo.GetGetMethod():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetGetMethod" uniqueID="GetGetMethod(bool):System.Reflection.MethodInfo">
				<signature>System.Reflection.PropertyInfo.GetGetMethod(bool):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetIndexParameters" uniqueID="GetIndexParameters():System.Reflection.ParameterInfo[]">
				<signature>System.Reflection.PropertyInfo.GetIndexParameters():System.Reflection.ParameterInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetOptionalCustomModifiers" uniqueID="GetOptionalCustomModifiers():System.Type[]">
				<signature>System.Reflection.PropertyInfo.GetOptionalCustomModifiers():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRawConstantValue" uniqueID="GetRawConstantValue():object">
				<signature>System.Reflection.PropertyInfo.GetRawConstantValue():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRequiredCustomModifiers" uniqueID="GetRequiredCustomModifiers():System.Type[]">
				<signature>System.Reflection.PropertyInfo.GetRequiredCustomModifiers():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSetMethod" uniqueID="GetSetMethod():System.Reflection.MethodInfo">
				<signature>System.Reflection.PropertyInfo.GetSetMethod():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSetMethod" uniqueID="GetSetMethod(bool):System.Reflection.MethodInfo">
				<signature>System.Reflection.PropertyInfo.GetSetMethod(bool):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValue" uniqueID="GetValue(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object">
				<signature>System.Reflection.PropertyInfo.GetValue(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValue" uniqueID="GetValue(object;object[]):object">
				<signature>System.Reflection.PropertyInfo.GetValue(object;object[]):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="PropertyInfo" uniqueID="PropertyInfo():void">
				<signature>System.Reflection.PropertyInfo.PropertyInfo():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetValue" uniqueID="SetValue(object;object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):void">
				<signature>System.Reflection.PropertyInfo.SetValue(object;object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetValue" uniqueID="SetValue(object;object;object[]):void">
				<signature>System.Reflection.PropertyInfo.SetValue(object;object;object[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames" uniqueID="System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.PropertyInfo.System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._PropertyInfo.GetType" uniqueID="System.Runtime.InteropServices._PropertyInfo.GetType():System.Type">
				<signature>System.Reflection.PropertyInfo.System.Runtime.InteropServices._PropertyInfo.GetType():System.Type</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._PropertyInfo.GetTypeInfo" uniqueID="System.Runtime.InteropServices._PropertyInfo.GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.PropertyInfo.System.Runtime.InteropServices._PropertyInfo.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount" uniqueID="System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount(unsigned int):void">
				<signature>System.Reflection.PropertyInfo.System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._PropertyInfo.Invoke" uniqueID="System.Runtime.InteropServices._PropertyInfo.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Reflection.PropertyInfo.System.Runtime.InteropServices._PropertyInfo.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Attributes" uniqueID="get_Attributes():System.Reflection.PropertyAttributes">
				<signature>System.Reflection.PropertyInfo.get_Attributes():System.Reflection.PropertyAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CanRead" uniqueID="get_CanRead():bool">
				<signature>System.Reflection.PropertyInfo.get_CanRead():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CanWrite" uniqueID="get_CanWrite():bool">
				<signature>System.Reflection.PropertyInfo.get_CanWrite():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSpecialName" uniqueID="get_IsSpecialName():bool">
				<signature>System.Reflection.PropertyInfo.get_IsSpecialName():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MemberType" uniqueID="get_MemberType():System.Reflection.MemberTypes">
				<signature>System.Reflection.PropertyInfo.get_MemberType():System.Reflection.MemberTypes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PropertyType" uniqueID="get_PropertyType():System.Type">
				<signature>System.Reflection.PropertyInfo.get_PropertyType():System.Type</signature>
			</method>
		</class>
		<class name="RuntimeFieldInfo" uniqueID="System.Reflection.RuntimeFieldInfo">
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.Reflection.RuntimeFieldInfo.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.Reflection.RuntimeFieldInfo.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetFieldHandle" uniqueID="GetFieldHandle():System.RuntimeFieldHandle">
				<signature>System.Reflection.RuntimeFieldInfo.GetFieldHandle():System.RuntimeFieldHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetObjectData" uniqueID="GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Reflection.RuntimeFieldInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.Reflection.RuntimeFieldInfo.IsDefined(System.Type;bool):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RuntimeFieldInfo" uniqueID="RuntimeFieldInfo():void">
				<signature>System.Reflection.RuntimeFieldInfo.RuntimeFieldInfo():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RuntimeFieldInfo" uniqueID="RuntimeFieldInfo(System.RuntimeType+RuntimeTypeCache;System.RuntimeType;System.Reflection.BindingFlags):void">
				<signature>System.Reflection.RuntimeFieldInfo.RuntimeFieldInfo(System.RuntimeType+RuntimeTypeCache;System.RuntimeType;System.Reflection.BindingFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Reflection.RuntimeFieldInfo.ToString():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_BindingFlags" uniqueID="get_BindingFlags():System.Reflection.BindingFlags">
				<signature>System.Reflection.RuntimeFieldInfo.get_BindingFlags():System.Reflection.BindingFlags</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringType" uniqueID="get_DeclaringType():System.Type">
				<signature>System.Reflection.RuntimeFieldInfo.get_DeclaringType():System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_DeclaringTypeHandle" uniqueID="get_DeclaringTypeHandle():System.RuntimeTypeHandle">
				<signature>System.Reflection.RuntimeFieldInfo.get_DeclaringTypeHandle():System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MemberType" uniqueID="get_MemberType():System.Reflection.MemberTypes">
				<signature>System.Reflection.RuntimeFieldInfo.get_MemberType():System.Reflection.MemberTypes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReflectedType" uniqueID="get_ReflectedType():System.Type">
				<signature>System.Reflection.RuntimeFieldInfo.get_ReflectedType():System.Type</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_ReflectedTypeHandle" uniqueID="get_ReflectedTypeHandle():System.RuntimeTypeHandle">
				<signature>System.Reflection.RuntimeFieldInfo.get_ReflectedTypeHandle():System.RuntimeTypeHandle</signature>
			</method>
		</class>
		<class name="CerArrayList&lt;System.Reflection.RuntimeEventInfo&gt;" uniqueID="System.Reflection.CerArrayList&lt;System.Reflection.RuntimeEventInfo&gt;">
			<method accessibility="Protected" methodKind="Member" name="Add" uniqueID="Add(System.Reflection.RuntimeEventInfo):void">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeEventInfo&gt;.Add(System.Reflection.RuntimeEventInfo):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CerArrayList&lt;System.Reflection.RuntimeEventInfo&gt;" uniqueID="CerArrayList&lt;System.Reflection.RuntimeEventInfo&gt;(System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;):void">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeEventInfo&gt;.CerArrayList&lt;System.Reflection.RuntimeEventInfo&gt;(System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CerArrayList&lt;System.Reflection.RuntimeEventInfo&gt;" uniqueID="CerArrayList&lt;System.Reflection.RuntimeEventInfo&gt;(int):void">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeEventInfo&gt;.CerArrayList&lt;System.Reflection.RuntimeEventInfo&gt;(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Preallocate" uniqueID="Preallocate(int):void">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeEventInfo&gt;.Preallocate(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Replace" uniqueID="Replace(int;System.Reflection.RuntimeEventInfo):void">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeEventInfo&gt;.Replace(int;System.Reflection.RuntimeEventInfo):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeEventInfo&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.Reflection.RuntimeEventInfo">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeEventInfo&gt;.get_Item(int):System.Reflection.RuntimeEventInfo</signature>
			</method>
		</class>
		<class name="CerArrayList&lt;System.Reflection.RuntimeMethodInfo&gt;" uniqueID="System.Reflection.CerArrayList&lt;System.Reflection.RuntimeMethodInfo&gt;">
			<method accessibility="Protected" methodKind="Member" name="Add" uniqueID="Add(System.Reflection.RuntimeMethodInfo):void">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeMethodInfo&gt;.Add(System.Reflection.RuntimeMethodInfo):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CerArrayList&lt;System.Reflection.RuntimeMethodInfo&gt;" uniqueID="CerArrayList&lt;System.Reflection.RuntimeMethodInfo&gt;(System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;):void">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeMethodInfo&gt;.CerArrayList&lt;System.Reflection.RuntimeMethodInfo&gt;(System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CerArrayList&lt;System.Reflection.RuntimeMethodInfo&gt;" uniqueID="CerArrayList&lt;System.Reflection.RuntimeMethodInfo&gt;(int):void">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeMethodInfo&gt;.CerArrayList&lt;System.Reflection.RuntimeMethodInfo&gt;(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Preallocate" uniqueID="Preallocate(int):void">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeMethodInfo&gt;.Preallocate(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Replace" uniqueID="Replace(int;System.Reflection.RuntimeMethodInfo):void">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeMethodInfo&gt;.Replace(int;System.Reflection.RuntimeMethodInfo):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeMethodInfo&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.Reflection.RuntimeMethodInfo">
				<signature>System.Reflection.CerArrayList&lt;System.Reflection.RuntimeMethodInfo&gt;.get_Item(int):System.Reflection.RuntimeMethodInfo</signature>
			</method>
		</class>
		<class name="EventInfo" uniqueID="System.Reflection.EventInfo">
			<method accessibility="Public" methodKind="Member" name="AddEventHandler" uniqueID="AddEventHandler(object;System.Delegate):void">
				<signature>System.Reflection.EventInfo.AddEventHandler(object;System.Delegate):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EventInfo" uniqueID="EventInfo():void">
				<signature>System.Reflection.EventInfo.EventInfo():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAddMethod" uniqueID="GetAddMethod():System.Reflection.MethodInfo">
				<signature>System.Reflection.EventInfo.GetAddMethod():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAddMethod" uniqueID="GetAddMethod(bool):System.Reflection.MethodInfo">
				<signature>System.Reflection.EventInfo.GetAddMethod(bool):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetOtherMethods" uniqueID="GetOtherMethods():System.Reflection.MethodInfo[]">
				<signature>System.Reflection.EventInfo.GetOtherMethods():System.Reflection.MethodInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetOtherMethods" uniqueID="GetOtherMethods(bool):System.Reflection.MethodInfo[]">
				<signature>System.Reflection.EventInfo.GetOtherMethods(bool):System.Reflection.MethodInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRaiseMethod" uniqueID="GetRaiseMethod():System.Reflection.MethodInfo">
				<signature>System.Reflection.EventInfo.GetRaiseMethod():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRaiseMethod" uniqueID="GetRaiseMethod(bool):System.Reflection.MethodInfo">
				<signature>System.Reflection.EventInfo.GetRaiseMethod(bool):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRemoveMethod" uniqueID="GetRemoveMethod():System.Reflection.MethodInfo">
				<signature>System.Reflection.EventInfo.GetRemoveMethod():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRemoveMethod" uniqueID="GetRemoveMethod(bool):System.Reflection.MethodInfo">
				<signature>System.Reflection.EventInfo.GetRemoveMethod(bool):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveEventHandler" uniqueID="RemoveEventHandler(object;System.Delegate):void">
				<signature>System.Reflection.EventInfo.RemoveEventHandler(object;System.Delegate):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._EventInfo.GetIDsOfNames" uniqueID="System.Runtime.InteropServices._EventInfo.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.EventInfo.System.Runtime.InteropServices._EventInfo.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._EventInfo.GetType" uniqueID="System.Runtime.InteropServices._EventInfo.GetType():System.Type">
				<signature>System.Reflection.EventInfo.System.Runtime.InteropServices._EventInfo.GetType():System.Type</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._EventInfo.GetTypeInfo" uniqueID="System.Runtime.InteropServices._EventInfo.GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.EventInfo.System.Runtime.InteropServices._EventInfo.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._EventInfo.GetTypeInfoCount" uniqueID="System.Runtime.InteropServices._EventInfo.GetTypeInfoCount(unsigned int):void">
				<signature>System.Reflection.EventInfo.System.Runtime.InteropServices._EventInfo.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._EventInfo.Invoke" uniqueID="System.Runtime.InteropServices._EventInfo.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Reflection.EventInfo.System.Runtime.InteropServices._EventInfo.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Attributes" uniqueID="get_Attributes():System.Reflection.EventAttributes">
				<signature>System.Reflection.EventInfo.get_Attributes():System.Reflection.EventAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_EventHandlerType" uniqueID="get_EventHandlerType():System.Type">
				<signature>System.Reflection.EventInfo.get_EventHandlerType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsMulticast" uniqueID="get_IsMulticast():bool">
				<signature>System.Reflection.EventInfo.get_IsMulticast():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSpecialName" uniqueID="get_IsSpecialName():bool">
				<signature>System.Reflection.EventInfo.get_IsSpecialName():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MemberType" uniqueID="get_MemberType():System.Reflection.MemberTypes">
				<signature>System.Reflection.EventInfo.get_MemberType():System.Reflection.MemberTypes</signature>
			</method>
		</class>
		<class name="ExceptionHandlingClause" uniqueID="System.Reflection.ExceptionHandlingClause">
			<method accessibility="Private" methodKind="Member" name="ExceptionHandlingClause" uniqueID="ExceptionHandlingClause():void">
				<signature>System.Reflection.ExceptionHandlingClause.ExceptionHandlingClause():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Reflection.ExceptionHandlingClause.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CatchType" uniqueID="get_CatchType():System.Type">
				<signature>System.Reflection.ExceptionHandlingClause.get_CatchType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FilterOffset" uniqueID="get_FilterOffset():int">
				<signature>System.Reflection.ExceptionHandlingClause.get_FilterOffset():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Flags" uniqueID="get_Flags():System.Reflection.ExceptionHandlingClauseOptions">
				<signature>System.Reflection.ExceptionHandlingClause.get_Flags():System.Reflection.ExceptionHandlingClauseOptions</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_HandlerLength" uniqueID="get_HandlerLength():int">
				<signature>System.Reflection.ExceptionHandlingClause.get_HandlerLength():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_HandlerOffset" uniqueID="get_HandlerOffset():int">
				<signature>System.Reflection.ExceptionHandlingClause.get_HandlerOffset():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TryLength" uniqueID="get_TryLength():int">
				<signature>System.Reflection.ExceptionHandlingClause.get_TryLength():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TryOffset" uniqueID="get_TryOffset():int">
				<signature>System.Reflection.ExceptionHandlingClause.get_TryOffset():int</signature>
			</method>
		</class>
		<class name="ICustomAttributeProvider" uniqueID="System.Reflection.ICustomAttributeProvider">
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.Reflection.ICustomAttributeProvider.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.Reflection.ICustomAttributeProvider.IsDefined(System.Type;bool):bool</signature>
			</method>
		</class>
		<class name="MetadataToken" uniqueID="System.Reflection.MetadataToken">
			<method accessibility="Public" methodKind="Static" name="IsNullToken" uniqueID="IsNullToken(int):bool">
				<signature>System.Reflection.MetadataToken.IsNullToken(int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsTokenOfType" uniqueID="IsTokenOfType(int;System.Reflection.MetadataTokenType[]):bool">
				<signature>System.Reflection.MetadataToken.IsTokenOfType(int;System.Reflection.MetadataTokenType[]):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Implicit" uniqueID="op_Implicit(System.Reflection.MetadataToken):int">
				<signature>System.Reflection.MetadataToken.op_Implicit(System.Reflection.MetadataToken):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Implicit" uniqueID="op_Implicit(int):System.Reflection.MetadataToken">
				<signature>System.Reflection.MetadataToken.op_Implicit(int):System.Reflection.MetadataToken</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MetadataToken" uniqueID="MetadataToken(int):void">
				<signature>System.Reflection.MetadataToken.MetadataToken(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Reflection.MetadataToken.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsEvent" uniqueID="get_IsEvent():bool">
				<signature>System.Reflection.MetadataToken.get_IsEvent():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFieldDef" uniqueID="get_IsFieldDef():bool">
				<signature>System.Reflection.MetadataToken.get_IsFieldDef():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsGlobalTypeDefToken" uniqueID="get_IsGlobalTypeDefToken():bool">
				<signature>System.Reflection.MetadataToken.get_IsGlobalTypeDefToken():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsMemberRef" uniqueID="get_IsMemberRef():bool">
				<signature>System.Reflection.MetadataToken.get_IsMemberRef():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsMethodDef" uniqueID="get_IsMethodDef():bool">
				<signature>System.Reflection.MetadataToken.get_IsMethodDef():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsMethodSpec" uniqueID="get_IsMethodSpec():bool">
				<signature>System.Reflection.MetadataToken.get_IsMethodSpec():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsParamDef" uniqueID="get_IsParamDef():bool">
				<signature>System.Reflection.MetadataToken.get_IsParamDef():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsProperty" uniqueID="get_IsProperty():bool">
				<signature>System.Reflection.MetadataToken.get_IsProperty():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSignature" uniqueID="get_IsSignature():bool">
				<signature>System.Reflection.MetadataToken.get_IsSignature():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsString" uniqueID="get_IsString():bool">
				<signature>System.Reflection.MetadataToken.get_IsString():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsTypeDef" uniqueID="get_IsTypeDef():bool">
				<signature>System.Reflection.MetadataToken.get_IsTypeDef():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsTypeRef" uniqueID="get_IsTypeRef():bool">
				<signature>System.Reflection.MetadataToken.get_IsTypeRef():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsTypeSpec" uniqueID="get_IsTypeSpec():bool">
				<signature>System.Reflection.MetadataToken.get_IsTypeSpec():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TokenType" uniqueID="get_TokenType():System.Reflection.MetadataTokenType">
				<signature>System.Reflection.MetadataToken.get_TokenType():System.Reflection.MetadataTokenType</signature>
			</method>
		</class>
		<class name="MethodInfo" uniqueID="System.Reflection.MethodInfo">
			<method accessibility="Public" methodKind="Member" name="GetBaseDefinition" uniqueID="GetBaseDefinition():System.Reflection.MethodInfo">
				<signature>System.Reflection.MethodInfo.GetBaseDefinition():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetGenericArguments" uniqueID="GetGenericArguments():System.Type[]">
				<signature>System.Reflection.MethodInfo.GetGenericArguments():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetGenericMethodDefinition" uniqueID="GetGenericMethodDefinition():System.Reflection.MethodInfo">
				<signature>System.Reflection.MethodInfo.GetGenericMethodDefinition():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetParentDefinition" uniqueID="GetParentDefinition():System.Reflection.MethodInfo">
				<signature>System.Reflection.MethodInfo.GetParentDefinition():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetReturnType" uniqueID="GetReturnType():System.Type">
				<signature>System.Reflection.MethodInfo.GetReturnType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakeGenericMethod" uniqueID="MakeGenericMethod(System.Type[]):System.Reflection.MethodInfo">
				<signature>System.Reflection.MethodInfo.MakeGenericMethod(System.Type[]):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MethodInfo" uniqueID="MethodInfo():void">
				<signature>System.Reflection.MethodInfo.MethodInfo():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MethodInfo.GetIDsOfNames" uniqueID="System.Runtime.InteropServices._MethodInfo.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MethodInfo.GetType" uniqueID="System.Runtime.InteropServices._MethodInfo.GetType():System.Type">
				<signature>System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.GetType():System.Type</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MethodInfo.GetTypeInfo" uniqueID="System.Runtime.InteropServices._MethodInfo.GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount" uniqueID="System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount(unsigned int):void">
				<signature>System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MethodInfo.Invoke" uniqueID="System.Runtime.InteropServices._MethodInfo.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ContainsGenericParameters" uniqueID="get_ContainsGenericParameters():bool">
				<signature>System.Reflection.MethodInfo.get_ContainsGenericParameters():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsGenericMethod" uniqueID="get_IsGenericMethod():bool">
				<signature>System.Reflection.MethodInfo.get_IsGenericMethod():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsGenericMethodDefinition" uniqueID="get_IsGenericMethodDefinition():bool">
				<signature>System.Reflection.MethodInfo.get_IsGenericMethodDefinition():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MemberType" uniqueID="get_MemberType():System.Reflection.MemberTypes">
				<signature>System.Reflection.MethodInfo.get_MemberType():System.Reflection.MemberTypes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReturnParameter" uniqueID="get_ReturnParameter():System.Reflection.ParameterInfo">
				<signature>System.Reflection.MethodInfo.get_ReturnParameter():System.Reflection.ParameterInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReturnType" uniqueID="get_ReturnType():System.Type">
				<signature>System.Reflection.MethodInfo.get_ReturnType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReturnTypeCustomAttributes" uniqueID="get_ReturnTypeCustomAttributes():System.Reflection.ICustomAttributeProvider">
				<signature>System.Reflection.MethodInfo.get_ReturnTypeCustomAttributes():System.Reflection.ICustomAttributeProvider</signature>
			</method>
		</class>
		<class name="ParameterModifier" uniqueID="System.Reflection.ParameterModifier">
			<method accessibility="Public" methodKind="Member" name="ParameterModifier" uniqueID="ParameterModifier(int):void">
				<signature>System.Reflection.ParameterModifier.ParameterModifier(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IsByRefArray" uniqueID="get_IsByRefArray():bool[]">
				<signature>System.Reflection.ParameterModifier.get_IsByRefArray():bool[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):bool">
				<signature>System.Reflection.ParameterModifier.get_Item(int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(int;bool):void">
				<signature>System.Reflection.ParameterModifier.set_Item(int;bool):void</signature>
			</method>
		</class>
		<class name="RuntimeConstructorInfo" uniqueID="System.Reflection.RuntimeConstructorInfo">
			<method accessibility="Protected" methodKind="Static" name="CheckCanCreateInstance" uniqueID="CheckCanCreateInstance(System.Type;bool):void">
				<signature>System.Reflection.RuntimeConstructorInfo.CheckCanCreateInstance(System.Type;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CacheEquals" uniqueID="CacheEquals(object):bool">
				<signature>System.Reflection.RuntimeConstructorInfo.CacheEquals(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CheckConsistency" uniqueID="CheckConsistency(object):void">
				<signature>System.Reflection.RuntimeConstructorInfo.CheckConsistency(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.Reflection.RuntimeConstructorInfo.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.Reflection.RuntimeConstructorInfo.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethodBody" uniqueID="GetMethodBody():System.Reflection.MethodBody">
				<signature>System.Reflection.RuntimeConstructorInfo.GetMethodBody():System.Reflection.MethodBody</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMethodHandle" uniqueID="GetMethodHandle():System.RuntimeMethodHandle">
				<signature>System.Reflection.RuntimeConstructorInfo.GetMethodHandle():System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethodImplementationFlags" uniqueID="GetMethodImplementationFlags():System.Reflection.MethodImplAttributes">
				<signature>System.Reflection.RuntimeConstructorInfo.GetMethodImplementationFlags():System.Reflection.MethodImplAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetObjectData" uniqueID="GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Reflection.RuntimeConstructorInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetOneTimeSpecificFlags" uniqueID="GetOneTimeSpecificFlags():unsigned int">
				<signature>System.Reflection.RuntimeConstructorInfo.GetOneTimeSpecificFlags():unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetParameters" uniqueID="GetParameters():System.Reflection.ParameterInfo[]">
				<signature>System.Reflection.RuntimeConstructorInfo.GetParameters():System.Reflection.ParameterInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetParametersNoCopy" uniqueID="GetParametersNoCopy():System.Reflection.ParameterInfo[]">
				<signature>System.Reflection.RuntimeConstructorInfo.GetParametersNoCopy():System.Reflection.ParameterInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetReturnType" uniqueID="GetReturnType():System.Type">
				<signature>System.Reflection.RuntimeConstructorInfo.GetReturnType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object">
				<signature>System.Reflection.RuntimeConstructorInfo.Invoke(System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object">
				<signature>System.Reflection.RuntimeConstructorInfo.Invoke(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.Reflection.RuntimeConstructorInfo.IsDefined(System.Type;bool):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RuntimeConstructorInfo" uniqueID="RuntimeConstructorInfo():void">
				<signature>System.Reflection.RuntimeConstructorInfo.RuntimeConstructorInfo():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RuntimeConstructorInfo" uniqueID="RuntimeConstructorInfo(System.RuntimeMethodHandle;System.RuntimeTypeHandle;System.RuntimeType+RuntimeTypeCache;System.Reflection.MethodAttributes;System.Reflection.BindingFlags):void">
				<signature>System.Reflection.RuntimeConstructorInfo.RuntimeConstructorInfo(System.RuntimeMethodHandle;System.RuntimeTypeHandle;System.RuntimeType+RuntimeTypeCache;System.Reflection.MethodAttributes;System.Reflection.BindingFlags):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SerializationInvoke" uniqueID="SerializationInvoke(object;System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Reflection.RuntimeConstructorInfo.SerializationInvoke(object;System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ThrowNoInvokeException" uniqueID="ThrowNoInvokeException():void">
				<signature>System.Reflection.RuntimeConstructorInfo.ThrowNoInvokeException():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Reflection.RuntimeConstructorInfo.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Attributes" uniqueID="get_Attributes():System.Reflection.MethodAttributes">
				<signature>System.Reflection.RuntimeConstructorInfo.get_Attributes():System.Reflection.MethodAttributes</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_BindingFlags" uniqueID="get_BindingFlags():System.Reflection.BindingFlags">
				<signature>System.Reflection.RuntimeConstructorInfo.get_BindingFlags():System.Reflection.BindingFlags</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CallingConvention" uniqueID="get_CallingConvention():System.Reflection.CallingConventions">
				<signature>System.Reflection.RuntimeConstructorInfo.get_CallingConvention():System.Reflection.CallingConventions</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringType" uniqueID="get_DeclaringType():System.Type">
				<signature>System.Reflection.RuntimeConstructorInfo.get_DeclaringType():System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IsOverloaded" uniqueID="get_IsOverloaded():bool">
				<signature>System.Reflection.RuntimeConstructorInfo.get_IsOverloaded():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MemberType" uniqueID="get_MemberType():System.Reflection.MemberTypes">
				<signature>System.Reflection.RuntimeConstructorInfo.get_MemberType():System.Reflection.MemberTypes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MetadataToken" uniqueID="get_MetadataToken():int">
				<signature>System.Reflection.RuntimeConstructorInfo.get_MetadataToken():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MethodHandle" uniqueID="get_MethodHandle():System.RuntimeMethodHandle">
				<signature>System.Reflection.RuntimeConstructorInfo.get_MethodHandle():System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Module" uniqueID="get_Module():System.Reflection.Module">
				<signature>System.Reflection.RuntimeConstructorInfo.get_Module():System.Reflection.Module</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Reflection.RuntimeConstructorInfo.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReflectedType" uniqueID="get_ReflectedType():System.Type">
				<signature>System.Reflection.RuntimeConstructorInfo.get_ReflectedType():System.Type</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_ReflectedTypeHandle" uniqueID="get_ReflectedTypeHandle():System.RuntimeTypeHandle">
				<signature>System.Reflection.RuntimeConstructorInfo.get_ReflectedTypeHandle():System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_Signature" uniqueID="get_Signature():System.Signature">
				<signature>System.Reflection.RuntimeConstructorInfo.get_Signature():System.Signature</signature>
			</method>
		</class>
		<class name="AssemblyName" uniqueID="System.Reflection.AssemblyName">
			<method accessibility="Protected" methodKind="Static" name="EscapeCodeBase" uniqueID="EscapeCodeBase(string):string">
				<signature>System.Reflection.AssemblyName.EscapeCodeBase(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetAssemblyName" uniqueID="GetAssemblyName(string):System.Reflection.AssemblyName">
				<signature>System.Reflection.AssemblyName.GetAssemblyName(string):System.Reflection.AssemblyName</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ReferenceMatchesDefinition" uniqueID="ReferenceMatchesDefinition(System.Reflection.AssemblyName;System.Reflection.AssemblyName):bool">
				<signature>System.Reflection.AssemblyName.ReferenceMatchesDefinition(System.Reflection.AssemblyName;System.Reflection.AssemblyName):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nGetFileInformation" uniqueID="nGetFileInformation(string):System.Reflection.AssemblyName">
				<signature>System.Reflection.AssemblyName.nGetFileInformation(string):System.Reflection.AssemblyName</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AssemblyName" uniqueID="AssemblyName():void">
				<signature>System.Reflection.AssemblyName.AssemblyName():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AssemblyName" uniqueID="AssemblyName(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Reflection.AssemblyName.AssemblyName(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AssemblyName" uniqueID="AssemblyName(string):void">
				<signature>System.Reflection.AssemblyName.AssemblyName(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone():object">
				<signature>System.Reflection.AssemblyName.Clone():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetObjectData" uniqueID="GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Reflection.AssemblyName.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetPublicKey" uniqueID="GetPublicKey():byte[]">
				<signature>System.Reflection.AssemblyName.GetPublicKey():byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetPublicKeyToken" uniqueID="GetPublicKeyToken():byte[]">
				<signature>System.Reflection.AssemblyName.GetPublicKeyToken():byte[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Init" uniqueID="Init(string;byte[];byte[];System.Version;System.Globalization.CultureInfo;System.Configuration.Assemblies.AssemblyHashAlgorithm;System.Configuration.Assemblies.AssemblyVersionCompatibility;string;System.Reflection.AssemblyNameFlags;System.Reflection.StrongNameKeyPair):void">
				<signature>System.Reflection.AssemblyName.Init(string;byte[];byte[];System.Version;System.Globalization.CultureInfo;System.Configuration.Assemblies.AssemblyHashAlgorithm;System.Configuration.Assemblies.AssemblyVersionCompatibility;string;System.Reflection.AssemblyNameFlags;System.Reflection.StrongNameKeyPair):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="OnDeserialization" uniqueID="OnDeserialization(object):void">
				<signature>System.Reflection.AssemblyName.OnDeserialization(object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetHashControl" uniqueID="SetHashControl(byte[];System.Configuration.Assemblies.AssemblyHashAlgorithm):void">
				<signature>System.Reflection.AssemblyName.SetHashControl(byte[];System.Configuration.Assemblies.AssemblyHashAlgorithm):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetPublicKey" uniqueID="SetPublicKey(byte[]):void">
				<signature>System.Reflection.AssemblyName.SetPublicKey(byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetPublicKeyToken" uniqueID="SetPublicKeyToken(byte[]):void">
				<signature>System.Reflection.AssemblyName.SetPublicKeyToken(byte[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._AssemblyName.GetIDsOfNames" uniqueID="System.Runtime.InteropServices._AssemblyName.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.AssemblyName.System.Runtime.InteropServices._AssemblyName.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._AssemblyName.GetTypeInfo" uniqueID="System.Runtime.InteropServices._AssemblyName.GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.AssemblyName.System.Runtime.InteropServices._AssemblyName.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._AssemblyName.GetTypeInfoCount" uniqueID="System.Runtime.InteropServices._AssemblyName.GetTypeInfoCount(unsigned int):void">
				<signature>System.Reflection.AssemblyName.System.Runtime.InteropServices._AssemblyName.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._AssemblyName.Invoke" uniqueID="System.Runtime.InteropServices._AssemblyName.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Reflection.AssemblyName.System.Runtime.InteropServices._AssemblyName.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Reflection.AssemblyName.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CodeBase" uniqueID="get_CodeBase():string">
				<signature>System.Reflection.AssemblyName.get_CodeBase():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CultureInfo" uniqueID="get_CultureInfo():System.Globalization.CultureInfo">
				<signature>System.Reflection.AssemblyName.get_CultureInfo():System.Globalization.CultureInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_EscapedCodeBase" uniqueID="get_EscapedCodeBase():string">
				<signature>System.Reflection.AssemblyName.get_EscapedCodeBase():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Flags" uniqueID="get_Flags():System.Reflection.AssemblyNameFlags">
				<signature>System.Reflection.AssemblyName.get_Flags():System.Reflection.AssemblyNameFlags</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FullName" uniqueID="get_FullName():string">
				<signature>System.Reflection.AssemblyName.get_FullName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_HashAlgorithm" uniqueID="get_HashAlgorithm():System.Configuration.Assemblies.AssemblyHashAlgorithm">
				<signature>System.Reflection.AssemblyName.get_HashAlgorithm():System.Configuration.Assemblies.AssemblyHashAlgorithm</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_KeyPair" uniqueID="get_KeyPair():System.Reflection.StrongNameKeyPair">
				<signature>System.Reflection.AssemblyName.get_KeyPair():System.Reflection.StrongNameKeyPair</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Reflection.AssemblyName.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ProcessorArchitecture" uniqueID="get_ProcessorArchitecture():System.Reflection.ProcessorArchitecture">
				<signature>System.Reflection.AssemblyName.get_ProcessorArchitecture():System.Reflection.ProcessorArchitecture</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Version" uniqueID="get_Version():System.Version">
				<signature>System.Reflection.AssemblyName.get_Version():System.Version</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_VersionCompatibility" uniqueID="get_VersionCompatibility():System.Configuration.Assemblies.AssemblyVersionCompatibility">
				<signature>System.Reflection.AssemblyName.get_VersionCompatibility():System.Configuration.Assemblies.AssemblyVersionCompatibility</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="nGetPublicKeyToken" uniqueID="nGetPublicKeyToken():byte[]">
				<signature>System.Reflection.AssemblyName.nGetPublicKeyToken():byte[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nInit" uniqueID="nInit():void">
				<signature>System.Reflection.AssemblyName.nInit():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nInit" uniqueID="nInit(System.Reflection.Assembly;bool;bool):int">
				<signature>System.Reflection.AssemblyName.nInit(System.Reflection.Assembly;bool;bool):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="nToString" uniqueID="nToString():string">
				<signature>System.Reflection.AssemblyName.nToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_CodeBase" uniqueID="set_CodeBase(string):void">
				<signature>System.Reflection.AssemblyName.set_CodeBase(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_CultureInfo" uniqueID="set_CultureInfo(System.Globalization.CultureInfo):void">
				<signature>System.Reflection.AssemblyName.set_CultureInfo(System.Globalization.CultureInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Flags" uniqueID="set_Flags(System.Reflection.AssemblyNameFlags):void">
				<signature>System.Reflection.AssemblyName.set_Flags(System.Reflection.AssemblyNameFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_HashAlgorithm" uniqueID="set_HashAlgorithm(System.Configuration.Assemblies.AssemblyHashAlgorithm):void">
				<signature>System.Reflection.AssemblyName.set_HashAlgorithm(System.Configuration.Assemblies.AssemblyHashAlgorithm):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_KeyPair" uniqueID="set_KeyPair(System.Reflection.StrongNameKeyPair):void">
				<signature>System.Reflection.AssemblyName.set_KeyPair(System.Reflection.StrongNameKeyPair):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Name" uniqueID="set_Name(string):void">
				<signature>System.Reflection.AssemblyName.set_Name(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ProcessorArchitecture" uniqueID="set_ProcessorArchitecture(System.Reflection.ProcessorArchitecture):void">
				<signature>System.Reflection.AssemblyName.set_ProcessorArchitecture(System.Reflection.ProcessorArchitecture):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Version" uniqueID="set_Version(System.Version):void">
				<signature>System.Reflection.AssemblyName.set_Version(System.Version):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_VersionCompatibility" uniqueID="set_VersionCompatibility(System.Configuration.Assemblies.AssemblyVersionCompatibility):void">
				<signature>System.Reflection.AssemblyName.set_VersionCompatibility(System.Configuration.Assemblies.AssemblyVersionCompatibility):void</signature>
			</method>
		</class>
		<class name="CerArrayList&lt;System.RuntimeType&gt;" uniqueID="System.Reflection.CerArrayList&lt;System.RuntimeType&gt;">
			<method accessibility="Protected" methodKind="Member" name="Add" uniqueID="Add(System.RuntimeType):void">
				<signature>System.Reflection.CerArrayList&lt;System.RuntimeType&gt;.Add(System.RuntimeType):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CerArrayList&lt;System.RuntimeType&gt;" uniqueID="CerArrayList&lt;System.RuntimeType&gt;(System.Collections.Generic.List&lt;System.RuntimeType&gt;):void">
				<signature>System.Reflection.CerArrayList&lt;System.RuntimeType&gt;.CerArrayList&lt;System.RuntimeType&gt;(System.Collections.Generic.List&lt;System.RuntimeType&gt;):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CerArrayList&lt;System.RuntimeType&gt;" uniqueID="CerArrayList&lt;System.RuntimeType&gt;(int):void">
				<signature>System.Reflection.CerArrayList&lt;System.RuntimeType&gt;.CerArrayList&lt;System.RuntimeType&gt;(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Preallocate" uniqueID="Preallocate(int):void">
				<signature>System.Reflection.CerArrayList&lt;System.RuntimeType&gt;.Preallocate(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Replace" uniqueID="Replace(int;System.RuntimeType):void">
				<signature>System.Reflection.CerArrayList&lt;System.RuntimeType&gt;.Replace(int;System.RuntimeType):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Reflection.CerArrayList&lt;System.RuntimeType&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.RuntimeType">
				<signature>System.Reflection.CerArrayList&lt;System.RuntimeType&gt;.get_Item(int):System.RuntimeType</signature>
			</method>
		</class>
		<class name="ConstArray" uniqueID="System.Reflection.ConstArray">
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):byte">
				<signature>System.Reflection.ConstArray.get_Item(int):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Length" uniqueID="get_Length():int">
				<signature>System.Reflection.ConstArray.get_Length():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Signature" uniqueID="get_Signature():native signed int">
				<signature>System.Reflection.ConstArray.get_Signature():native signed int</signature>
			</method>
		</class>
		<class name="MemberInfo" uniqueID="System.Reflection.MemberInfo">
			<method accessibility="Protected" methodKind="Member" name="CacheEquals" uniqueID="CacheEquals(object):bool">
				<signature>System.Reflection.MemberInfo.CacheEquals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.Reflection.MemberInfo.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.Reflection.MemberInfo.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.Reflection.MemberInfo.IsDefined(System.Type;bool):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MemberInfo" uniqueID="MemberInfo():void">
				<signature>System.Reflection.MemberInfo.MemberInfo():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="OnCacheClear" uniqueID="OnCacheClear(object;System.Reflection.Cache.ClearCacheEventArgs):void">
				<signature>System.Reflection.MemberInfo.OnCacheClear(object;System.Reflection.Cache.ClearCacheEventArgs):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MemberInfo.GetIDsOfNames" uniqueID="System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MemberInfo.GetType" uniqueID="System.Runtime.InteropServices._MemberInfo.GetType():System.Type">
				<signature>System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.GetType():System.Type</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MemberInfo.GetTypeInfo" uniqueID="System.Runtime.InteropServices._MemberInfo.GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount" uniqueID="System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(unsigned int):void">
				<signature>System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MemberInfo.Invoke" uniqueID="System.Runtime.InteropServices._MemberInfo.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Cache" uniqueID="get_Cache():System.Reflection.Cache.InternalCache">
				<signature>System.Reflection.MemberInfo.get_Cache():System.Reflection.Cache.InternalCache</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringType" uniqueID="get_DeclaringType():System.Type">
				<signature>System.Reflection.MemberInfo.get_DeclaringType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MemberType" uniqueID="get_MemberType():System.Reflection.MemberTypes">
				<signature>System.Reflection.MemberInfo.get_MemberType():System.Reflection.MemberTypes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MetadataToken" uniqueID="get_MetadataToken():int">
				<signature>System.Reflection.MemberInfo.get_MetadataToken():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_MetadataTokenInternal" uniqueID="get_MetadataTokenInternal():int">
				<signature>System.Reflection.MemberInfo.get_MetadataTokenInternal():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Module" uniqueID="get_Module():System.Reflection.Module">
				<signature>System.Reflection.MemberInfo.get_Module():System.Reflection.Module</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Reflection.MemberInfo.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReflectedType" uniqueID="get_ReflectedType():System.Type">
				<signature>System.Reflection.MemberInfo.get_ReflectedType():System.Type</signature>
			</method>
		</class>
		<class name="MetadataArgs" uniqueID="System.Reflection.MetadataArgs">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Reflection.MetadataArgs.&lt;cctor&gt;():void</signature>
			</method>
		</class>
		<class name="StrongNameKeyPair" uniqueID="System.Reflection.StrongNameKeyPair">
			<method accessibility="Private" methodKind="Member" name="GetKeyPair" uniqueID="GetKeyPair(object):bool">
				<signature>System.Reflection.StrongNameKeyPair.GetKeyPair(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StrongNameKeyPair" uniqueID="StrongNameKeyPair(System.IO.FileStream):void">
				<signature>System.Reflection.StrongNameKeyPair.StrongNameKeyPair(System.IO.FileStream):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="StrongNameKeyPair" uniqueID="StrongNameKeyPair(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Reflection.StrongNameKeyPair.StrongNameKeyPair(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StrongNameKeyPair" uniqueID="StrongNameKeyPair(byte[]):void">
				<signature>System.Reflection.StrongNameKeyPair.StrongNameKeyPair(byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StrongNameKeyPair" uniqueID="StrongNameKeyPair(string):void">
				<signature>System.Reflection.StrongNameKeyPair.StrongNameKeyPair(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization" uniqueID="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object):void">
				<signature>System.Reflection.StrongNameKeyPair.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.Serialization.ISerializable.GetObjectData" uniqueID="System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Reflection.StrongNameKeyPair.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PublicKey" uniqueID="get_PublicKey():byte[]">
				<signature>System.Reflection.StrongNameKeyPair.get_PublicKey():byte[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="nGetPublicKey" uniqueID="nGetPublicKey(bool;byte[];string):byte[]">
				<signature>System.Reflection.StrongNameKeyPair.nGetPublicKey(bool;byte[];string):byte[]</signature>
			</method>
		</class>
	</package>
	<package name="System.Runtime.Remoting.Activation">
		<class name="ActivationListener" uniqueID="System.Runtime.Remoting.Activation.ActivationListener">
			<method accessibility="Public" methodKind="Member" name="Activate" uniqueID="Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage):System.Runtime.Remoting.Activation.IConstructionReturnMessage">
				<signature>System.Runtime.Remoting.Activation.ActivationListener.Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage):System.Runtime.Remoting.Activation.IConstructionReturnMessage</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ActivationListener" uniqueID="ActivationListener():void">
				<signature>System.Runtime.Remoting.Activation.ActivationListener.ActivationListener():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InitializeLifetimeService" uniqueID="InitializeLifetimeService():object">
				<signature>System.Runtime.Remoting.Activation.ActivationListener.InitializeLifetimeService():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Level" uniqueID="get_Level():System.Runtime.Remoting.Activation.ActivatorLevel">
				<signature>System.Runtime.Remoting.Activation.ActivationListener.get_Level():System.Runtime.Remoting.Activation.ActivatorLevel</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_NextActivator" uniqueID="get_NextActivator():System.Runtime.Remoting.Activation.IActivator">
				<signature>System.Runtime.Remoting.Activation.ActivationListener.get_NextActivator():System.Runtime.Remoting.Activation.IActivator</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_NextActivator" uniqueID="set_NextActivator(System.Runtime.Remoting.Activation.IActivator):void">
				<signature>System.Runtime.Remoting.Activation.ActivationListener.set_NextActivator(System.Runtime.Remoting.Activation.IActivator):void</signature>
			</method>
		</class>
		<class name="IActivator" uniqueID="System.Runtime.Remoting.Activation.IActivator">
			<method accessibility="Public" methodKind="Member" name="Activate" uniqueID="Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage):System.Runtime.Remoting.Activation.IConstructionReturnMessage">
				<signature>System.Runtime.Remoting.Activation.IActivator.Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage):System.Runtime.Remoting.Activation.IConstructionReturnMessage</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Level" uniqueID="get_Level():System.Runtime.Remoting.Activation.ActivatorLevel">
				<signature>System.Runtime.Remoting.Activation.IActivator.get_Level():System.Runtime.Remoting.Activation.ActivatorLevel</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_NextActivator" uniqueID="get_NextActivator():System.Runtime.Remoting.Activation.IActivator">
				<signature>System.Runtime.Remoting.Activation.IActivator.get_NextActivator():System.Runtime.Remoting.Activation.IActivator</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_NextActivator" uniqueID="set_NextActivator(System.Runtime.Remoting.Activation.IActivator):void">
				<signature>System.Runtime.Remoting.Activation.IActivator.set_NextActivator(System.Runtime.Remoting.Activation.IActivator):void</signature>
			</method>
		</class>
		<class name="IConstructionCallMessage" uniqueID="System.Runtime.Remoting.Activation.IConstructionCallMessage">
			<method accessibility="Public" methodKind="Member" name="get_ActivationType" uniqueID="get_ActivationType():System.Type">
				<signature>System.Runtime.Remoting.Activation.IConstructionCallMessage.get_ActivationType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ActivationTypeName" uniqueID="get_ActivationTypeName():string">
				<signature>System.Runtime.Remoting.Activation.IConstructionCallMessage.get_ActivationTypeName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Activator" uniqueID="get_Activator():System.Runtime.Remoting.Activation.IActivator">
				<signature>System.Runtime.Remoting.Activation.IConstructionCallMessage.get_Activator():System.Runtime.Remoting.Activation.IActivator</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CallSiteActivationAttributes" uniqueID="get_CallSiteActivationAttributes():object[]">
				<signature>System.Runtime.Remoting.Activation.IConstructionCallMessage.get_CallSiteActivationAttributes():object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ContextProperties" uniqueID="get_ContextProperties():System.Collections.IList">
				<signature>System.Runtime.Remoting.Activation.IConstructionCallMessage.get_ContextProperties():System.Collections.IList</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Activator" uniqueID="set_Activator(System.Runtime.Remoting.Activation.IActivator):void">
				<signature>System.Runtime.Remoting.Activation.IConstructionCallMessage.set_Activator(System.Runtime.Remoting.Activation.IActivator):void</signature>
			</method>
		</class>
		<class name="LocalActivator" uniqueID="System.Runtime.Remoting.Activation.LocalActivator">
			<method accessibility="Protected" methodKind="Static" name="DoRemoteActivation" uniqueID="DoRemoteActivation(System.Runtime.Remoting.Activation.IConstructionCallMessage):System.Runtime.Remoting.Activation.IConstructionReturnMessage">
				<signature>System.Runtime.Remoting.Activation.LocalActivator.DoRemoteActivation(System.Runtime.Remoting.Activation.IConstructionCallMessage):System.Runtime.Remoting.Activation.IConstructionReturnMessage</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetMethodBase" uniqueID="GetMethodBase(System.Runtime.Remoting.Activation.IConstructionCallMessage):System.Reflection.MethodBase">
				<signature>System.Runtime.Remoting.Activation.LocalActivator.GetMethodBase(System.Runtime.Remoting.Activation.IConstructionCallMessage):System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Activate" uniqueID="Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage):System.Runtime.Remoting.Activation.IConstructionReturnMessage">
				<signature>System.Runtime.Remoting.Activation.LocalActivator.Activate(System.Runtime.Remoting.Activation.IConstructionCallMessage):System.Runtime.Remoting.Activation.IConstructionReturnMessage</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetPropertiesForNewContext" uniqueID="GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage):void">
				<signature>System.Runtime.Remoting.Activation.LocalActivator.GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsContextOK" uniqueID="IsContextOK(System.Runtime.Remoting.Contexts.Context;System.Runtime.Remoting.Activation.IConstructionCallMessage):bool">
				<signature>System.Runtime.Remoting.Activation.LocalActivator.IsContextOK(System.Runtime.Remoting.Contexts.Context;System.Runtime.Remoting.Activation.IConstructionCallMessage):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="LocalActivator" uniqueID="LocalActivator():void">
				<signature>System.Runtime.Remoting.Activation.LocalActivator.LocalActivator():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Level" uniqueID="get_Level():System.Runtime.Remoting.Activation.ActivatorLevel">
				<signature>System.Runtime.Remoting.Activation.LocalActivator.get_Level():System.Runtime.Remoting.Activation.ActivatorLevel</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_NextActivator" uniqueID="get_NextActivator():System.Runtime.Remoting.Activation.IActivator">
				<signature>System.Runtime.Remoting.Activation.LocalActivator.get_NextActivator():System.Runtime.Remoting.Activation.IActivator</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_NextActivator" uniqueID="set_NextActivator(System.Runtime.Remoting.Activation.IActivator):void">
				<signature>System.Runtime.Remoting.Activation.LocalActivator.set_NextActivator(System.Runtime.Remoting.Activation.IActivator):void</signature>
			</method>
		</class>
	</package>
	<package name="Microsoft.Win32.SafeHandles">
		<class name="SafeFindHandle" uniqueID="Microsoft.Win32.SafeHandles.SafeFindHandle">
			<method accessibility="Protected" methodKind="Member" name="ReleaseHandle" uniqueID="ReleaseHandle():bool">
				<signature>Microsoft.Win32.SafeHandles.SafeFindHandle.ReleaseHandle():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SafeFindHandle" uniqueID="SafeFindHandle():void">
				<signature>Microsoft.Win32.SafeHandles.SafeFindHandle.SafeFindHandle():void</signature>
			</method>
		</class>
		<class name="SafeLsaPolicyHandle" uniqueID="Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle">
			<method accessibility="Protected" methodKind="Static" name="get_InvalidHandle" uniqueID="get_InvalidHandle():Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle">
				<signature>Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle.get_InvalidHandle():Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ReleaseHandle" uniqueID="ReleaseHandle():bool">
				<signature>Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle.ReleaseHandle():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SafeLsaPolicyHandle" uniqueID="SafeLsaPolicyHandle():void">
				<signature>Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle.SafeLsaPolicyHandle():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SafeLsaPolicyHandle" uniqueID="SafeLsaPolicyHandle(native signed int):void">
				<signature>Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle.SafeLsaPolicyHandle(native signed int):void</signature>
			</method>
		</class>
		<class name="SafeFileHandle" uniqueID="Microsoft.Win32.SafeHandles.SafeFileHandle">
			<method accessibility="Protected" methodKind="Member" name="ReleaseHandle" uniqueID="ReleaseHandle():bool">
				<signature>Microsoft.Win32.SafeHandles.SafeFileHandle.ReleaseHandle():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SafeFileHandle" uniqueID="SafeFileHandle():void">
				<signature>Microsoft.Win32.SafeHandles.SafeFileHandle.SafeFileHandle():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SafeFileHandle" uniqueID="SafeFileHandle(native signed int;bool):void">
				<signature>Microsoft.Win32.SafeHandles.SafeFileHandle.SafeFileHandle(native signed int;bool):void</signature>
			</method>
		</class>
		<class name="SafeFileMappingHandle" uniqueID="Microsoft.Win32.SafeHandles.SafeFileMappingHandle">
			<method accessibility="Protected" methodKind="Member" name="ReleaseHandle" uniqueID="ReleaseHandle():bool">
				<signature>Microsoft.Win32.SafeHandles.SafeFileMappingHandle.ReleaseHandle():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SafeFileMappingHandle" uniqueID="SafeFileMappingHandle():void">
				<signature>Microsoft.Win32.SafeHandles.SafeFileMappingHandle.SafeFileMappingHandle():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SafeFileMappingHandle" uniqueID="SafeFileMappingHandle(native signed int;bool):void">
				<signature>Microsoft.Win32.SafeHandles.SafeFileMappingHandle.SafeFileMappingHandle(native signed int;bool):void</signature>
			</method>
		</class>
		<class name="SafeLsaLogonProcessHandle" uniqueID="Microsoft.Win32.SafeHandles.SafeLsaLogonProcessHandle">
			<method accessibility="Protected" methodKind="Static" name="get_InvalidHandle" uniqueID="get_InvalidHandle():Microsoft.Win32.SafeHandles.SafeLsaLogonProcessHandle">
				<signature>Microsoft.Win32.SafeHandles.SafeLsaLogonProcessHandle.get_InvalidHandle():Microsoft.Win32.SafeHandles.SafeLsaLogonProcessHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ReleaseHandle" uniqueID="ReleaseHandle():bool">
				<signature>Microsoft.Win32.SafeHandles.SafeLsaLogonProcessHandle.ReleaseHandle():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SafeLsaLogonProcessHandle" uniqueID="SafeLsaLogonProcessHandle():void">
				<signature>Microsoft.Win32.SafeHandles.SafeLsaLogonProcessHandle.SafeLsaLogonProcessHandle():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SafeLsaLogonProcessHandle" uniqueID="SafeLsaLogonProcessHandle(native signed int):void">
				<signature>Microsoft.Win32.SafeHandles.SafeLsaLogonProcessHandle.SafeLsaLogonProcessHandle(native signed int):void</signature>
			</method>
		</class>
		<class name="SafeLsaReturnBufferHandle" uniqueID="Microsoft.Win32.SafeHandles.SafeLsaReturnBufferHandle">
			<method accessibility="Protected" methodKind="Static" name="get_InvalidHandle" uniqueID="get_InvalidHandle():Microsoft.Win32.SafeHandles.SafeLsaReturnBufferHandle">
				<signature>Microsoft.Win32.SafeHandles.SafeLsaReturnBufferHandle.get_InvalidHandle():Microsoft.Win32.SafeHandles.SafeLsaReturnBufferHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ReleaseHandle" uniqueID="ReleaseHandle():bool">
				<signature>Microsoft.Win32.SafeHandles.SafeLsaReturnBufferHandle.ReleaseHandle():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SafeLsaReturnBufferHandle" uniqueID="SafeLsaReturnBufferHandle():void">
				<signature>Microsoft.Win32.SafeHandles.SafeLsaReturnBufferHandle.SafeLsaReturnBufferHandle():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SafeLsaReturnBufferHandle" uniqueID="SafeLsaReturnBufferHandle(native signed int):void">
				<signature>Microsoft.Win32.SafeHandles.SafeLsaReturnBufferHandle.SafeLsaReturnBufferHandle(native signed int):void</signature>
			</method>
		</class>
		<class name="SafeRegistryHandle" uniqueID="Microsoft.Win32.SafeHandles.SafeRegistryHandle">
			<method accessibility="Private" methodKind="Static" name="RegCloseKey" uniqueID="RegCloseKey(native signed int):int">
				<signature>Microsoft.Win32.SafeHandles.SafeRegistryHandle.RegCloseKey(native signed int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ReleaseHandle" uniqueID="ReleaseHandle():bool">
				<signature>Microsoft.Win32.SafeHandles.SafeRegistryHandle.ReleaseHandle():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SafeRegistryHandle" uniqueID="SafeRegistryHandle():void">
				<signature>Microsoft.Win32.SafeHandles.SafeRegistryHandle.SafeRegistryHandle():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SafeRegistryHandle" uniqueID="SafeRegistryHandle(native signed int;bool):void">
				<signature>Microsoft.Win32.SafeHandles.SafeRegistryHandle.SafeRegistryHandle(native signed int;bool):void</signature>
			</method>
		</class>
		<class name="SafeTokenHandle" uniqueID="Microsoft.Win32.SafeHandles.SafeTokenHandle">
			<method accessibility="Protected" methodKind="Static" name="get_InvalidHandle" uniqueID="get_InvalidHandle():Microsoft.Win32.SafeHandles.SafeTokenHandle">
				<signature>Microsoft.Win32.SafeHandles.SafeTokenHandle.get_InvalidHandle():Microsoft.Win32.SafeHandles.SafeTokenHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ReleaseHandle" uniqueID="ReleaseHandle():bool">
				<signature>Microsoft.Win32.SafeHandles.SafeTokenHandle.ReleaseHandle():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SafeTokenHandle" uniqueID="SafeTokenHandle():void">
				<signature>Microsoft.Win32.SafeHandles.SafeTokenHandle.SafeTokenHandle():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SafeTokenHandle" uniqueID="SafeTokenHandle(native signed int):void">
				<signature>Microsoft.Win32.SafeHandles.SafeTokenHandle.SafeTokenHandle(native signed int):void</signature>
			</method>
		</class>
		<class name="SafeWaitHandle" uniqueID="Microsoft.Win32.SafeHandles.SafeWaitHandle">
			<method accessibility="Protected" methodKind="Member" name="ReleaseHandle" uniqueID="ReleaseHandle():bool">
				<signature>Microsoft.Win32.SafeHandles.SafeWaitHandle.ReleaseHandle():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SafeWaitHandle" uniqueID="SafeWaitHandle():void">
				<signature>Microsoft.Win32.SafeHandles.SafeWaitHandle.SafeWaitHandle():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SafeWaitHandle" uniqueID="SafeWaitHandle(native signed int;bool):void">
				<signature>Microsoft.Win32.SafeHandles.SafeWaitHandle.SafeWaitHandle(native signed int;bool):void</signature>
			</method>
		</class>
		<class name="SafeHandleZeroOrMinusOneIsInvalid" uniqueID="Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid">
			<method accessibility="Protected" methodKind="Member" name="SafeHandleZeroOrMinusOneIsInvalid" uniqueID="SafeHandleZeroOrMinusOneIsInvalid(bool):void">
				<signature>Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.SafeHandleZeroOrMinusOneIsInvalid(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsInvalid" uniqueID="get_IsInvalid():bool">
				<signature>Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.get_IsInvalid():bool</signature>
			</method>
		</class>
		<class name="SafeLocalAllocHandle" uniqueID="Microsoft.Win32.SafeHandles.SafeLocalAllocHandle">
			<method accessibility="Protected" methodKind="Static" name="get_InvalidHandle" uniqueID="get_InvalidHandle():Microsoft.Win32.SafeHandles.SafeLocalAllocHandle">
				<signature>Microsoft.Win32.SafeHandles.SafeLocalAllocHandle.get_InvalidHandle():Microsoft.Win32.SafeHandles.SafeLocalAllocHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ReleaseHandle" uniqueID="ReleaseHandle():bool">
				<signature>Microsoft.Win32.SafeHandles.SafeLocalAllocHandle.ReleaseHandle():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SafeLocalAllocHandle" uniqueID="SafeLocalAllocHandle():void">
				<signature>Microsoft.Win32.SafeHandles.SafeLocalAllocHandle.SafeLocalAllocHandle():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SafeLocalAllocHandle" uniqueID="SafeLocalAllocHandle(native signed int):void">
				<signature>Microsoft.Win32.SafeHandles.SafeLocalAllocHandle.SafeLocalAllocHandle(native signed int):void</signature>
			</method>
		</class>
		<class name="SafeLsaMemoryHandle" uniqueID="Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle">
			<method accessibility="Protected" methodKind="Static" name="get_InvalidHandle" uniqueID="get_InvalidHandle():Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle">
				<signature>Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle.get_InvalidHandle():Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ReleaseHandle" uniqueID="ReleaseHandle():bool">
				<signature>Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle.ReleaseHandle():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SafeLsaMemoryHandle" uniqueID="SafeLsaMemoryHandle():void">
				<signature>Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle.SafeLsaMemoryHandle():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SafeLsaMemoryHandle" uniqueID="SafeLsaMemoryHandle(native signed int):void">
				<signature>Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle.SafeLsaMemoryHandle(native signed int):void</signature>
			</method>
		</class>
	</package>
	<package name="System.Runtime.Remoting.Channels">
		<class name="CrossAppDomainChannel" uniqueID="System.Runtime.Remoting.Channels.CrossAppDomainChannel">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Runtime.Remoting.Channels.CrossAppDomainChannel.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="RegisterChannel" uniqueID="RegisterChannel():void">
				<signature>System.Runtime.Remoting.Channels.CrossAppDomainChannel.RegisterChannel():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_AppDomainChannel" uniqueID="get_AppDomainChannel():System.Runtime.Remoting.Channels.CrossAppDomainChannel">
				<signature>System.Runtime.Remoting.Channels.CrossAppDomainChannel.get_AppDomainChannel():System.Runtime.Remoting.Channels.CrossAppDomainChannel</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="get_gAppDomainChannel" uniqueID="get_gAppDomainChannel():System.Runtime.Remoting.Channels.CrossAppDomainChannel">
				<signature>System.Runtime.Remoting.Channels.CrossAppDomainChannel.get_gAppDomainChannel():System.Runtime.Remoting.Channels.CrossAppDomainChannel</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="set_gAppDomainChannel" uniqueID="set_gAppDomainChannel(System.Runtime.Remoting.Channels.CrossAppDomainChannel):void">
				<signature>System.Runtime.Remoting.Channels.CrossAppDomainChannel.set_gAppDomainChannel(System.Runtime.Remoting.Channels.CrossAppDomainChannel):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateMessageSink" uniqueID="CreateMessageSink(string;object;string):System.Runtime.Remoting.Messaging.IMessageSink">
				<signature>System.Runtime.Remoting.Channels.CrossAppDomainChannel.CreateMessageSink(string;object;string):System.Runtime.Remoting.Messaging.IMessageSink</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CrossAppDomainChannel" uniqueID="CrossAppDomainChannel():void">
				<signature>System.Runtime.Remoting.Channels.CrossAppDomainChannel.CrossAppDomainChannel():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetUrlsForUri" uniqueID="GetUrlsForUri(string):string[]">
				<signature>System.Runtime.Remoting.Channels.CrossAppDomainChannel.GetUrlsForUri(string):string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Parse" uniqueID="Parse(string;string):string">
				<signature>System.Runtime.Remoting.Channels.CrossAppDomainChannel.Parse(string;string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StartListening" uniqueID="StartListening(object):void">
				<signature>System.Runtime.Remoting.Channels.CrossAppDomainChannel.StartListening(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StopListening" uniqueID="StopListening(object):void">
				<signature>System.Runtime.Remoting.Channels.CrossAppDomainChannel.StopListening(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ChannelData" uniqueID="get_ChannelData():object">
				<signature>System.Runtime.Remoting.Channels.CrossAppDomainChannel.get_ChannelData():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ChannelName" uniqueID="get_ChannelName():string">
				<signature>System.Runtime.Remoting.Channels.CrossAppDomainChannel.get_ChannelName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ChannelPriority" uniqueID="get_ChannelPriority():int">
				<signature>System.Runtime.Remoting.Channels.CrossAppDomainChannel.get_ChannelPriority():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ChannelURI" uniqueID="get_ChannelURI():string">
				<signature>System.Runtime.Remoting.Channels.CrossAppDomainChannel.get_ChannelURI():string</signature>
			</method>
		</class>
		<class name="IChannelSender" uniqueID="System.Runtime.Remoting.Channels.IChannelSender">
			<method accessibility="Public" methodKind="Member" name="CreateMessageSink" uniqueID="CreateMessageSink(string;object;string):System.Runtime.Remoting.Messaging.IMessageSink">
				<signature>System.Runtime.Remoting.Channels.IChannelSender.CreateMessageSink(string;object;string):System.Runtime.Remoting.Messaging.IMessageSink</signature>
			</method>
		</class>
		<class name="ChannelServicesData" uniqueID="System.Runtime.Remoting.Channels.ChannelServicesData">
			<method accessibility="Public" methodKind="Member" name="ChannelServicesData" uniqueID="ChannelServicesData():void">
				<signature>System.Runtime.Remoting.Channels.ChannelServicesData.ChannelServicesData():void</signature>
			</method>
		</class>
		<class name="CrossAppDomainData" uniqueID="System.Runtime.Remoting.Channels.CrossAppDomainData">
			<method accessibility="Protected" methodKind="Member" name="CrossAppDomainData" uniqueID="CrossAppDomainData(native signed int;int;string):void">
				<signature>System.Runtime.Remoting.Channels.CrossAppDomainData.CrossAppDomainData(native signed int;int;string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsFromThisAppDomain" uniqueID="IsFromThisAppDomain():bool">
				<signature>System.Runtime.Remoting.Channels.CrossAppDomainData.IsFromThisAppDomain():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsFromThisProcess" uniqueID="IsFromThisProcess():bool">
				<signature>System.Runtime.Remoting.Channels.CrossAppDomainData.IsFromThisProcess():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ContextID" uniqueID="get_ContextID():native signed int">
				<signature>System.Runtime.Remoting.Channels.CrossAppDomainData.get_ContextID():native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_DomainID" uniqueID="get_DomainID():int">
				<signature>System.Runtime.Remoting.Channels.CrossAppDomainData.get_DomainID():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ProcessGuid" uniqueID="get_ProcessGuid():string">
				<signature>System.Runtime.Remoting.Channels.CrossAppDomainData.get_ProcessGuid():string</signature>
			</method>
		</class>
		<class name="CrossContextChannel" uniqueID="System.Runtime.Remoting.Channels.CrossContextChannel">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Runtime.Remoting.Channels.CrossContextChannel.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="AsyncProcessMessageCallback" uniqueID="AsyncProcessMessageCallback(object[]):object">
				<signature>System.Runtime.Remoting.Channels.CrossContextChannel.AsyncProcessMessageCallback(object[]):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="DoAsyncDispatch" uniqueID="DoAsyncDispatch(System.Runtime.Remoting.Messaging.IMessage;System.Runtime.Remoting.Messaging.IMessageSink):System.Runtime.Remoting.Messaging.IMessageCtrl">
				<signature>System.Runtime.Remoting.Channels.CrossContextChannel.DoAsyncDispatch(System.Runtime.Remoting.Messaging.IMessage;System.Runtime.Remoting.Messaging.IMessageSink):System.Runtime.Remoting.Messaging.IMessageCtrl</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="DoAsyncDispatchCallback" uniqueID="DoAsyncDispatchCallback(object[]):object">
				<signature>System.Runtime.Remoting.Channels.CrossContextChannel.DoAsyncDispatchCallback(object[]):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SyncProcessMessageCallback" uniqueID="SyncProcessMessageCallback(object[]):object">
				<signature>System.Runtime.Remoting.Channels.CrossContextChannel.SyncProcessMessageCallback(object[]):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_MessageSink" uniqueID="get_MessageSink():System.Runtime.Remoting.Messaging.IMessageSink">
				<signature>System.Runtime.Remoting.Channels.CrossContextChannel.get_MessageSink():System.Runtime.Remoting.Messaging.IMessageSink</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="get_messageSink" uniqueID="get_messageSink():System.Runtime.Remoting.Channels.CrossContextChannel">
				<signature>System.Runtime.Remoting.Channels.CrossContextChannel.get_messageSink():System.Runtime.Remoting.Channels.CrossContextChannel</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="set_messageSink" uniqueID="set_messageSink(System.Runtime.Remoting.Channels.CrossContextChannel):void">
				<signature>System.Runtime.Remoting.Channels.CrossContextChannel.set_messageSink(System.Runtime.Remoting.Channels.CrossContextChannel):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AsyncProcessMessage" uniqueID="AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage;System.Runtime.Remoting.Messaging.IMessageSink):System.Runtime.Remoting.Messaging.IMessageCtrl">
				<signature>System.Runtime.Remoting.Channels.CrossContextChannel.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage;System.Runtime.Remoting.Messaging.IMessageSink):System.Runtime.Remoting.Messaging.IMessageCtrl</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CrossContextChannel" uniqueID="CrossContextChannel():void">
				<signature>System.Runtime.Remoting.Channels.CrossContextChannel.CrossContextChannel():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SyncProcessMessage" uniqueID="SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage):System.Runtime.Remoting.Messaging.IMessage">
				<signature>System.Runtime.Remoting.Channels.CrossContextChannel.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage):System.Runtime.Remoting.Messaging.IMessage</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_NextSink" uniqueID="get_NextSink():System.Runtime.Remoting.Messaging.IMessageSink">
				<signature>System.Runtime.Remoting.Channels.CrossContextChannel.get_NextSink():System.Runtime.Remoting.Messaging.IMessageSink</signature>
			</method>
		</class>
		<class name="IChannel" uniqueID="System.Runtime.Remoting.Channels.IChannel">
			<method accessibility="Public" methodKind="Member" name="Parse" uniqueID="Parse(string;string):string">
				<signature>System.Runtime.Remoting.Channels.IChannel.Parse(string;string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ChannelName" uniqueID="get_ChannelName():string">
				<signature>System.Runtime.Remoting.Channels.IChannel.get_ChannelName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ChannelPriority" uniqueID="get_ChannelPriority():int">
				<signature>System.Runtime.Remoting.Channels.IChannel.get_ChannelPriority():int</signature>
			</method>
		</class>
		<class name="IChannelReceiver" uniqueID="System.Runtime.Remoting.Channels.IChannelReceiver">
			<method accessibility="Public" methodKind="Member" name="GetUrlsForUri" uniqueID="GetUrlsForUri(string):string[]">
				<signature>System.Runtime.Remoting.Channels.IChannelReceiver.GetUrlsForUri(string):string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StartListening" uniqueID="StartListening(object):void">
				<signature>System.Runtime.Remoting.Channels.IChannelReceiver.StartListening(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StopListening" uniqueID="StopListening(object):void">
				<signature>System.Runtime.Remoting.Channels.IChannelReceiver.StopListening(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ChannelData" uniqueID="get_ChannelData():object">
				<signature>System.Runtime.Remoting.Channels.IChannelReceiver.get_ChannelData():object</signature>
			</method>
		</class>
	</package>
	<package name="System.Runtime.Remoting.Metadata">
		<class name="RemotingCachedData" uniqueID="System.Runtime.Remoting.Metadata.RemotingCachedData">
			<method accessibility="Protected" methodKind="Member" name="GetSoapAttribute" uniqueID="GetSoapAttribute():System.Runtime.Remoting.Metadata.SoapAttribute">
				<signature>System.Runtime.Remoting.Metadata.RemotingCachedData.GetSoapAttribute():System.Runtime.Remoting.Metadata.SoapAttribute</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RemotingCachedData" uniqueID="RemotingCachedData(object):void">
				<signature>System.Runtime.Remoting.Metadata.RemotingCachedData.RemotingCachedData(object):void</signature>
			</method>
		</class>
		<class name="RemotingMethodCachedData" uniqueID="System.Runtime.Remoting.Metadata.RemotingMethodCachedData">
			<method accessibility="Private" methodKind="Member" name="GetArgMaps" uniqueID="GetArgMaps():void">
				<signature>System.Runtime.Remoting.Metadata.RemotingMethodCachedData.GetArgMaps():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsOneWayMethod" uniqueID="IsOneWayMethod():bool">
				<signature>System.Runtime.Remoting.Metadata.RemotingMethodCachedData.IsOneWayMethod():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsOverloaded" uniqueID="IsOverloaded():bool">
				<signature>System.Runtime.Remoting.Metadata.RemotingMethodCachedData.IsOverloaded():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RemotingMethodCachedData" uniqueID="RemotingMethodCachedData(object):void">
				<signature>System.Runtime.Remoting.Metadata.RemotingMethodCachedData.RemotingMethodCachedData(object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="UpdateNames" uniqueID="UpdateNames():void">
				<signature>System.Runtime.Remoting.Metadata.RemotingMethodCachedData.UpdateNames():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_MarshalRequestArgMap" uniqueID="get_MarshalRequestArgMap():int[]">
				<signature>System.Runtime.Remoting.Metadata.RemotingMethodCachedData.get_MarshalRequestArgMap():int[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_MarshalResponseArgMap" uniqueID="get_MarshalResponseArgMap():int[]">
				<signature>System.Runtime.Remoting.Metadata.RemotingMethodCachedData.get_MarshalResponseArgMap():int[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_MethodName" uniqueID="get_MethodName():string">
				<signature>System.Runtime.Remoting.Metadata.RemotingMethodCachedData.get_MethodName():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_NonRefOutArgMap" uniqueID="get_NonRefOutArgMap():int[]">
				<signature>System.Runtime.Remoting.Metadata.RemotingMethodCachedData.get_NonRefOutArgMap():int[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_OutOnlyArgMap" uniqueID="get_OutOnlyArgMap():int[]">
				<signature>System.Runtime.Remoting.Metadata.RemotingMethodCachedData.get_OutOnlyArgMap():int[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_OutRefArgMap" uniqueID="get_OutRefArgMap():int[]">
				<signature>System.Runtime.Remoting.Metadata.RemotingMethodCachedData.get_OutRefArgMap():int[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Parameters" uniqueID="get_Parameters():System.Reflection.ParameterInfo[]">
				<signature>System.Runtime.Remoting.Metadata.RemotingMethodCachedData.get_Parameters():System.Reflection.ParameterInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ReturnType" uniqueID="get_ReturnType():System.Type">
				<signature>System.Runtime.Remoting.Metadata.RemotingMethodCachedData.get_ReturnType():System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_TypeAndAssemblyName" uniqueID="get_TypeAndAssemblyName():string">
				<signature>System.Runtime.Remoting.Metadata.RemotingMethodCachedData.get_TypeAndAssemblyName():string</signature>
			</method>
		</class>
		<class name="SoapAttribute" uniqueID="System.Runtime.Remoting.Metadata.SoapAttribute">
			<method accessibility="Protected" methodKind="Member" name="SetReflectInfo" uniqueID="SetReflectInfo(object):void">
				<signature>System.Runtime.Remoting.Metadata.SoapAttribute.SetReflectInfo(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SoapAttribute" uniqueID="SoapAttribute():void">
				<signature>System.Runtime.Remoting.Metadata.SoapAttribute.SoapAttribute():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Embedded" uniqueID="get_Embedded():bool">
				<signature>System.Runtime.Remoting.Metadata.SoapAttribute.get_Embedded():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_UseAttribute" uniqueID="get_UseAttribute():bool">
				<signature>System.Runtime.Remoting.Metadata.SoapAttribute.get_UseAttribute():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_XmlNamespace" uniqueID="get_XmlNamespace():string">
				<signature>System.Runtime.Remoting.Metadata.SoapAttribute.get_XmlNamespace():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Embedded" uniqueID="set_Embedded(bool):void">
				<signature>System.Runtime.Remoting.Metadata.SoapAttribute.set_Embedded(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_UseAttribute" uniqueID="set_UseAttribute(bool):void">
				<signature>System.Runtime.Remoting.Metadata.SoapAttribute.set_UseAttribute(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_XmlNamespace" uniqueID="set_XmlNamespace(string):void">
				<signature>System.Runtime.Remoting.Metadata.SoapAttribute.set_XmlNamespace(string):void</signature>
			</method>
		</class>
	</package>
	<package name="System.Diagnostics.SymbolStore">
		<class name="ISymbolDocumentWriter" uniqueID="System.Diagnostics.SymbolStore.ISymbolDocumentWriter">
			<method accessibility="Public" methodKind="Member" name="SetCheckSum" uniqueID="SetCheckSum(System.Guid;byte[]):void">
				<signature>System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetCheckSum(System.Guid;byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetSource" uniqueID="SetSource(byte[]):void">
				<signature>System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetSource(byte[]):void</signature>
			</method>
		</class>
		<class name="ISymbolWriter" uniqueID="System.Diagnostics.SymbolStore.ISymbolWriter">
			<method accessibility="Public" methodKind="Member" name="Close" uniqueID="Close():void">
				<signature>System.Diagnostics.SymbolStore.ISymbolWriter.Close():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CloseMethod" uniqueID="CloseMethod():void">
				<signature>System.Diagnostics.SymbolStore.ISymbolWriter.CloseMethod():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CloseNamespace" uniqueID="CloseNamespace():void">
				<signature>System.Diagnostics.SymbolStore.ISymbolWriter.CloseNamespace():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CloseScope" uniqueID="CloseScope(int):void">
				<signature>System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineDocument" uniqueID="DefineDocument(string;System.Guid;System.Guid;System.Guid):System.Diagnostics.SymbolStore.ISymbolDocumentWriter">
				<signature>System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(string;System.Guid;System.Guid;System.Guid):System.Diagnostics.SymbolStore.ISymbolDocumentWriter</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineField" uniqueID="DefineField(System.Diagnostics.SymbolStore.SymbolToken;string;System.Reflection.FieldAttributes;byte[];System.Diagnostics.SymbolStore.SymAddressKind;int;int;int):void">
				<signature>System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken;string;System.Reflection.FieldAttributes;byte[];System.Diagnostics.SymbolStore.SymAddressKind;int;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineGlobalVariable" uniqueID="DefineGlobalVariable(string;System.Reflection.FieldAttributes;byte[];System.Diagnostics.SymbolStore.SymAddressKind;int;int;int):void">
				<signature>System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(string;System.Reflection.FieldAttributes;byte[];System.Diagnostics.SymbolStore.SymAddressKind;int;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineLocalVariable" uniqueID="DefineLocalVariable(string;System.Reflection.FieldAttributes;byte[];System.Diagnostics.SymbolStore.SymAddressKind;int;int;int;int;int):void">
				<signature>System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(string;System.Reflection.FieldAttributes;byte[];System.Diagnostics.SymbolStore.SymAddressKind;int;int;int;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineParameter" uniqueID="DefineParameter(string;System.Reflection.ParameterAttributes;int;System.Diagnostics.SymbolStore.SymAddressKind;int;int;int):void">
				<signature>System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(string;System.Reflection.ParameterAttributes;int;System.Diagnostics.SymbolStore.SymAddressKind;int;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineSequencePoints" uniqueID="DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter;int[];int[];int[];int[];int[]):void">
				<signature>System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter;int[];int[];int[];int[];int[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Initialize" uniqueID="Initialize(native signed int;string;bool):void">
				<signature>System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(native signed int;string;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="OpenMethod" uniqueID="OpenMethod(System.Diagnostics.SymbolStore.SymbolToken):void">
				<signature>System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="OpenNamespace" uniqueID="OpenNamespace(string):void">
				<signature>System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="OpenScope" uniqueID="OpenScope(int):int">
				<signature>System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetMethodSourceRange" uniqueID="SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter;int;int;System.Diagnostics.SymbolStore.ISymbolDocumentWriter;int;int):void">
				<signature>System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter;int;int;System.Diagnostics.SymbolStore.ISymbolDocumentWriter;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetScopeRange" uniqueID="SetScopeRange(int;int;int):void">
				<signature>System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(int;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetSymAttribute" uniqueID="SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken;string;byte[]):void">
				<signature>System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken;string;byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetUnderlyingWriter" uniqueID="SetUnderlyingWriter(native signed int):void">
				<signature>System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetUserEntryPoint" uniqueID="SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken):void">
				<signature>System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="UsingNamespace" uniqueID="UsingNamespace(string):void">
				<signature>System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(string):void</signature>
			</method>
		</class>
		<class name="SymbolToken" uniqueID="System.Diagnostics.SymbolStore.SymbolToken">
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.Diagnostics.SymbolStore.SymbolToken;System.Diagnostics.SymbolStore.SymbolToken):bool">
				<signature>System.Diagnostics.SymbolStore.SymbolToken.op_Equality(System.Diagnostics.SymbolStore.SymbolToken;System.Diagnostics.SymbolStore.SymbolToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.Diagnostics.SymbolStore.SymbolToken;System.Diagnostics.SymbolStore.SymbolToken):bool">
				<signature>System.Diagnostics.SymbolStore.SymbolToken.op_Inequality(System.Diagnostics.SymbolStore.SymbolToken;System.Diagnostics.SymbolStore.SymbolToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.Diagnostics.SymbolStore.SymbolToken):bool">
				<signature>System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Diagnostics.SymbolStore.SymbolToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Diagnostics.SymbolStore.SymbolToken.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Diagnostics.SymbolStore.SymbolToken.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetToken" uniqueID="GetToken():int">
				<signature>System.Diagnostics.SymbolStore.SymbolToken.GetToken():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SymbolToken" uniqueID="SymbolToken(int):void">
				<signature>System.Diagnostics.SymbolStore.SymbolToken.SymbolToken(int):void</signature>
			</method>
		</class>
	</package>
	<package name="System.Runtime.InteropServices">
		<class name="SafeHandle" uniqueID="System.Runtime.InteropServices.SafeHandle">
			<method accessibility="Public" methodKind="Member" name="Close" uniqueID="Close():void">
				<signature>System.Runtime.InteropServices.SafeHandle.Close():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DangerousAddRef" uniqueID="DangerousAddRef(bool):void">
				<signature>System.Runtime.InteropServices.SafeHandle.DangerousAddRef(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DangerousGetHandle" uniqueID="DangerousGetHandle():native signed int">
				<signature>System.Runtime.InteropServices.SafeHandle.DangerousGetHandle():native signed int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DangerousRelease" uniqueID="DangerousRelease():void">
				<signature>System.Runtime.InteropServices.SafeHandle.DangerousRelease():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Dispose" uniqueID="Dispose():void">
				<signature>System.Runtime.InteropServices.SafeHandle.Dispose():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Dispose" uniqueID="Dispose(bool):void">
				<signature>System.Runtime.InteropServices.SafeHandle.Dispose(bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Finalize" uniqueID="Finalize():void">
				<signature>System.Runtime.InteropServices.SafeHandle.Finalize():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="InternalDispose" uniqueID="InternalDispose():void">
				<signature>System.Runtime.InteropServices.SafeHandle.InternalDispose():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="InternalFinalize" uniqueID="InternalFinalize():void">
				<signature>System.Runtime.InteropServices.SafeHandle.InternalFinalize():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ReleaseHandle" uniqueID="ReleaseHandle():bool">
				<signature>System.Runtime.InteropServices.SafeHandle.ReleaseHandle():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SafeHandle" uniqueID="SafeHandle(native signed int;bool):void">
				<signature>System.Runtime.InteropServices.SafeHandle.SafeHandle(native signed int;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetHandle" uniqueID="SetHandle(native signed int):void">
				<signature>System.Runtime.InteropServices.SafeHandle.SetHandle(native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetHandleAsInvalid" uniqueID="SetHandleAsInvalid():void">
				<signature>System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsClosed" uniqueID="get_IsClosed():bool">
				<signature>System.Runtime.InteropServices.SafeHandle.get_IsClosed():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsInvalid" uniqueID="get_IsInvalid():bool">
				<signature>System.Runtime.InteropServices.SafeHandle.get_IsInvalid():bool</signature>
			</method>
		</class>
		<class name="_Module" uniqueID="System.Runtime.InteropServices._Module">
			<method accessibility="Public" methodKind="Member" name="GetIDsOfNames" uniqueID="GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._Module.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfo" uniqueID="GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._Module.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfoCount" uniqueID="GetTypeInfoCount(unsigned int):void">
				<signature>System.Runtime.InteropServices._Module.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Runtime.InteropServices._Module.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
		</class>
		<class name="_ModuleBuilder" uniqueID="System.Runtime.InteropServices._ModuleBuilder">
			<method accessibility="Public" methodKind="Member" name="GetIDsOfNames" uniqueID="GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._ModuleBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfo" uniqueID="GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._ModuleBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfoCount" uniqueID="GetTypeInfoCount(unsigned int):void">
				<signature>System.Runtime.InteropServices._ModuleBuilder.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Runtime.InteropServices._ModuleBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
		</class>
		<class name="_Type" uniqueID="System.Runtime.InteropServices._Type">
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.Type):bool">
				<signature>System.Runtime.InteropServices._Type.Equals(System.Type):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Runtime.InteropServices._Type.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindInterfaces" uniqueID="FindInterfaces(System.Reflection.TypeFilter;object):System.Type[]">
				<signature>System.Runtime.InteropServices._Type.FindInterfaces(System.Reflection.TypeFilter;object):System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindMembers" uniqueID="FindMembers(System.Reflection.MemberTypes;System.Reflection.BindingFlags;System.Reflection.MemberFilter;object):System.Reflection.MemberInfo[]">
				<signature>System.Runtime.InteropServices._Type.FindMembers(System.Reflection.MemberTypes;System.Reflection.BindingFlags;System.Reflection.MemberFilter;object):System.Reflection.MemberInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetArrayRank" uniqueID="GetArrayRank():int">
				<signature>System.Runtime.InteropServices._Type.GetArrayRank():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetConstructor" uniqueID="GetConstructor(System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.ConstructorInfo">
				<signature>System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.ConstructorInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetConstructor" uniqueID="GetConstructor(System.Reflection.BindingFlags;System.Reflection.Binder;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.ConstructorInfo">
				<signature>System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags;System.Reflection.Binder;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.ConstructorInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetConstructor" uniqueID="GetConstructor(System.Type[]):System.Reflection.ConstructorInfo">
				<signature>System.Runtime.InteropServices._Type.GetConstructor(System.Type[]):System.Reflection.ConstructorInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetConstructors" uniqueID="GetConstructors():System.Reflection.ConstructorInfo[]">
				<signature>System.Runtime.InteropServices._Type.GetConstructors():System.Reflection.ConstructorInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetConstructors" uniqueID="GetConstructors(System.Reflection.BindingFlags):System.Reflection.ConstructorInfo[]">
				<signature>System.Runtime.InteropServices._Type.GetConstructors(System.Reflection.BindingFlags):System.Reflection.ConstructorInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.Runtime.InteropServices._Type.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.Runtime.InteropServices._Type.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetDefaultMembers" uniqueID="GetDefaultMembers():System.Reflection.MemberInfo[]">
				<signature>System.Runtime.InteropServices._Type.GetDefaultMembers():System.Reflection.MemberInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetElementType" uniqueID="GetElementType():System.Type">
				<signature>System.Runtime.InteropServices._Type.GetElementType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEvent" uniqueID="GetEvent(string):System.Reflection.EventInfo">
				<signature>System.Runtime.InteropServices._Type.GetEvent(string):System.Reflection.EventInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEvent" uniqueID="GetEvent(string;System.Reflection.BindingFlags):System.Reflection.EventInfo">
				<signature>System.Runtime.InteropServices._Type.GetEvent(string;System.Reflection.BindingFlags):System.Reflection.EventInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEvents" uniqueID="GetEvents():System.Reflection.EventInfo[]">
				<signature>System.Runtime.InteropServices._Type.GetEvents():System.Reflection.EventInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEvents" uniqueID="GetEvents(System.Reflection.BindingFlags):System.Reflection.EventInfo[]">
				<signature>System.Runtime.InteropServices._Type.GetEvents(System.Reflection.BindingFlags):System.Reflection.EventInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetField" uniqueID="GetField(string):System.Reflection.FieldInfo">
				<signature>System.Runtime.InteropServices._Type.GetField(string):System.Reflection.FieldInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetField" uniqueID="GetField(string;System.Reflection.BindingFlags):System.Reflection.FieldInfo">
				<signature>System.Runtime.InteropServices._Type.GetField(string;System.Reflection.BindingFlags):System.Reflection.FieldInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFields" uniqueID="GetFields():System.Reflection.FieldInfo[]">
				<signature>System.Runtime.InteropServices._Type.GetFields():System.Reflection.FieldInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFields" uniqueID="GetFields(System.Reflection.BindingFlags):System.Reflection.FieldInfo[]">
				<signature>System.Runtime.InteropServices._Type.GetFields(System.Reflection.BindingFlags):System.Reflection.FieldInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Runtime.InteropServices._Type.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetIDsOfNames" uniqueID="GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._Type.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetInterface" uniqueID="GetInterface(string):System.Type">
				<signature>System.Runtime.InteropServices._Type.GetInterface(string):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetInterface" uniqueID="GetInterface(string;bool):System.Type">
				<signature>System.Runtime.InteropServices._Type.GetInterface(string;bool):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetInterfaceMap" uniqueID="GetInterfaceMap(System.Type):System.Reflection.InterfaceMapping">
				<signature>System.Runtime.InteropServices._Type.GetInterfaceMap(System.Type):System.Reflection.InterfaceMapping</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetInterfaces" uniqueID="GetInterfaces():System.Type[]">
				<signature>System.Runtime.InteropServices._Type.GetInterfaces():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMember" uniqueID="GetMember(string):System.Reflection.MemberInfo[]">
				<signature>System.Runtime.InteropServices._Type.GetMember(string):System.Reflection.MemberInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMember" uniqueID="GetMember(string;System.Reflection.BindingFlags):System.Reflection.MemberInfo[]">
				<signature>System.Runtime.InteropServices._Type.GetMember(string;System.Reflection.BindingFlags):System.Reflection.MemberInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMember" uniqueID="GetMember(string;System.Reflection.MemberTypes;System.Reflection.BindingFlags):System.Reflection.MemberInfo[]">
				<signature>System.Runtime.InteropServices._Type.GetMember(string;System.Reflection.MemberTypes;System.Reflection.BindingFlags):System.Reflection.MemberInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMembers" uniqueID="GetMembers():System.Reflection.MemberInfo[]">
				<signature>System.Runtime.InteropServices._Type.GetMembers():System.Reflection.MemberInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMembers" uniqueID="GetMembers(System.Reflection.BindingFlags):System.Reflection.MemberInfo[]">
				<signature>System.Runtime.InteropServices._Type.GetMembers(System.Reflection.BindingFlags):System.Reflection.MemberInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethod" uniqueID="GetMethod(string):System.Reflection.MethodInfo">
				<signature>System.Runtime.InteropServices._Type.GetMethod(string):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethod" uniqueID="GetMethod(string;System.Reflection.BindingFlags):System.Reflection.MethodInfo">
				<signature>System.Runtime.InteropServices._Type.GetMethod(string;System.Reflection.BindingFlags):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethod" uniqueID="GetMethod(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo">
				<signature>System.Runtime.InteropServices._Type.GetMethod(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethod" uniqueID="GetMethod(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo">
				<signature>System.Runtime.InteropServices._Type.GetMethod(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethod" uniqueID="GetMethod(string;System.Type[]):System.Reflection.MethodInfo">
				<signature>System.Runtime.InteropServices._Type.GetMethod(string;System.Type[]):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethod" uniqueID="GetMethod(string;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo">
				<signature>System.Runtime.InteropServices._Type.GetMethod(string;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethods" uniqueID="GetMethods():System.Reflection.MethodInfo[]">
				<signature>System.Runtime.InteropServices._Type.GetMethods():System.Reflection.MethodInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethods" uniqueID="GetMethods(System.Reflection.BindingFlags):System.Reflection.MethodInfo[]">
				<signature>System.Runtime.InteropServices._Type.GetMethods(System.Reflection.BindingFlags):System.Reflection.MethodInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetNestedType" uniqueID="GetNestedType(string):System.Type">
				<signature>System.Runtime.InteropServices._Type.GetNestedType(string):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetNestedType" uniqueID="GetNestedType(string;System.Reflection.BindingFlags):System.Type">
				<signature>System.Runtime.InteropServices._Type.GetNestedType(string;System.Reflection.BindingFlags):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetNestedTypes" uniqueID="GetNestedTypes():System.Type[]">
				<signature>System.Runtime.InteropServices._Type.GetNestedTypes():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetNestedTypes" uniqueID="GetNestedTypes(System.Reflection.BindingFlags):System.Type[]">
				<signature>System.Runtime.InteropServices._Type.GetNestedTypes(System.Reflection.BindingFlags):System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetProperties" uniqueID="GetProperties():System.Reflection.PropertyInfo[]">
				<signature>System.Runtime.InteropServices._Type.GetProperties():System.Reflection.PropertyInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetProperties" uniqueID="GetProperties(System.Reflection.BindingFlags):System.Reflection.PropertyInfo[]">
				<signature>System.Runtime.InteropServices._Type.GetProperties(System.Reflection.BindingFlags):System.Reflection.PropertyInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetProperty" uniqueID="GetProperty(string):System.Reflection.PropertyInfo">
				<signature>System.Runtime.InteropServices._Type.GetProperty(string):System.Reflection.PropertyInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetProperty" uniqueID="GetProperty(string;System.Reflection.BindingFlags):System.Reflection.PropertyInfo">
				<signature>System.Runtime.InteropServices._Type.GetProperty(string;System.Reflection.BindingFlags):System.Reflection.PropertyInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetProperty" uniqueID="GetProperty(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Type;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.PropertyInfo">
				<signature>System.Runtime.InteropServices._Type.GetProperty(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Type;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.PropertyInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetProperty" uniqueID="GetProperty(string;System.Type):System.Reflection.PropertyInfo">
				<signature>System.Runtime.InteropServices._Type.GetProperty(string;System.Type):System.Reflection.PropertyInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetProperty" uniqueID="GetProperty(string;System.Type;System.Type[]):System.Reflection.PropertyInfo">
				<signature>System.Runtime.InteropServices._Type.GetProperty(string;System.Type;System.Type[]):System.Reflection.PropertyInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetProperty" uniqueID="GetProperty(string;System.Type;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.PropertyInfo">
				<signature>System.Runtime.InteropServices._Type.GetProperty(string;System.Type;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.PropertyInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetProperty" uniqueID="GetProperty(string;System.Type[]):System.Reflection.PropertyInfo">
				<signature>System.Runtime.InteropServices._Type.GetProperty(string;System.Type[]):System.Reflection.PropertyInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType():System.Type">
				<signature>System.Runtime.InteropServices._Type.GetType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfo" uniqueID="GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._Type.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfoCount" uniqueID="GetTypeInfoCount(unsigned int):void">
				<signature>System.Runtime.InteropServices._Type.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Runtime.InteropServices._Type.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InvokeMember" uniqueID="InvokeMember(string;System.Reflection.BindingFlags;System.Reflection.Binder;object;object[]):object">
				<signature>System.Runtime.InteropServices._Type.InvokeMember(string;System.Reflection.BindingFlags;System.Reflection.Binder;object;object[]):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InvokeMember" uniqueID="InvokeMember(string;System.Reflection.BindingFlags;System.Reflection.Binder;object;object[];System.Globalization.CultureInfo):object">
				<signature>System.Runtime.InteropServices._Type.InvokeMember(string;System.Reflection.BindingFlags;System.Reflection.Binder;object;object[];System.Globalization.CultureInfo):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InvokeMember" uniqueID="InvokeMember(string;System.Reflection.BindingFlags;System.Reflection.Binder;object;object[];System.Reflection.ParameterModifier[];System.Globalization.CultureInfo;string[]):object">
				<signature>System.Runtime.InteropServices._Type.InvokeMember(string;System.Reflection.BindingFlags;System.Reflection.Binder;object;object[];System.Reflection.ParameterModifier[];System.Globalization.CultureInfo;string[]):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsAssignableFrom" uniqueID="IsAssignableFrom(System.Type):bool">
				<signature>System.Runtime.InteropServices._Type.IsAssignableFrom(System.Type):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.Runtime.InteropServices._Type.IsDefined(System.Type;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsInstanceOfType" uniqueID="IsInstanceOfType(object):bool">
				<signature>System.Runtime.InteropServices._Type.IsInstanceOfType(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsSubclassOf" uniqueID="IsSubclassOf(System.Type):bool">
				<signature>System.Runtime.InteropServices._Type.IsSubclassOf(System.Type):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Runtime.InteropServices._Type.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Assembly" uniqueID="get_Assembly():System.Reflection.Assembly">
				<signature>System.Runtime.InteropServices._Type.get_Assembly():System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AssemblyQualifiedName" uniqueID="get_AssemblyQualifiedName():string">
				<signature>System.Runtime.InteropServices._Type.get_AssemblyQualifiedName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Attributes" uniqueID="get_Attributes():System.Reflection.TypeAttributes">
				<signature>System.Runtime.InteropServices._Type.get_Attributes():System.Reflection.TypeAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_BaseType" uniqueID="get_BaseType():System.Type">
				<signature>System.Runtime.InteropServices._Type.get_BaseType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringType" uniqueID="get_DeclaringType():System.Type">
				<signature>System.Runtime.InteropServices._Type.get_DeclaringType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FullName" uniqueID="get_FullName():string">
				<signature>System.Runtime.InteropServices._Type.get_FullName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_GUID" uniqueID="get_GUID():System.Guid">
				<signature>System.Runtime.InteropServices._Type.get_GUID():System.Guid</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_HasElementType" uniqueID="get_HasElementType():bool">
				<signature>System.Runtime.InteropServices._Type.get_HasElementType():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsAbstract" uniqueID="get_IsAbstract():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsAbstract():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsAnsiClass" uniqueID="get_IsAnsiClass():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsAnsiClass():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsArray" uniqueID="get_IsArray():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsArray():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsAutoClass" uniqueID="get_IsAutoClass():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsAutoClass():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsAutoLayout" uniqueID="get_IsAutoLayout():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsAutoLayout():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsByRef" uniqueID="get_IsByRef():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsByRef():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsCOMObject" uniqueID="get_IsCOMObject():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsCOMObject():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsClass" uniqueID="get_IsClass():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsClass():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsContextful" uniqueID="get_IsContextful():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsContextful():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsEnum" uniqueID="get_IsEnum():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsEnum():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsExplicitLayout" uniqueID="get_IsExplicitLayout():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsExplicitLayout():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsImport" uniqueID="get_IsImport():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsImport():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsInterface" uniqueID="get_IsInterface():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsInterface():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsLayoutSequential" uniqueID="get_IsLayoutSequential():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsLayoutSequential():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsMarshalByRef" uniqueID="get_IsMarshalByRef():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsMarshalByRef():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsNestedAssembly" uniqueID="get_IsNestedAssembly():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsNestedAssembly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsNestedFamANDAssem" uniqueID="get_IsNestedFamANDAssem():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsNestedFamANDAssem():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsNestedFamORAssem" uniqueID="get_IsNestedFamORAssem():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsNestedFamORAssem():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsNestedFamily" uniqueID="get_IsNestedFamily():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsNestedFamily():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsNestedPrivate" uniqueID="get_IsNestedPrivate():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsNestedPrivate():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsNestedPublic" uniqueID="get_IsNestedPublic():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsNestedPublic():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsNotPublic" uniqueID="get_IsNotPublic():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsNotPublic():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsPointer" uniqueID="get_IsPointer():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsPointer():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsPrimitive" uniqueID="get_IsPrimitive():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsPrimitive():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsPublic" uniqueID="get_IsPublic():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsPublic():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSealed" uniqueID="get_IsSealed():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsSealed():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSerializable" uniqueID="get_IsSerializable():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsSerializable():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSpecialName" uniqueID="get_IsSpecialName():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsSpecialName():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsUnicodeClass" uniqueID="get_IsUnicodeClass():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsUnicodeClass():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsValueType" uniqueID="get_IsValueType():bool">
				<signature>System.Runtime.InteropServices._Type.get_IsValueType():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MemberType" uniqueID="get_MemberType():System.Reflection.MemberTypes">
				<signature>System.Runtime.InteropServices._Type.get_MemberType():System.Reflection.MemberTypes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Module" uniqueID="get_Module():System.Reflection.Module">
				<signature>System.Runtime.InteropServices._Type.get_Module():System.Reflection.Module</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Runtime.InteropServices._Type.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Namespace" uniqueID="get_Namespace():string">
				<signature>System.Runtime.InteropServices._Type.get_Namespace():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReflectedType" uniqueID="get_ReflectedType():System.Type">
				<signature>System.Runtime.InteropServices._Type.get_ReflectedType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TypeHandle" uniqueID="get_TypeHandle():System.RuntimeTypeHandle">
				<signature>System.Runtime.InteropServices._Type.get_TypeHandle():System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TypeInitializer" uniqueID="get_TypeInitializer():System.Reflection.ConstructorInfo">
				<signature>System.Runtime.InteropServices._Type.get_TypeInitializer():System.Reflection.ConstructorInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_UnderlyingSystemType" uniqueID="get_UnderlyingSystemType():System.Type">
				<signature>System.Runtime.InteropServices._Type.get_UnderlyingSystemType():System.Type</signature>
			</method>
		</class>
		<class name="_TypeBuilder" uniqueID="System.Runtime.InteropServices._TypeBuilder">
			<method accessibility="Public" methodKind="Member" name="GetIDsOfNames" uniqueID="GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfo" uniqueID="GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._TypeBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfoCount" uniqueID="GetTypeInfoCount(unsigned int):void">
				<signature>System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Runtime.InteropServices._TypeBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
		</class>
		<class name="_EventInfo" uniqueID="System.Runtime.InteropServices._EventInfo">
			<method accessibility="Public" methodKind="Member" name="AddEventHandler" uniqueID="AddEventHandler(object;System.Delegate):void">
				<signature>System.Runtime.InteropServices._EventInfo.AddEventHandler(object;System.Delegate):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Runtime.InteropServices._EventInfo.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAddMethod" uniqueID="GetAddMethod():System.Reflection.MethodInfo">
				<signature>System.Runtime.InteropServices._EventInfo.GetAddMethod():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAddMethod" uniqueID="GetAddMethod(bool):System.Reflection.MethodInfo">
				<signature>System.Runtime.InteropServices._EventInfo.GetAddMethod(bool):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.Runtime.InteropServices._EventInfo.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.Runtime.InteropServices._EventInfo.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Runtime.InteropServices._EventInfo.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetIDsOfNames" uniqueID="GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._EventInfo.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRaiseMethod" uniqueID="GetRaiseMethod():System.Reflection.MethodInfo">
				<signature>System.Runtime.InteropServices._EventInfo.GetRaiseMethod():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRaiseMethod" uniqueID="GetRaiseMethod(bool):System.Reflection.MethodInfo">
				<signature>System.Runtime.InteropServices._EventInfo.GetRaiseMethod(bool):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRemoveMethod" uniqueID="GetRemoveMethod():System.Reflection.MethodInfo">
				<signature>System.Runtime.InteropServices._EventInfo.GetRemoveMethod():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRemoveMethod" uniqueID="GetRemoveMethod(bool):System.Reflection.MethodInfo">
				<signature>System.Runtime.InteropServices._EventInfo.GetRemoveMethod(bool):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType():System.Type">
				<signature>System.Runtime.InteropServices._EventInfo.GetType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfo" uniqueID="GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._EventInfo.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfoCount" uniqueID="GetTypeInfoCount(unsigned int):void">
				<signature>System.Runtime.InteropServices._EventInfo.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Runtime.InteropServices._EventInfo.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.Runtime.InteropServices._EventInfo.IsDefined(System.Type;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveEventHandler" uniqueID="RemoveEventHandler(object;System.Delegate):void">
				<signature>System.Runtime.InteropServices._EventInfo.RemoveEventHandler(object;System.Delegate):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Runtime.InteropServices._EventInfo.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Attributes" uniqueID="get_Attributes():System.Reflection.EventAttributes">
				<signature>System.Runtime.InteropServices._EventInfo.get_Attributes():System.Reflection.EventAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringType" uniqueID="get_DeclaringType():System.Type">
				<signature>System.Runtime.InteropServices._EventInfo.get_DeclaringType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_EventHandlerType" uniqueID="get_EventHandlerType():System.Type">
				<signature>System.Runtime.InteropServices._EventInfo.get_EventHandlerType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsMulticast" uniqueID="get_IsMulticast():bool">
				<signature>System.Runtime.InteropServices._EventInfo.get_IsMulticast():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSpecialName" uniqueID="get_IsSpecialName():bool">
				<signature>System.Runtime.InteropServices._EventInfo.get_IsSpecialName():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MemberType" uniqueID="get_MemberType():System.Reflection.MemberTypes">
				<signature>System.Runtime.InteropServices._EventInfo.get_MemberType():System.Reflection.MemberTypes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Runtime.InteropServices._EventInfo.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReflectedType" uniqueID="get_ReflectedType():System.Type">
				<signature>System.Runtime.InteropServices._EventInfo.get_ReflectedType():System.Type</signature>
			</method>
		</class>
		<class name="_Exception" uniqueID="System.Runtime.InteropServices._Exception">
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Runtime.InteropServices._Exception.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetBaseException" uniqueID="GetBaseException():System.Exception">
				<signature>System.Runtime.InteropServices._Exception.GetBaseException():System.Exception</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Runtime.InteropServices._Exception.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetObjectData" uniqueID="GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Runtime.InteropServices._Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType():System.Type">
				<signature>System.Runtime.InteropServices._Exception.GetType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Runtime.InteropServices._Exception.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_HelpLink" uniqueID="get_HelpLink():string">
				<signature>System.Runtime.InteropServices._Exception.get_HelpLink():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_InnerException" uniqueID="get_InnerException():System.Exception">
				<signature>System.Runtime.InteropServices._Exception.get_InnerException():System.Exception</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Message" uniqueID="get_Message():string">
				<signature>System.Runtime.InteropServices._Exception.get_Message():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Source" uniqueID="get_Source():string">
				<signature>System.Runtime.InteropServices._Exception.get_Source():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_StackTrace" uniqueID="get_StackTrace():string">
				<signature>System.Runtime.InteropServices._Exception.get_StackTrace():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TargetSite" uniqueID="get_TargetSite():System.Reflection.MethodBase">
				<signature>System.Runtime.InteropServices._Exception.get_TargetSite():System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_HelpLink" uniqueID="set_HelpLink(string):void">
				<signature>System.Runtime.InteropServices._Exception.set_HelpLink(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Source" uniqueID="set_Source(string):void">
				<signature>System.Runtime.InteropServices._Exception.set_Source(string):void</signature>
			</method>
		</class>
		<class name="_FieldInfo" uniqueID="System.Runtime.InteropServices._FieldInfo">
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Runtime.InteropServices._FieldInfo.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.Runtime.InteropServices._FieldInfo.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.Runtime.InteropServices._FieldInfo.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Runtime.InteropServices._FieldInfo.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetIDsOfNames" uniqueID="GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._FieldInfo.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType():System.Type">
				<signature>System.Runtime.InteropServices._FieldInfo.GetType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfo" uniqueID="GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._FieldInfo.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfoCount" uniqueID="GetTypeInfoCount(unsigned int):void">
				<signature>System.Runtime.InteropServices._FieldInfo.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValue" uniqueID="GetValue(object):object">
				<signature>System.Runtime.InteropServices._FieldInfo.GetValue(object):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValueDirect" uniqueID="GetValueDirect(System.TypedReference):object">
				<signature>System.Runtime.InteropServices._FieldInfo.GetValueDirect(System.TypedReference):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Runtime.InteropServices._FieldInfo.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.Runtime.InteropServices._FieldInfo.IsDefined(System.Type;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetValue" uniqueID="SetValue(object;object):void">
				<signature>System.Runtime.InteropServices._FieldInfo.SetValue(object;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetValue" uniqueID="SetValue(object;object;System.Reflection.BindingFlags;System.Reflection.Binder;System.Globalization.CultureInfo):void">
				<signature>System.Runtime.InteropServices._FieldInfo.SetValue(object;object;System.Reflection.BindingFlags;System.Reflection.Binder;System.Globalization.CultureInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetValueDirect" uniqueID="SetValueDirect(System.TypedReference;object):void">
				<signature>System.Runtime.InteropServices._FieldInfo.SetValueDirect(System.TypedReference;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Runtime.InteropServices._FieldInfo.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Attributes" uniqueID="get_Attributes():System.Reflection.FieldAttributes">
				<signature>System.Runtime.InteropServices._FieldInfo.get_Attributes():System.Reflection.FieldAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringType" uniqueID="get_DeclaringType():System.Type">
				<signature>System.Runtime.InteropServices._FieldInfo.get_DeclaringType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FieldHandle" uniqueID="get_FieldHandle():System.RuntimeFieldHandle">
				<signature>System.Runtime.InteropServices._FieldInfo.get_FieldHandle():System.RuntimeFieldHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FieldType" uniqueID="get_FieldType():System.Type">
				<signature>System.Runtime.InteropServices._FieldInfo.get_FieldType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsAssembly" uniqueID="get_IsAssembly():bool">
				<signature>System.Runtime.InteropServices._FieldInfo.get_IsAssembly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFamily" uniqueID="get_IsFamily():bool">
				<signature>System.Runtime.InteropServices._FieldInfo.get_IsFamily():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFamilyAndAssembly" uniqueID="get_IsFamilyAndAssembly():bool">
				<signature>System.Runtime.InteropServices._FieldInfo.get_IsFamilyAndAssembly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFamilyOrAssembly" uniqueID="get_IsFamilyOrAssembly():bool">
				<signature>System.Runtime.InteropServices._FieldInfo.get_IsFamilyOrAssembly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsInitOnly" uniqueID="get_IsInitOnly():bool">
				<signature>System.Runtime.InteropServices._FieldInfo.get_IsInitOnly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsLiteral" uniqueID="get_IsLiteral():bool">
				<signature>System.Runtime.InteropServices._FieldInfo.get_IsLiteral():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsNotSerialized" uniqueID="get_IsNotSerialized():bool">
				<signature>System.Runtime.InteropServices._FieldInfo.get_IsNotSerialized():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsPinvokeImpl" uniqueID="get_IsPinvokeImpl():bool">
				<signature>System.Runtime.InteropServices._FieldInfo.get_IsPinvokeImpl():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsPrivate" uniqueID="get_IsPrivate():bool">
				<signature>System.Runtime.InteropServices._FieldInfo.get_IsPrivate():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsPublic" uniqueID="get_IsPublic():bool">
				<signature>System.Runtime.InteropServices._FieldInfo.get_IsPublic():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSpecialName" uniqueID="get_IsSpecialName():bool">
				<signature>System.Runtime.InteropServices._FieldInfo.get_IsSpecialName():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsStatic" uniqueID="get_IsStatic():bool">
				<signature>System.Runtime.InteropServices._FieldInfo.get_IsStatic():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MemberType" uniqueID="get_MemberType():System.Reflection.MemberTypes">
				<signature>System.Runtime.InteropServices._FieldInfo.get_MemberType():System.Reflection.MemberTypes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Runtime.InteropServices._FieldInfo.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReflectedType" uniqueID="get_ReflectedType():System.Type">
				<signature>System.Runtime.InteropServices._FieldInfo.get_ReflectedType():System.Type</signature>
			</method>
		</class>
		<class name="_ConstructorInfo" uniqueID="System.Runtime.InteropServices._ConstructorInfo">
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Runtime.InteropServices._ConstructorInfo.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.Runtime.InteropServices._ConstructorInfo.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.Runtime.InteropServices._ConstructorInfo.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Runtime.InteropServices._ConstructorInfo.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetIDsOfNames" uniqueID="GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._ConstructorInfo.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethodImplementationFlags" uniqueID="GetMethodImplementationFlags():System.Reflection.MethodImplAttributes">
				<signature>System.Runtime.InteropServices._ConstructorInfo.GetMethodImplementationFlags():System.Reflection.MethodImplAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetParameters" uniqueID="GetParameters():System.Reflection.ParameterInfo[]">
				<signature>System.Runtime.InteropServices._ConstructorInfo.GetParameters():System.Reflection.ParameterInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType():System.Type">
				<signature>System.Runtime.InteropServices._ConstructorInfo.GetType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfo" uniqueID="GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._ConstructorInfo.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfoCount" uniqueID="GetTypeInfoCount(unsigned int):void">
				<signature>System.Runtime.InteropServices._ConstructorInfo.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Runtime.InteropServices._ConstructorInfo.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke_2" uniqueID="Invoke_2(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object">
				<signature>System.Runtime.InteropServices._ConstructorInfo.Invoke_2(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke_3" uniqueID="Invoke_3(object;object[]):object">
				<signature>System.Runtime.InteropServices._ConstructorInfo.Invoke_3(object;object[]):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke_4" uniqueID="Invoke_4(System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object">
				<signature>System.Runtime.InteropServices._ConstructorInfo.Invoke_4(System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke_5" uniqueID="Invoke_5(object[]):object">
				<signature>System.Runtime.InteropServices._ConstructorInfo.Invoke_5(object[]):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.Runtime.InteropServices._ConstructorInfo.IsDefined(System.Type;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Runtime.InteropServices._ConstructorInfo.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Attributes" uniqueID="get_Attributes():System.Reflection.MethodAttributes">
				<signature>System.Runtime.InteropServices._ConstructorInfo.get_Attributes():System.Reflection.MethodAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CallingConvention" uniqueID="get_CallingConvention():System.Reflection.CallingConventions">
				<signature>System.Runtime.InteropServices._ConstructorInfo.get_CallingConvention():System.Reflection.CallingConventions</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringType" uniqueID="get_DeclaringType():System.Type">
				<signature>System.Runtime.InteropServices._ConstructorInfo.get_DeclaringType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsAbstract" uniqueID="get_IsAbstract():bool">
				<signature>System.Runtime.InteropServices._ConstructorInfo.get_IsAbstract():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsAssembly" uniqueID="get_IsAssembly():bool">
				<signature>System.Runtime.InteropServices._ConstructorInfo.get_IsAssembly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsConstructor" uniqueID="get_IsConstructor():bool">
				<signature>System.Runtime.InteropServices._ConstructorInfo.get_IsConstructor():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFamily" uniqueID="get_IsFamily():bool">
				<signature>System.Runtime.InteropServices._ConstructorInfo.get_IsFamily():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFamilyAndAssembly" uniqueID="get_IsFamilyAndAssembly():bool">
				<signature>System.Runtime.InteropServices._ConstructorInfo.get_IsFamilyAndAssembly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFamilyOrAssembly" uniqueID="get_IsFamilyOrAssembly():bool">
				<signature>System.Runtime.InteropServices._ConstructorInfo.get_IsFamilyOrAssembly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFinal" uniqueID="get_IsFinal():bool">
				<signature>System.Runtime.InteropServices._ConstructorInfo.get_IsFinal():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsHideBySig" uniqueID="get_IsHideBySig():bool">
				<signature>System.Runtime.InteropServices._ConstructorInfo.get_IsHideBySig():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsPrivate" uniqueID="get_IsPrivate():bool">
				<signature>System.Runtime.InteropServices._ConstructorInfo.get_IsPrivate():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsPublic" uniqueID="get_IsPublic():bool">
				<signature>System.Runtime.InteropServices._ConstructorInfo.get_IsPublic():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSpecialName" uniqueID="get_IsSpecialName():bool">
				<signature>System.Runtime.InteropServices._ConstructorInfo.get_IsSpecialName():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsStatic" uniqueID="get_IsStatic():bool">
				<signature>System.Runtime.InteropServices._ConstructorInfo.get_IsStatic():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsVirtual" uniqueID="get_IsVirtual():bool">
				<signature>System.Runtime.InteropServices._ConstructorInfo.get_IsVirtual():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MemberType" uniqueID="get_MemberType():System.Reflection.MemberTypes">
				<signature>System.Runtime.InteropServices._ConstructorInfo.get_MemberType():System.Reflection.MemberTypes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MethodHandle" uniqueID="get_MethodHandle():System.RuntimeMethodHandle">
				<signature>System.Runtime.InteropServices._ConstructorInfo.get_MethodHandle():System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Runtime.InteropServices._ConstructorInfo.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReflectedType" uniqueID="get_ReflectedType():System.Type">
				<signature>System.Runtime.InteropServices._ConstructorInfo.get_ReflectedType():System.Type</signature>
			</method>
		</class>
		<class name="_EnumBuilder" uniqueID="System.Runtime.InteropServices._EnumBuilder">
			<method accessibility="Public" methodKind="Member" name="GetIDsOfNames" uniqueID="GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._EnumBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfo" uniqueID="GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._EnumBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfoCount" uniqueID="GetTypeInfoCount(unsigned int):void">
				<signature>System.Runtime.InteropServices._EnumBuilder.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Runtime.InteropServices._EnumBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
		</class>
		<class name="_MemberInfo" uniqueID="System.Runtime.InteropServices._MemberInfo">
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Runtime.InteropServices._MemberInfo.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.Runtime.InteropServices._MemberInfo.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Runtime.InteropServices._MemberInfo.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetIDsOfNames" uniqueID="GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType():System.Type">
				<signature>System.Runtime.InteropServices._MemberInfo.GetType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfo" uniqueID="GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._MemberInfo.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfoCount" uniqueID="GetTypeInfoCount(unsigned int):void">
				<signature>System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Runtime.InteropServices._MemberInfo.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.Runtime.InteropServices._MemberInfo.IsDefined(System.Type;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Runtime.InteropServices._MemberInfo.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringType" uniqueID="get_DeclaringType():System.Type">
				<signature>System.Runtime.InteropServices._MemberInfo.get_DeclaringType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MemberType" uniqueID="get_MemberType():System.Reflection.MemberTypes">
				<signature>System.Runtime.InteropServices._MemberInfo.get_MemberType():System.Reflection.MemberTypes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Runtime.InteropServices._MemberInfo.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReflectedType" uniqueID="get_ReflectedType():System.Type">
				<signature>System.Runtime.InteropServices._MemberInfo.get_ReflectedType():System.Type</signature>
			</method>
		</class>
		<class name="_MethodBase" uniqueID="System.Runtime.InteropServices._MethodBase">
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Runtime.InteropServices._MethodBase.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.Runtime.InteropServices._MethodBase.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.Runtime.InteropServices._MethodBase.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Runtime.InteropServices._MethodBase.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetIDsOfNames" uniqueID="GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._MethodBase.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethodImplementationFlags" uniqueID="GetMethodImplementationFlags():System.Reflection.MethodImplAttributes">
				<signature>System.Runtime.InteropServices._MethodBase.GetMethodImplementationFlags():System.Reflection.MethodImplAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetParameters" uniqueID="GetParameters():System.Reflection.ParameterInfo[]">
				<signature>System.Runtime.InteropServices._MethodBase.GetParameters():System.Reflection.ParameterInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType():System.Type">
				<signature>System.Runtime.InteropServices._MethodBase.GetType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfo" uniqueID="GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._MethodBase.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfoCount" uniqueID="GetTypeInfoCount(unsigned int):void">
				<signature>System.Runtime.InteropServices._MethodBase.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object">
				<signature>System.Runtime.InteropServices._MethodBase.Invoke(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(object;object[]):object">
				<signature>System.Runtime.InteropServices._MethodBase.Invoke(object;object[]):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Runtime.InteropServices._MethodBase.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.Runtime.InteropServices._MethodBase.IsDefined(System.Type;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Runtime.InteropServices._MethodBase.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Attributes" uniqueID="get_Attributes():System.Reflection.MethodAttributes">
				<signature>System.Runtime.InteropServices._MethodBase.get_Attributes():System.Reflection.MethodAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CallingConvention" uniqueID="get_CallingConvention():System.Reflection.CallingConventions">
				<signature>System.Runtime.InteropServices._MethodBase.get_CallingConvention():System.Reflection.CallingConventions</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringType" uniqueID="get_DeclaringType():System.Type">
				<signature>System.Runtime.InteropServices._MethodBase.get_DeclaringType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsAbstract" uniqueID="get_IsAbstract():bool">
				<signature>System.Runtime.InteropServices._MethodBase.get_IsAbstract():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsAssembly" uniqueID="get_IsAssembly():bool">
				<signature>System.Runtime.InteropServices._MethodBase.get_IsAssembly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsConstructor" uniqueID="get_IsConstructor():bool">
				<signature>System.Runtime.InteropServices._MethodBase.get_IsConstructor():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFamily" uniqueID="get_IsFamily():bool">
				<signature>System.Runtime.InteropServices._MethodBase.get_IsFamily():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFamilyAndAssembly" uniqueID="get_IsFamilyAndAssembly():bool">
				<signature>System.Runtime.InteropServices._MethodBase.get_IsFamilyAndAssembly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFamilyOrAssembly" uniqueID="get_IsFamilyOrAssembly():bool">
				<signature>System.Runtime.InteropServices._MethodBase.get_IsFamilyOrAssembly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFinal" uniqueID="get_IsFinal():bool">
				<signature>System.Runtime.InteropServices._MethodBase.get_IsFinal():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsHideBySig" uniqueID="get_IsHideBySig():bool">
				<signature>System.Runtime.InteropServices._MethodBase.get_IsHideBySig():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsPrivate" uniqueID="get_IsPrivate():bool">
				<signature>System.Runtime.InteropServices._MethodBase.get_IsPrivate():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsPublic" uniqueID="get_IsPublic():bool">
				<signature>System.Runtime.InteropServices._MethodBase.get_IsPublic():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSpecialName" uniqueID="get_IsSpecialName():bool">
				<signature>System.Runtime.InteropServices._MethodBase.get_IsSpecialName():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsStatic" uniqueID="get_IsStatic():bool">
				<signature>System.Runtime.InteropServices._MethodBase.get_IsStatic():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsVirtual" uniqueID="get_IsVirtual():bool">
				<signature>System.Runtime.InteropServices._MethodBase.get_IsVirtual():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MemberType" uniqueID="get_MemberType():System.Reflection.MemberTypes">
				<signature>System.Runtime.InteropServices._MethodBase.get_MemberType():System.Reflection.MemberTypes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MethodHandle" uniqueID="get_MethodHandle():System.RuntimeMethodHandle">
				<signature>System.Runtime.InteropServices._MethodBase.get_MethodHandle():System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Runtime.InteropServices._MethodBase.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReflectedType" uniqueID="get_ReflectedType():System.Type">
				<signature>System.Runtime.InteropServices._MethodBase.get_ReflectedType():System.Type</signature>
			</method>
		</class>
		<class name="_ParameterInfo" uniqueID="System.Runtime.InteropServices._ParameterInfo">
			<method accessibility="Public" methodKind="Member" name="GetIDsOfNames" uniqueID="GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._ParameterInfo.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfo" uniqueID="GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._ParameterInfo.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfoCount" uniqueID="GetTypeInfoCount(unsigned int):void">
				<signature>System.Runtime.InteropServices._ParameterInfo.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Runtime.InteropServices._ParameterInfo.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
		</class>
		<class name="SafePointer" uniqueID="System.Runtime.InteropServices.SafePointer">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Runtime.InteropServices.SafePointer.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="NotEnoughRoom" uniqueID="NotEnoughRoom():void">
				<signature>System.Runtime.InteropServices.SafePointer.NotEnoughRoom():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="NotInitialized" uniqueID="NotInitialized():System.InvalidOperationException">
				<signature>System.Runtime.InteropServices.SafePointer.NotInitialized():System.InvalidOperationException</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="PtrToStructureNative" uniqueID="PtrToStructureNative(byte;System.TypedReference;unsigned int):void">
				<signature>System.Runtime.InteropServices.SafePointer.PtrToStructureNative(byte;System.TypedReference;unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="SizeOfType" uniqueID="SizeOfType(System.Type):unsigned int">
				<signature>System.Runtime.InteropServices.SafePointer.SizeOfType(System.Type):unsigned int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="StructureToPtrNative" uniqueID="StructureToPtrNative(System.TypedReference;byte;unsigned int):void">
				<signature>System.Runtime.InteropServices.SafePointer.StructureToPtrNative(System.TypedReference;byte;unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AcquirePointer" uniqueID="AcquirePointer(byte):void">
				<signature>System.Runtime.InteropServices.SafePointer.AcquirePointer(byte):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Initialize" uniqueID="Initialize(unsigned int;unsigned int):void">
				<signature>System.Runtime.InteropServices.SafePointer.Initialize(unsigned int;unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Initialize" uniqueID="Initialize(unsigned long):void">
				<signature>System.Runtime.InteropServices.SafePointer.Initialize(unsigned long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ReleasePointer" uniqueID="ReleasePointer():void">
				<signature>System.Runtime.InteropServices.SafePointer.ReleasePointer():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SafePointer" uniqueID="SafePointer(bool):void">
				<signature>System.Runtime.InteropServices.SafePointer.SafePointer(bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SpaceCheck" uniqueID="SpaceCheck(byte;unsigned long):void">
				<signature>System.Runtime.InteropServices.SafePointer.SpaceCheck(byte;unsigned long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ByteLength" uniqueID="get_ByteLength():unsigned long">
				<signature>System.Runtime.InteropServices.SafePointer.get_ByteLength():unsigned long</signature>
			</method>
		</class>
		<class name="_AssemblyName" uniqueID="System.Runtime.InteropServices._AssemblyName">
			<method accessibility="Public" methodKind="Member" name="GetIDsOfNames" uniqueID="GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._AssemblyName.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfo" uniqueID="GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._AssemblyName.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfoCount" uniqueID="GetTypeInfoCount(unsigned int):void">
				<signature>System.Runtime.InteropServices._AssemblyName.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Runtime.InteropServices._AssemblyName.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
		</class>
		<class name="_Attribute" uniqueID="System.Runtime.InteropServices._Attribute">
			<method accessibility="Public" methodKind="Member" name="GetIDsOfNames" uniqueID="GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfo" uniqueID="GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._Attribute.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfoCount" uniqueID="GetTypeInfoCount(unsigned int):void">
				<signature>System.Runtime.InteropServices._Attribute.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Runtime.InteropServices._Attribute.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
		</class>
		<class name="_LocalBuilder" uniqueID="System.Runtime.InteropServices._LocalBuilder">
			<method accessibility="Public" methodKind="Member" name="GetIDsOfNames" uniqueID="GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._LocalBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfo" uniqueID="GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._LocalBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfoCount" uniqueID="GetTypeInfoCount(unsigned int):void">
				<signature>System.Runtime.InteropServices._LocalBuilder.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Runtime.InteropServices._LocalBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
		</class>
		<class name="_MethodInfo" uniqueID="System.Runtime.InteropServices._MethodInfo">
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Runtime.InteropServices._MethodInfo.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetBaseDefinition" uniqueID="GetBaseDefinition():System.Reflection.MethodInfo">
				<signature>System.Runtime.InteropServices._MethodInfo.GetBaseDefinition():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.Runtime.InteropServices._MethodInfo.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.Runtime.InteropServices._MethodInfo.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Runtime.InteropServices._MethodInfo.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetIDsOfNames" uniqueID="GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._MethodInfo.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethodImplementationFlags" uniqueID="GetMethodImplementationFlags():System.Reflection.MethodImplAttributes">
				<signature>System.Runtime.InteropServices._MethodInfo.GetMethodImplementationFlags():System.Reflection.MethodImplAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetParameters" uniqueID="GetParameters():System.Reflection.ParameterInfo[]">
				<signature>System.Runtime.InteropServices._MethodInfo.GetParameters():System.Reflection.ParameterInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType():System.Type">
				<signature>System.Runtime.InteropServices._MethodInfo.GetType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfo" uniqueID="GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._MethodInfo.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfoCount" uniqueID="GetTypeInfoCount(unsigned int):void">
				<signature>System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object">
				<signature>System.Runtime.InteropServices._MethodInfo.Invoke(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(object;object[]):object">
				<signature>System.Runtime.InteropServices._MethodInfo.Invoke(object;object[]):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Runtime.InteropServices._MethodInfo.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.Runtime.InteropServices._MethodInfo.IsDefined(System.Type;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Runtime.InteropServices._MethodInfo.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Attributes" uniqueID="get_Attributes():System.Reflection.MethodAttributes">
				<signature>System.Runtime.InteropServices._MethodInfo.get_Attributes():System.Reflection.MethodAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CallingConvention" uniqueID="get_CallingConvention():System.Reflection.CallingConventions">
				<signature>System.Runtime.InteropServices._MethodInfo.get_CallingConvention():System.Reflection.CallingConventions</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringType" uniqueID="get_DeclaringType():System.Type">
				<signature>System.Runtime.InteropServices._MethodInfo.get_DeclaringType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsAbstract" uniqueID="get_IsAbstract():bool">
				<signature>System.Runtime.InteropServices._MethodInfo.get_IsAbstract():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsAssembly" uniqueID="get_IsAssembly():bool">
				<signature>System.Runtime.InteropServices._MethodInfo.get_IsAssembly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsConstructor" uniqueID="get_IsConstructor():bool">
				<signature>System.Runtime.InteropServices._MethodInfo.get_IsConstructor():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFamily" uniqueID="get_IsFamily():bool">
				<signature>System.Runtime.InteropServices._MethodInfo.get_IsFamily():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFamilyAndAssembly" uniqueID="get_IsFamilyAndAssembly():bool">
				<signature>System.Runtime.InteropServices._MethodInfo.get_IsFamilyAndAssembly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFamilyOrAssembly" uniqueID="get_IsFamilyOrAssembly():bool">
				<signature>System.Runtime.InteropServices._MethodInfo.get_IsFamilyOrAssembly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFinal" uniqueID="get_IsFinal():bool">
				<signature>System.Runtime.InteropServices._MethodInfo.get_IsFinal():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsHideBySig" uniqueID="get_IsHideBySig():bool">
				<signature>System.Runtime.InteropServices._MethodInfo.get_IsHideBySig():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsPrivate" uniqueID="get_IsPrivate():bool">
				<signature>System.Runtime.InteropServices._MethodInfo.get_IsPrivate():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsPublic" uniqueID="get_IsPublic():bool">
				<signature>System.Runtime.InteropServices._MethodInfo.get_IsPublic():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSpecialName" uniqueID="get_IsSpecialName():bool">
				<signature>System.Runtime.InteropServices._MethodInfo.get_IsSpecialName():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsStatic" uniqueID="get_IsStatic():bool">
				<signature>System.Runtime.InteropServices._MethodInfo.get_IsStatic():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsVirtual" uniqueID="get_IsVirtual():bool">
				<signature>System.Runtime.InteropServices._MethodInfo.get_IsVirtual():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MemberType" uniqueID="get_MemberType():System.Reflection.MemberTypes">
				<signature>System.Runtime.InteropServices._MethodInfo.get_MemberType():System.Reflection.MemberTypes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MethodHandle" uniqueID="get_MethodHandle():System.RuntimeMethodHandle">
				<signature>System.Runtime.InteropServices._MethodInfo.get_MethodHandle():System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Runtime.InteropServices._MethodInfo.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReflectedType" uniqueID="get_ReflectedType():System.Type">
				<signature>System.Runtime.InteropServices._MethodInfo.get_ReflectedType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReturnType" uniqueID="get_ReturnType():System.Type">
				<signature>System.Runtime.InteropServices._MethodInfo.get_ReturnType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReturnTypeCustomAttributes" uniqueID="get_ReturnTypeCustomAttributes():System.Reflection.ICustomAttributeProvider">
				<signature>System.Runtime.InteropServices._MethodInfo.get_ReturnTypeCustomAttributes():System.Reflection.ICustomAttributeProvider</signature>
			</method>
		</class>
		<class name="GCHandle" uniqueID="System.Runtime.InteropServices.GCHandle">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Runtime.InteropServices.GCHandle.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Alloc" uniqueID="Alloc(object):System.Runtime.InteropServices.GCHandle">
				<signature>System.Runtime.InteropServices.GCHandle.Alloc(object):System.Runtime.InteropServices.GCHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Alloc" uniqueID="Alloc(object;System.Runtime.InteropServices.GCHandleType):System.Runtime.InteropServices.GCHandle">
				<signature>System.Runtime.InteropServices.GCHandle.Alloc(object;System.Runtime.InteropServices.GCHandleType):System.Runtime.InteropServices.GCHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="FromIntPtr" uniqueID="FromIntPtr(native signed int):System.Runtime.InteropServices.GCHandle">
				<signature>System.Runtime.InteropServices.GCHandle.FromIntPtr(native signed int):System.Runtime.InteropServices.GCHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalAddrOfPinnedObject" uniqueID="InternalAddrOfPinnedObject(native signed int):native signed int">
				<signature>System.Runtime.InteropServices.GCHandle.InternalAddrOfPinnedObject(native signed int):native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalAlloc" uniqueID="InternalAlloc(object;System.Runtime.InteropServices.GCHandleType):native signed int">
				<signature>System.Runtime.InteropServices.GCHandle.InternalAlloc(object;System.Runtime.InteropServices.GCHandleType):native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalCheckDomain" uniqueID="InternalCheckDomain(native signed int):void">
				<signature>System.Runtime.InteropServices.GCHandle.InternalCheckDomain(native signed int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalCompareExchange" uniqueID="InternalCompareExchange(native signed int;object;object;bool):object">
				<signature>System.Runtime.InteropServices.GCHandle.InternalCompareExchange(native signed int;object;object;bool):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalFree" uniqueID="InternalFree(native signed int):void">
				<signature>System.Runtime.InteropServices.GCHandle.InternalFree(native signed int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalGet" uniqueID="InternalGet(native signed int):object">
				<signature>System.Runtime.InteropServices.GCHandle.InternalGet(native signed int):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalSet" uniqueID="InternalSet(native signed int;object;bool):void">
				<signature>System.Runtime.InteropServices.GCHandle.InternalSet(native signed int;object;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToIntPtr" uniqueID="ToIntPtr(System.Runtime.InteropServices.GCHandle):native signed int">
				<signature>System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle):native signed int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.Runtime.InteropServices.GCHandle;System.Runtime.InteropServices.GCHandle):bool">
				<signature>System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle;System.Runtime.InteropServices.GCHandle):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Explicit" uniqueID="op_Explicit(System.Runtime.InteropServices.GCHandle):native signed int">
				<signature>System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle):native signed int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Explicit" uniqueID="op_Explicit(native signed int):System.Runtime.InteropServices.GCHandle">
				<signature>System.Runtime.InteropServices.GCHandle.op_Explicit(native signed int):System.Runtime.InteropServices.GCHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.Runtime.InteropServices.GCHandle;System.Runtime.InteropServices.GCHandle):bool">
				<signature>System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle;System.Runtime.InteropServices.GCHandle):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddrOfPinnedObject" uniqueID="AddrOfPinnedObject():native signed int">
				<signature>System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject():native signed int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Runtime.InteropServices.GCHandle.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Free" uniqueID="Free():void">
				<signature>System.Runtime.InteropServices.GCHandle.Free():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GCHandle" uniqueID="GCHandle(native signed int):void">
				<signature>System.Runtime.InteropServices.GCHandle.GCHandle(native signed int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GCHandle" uniqueID="GCHandle(object;System.Runtime.InteropServices.GCHandleType):void">
				<signature>System.Runtime.InteropServices.GCHandle.GCHandle(object;System.Runtime.InteropServices.GCHandleType):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetHandleValue" uniqueID="GetHandleValue():native signed int">
				<signature>System.Runtime.InteropServices.GCHandle.GetHandleValue():native signed int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Runtime.InteropServices.GCHandle.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsPinned" uniqueID="IsPinned():bool">
				<signature>System.Runtime.InteropServices.GCHandle.IsPinned():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetIsPinned" uniqueID="SetIsPinned():void">
				<signature>System.Runtime.InteropServices.GCHandle.SetIsPinned():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsAllocated" uniqueID="get_IsAllocated():bool">
				<signature>System.Runtime.InteropServices.GCHandle.get_IsAllocated():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Target" uniqueID="get_Target():object">
				<signature>System.Runtime.InteropServices.GCHandle.get_Target():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Target" uniqueID="set_Target(object):void">
				<signature>System.Runtime.InteropServices.GCHandle.set_Target(object):void</signature>
			</method>
		</class>
		<class name="_ConstructorBuilder" uniqueID="System.Runtime.InteropServices._ConstructorBuilder">
			<method accessibility="Public" methodKind="Member" name="GetIDsOfNames" uniqueID="GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._ConstructorBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfo" uniqueID="GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfoCount" uniqueID="GetTypeInfoCount(unsigned int):void">
				<signature>System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Runtime.InteropServices._ConstructorBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
		</class>
		<class name="_ParameterBuilder" uniqueID="System.Runtime.InteropServices._ParameterBuilder">
			<method accessibility="Public" methodKind="Member" name="GetIDsOfNames" uniqueID="GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._ParameterBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfo" uniqueID="GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._ParameterBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfoCount" uniqueID="GetTypeInfoCount(unsigned int):void">
				<signature>System.Runtime.InteropServices._ParameterBuilder.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Runtime.InteropServices._ParameterBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
		</class>
		<class name="_PropertyBuilder" uniqueID="System.Runtime.InteropServices._PropertyBuilder">
			<method accessibility="Public" methodKind="Member" name="GetIDsOfNames" uniqueID="GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._PropertyBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfo" uniqueID="GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._PropertyBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfoCount" uniqueID="GetTypeInfoCount(unsigned int):void">
				<signature>System.Runtime.InteropServices._PropertyBuilder.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Runtime.InteropServices._PropertyBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
		</class>
		<class name="_SignatureHelper" uniqueID="System.Runtime.InteropServices._SignatureHelper">
			<method accessibility="Public" methodKind="Member" name="GetIDsOfNames" uniqueID="GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._SignatureHelper.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfo" uniqueID="GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._SignatureHelper.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfoCount" uniqueID="GetTypeInfoCount(unsigned int):void">
				<signature>System.Runtime.InteropServices._SignatureHelper.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Runtime.InteropServices._SignatureHelper.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
		</class>
		<class name="_CustomAttributeBuilder" uniqueID="System.Runtime.InteropServices._CustomAttributeBuilder">
			<method accessibility="Public" methodKind="Member" name="GetIDsOfNames" uniqueID="GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._CustomAttributeBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfo" uniqueID="GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._CustomAttributeBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfoCount" uniqueID="GetTypeInfoCount(unsigned int):void">
				<signature>System.Runtime.InteropServices._CustomAttributeBuilder.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Runtime.InteropServices._CustomAttributeBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
		</class>
		<class name="_EventBuilder" uniqueID="System.Runtime.InteropServices._EventBuilder">
			<method accessibility="Public" methodKind="Member" name="GetIDsOfNames" uniqueID="GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._EventBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfo" uniqueID="GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._EventBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfoCount" uniqueID="GetTypeInfoCount(unsigned int):void">
				<signature>System.Runtime.InteropServices._EventBuilder.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Runtime.InteropServices._EventBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
		</class>
		<class name="_MethodBuilder" uniqueID="System.Runtime.InteropServices._MethodBuilder">
			<method accessibility="Public" methodKind="Member" name="GetIDsOfNames" uniqueID="GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfo" uniqueID="GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._MethodBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfoCount" uniqueID="GetTypeInfoCount(unsigned int):void">
				<signature>System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Runtime.InteropServices._MethodBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
		</class>
		<class name="_AssemblyBuilder" uniqueID="System.Runtime.InteropServices._AssemblyBuilder">
			<method accessibility="Public" methodKind="Member" name="GetIDsOfNames" uniqueID="GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._AssemblyBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfo" uniqueID="GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfoCount" uniqueID="GetTypeInfoCount(unsigned int):void">
				<signature>System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Runtime.InteropServices._AssemblyBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
		</class>
		<class name="_FieldBuilder" uniqueID="System.Runtime.InteropServices._FieldBuilder">
			<method accessibility="Public" methodKind="Member" name="GetIDsOfNames" uniqueID="GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._FieldBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfo" uniqueID="GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._FieldBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfoCount" uniqueID="GetTypeInfoCount(unsigned int):void">
				<signature>System.Runtime.InteropServices._FieldBuilder.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Runtime.InteropServices._FieldBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
		</class>
		<class name="_PropertyInfo" uniqueID="System.Runtime.InteropServices._PropertyInfo">
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Runtime.InteropServices._PropertyInfo.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAccessors" uniqueID="GetAccessors():System.Reflection.MethodInfo[]">
				<signature>System.Runtime.InteropServices._PropertyInfo.GetAccessors():System.Reflection.MethodInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAccessors" uniqueID="GetAccessors(bool):System.Reflection.MethodInfo[]">
				<signature>System.Runtime.InteropServices._PropertyInfo.GetAccessors(bool):System.Reflection.MethodInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.Runtime.InteropServices._PropertyInfo.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.Runtime.InteropServices._PropertyInfo.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetGetMethod" uniqueID="GetGetMethod():System.Reflection.MethodInfo">
				<signature>System.Runtime.InteropServices._PropertyInfo.GetGetMethod():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetGetMethod" uniqueID="GetGetMethod(bool):System.Reflection.MethodInfo">
				<signature>System.Runtime.InteropServices._PropertyInfo.GetGetMethod(bool):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Runtime.InteropServices._PropertyInfo.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetIDsOfNames" uniqueID="GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._PropertyInfo.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetIndexParameters" uniqueID="GetIndexParameters():System.Reflection.ParameterInfo[]">
				<signature>System.Runtime.InteropServices._PropertyInfo.GetIndexParameters():System.Reflection.ParameterInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSetMethod" uniqueID="GetSetMethod():System.Reflection.MethodInfo">
				<signature>System.Runtime.InteropServices._PropertyInfo.GetSetMethod():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSetMethod" uniqueID="GetSetMethod(bool):System.Reflection.MethodInfo">
				<signature>System.Runtime.InteropServices._PropertyInfo.GetSetMethod(bool):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType():System.Type">
				<signature>System.Runtime.InteropServices._PropertyInfo.GetType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfo" uniqueID="GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._PropertyInfo.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfoCount" uniqueID="GetTypeInfoCount(unsigned int):void">
				<signature>System.Runtime.InteropServices._PropertyInfo.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValue" uniqueID="GetValue(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object">
				<signature>System.Runtime.InteropServices._PropertyInfo.GetValue(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValue" uniqueID="GetValue(object;object[]):object">
				<signature>System.Runtime.InteropServices._PropertyInfo.GetValue(object;object[]):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Runtime.InteropServices._PropertyInfo.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.Runtime.InteropServices._PropertyInfo.IsDefined(System.Type;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetValue" uniqueID="SetValue(object;object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):void">
				<signature>System.Runtime.InteropServices._PropertyInfo.SetValue(object;object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetValue" uniqueID="SetValue(object;object;object[]):void">
				<signature>System.Runtime.InteropServices._PropertyInfo.SetValue(object;object;object[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Runtime.InteropServices._PropertyInfo.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Attributes" uniqueID="get_Attributes():System.Reflection.PropertyAttributes">
				<signature>System.Runtime.InteropServices._PropertyInfo.get_Attributes():System.Reflection.PropertyAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CanRead" uniqueID="get_CanRead():bool">
				<signature>System.Runtime.InteropServices._PropertyInfo.get_CanRead():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CanWrite" uniqueID="get_CanWrite():bool">
				<signature>System.Runtime.InteropServices._PropertyInfo.get_CanWrite():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringType" uniqueID="get_DeclaringType():System.Type">
				<signature>System.Runtime.InteropServices._PropertyInfo.get_DeclaringType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSpecialName" uniqueID="get_IsSpecialName():bool">
				<signature>System.Runtime.InteropServices._PropertyInfo.get_IsSpecialName():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MemberType" uniqueID="get_MemberType():System.Reflection.MemberTypes">
				<signature>System.Runtime.InteropServices._PropertyInfo.get_MemberType():System.Reflection.MemberTypes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Runtime.InteropServices._PropertyInfo.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PropertyType" uniqueID="get_PropertyType():System.Type">
				<signature>System.Runtime.InteropServices._PropertyInfo.get_PropertyType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReflectedType" uniqueID="get_ReflectedType():System.Type">
				<signature>System.Runtime.InteropServices._PropertyInfo.get_ReflectedType():System.Type</signature>
			</method>
		</class>
		<class name="StructLayoutAttribute" uniqueID="System.Runtime.InteropServices.StructLayoutAttribute">
			<method accessibility="Protected" methodKind="Static" name="GetCustomAttribute" uniqueID="GetCustomAttribute(System.Type):System.Attribute">
				<signature>System.Runtime.InteropServices.StructLayoutAttribute.GetCustomAttribute(System.Type):System.Attribute</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="IsDefined" uniqueID="IsDefined(System.Type):bool">
				<signature>System.Runtime.InteropServices.StructLayoutAttribute.IsDefined(System.Type):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StructLayoutAttribute" uniqueID="StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind):void">
				<signature>System.Runtime.InteropServices.StructLayoutAttribute.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="StructLayoutAttribute" uniqueID="StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind;int;int;System.Runtime.InteropServices.CharSet):void">
				<signature>System.Runtime.InteropServices.StructLayoutAttribute.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind;int;int;System.Runtime.InteropServices.CharSet):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StructLayoutAttribute" uniqueID="StructLayoutAttribute(short):void">
				<signature>System.Runtime.InteropServices.StructLayoutAttribute.StructLayoutAttribute(short):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Value" uniqueID="get_Value():System.Runtime.InteropServices.LayoutKind">
				<signature>System.Runtime.InteropServices.StructLayoutAttribute.get_Value():System.Runtime.InteropServices.LayoutKind</signature>
			</method>
		</class>
		<class name="_Assembly" uniqueID="System.Runtime.InteropServices._Assembly">
			<method accessibility="Public" methodKind="Member" name="CreateInstance" uniqueID="CreateInstance(string):object">
				<signature>System.Runtime.InteropServices._Assembly.CreateInstance(string):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateInstance" uniqueID="CreateInstance(string;bool):object">
				<signature>System.Runtime.InteropServices._Assembly.CreateInstance(string;bool):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateInstance" uniqueID="CreateInstance(string;bool;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo;object[]):object">
				<signature>System.Runtime.InteropServices._Assembly.CreateInstance(string;bool;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo;object[]):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Runtime.InteropServices._Assembly.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.Runtime.InteropServices._Assembly.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.Runtime.InteropServices._Assembly.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetExportedTypes" uniqueID="GetExportedTypes():System.Type[]">
				<signature>System.Runtime.InteropServices._Assembly.GetExportedTypes():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFile" uniqueID="GetFile(string):System.IO.FileStream">
				<signature>System.Runtime.InteropServices._Assembly.GetFile(string):System.IO.FileStream</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFiles" uniqueID="GetFiles():System.IO.FileStream[]">
				<signature>System.Runtime.InteropServices._Assembly.GetFiles():System.IO.FileStream[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFiles" uniqueID="GetFiles(bool):System.IO.FileStream[]">
				<signature>System.Runtime.InteropServices._Assembly.GetFiles(bool):System.IO.FileStream[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Runtime.InteropServices._Assembly.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetLoadedModules" uniqueID="GetLoadedModules():System.Reflection.Module[]">
				<signature>System.Runtime.InteropServices._Assembly.GetLoadedModules():System.Reflection.Module[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetLoadedModules" uniqueID="GetLoadedModules(bool):System.Reflection.Module[]">
				<signature>System.Runtime.InteropServices._Assembly.GetLoadedModules(bool):System.Reflection.Module[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetManifestResourceInfo" uniqueID="GetManifestResourceInfo(string):System.Reflection.ManifestResourceInfo">
				<signature>System.Runtime.InteropServices._Assembly.GetManifestResourceInfo(string):System.Reflection.ManifestResourceInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetManifestResourceNames" uniqueID="GetManifestResourceNames():string[]">
				<signature>System.Runtime.InteropServices._Assembly.GetManifestResourceNames():string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetManifestResourceStream" uniqueID="GetManifestResourceStream(System.Type;string):System.IO.Stream">
				<signature>System.Runtime.InteropServices._Assembly.GetManifestResourceStream(System.Type;string):System.IO.Stream</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetManifestResourceStream" uniqueID="GetManifestResourceStream(string):System.IO.Stream">
				<signature>System.Runtime.InteropServices._Assembly.GetManifestResourceStream(string):System.IO.Stream</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetModule" uniqueID="GetModule(string):System.Reflection.Module">
				<signature>System.Runtime.InteropServices._Assembly.GetModule(string):System.Reflection.Module</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetModules" uniqueID="GetModules():System.Reflection.Module[]">
				<signature>System.Runtime.InteropServices._Assembly.GetModules():System.Reflection.Module[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetModules" uniqueID="GetModules(bool):System.Reflection.Module[]">
				<signature>System.Runtime.InteropServices._Assembly.GetModules(bool):System.Reflection.Module[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetName" uniqueID="GetName():System.Reflection.AssemblyName">
				<signature>System.Runtime.InteropServices._Assembly.GetName():System.Reflection.AssemblyName</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetName" uniqueID="GetName(bool):System.Reflection.AssemblyName">
				<signature>System.Runtime.InteropServices._Assembly.GetName(bool):System.Reflection.AssemblyName</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetObjectData" uniqueID="GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Runtime.InteropServices._Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetReferencedAssemblies" uniqueID="GetReferencedAssemblies():System.Reflection.AssemblyName[]">
				<signature>System.Runtime.InteropServices._Assembly.GetReferencedAssemblies():System.Reflection.AssemblyName[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSatelliteAssembly" uniqueID="GetSatelliteAssembly(System.Globalization.CultureInfo):System.Reflection.Assembly">
				<signature>System.Runtime.InteropServices._Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSatelliteAssembly" uniqueID="GetSatelliteAssembly(System.Globalization.CultureInfo;System.Version):System.Reflection.Assembly">
				<signature>System.Runtime.InteropServices._Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo;System.Version):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType():System.Type">
				<signature>System.Runtime.InteropServices._Assembly.GetType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType(string):System.Type">
				<signature>System.Runtime.InteropServices._Assembly.GetType(string):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType(string;bool):System.Type">
				<signature>System.Runtime.InteropServices._Assembly.GetType(string;bool):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType(string;bool;bool):System.Type">
				<signature>System.Runtime.InteropServices._Assembly.GetType(string;bool;bool):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypes" uniqueID="GetTypes():System.Type[]">
				<signature>System.Runtime.InteropServices._Assembly.GetTypes():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.Runtime.InteropServices._Assembly.IsDefined(System.Type;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LoadModule" uniqueID="LoadModule(string;byte[]):System.Reflection.Module">
				<signature>System.Runtime.InteropServices._Assembly.LoadModule(string;byte[]):System.Reflection.Module</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LoadModule" uniqueID="LoadModule(string;byte[];byte[]):System.Reflection.Module">
				<signature>System.Runtime.InteropServices._Assembly.LoadModule(string;byte[];byte[]):System.Reflection.Module</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Runtime.InteropServices._Assembly.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="add_ModuleResolve" uniqueID="add_ModuleResolve(System.Reflection.ModuleResolveEventHandler):void">
				<signature>System.Runtime.InteropServices._Assembly.add_ModuleResolve(System.Reflection.ModuleResolveEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CodeBase" uniqueID="get_CodeBase():string">
				<signature>System.Runtime.InteropServices._Assembly.get_CodeBase():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_EntryPoint" uniqueID="get_EntryPoint():System.Reflection.MethodInfo">
				<signature>System.Runtime.InteropServices._Assembly.get_EntryPoint():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_EscapedCodeBase" uniqueID="get_EscapedCodeBase():string">
				<signature>System.Runtime.InteropServices._Assembly.get_EscapedCodeBase():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Evidence" uniqueID="get_Evidence():System.Security.Policy.Evidence">
				<signature>System.Runtime.InteropServices._Assembly.get_Evidence():System.Security.Policy.Evidence</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FullName" uniqueID="get_FullName():string">
				<signature>System.Runtime.InteropServices._Assembly.get_FullName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_GlobalAssemblyCache" uniqueID="get_GlobalAssemblyCache():bool">
				<signature>System.Runtime.InteropServices._Assembly.get_GlobalAssemblyCache():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Location" uniqueID="get_Location():string">
				<signature>System.Runtime.InteropServices._Assembly.get_Location():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="remove_ModuleResolve" uniqueID="remove_ModuleResolve(System.Reflection.ModuleResolveEventHandler):void">
				<signature>System.Runtime.InteropServices._Assembly.remove_ModuleResolve(System.Reflection.ModuleResolveEventHandler):void</signature>
			</method>
		</class>
		<class name="_ILGenerator" uniqueID="System.Runtime.InteropServices._ILGenerator">
			<method accessibility="Public" methodKind="Member" name="GetIDsOfNames" uniqueID="GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._ILGenerator.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfo" uniqueID="GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Runtime.InteropServices._ILGenerator.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfoCount" uniqueID="GetTypeInfoCount(unsigned int):void">
				<signature>System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Runtime.InteropServices._ILGenerator.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
		</class>
	</package>
	<package name="System.Security.Util">
		<class name="SiteString" uniqueID="System.Security.Util.SiteString">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Security.Util.SiteString.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="AllLegalCharacters" uniqueID="AllLegalCharacters(string):bool">
				<signature>System.Security.Util.SiteString.AllLegalCharacters(string):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CreateSeparatedSite" uniqueID="CreateSeparatedSite(string):System.Collections.ArrayList">
				<signature>System.Security.Util.SiteString.CreateSeparatedSite(string):System.Collections.ArrayList</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IsLegalDNSChar" uniqueID="IsLegalDNSChar(char):bool">
				<signature>System.Security.Util.SiteString.IsLegalDNSChar(char):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IsNetbiosSplChar" uniqueID="IsNetbiosSplChar(char):bool">
				<signature>System.Security.Util.SiteString.IsNetbiosSplChar(char):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Copy" uniqueID="Copy():System.Security.Util.SiteString">
				<signature>System.Security.Util.SiteString.Copy():System.Security.Util.SiteString</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Equals" uniqueID="Equals(System.Security.Util.SiteString;bool):bool">
				<signature>System.Security.Util.SiteString.Equals(System.Security.Util.SiteString;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Security.Util.SiteString.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Security.Util.SiteString.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Intersect" uniqueID="Intersect(System.Security.Util.SiteString):System.Security.Util.SiteString">
				<signature>System.Security.Util.SiteString.Intersect(System.Security.Util.SiteString):System.Security.Util.SiteString</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsSubsetOf" uniqueID="IsSubsetOf(System.Security.Util.SiteString):bool">
				<signature>System.Security.Util.SiteString.IsSubsetOf(System.Security.Util.SiteString):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsSubsetOf" uniqueID="IsSubsetOf(System.Security.Util.SiteString;bool):bool">
				<signature>System.Security.Util.SiteString.IsSubsetOf(System.Security.Util.SiteString;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SiteString" uniqueID="SiteString():void">
				<signature>System.Security.Util.SiteString.SiteString():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SiteString" uniqueID="SiteString(string):void">
				<signature>System.Security.Util.SiteString.SiteString(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SiteString" uniqueID="SiteString(string;System.Collections.ArrayList):void">
				<signature>System.Security.Util.SiteString.SiteString(string;System.Collections.ArrayList):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Security.Util.SiteString.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Union" uniqueID="Union(System.Security.Util.SiteString):System.Security.Util.SiteString">
				<signature>System.Security.Util.SiteString.Union(System.Security.Util.SiteString):System.Security.Util.SiteString</signature>
			</method>
		</class>
		<class name="TokenBasedSet" uniqueID="System.Security.Util.TokenBasedSet">
			<method accessibility="Protected" methodKind="Member" name="FastIsEmpty" uniqueID="FastIsEmpty():bool">
				<signature>System.Security.Util.TokenBasedSet.FastIsEmpty():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetCount" uniqueID="GetCount():int">
				<signature>System.Security.Util.TokenBasedSet.GetCount():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetItem" uniqueID="GetItem(int):object">
				<signature>System.Security.Util.TokenBasedSet.GetItem(int):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMaxUsedIndex" uniqueID="GetMaxUsedIndex():int">
				<signature>System.Security.Util.TokenBasedSet.GetMaxUsedIndex():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetStartingIndex" uniqueID="GetStartingIndex():int">
				<signature>System.Security.Util.TokenBasedSet.GetStartingIndex():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MoveNext" uniqueID="MoveNext(System.Security.Util.TokenBasedSetEnumerator):bool">
				<signature>System.Security.Util.TokenBasedSet.MoveNext(System.Security.Util.TokenBasedSetEnumerator):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnDeserialized" uniqueID="OnDeserialized(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Security.Util.TokenBasedSet.OnDeserialized(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnDeserializedInternal" uniqueID="OnDeserializedInternal():void">
				<signature>System.Security.Util.TokenBasedSet.OnDeserializedInternal():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnSerialized" uniqueID="OnSerialized(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Security.Util.TokenBasedSet.OnSerialized(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnSerializing" uniqueID="OnSerializing(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Security.Util.TokenBasedSet.OnSerializing(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RemoveItem" uniqueID="RemoveItem(int):object">
				<signature>System.Security.Util.TokenBasedSet.RemoveItem(int):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Reset" uniqueID="Reset():void">
				<signature>System.Security.Util.TokenBasedSet.Reset():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ResetMaxIndex" uniqueID="ResetMaxIndex(object[]):void">
				<signature>System.Security.Util.TokenBasedSet.ResetMaxIndex(object[]):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetItem" uniqueID="SetItem(int;object):void">
				<signature>System.Security.Util.TokenBasedSet.SetItem(int;object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SpecialSplit" uniqueID="SpecialSplit(System.Security.Util.TokenBasedSet;System.Security.Util.TokenBasedSet;bool):void">
				<signature>System.Security.Util.TokenBasedSet.SpecialSplit(System.Security.Util.TokenBasedSet;System.Security.Util.TokenBasedSet;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SpecialUnion" uniqueID="SpecialUnion(System.Security.Util.TokenBasedSet;bool):System.Security.Util.TokenBasedSet">
				<signature>System.Security.Util.TokenBasedSet.SpecialUnion(System.Security.Util.TokenBasedSet;bool):System.Security.Util.TokenBasedSet</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="TokenBasedSet" uniqueID="TokenBasedSet():void">
				<signature>System.Security.Util.TokenBasedSet.TokenBasedSet():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="TokenBasedSet" uniqueID="TokenBasedSet(System.Security.Util.TokenBasedSet):void">
				<signature>System.Security.Util.TokenBasedSet.TokenBasedSet(System.Security.Util.TokenBasedSet):void</signature>
			</method>
		</class>
		<class name="TokenBasedSetEnumerator" uniqueID="System.Security.Util.TokenBasedSetEnumerator">
			<method accessibility="Public" methodKind="Member" name="MoveNext" uniqueID="MoveNext():bool">
				<signature>System.Security.Util.TokenBasedSetEnumerator.MoveNext():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reset" uniqueID="Reset():void">
				<signature>System.Security.Util.TokenBasedSetEnumerator.Reset():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TokenBasedSetEnumerator" uniqueID="TokenBasedSetEnumerator(System.Security.Util.TokenBasedSet):void">
				<signature>System.Security.Util.TokenBasedSetEnumerator.TokenBasedSetEnumerator(System.Security.Util.TokenBasedSet):void</signature>
			</method>
		</class>
		<class name="URLString" uniqueID="System.Security.Util.URLString">
			<method accessibility="Public" methodKind="Static" name="CompareUrls" uniqueID="CompareUrls(System.Security.Util.URLString;System.Security.Util.URLString):bool">
				<signature>System.Security.Util.URLString.CompareUrls(System.Security.Util.URLString;System.Security.Util.URLString):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="PreProcessForExtendedPathRemoval" uniqueID="PreProcessForExtendedPathRemoval(string;bool):string">
				<signature>System.Security.Util.URLString.PreProcessForExtendedPathRemoval(string;bool):string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_GetDeviceName" uniqueID="_GetDeviceName(string):string">
				<signature>System.Security.Util.URLString._GetDeviceName(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Copy" uniqueID="Copy():System.Security.Util.SiteString">
				<signature>System.Security.Util.URLString.Copy():System.Security.Util.SiteString</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DoDeferredParse" uniqueID="DoDeferredParse():void">
				<signature>System.Security.Util.URLString.DoDeferredParse():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DoFastChecks" uniqueID="DoFastChecks(string):void">
				<signature>System.Security.Util.URLString.DoFastChecks(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.Security.Util.URLString):bool">
				<signature>System.Security.Util.URLString.Equals(System.Security.Util.URLString):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Security.Util.URLString.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetDirectoryName" uniqueID="GetDirectoryName():string">
				<signature>System.Security.Util.URLString.GetDirectoryName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFileName" uniqueID="GetFileName():string">
				<signature>System.Security.Util.URLString.GetFileName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Security.Util.URLString.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsSubsetOf" uniqueID="IsSubsetOf(System.Security.Util.SiteString):bool">
				<signature>System.Security.Util.URLString.IsSubsetOf(System.Security.Util.SiteString):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="NormalizeUrl" uniqueID="NormalizeUrl():string">
				<signature>System.Security.Util.URLString.NormalizeUrl():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="OnDeserialized" uniqueID="OnDeserialized(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Security.Util.URLString.OnDeserialized(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnSerialized" uniqueID="OnSerialized(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Security.Util.URLString.OnSerialized(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnSerializing" uniqueID="OnSerializing(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Security.Util.URLString.OnSerializing(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ParseFileURL" uniqueID="ParseFileURL(string):void">
				<signature>System.Security.Util.URLString.ParseFileURL(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ParseNonFileURL" uniqueID="ParseNonFileURL(string):void">
				<signature>System.Security.Util.URLString.ParseNonFileURL(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ParsePort" uniqueID="ParsePort(string):string">
				<signature>System.Security.Util.URLString.ParsePort(string):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ParseProtocol" uniqueID="ParseProtocol(string):string">
				<signature>System.Security.Util.URLString.ParseProtocol(string):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ParseString" uniqueID="ParseString(string;bool):void">
				<signature>System.Security.Util.URLString.ParseString(string;bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="PreProcessURL" uniqueID="PreProcessURL(string;bool):string">
				<signature>System.Security.Util.URLString.PreProcessURL(string;bool):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SpecialNormalizeUrl" uniqueID="SpecialNormalizeUrl():System.Security.Util.URLString">
				<signature>System.Security.Util.URLString.SpecialNormalizeUrl():System.Security.Util.URLString</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Security.Util.URLString.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="URLString" uniqueID="URLString():void">
				<signature>System.Security.Util.URLString.URLString():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="URLString" uniqueID="URLString(string):void">
				<signature>System.Security.Util.URLString.URLString(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="URLString" uniqueID="URLString(string;bool):void">
				<signature>System.Security.Util.URLString.URLString(string;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="URLString" uniqueID="URLString(string;bool;bool):void">
				<signature>System.Security.Util.URLString.URLString(string;bool;bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="UnescapeURL" uniqueID="UnescapeURL(string):string">
				<signature>System.Security.Util.URLString.UnescapeURL(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Directory" uniqueID="get_Directory():string">
				<signature>System.Security.Util.URLString.get_Directory():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Host" uniqueID="get_Host():string">
				<signature>System.Security.Util.URLString.get_Host():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Port" uniqueID="get_Port():string">
				<signature>System.Security.Util.URLString.get_Port():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Scheme" uniqueID="get_Scheme():string">
				<signature>System.Security.Util.URLString.get_Scheme():string</signature>
			</method>
		</class>
	</package>
	<package name="System.Deployment.Internal.Isolation">
		<class name="IDefinitionIdentity" uniqueID="System.Deployment.Internal.Isolation.IDefinitionIdentity">
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone(native signed int;System.Deployment.Internal.Isolation.IDENTITY_ATTRIBUTE[]):System.Deployment.Internal.Isolation.IDefinitionIdentity">
				<signature>System.Deployment.Internal.Isolation.IDefinitionIdentity.Clone(native signed int;System.Deployment.Internal.Isolation.IDENTITY_ATTRIBUTE[]):System.Deployment.Internal.Isolation.IDefinitionIdentity</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EnumAttributes" uniqueID="EnumAttributes():System.Deployment.Internal.Isolation.IEnumIDENTITY_ATTRIBUTE">
				<signature>System.Deployment.Internal.Isolation.IDefinitionIdentity.EnumAttributes():System.Deployment.Internal.Isolation.IEnumIDENTITY_ATTRIBUTE</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAttribute" uniqueID="GetAttribute(string;string):string">
				<signature>System.Deployment.Internal.Isolation.IDefinitionIdentity.GetAttribute(string;string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetAttribute" uniqueID="SetAttribute(string;string;string):void">
				<signature>System.Deployment.Internal.Isolation.IDefinitionIdentity.SetAttribute(string;string;string):void</signature>
			</method>
		</class>
		<class name="IEnumDefinitionIdentity" uniqueID="System.Deployment.Internal.Isolation.IEnumDefinitionIdentity">
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone():System.Deployment.Internal.Isolation.IEnumDefinitionIdentity">
				<signature>System.Deployment.Internal.Isolation.IEnumDefinitionIdentity.Clone():System.Deployment.Internal.Isolation.IEnumDefinitionIdentity</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Next" uniqueID="Next(unsigned int;System.Deployment.Internal.Isolation.IDefinitionIdentity[]):unsigned int">
				<signature>System.Deployment.Internal.Isolation.IEnumDefinitionIdentity.Next(unsigned int;System.Deployment.Internal.Isolation.IDefinitionIdentity[]):unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reset" uniqueID="Reset():void">
				<signature>System.Deployment.Internal.Isolation.IEnumDefinitionIdentity.Reset():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Skip" uniqueID="Skip(unsigned int):void">
				<signature>System.Deployment.Internal.Isolation.IEnumDefinitionIdentity.Skip(unsigned int):void</signature>
			</method>
		</class>
		<class name="IReferenceIdentity" uniqueID="System.Deployment.Internal.Isolation.IReferenceIdentity">
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone(native signed int;System.Deployment.Internal.Isolation.IDENTITY_ATTRIBUTE[]):System.Deployment.Internal.Isolation.IReferenceIdentity">
				<signature>System.Deployment.Internal.Isolation.IReferenceIdentity.Clone(native signed int;System.Deployment.Internal.Isolation.IDENTITY_ATTRIBUTE[]):System.Deployment.Internal.Isolation.IReferenceIdentity</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EnumAttributes" uniqueID="EnumAttributes():System.Deployment.Internal.Isolation.IEnumIDENTITY_ATTRIBUTE">
				<signature>System.Deployment.Internal.Isolation.IReferenceIdentity.EnumAttributes():System.Deployment.Internal.Isolation.IEnumIDENTITY_ATTRIBUTE</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAttribute" uniqueID="GetAttribute(string;string):string">
				<signature>System.Deployment.Internal.Isolation.IReferenceIdentity.GetAttribute(string;string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetAttribute" uniqueID="SetAttribute(string;string;string):void">
				<signature>System.Deployment.Internal.Isolation.IReferenceIdentity.SetAttribute(string;string;string):void</signature>
			</method>
		</class>
		<class name="ISection" uniqueID="System.Deployment.Internal.Isolation.ISection">
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():unsigned int">
				<signature>System.Deployment.Internal.Isolation.ISection.get_Count():unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SectionID" uniqueID="get_SectionID():unsigned int">
				<signature>System.Deployment.Internal.Isolation.ISection.get_SectionID():unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SectionName" uniqueID="get_SectionName():string">
				<signature>System.Deployment.Internal.Isolation.ISection.get_SectionName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get__NewEnum" uniqueID="get__NewEnum():object">
				<signature>System.Deployment.Internal.Isolation.ISection.get__NewEnum():object</signature>
			</method>
		</class>
		<class name="IDefinitionAppId" uniqueID="System.Deployment.Internal.Isolation.IDefinitionAppId">
			<method accessibility="Public" methodKind="Member" name="EnumAppPath" uniqueID="EnumAppPath():System.Deployment.Internal.Isolation.IEnumDefinitionIdentity">
				<signature>System.Deployment.Internal.Isolation.IDefinitionAppId.EnumAppPath():System.Deployment.Internal.Isolation.IEnumDefinitionIdentity</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetAppPath" uniqueID="SetAppPath(unsigned int;System.Deployment.Internal.Isolation.IDefinitionIdentity[]):void">
				<signature>System.Deployment.Internal.Isolation.IDefinitionAppId.SetAppPath(unsigned int;System.Deployment.Internal.Isolation.IDefinitionIdentity[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Codebase" uniqueID="get_Codebase():string">
				<signature>System.Deployment.Internal.Isolation.IDefinitionAppId.get_Codebase():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SubscriptionId" uniqueID="get_SubscriptionId():string">
				<signature>System.Deployment.Internal.Isolation.IDefinitionAppId.get_SubscriptionId():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="put_Codebase" uniqueID="put_Codebase(string):void">
				<signature>System.Deployment.Internal.Isolation.IDefinitionAppId.put_Codebase(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="put_SubscriptionId" uniqueID="put_SubscriptionId(string):void">
				<signature>System.Deployment.Internal.Isolation.IDefinitionAppId.put_SubscriptionId(string):void</signature>
			</method>
		</class>
		<class name="IEnumIDENTITY_ATTRIBUTE" uniqueID="System.Deployment.Internal.Isolation.IEnumIDENTITY_ATTRIBUTE">
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone():System.Deployment.Internal.Isolation.IEnumIDENTITY_ATTRIBUTE">
				<signature>System.Deployment.Internal.Isolation.IEnumIDENTITY_ATTRIBUTE.Clone():System.Deployment.Internal.Isolation.IEnumIDENTITY_ATTRIBUTE</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CurrentIntoBuffer" uniqueID="CurrentIntoBuffer(native signed int;byte[]):native signed int">
				<signature>System.Deployment.Internal.Isolation.IEnumIDENTITY_ATTRIBUTE.CurrentIntoBuffer(native signed int;byte[]):native signed int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Next" uniqueID="Next(unsigned int;System.Deployment.Internal.Isolation.IDENTITY_ATTRIBUTE[]):unsigned int">
				<signature>System.Deployment.Internal.Isolation.IEnumIDENTITY_ATTRIBUTE.Next(unsigned int;System.Deployment.Internal.Isolation.IDENTITY_ATTRIBUTE[]):unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reset" uniqueID="Reset():void">
				<signature>System.Deployment.Internal.Isolation.IEnumIDENTITY_ATTRIBUTE.Reset():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Skip" uniqueID="Skip(unsigned int):void">
				<signature>System.Deployment.Internal.Isolation.IEnumIDENTITY_ATTRIBUTE.Skip(unsigned int):void</signature>
			</method>
		</class>
		<class name="ISectionEntry" uniqueID="System.Deployment.Internal.Isolation.ISectionEntry">
			<method accessibility="Public" methodKind="Member" name="GetField" uniqueID="GetField(unsigned int):object">
				<signature>System.Deployment.Internal.Isolation.ISectionEntry.GetField(unsigned int):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFieldName" uniqueID="GetFieldName(unsigned int):string">
				<signature>System.Deployment.Internal.Isolation.ISectionEntry.GetFieldName(unsigned int):string</signature>
			</method>
		</class>
	</package>
	<package name="System.Reflection.Cache">
		<class name="ClearCacheEventArgs" uniqueID="System.Reflection.Cache.ClearCacheEventArgs">
			<method accessibility="Public" methodKind="Member" name="ClearCacheEventArgs" uniqueID="ClearCacheEventArgs():void">
				<signature>System.Reflection.Cache.ClearCacheEventArgs.ClearCacheEventArgs():void</signature>
			</method>
		</class>
		<class name="InternalCache" uniqueID="System.Reflection.Cache.InternalCache">
			<method accessibility="Private" methodKind="Member" name="FindObjectPosition" uniqueID="FindObjectPosition(System.Reflection.Cache.InternalCacheItem[];int;System.Reflection.Cache.CacheObjType;bool):int">
				<signature>System.Reflection.Cache.InternalCache.FindObjectPosition(System.Reflection.Cache.InternalCacheItem[];int;System.Reflection.Cache.CacheObjType;bool):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalCache" uniqueID="InternalCache(string):void">
				<signature>System.Reflection.Cache.InternalCache.InternalCache(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="LogAction" uniqueID="LogAction(System.Reflection.Cache.CacheAction;System.Reflection.Cache.CacheObjType):void">
				<signature>System.Reflection.Cache.InternalCache.LogAction(System.Reflection.Cache.CacheAction;System.Reflection.Cache.CacheObjType):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="LogAction" uniqueID="LogAction(System.Reflection.Cache.CacheAction;System.Reflection.Cache.CacheObjType;object):void">
				<signature>System.Reflection.Cache.InternalCache.LogAction(System.Reflection.Cache.CacheAction;System.Reflection.Cache.CacheObjType;object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Item" uniqueID="get_Item(System.Reflection.Cache.CacheObjType):object">
				<signature>System.Reflection.Cache.InternalCache.get_Item(System.Reflection.Cache.CacheObjType):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_Item" uniqueID="set_Item(System.Reflection.Cache.CacheObjType;object):void">
				<signature>System.Reflection.Cache.InternalCache.set_Item(System.Reflection.Cache.CacheObjType;object):void</signature>
			</method>
		</class>
	</package>
	<package name="System.Runtime.Hosting">
		<class name="ActivationArguments" uniqueID="System.Runtime.Hosting.ActivationArguments">
			<method accessibility="Private" methodKind="Member" name="ActivationArguments" uniqueID="ActivationArguments():void">
				<signature>System.Runtime.Hosting.ActivationArguments.ActivationArguments():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ActivationArguments" uniqueID="ActivationArguments(System.ActivationContext):void">
				<signature>System.Runtime.Hosting.ActivationArguments.ActivationArguments(System.ActivationContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ActivationArguments" uniqueID="ActivationArguments(System.ActivationContext;string[]):void">
				<signature>System.Runtime.Hosting.ActivationArguments.ActivationArguments(System.ActivationContext;string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ActivationArguments" uniqueID="ActivationArguments(System.ApplicationIdentity):void">
				<signature>System.Runtime.Hosting.ActivationArguments.ActivationArguments(System.ApplicationIdentity):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ActivationArguments" uniqueID="ActivationArguments(System.ApplicationIdentity;string[]):void">
				<signature>System.Runtime.Hosting.ActivationArguments.ActivationArguments(System.ApplicationIdentity;string[]):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ActivationArguments" uniqueID="ActivationArguments(string;string[];string[]):void">
				<signature>System.Runtime.Hosting.ActivationArguments.ActivationArguments(string;string[];string[]):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ActivateInstance" uniqueID="get_ActivateInstance():bool">
				<signature>System.Runtime.Hosting.ActivationArguments.get_ActivateInstance():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ActivationContext" uniqueID="get_ActivationContext():System.ActivationContext">
				<signature>System.Runtime.Hosting.ActivationArguments.get_ActivationContext():System.ActivationContext</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ActivationData" uniqueID="get_ActivationData():string[]">
				<signature>System.Runtime.Hosting.ActivationArguments.get_ActivationData():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ApplicationFullName" uniqueID="get_ApplicationFullName():string">
				<signature>System.Runtime.Hosting.ActivationArguments.get_ApplicationFullName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ApplicationIdentity" uniqueID="get_ApplicationIdentity():System.ApplicationIdentity">
				<signature>System.Runtime.Hosting.ActivationArguments.get_ApplicationIdentity():System.ApplicationIdentity</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ApplicationManifestPaths" uniqueID="get_ApplicationManifestPaths():string[]">
				<signature>System.Runtime.Hosting.ActivationArguments.get_ApplicationManifestPaths():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_UseFusionActivationContext" uniqueID="get_UseFusionActivationContext():bool">
				<signature>System.Runtime.Hosting.ActivationArguments.get_UseFusionActivationContext():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_ActivateInstance" uniqueID="set_ActivateInstance(bool):void">
				<signature>System.Runtime.Hosting.ActivationArguments.set_ActivateInstance(bool):void</signature>
			</method>
		</class>
		<class name="ApplicationActivator" uniqueID="System.Runtime.Hosting.ApplicationActivator">
			<method accessibility="Protected" methodKind="Static" name="CreateInstanceHelper" uniqueID="CreateInstanceHelper(System.AppDomainSetup):System.Runtime.Remoting.ObjectHandle">
				<signature>System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup):System.Runtime.Remoting.ObjectHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ApplicationActivator" uniqueID="ApplicationActivator():void">
				<signature>System.Runtime.Hosting.ApplicationActivator.ApplicationActivator():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateInstance" uniqueID="CreateInstance(System.ActivationContext):System.Runtime.Remoting.ObjectHandle">
				<signature>System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext):System.Runtime.Remoting.ObjectHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateInstance" uniqueID="CreateInstance(System.ActivationContext;string[]):System.Runtime.Remoting.ObjectHandle">
				<signature>System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext;string[]):System.Runtime.Remoting.ObjectHandle</signature>
			</method>
		</class>
	</package>
	<package name="System.Security.Cryptography.X509Certificates">
		<class name="SafeCertContextHandle" uniqueID="System.Security.Cryptography.X509Certificates.SafeCertContextHandle">
			<method accessibility="Private" methodKind="Static" name="_FreePCertContext" uniqueID="_FreePCertContext(native signed int):void">
				<signature>System.Security.Cryptography.X509Certificates.SafeCertContextHandle._FreePCertContext(native signed int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_InvalidHandle" uniqueID="get_InvalidHandle():System.Security.Cryptography.X509Certificates.SafeCertContextHandle">
				<signature>System.Security.Cryptography.X509Certificates.SafeCertContextHandle.get_InvalidHandle():System.Security.Cryptography.X509Certificates.SafeCertContextHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ReleaseHandle" uniqueID="ReleaseHandle():bool">
				<signature>System.Security.Cryptography.X509Certificates.SafeCertContextHandle.ReleaseHandle():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SafeCertContextHandle" uniqueID="SafeCertContextHandle():void">
				<signature>System.Security.Cryptography.X509Certificates.SafeCertContextHandle.SafeCertContextHandle():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SafeCertContextHandle" uniqueID="SafeCertContextHandle(native signed int):void">
				<signature>System.Security.Cryptography.X509Certificates.SafeCertContextHandle.SafeCertContextHandle(native signed int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_pCertContext" uniqueID="get_pCertContext():native signed int">
				<signature>System.Security.Cryptography.X509Certificates.SafeCertContextHandle.get_pCertContext():native signed int</signature>
			</method>
		</class>
		<class name="X509Certificate" uniqueID="System.Security.Cryptography.X509Certificates.X509Certificate">
			<method accessibility="Public" methodKind="Static" name="CreateFromCertFile" uniqueID="CreateFromCertFile(string):System.Security.Cryptography.X509Certificates.X509Certificate">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.CreateFromCertFile(string):System.Security.Cryptography.X509Certificates.X509Certificate</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CreateFromSignedFile" uniqueID="CreateFromSignedFile(string):System.Security.Cryptography.X509Certificates.X509Certificate">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.CreateFromSignedFile(string):System.Security.Cryptography.X509Certificates.X509Certificate</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.Security.Cryptography.X509Certificates.X509Certificate):bool">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Export" uniqueID="Export(System.Security.Cryptography.X509Certificates.X509ContentType):byte[]">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType):byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Export" uniqueID="Export(System.Security.Cryptography.X509Certificates.X509ContentType;System.Security.SecureString):byte[]">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType;System.Security.SecureString):byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Export" uniqueID="Export(System.Security.Cryptography.X509Certificates.X509ContentType;string):byte[]">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType;string):byte[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ExportHelper" uniqueID="ExportHelper(System.Security.Cryptography.X509Certificates.X509ContentType;object):byte[]">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.ExportHelper(System.Security.Cryptography.X509Certificates.X509ContentType;object):byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCertHash" uniqueID="GetCertHash():byte[]">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHash():byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCertHashString" uniqueID="GetCertHashString():string">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.GetCertHashString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEffectiveDateString" uniqueID="GetEffectiveDateString():string">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.GetEffectiveDateString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetExpirationDateString" uniqueID="GetExpirationDateString():string">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.GetExpirationDateString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFormat" uniqueID="GetFormat():string">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.GetFormat():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetIssuerName" uniqueID="GetIssuerName():string">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.GetIssuerName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetKeyAlgorithm" uniqueID="GetKeyAlgorithm():string">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithm():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetKeyAlgorithmParameters" uniqueID="GetKeyAlgorithmParameters():byte[]">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParameters():byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetKeyAlgorithmParametersString" uniqueID="GetKeyAlgorithmParametersString():string">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.GetKeyAlgorithmParametersString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetName" uniqueID="GetName():string">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.GetName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetPublicKey" uniqueID="GetPublicKey():byte[]">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKey():byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetPublicKeyString" uniqueID="GetPublicKeyString():string">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.GetPublicKeyString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRawCertData" uniqueID="GetRawCertData():byte[]">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.GetRawCertData():byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRawCertDataString" uniqueID="GetRawCertDataString():string">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.GetRawCertDataString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSerialNumber" uniqueID="GetSerialNumber():byte[]">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumber():byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSerialNumberString" uniqueID="GetSerialNumberString():string">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.GetSerialNumberString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Import" uniqueID="Import(byte[]):void">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.Import(byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Import" uniqueID="Import(byte[];System.Security.SecureString;System.Security.Cryptography.X509Certificates.X509KeyStorageFlags):void">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.Import(byte[];System.Security.SecureString;System.Security.Cryptography.X509Certificates.X509KeyStorageFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Import" uniqueID="Import(byte[];string;System.Security.Cryptography.X509Certificates.X509KeyStorageFlags):void">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.Import(byte[];string;System.Security.Cryptography.X509Certificates.X509KeyStorageFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Import" uniqueID="Import(string):void">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.Import(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Import" uniqueID="Import(string;System.Security.SecureString;System.Security.Cryptography.X509Certificates.X509KeyStorageFlags):void">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.Import(string;System.Security.SecureString;System.Security.Cryptography.X509Certificates.X509KeyStorageFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Import" uniqueID="Import(string;string;System.Security.Cryptography.X509Certificates.X509KeyStorageFlags):void">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.Import(string;string;System.Security.Cryptography.X509Certificates.X509KeyStorageFlags):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="LoadCertificateFromBlob" uniqueID="LoadCertificateFromBlob(byte[];object;System.Security.Cryptography.X509Certificates.X509KeyStorageFlags):void">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.LoadCertificateFromBlob(byte[];object;System.Security.Cryptography.X509Certificates.X509KeyStorageFlags):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="LoadCertificateFromFile" uniqueID="LoadCertificateFromFile(string;object;System.Security.Cryptography.X509Certificates.X509KeyStorageFlags):void">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.LoadCertificateFromFile(string;object;System.Security.Cryptography.X509Certificates.X509KeyStorageFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reset" uniqueID="Reset():void">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.Reset():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SetThumbprint" uniqueID="SetThumbprint():void">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.SetThumbprint():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization" uniqueID="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object):void">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.Serialization.ISerializable.GetObjectData" uniqueID="System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString(bool):string">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.ToString(bool):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="X509Certificate" uniqueID="X509Certificate():void">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="X509Certificate" uniqueID="X509Certificate(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="X509Certificate" uniqueID="X509Certificate(System.Security.Cryptography.X509Certificates.X509Certificate):void">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(System.Security.Cryptography.X509Certificates.X509Certificate):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="X509Certificate" uniqueID="X509Certificate(byte[]):void">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="X509Certificate" uniqueID="X509Certificate(byte[];System.Security.SecureString):void">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(byte[];System.Security.SecureString):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="X509Certificate" uniqueID="X509Certificate(byte[];System.Security.SecureString;System.Security.Cryptography.X509Certificates.X509KeyStorageFlags):void">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(byte[];System.Security.SecureString;System.Security.Cryptography.X509Certificates.X509KeyStorageFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="X509Certificate" uniqueID="X509Certificate(byte[];string):void">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(byte[];string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="X509Certificate" uniqueID="X509Certificate(byte[];string;System.Security.Cryptography.X509Certificates.X509KeyStorageFlags):void">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(byte[];string;System.Security.Cryptography.X509Certificates.X509KeyStorageFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="X509Certificate" uniqueID="X509Certificate(native signed int):void">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="X509Certificate" uniqueID="X509Certificate(string):void">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="X509Certificate" uniqueID="X509Certificate(string;System.Security.SecureString):void">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(string;System.Security.SecureString):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="X509Certificate" uniqueID="X509Certificate(string;System.Security.SecureString;System.Security.Cryptography.X509Certificates.X509KeyStorageFlags):void">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(string;System.Security.SecureString;System.Security.Cryptography.X509Certificates.X509KeyStorageFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="X509Certificate" uniqueID="X509Certificate(string;string):void">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(string;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="X509Certificate" uniqueID="X509Certificate(string;string;System.Security.Cryptography.X509Certificates.X509KeyStorageFlags):void">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.X509Certificate(string;string;System.Security.Cryptography.X509Certificates.X509KeyStorageFlags):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_CertContext" uniqueID="get_CertContext():System.Security.Cryptography.X509Certificates.SafeCertContextHandle">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.get_CertContext():System.Security.Cryptography.X509Certificates.SafeCertContextHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Handle" uniqueID="get_Handle():native signed int">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.get_Handle():native signed int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Issuer" uniqueID="get_Issuer():string">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.get_Issuer():string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_NotAfter" uniqueID="get_NotAfter():System.DateTime">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.get_NotAfter():System.DateTime</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_NotBefore" uniqueID="get_NotBefore():System.DateTime">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.get_NotBefore():System.DateTime</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_RawData" uniqueID="get_RawData():byte[]">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.get_RawData():byte[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_SerialNumber" uniqueID="get_SerialNumber():string">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.get_SerialNumber():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Subject" uniqueID="get_Subject():string">
				<signature>System.Security.Cryptography.X509Certificates.X509Certificate.get_Subject():string</signature>
			</method>
		</class>
	</package>
	<package name="System.Threading">
		<class name="ContextCallback" uniqueID="System.Threading.ContextCallback">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(object;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Threading.ContextCallback.BeginInvoke(object;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ContextCallback" uniqueID="ContextCallback(object;native signed int):void">
				<signature>System.Threading.ContextCallback.ContextCallback(object;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):void">
				<signature>System.Threading.ContextCallback.EndInvoke(System.IAsyncResult):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(object):void">
				<signature>System.Threading.ContextCallback.Invoke(object):void</signature>
			</method>
		</class>
		<class name="ManualResetEvent" uniqueID="System.Threading.ManualResetEvent">
			<method accessibility="Public" methodKind="Member" name="ManualResetEvent" uniqueID="ManualResetEvent(bool):void">
				<signature>System.Threading.ManualResetEvent.ManualResetEvent(bool):void</signature>
			</method>
		</class>
		<class name="CompressedStackSwitcher" uniqueID="System.Threading.CompressedStackSwitcher">
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.Threading.CompressedStackSwitcher;System.Threading.CompressedStackSwitcher):bool">
				<signature>System.Threading.CompressedStackSwitcher.op_Equality(System.Threading.CompressedStackSwitcher;System.Threading.CompressedStackSwitcher):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.Threading.CompressedStackSwitcher;System.Threading.CompressedStackSwitcher):bool">
				<signature>System.Threading.CompressedStackSwitcher.op_Inequality(System.Threading.CompressedStackSwitcher;System.Threading.CompressedStackSwitcher):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Threading.CompressedStackSwitcher.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Threading.CompressedStackSwitcher.GetHashCode():int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IDisposable.Dispose" uniqueID="System.IDisposable.Dispose():void">
				<signature>System.Threading.CompressedStackSwitcher.System.IDisposable.Dispose():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Undo" uniqueID="Undo():void">
				<signature>System.Threading.CompressedStackSwitcher.Undo():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="UndoNoThrow" uniqueID="UndoNoThrow():bool">
				<signature>System.Threading.CompressedStackSwitcher.UndoNoThrow():bool</signature>
			</method>
		</class>
		<class name="DomainCompressedStack" uniqueID="System.Threading.DomainCompressedStack">
			<method accessibility="Private" methodKind="Static" name="CreateManagedObject" uniqueID="CreateManagedObject(native signed int):System.Threading.DomainCompressedStack">
				<signature>System.Threading.DomainCompressedStack.CreateManagedObject(native signed int):System.Threading.DomainCompressedStack</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetDescCount" uniqueID="GetDescCount(native signed int):int">
				<signature>System.Threading.DomainCompressedStack.GetDescCount(native signed int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetDescriptorInfo" uniqueID="GetDescriptorInfo(native signed int;int;System.Security.PermissionSet;System.Security.PermissionSet;System.Reflection.Assembly;System.Security.FrameSecurityDescriptor):bool">
				<signature>System.Threading.DomainCompressedStack.GetDescriptorInfo(native signed int;int;System.Security.PermissionSet;System.Security.PermissionSet;System.Reflection.Assembly;System.Security.FrameSecurityDescriptor):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetDomainPermissionSets" uniqueID="GetDomainPermissionSets(native signed int;System.Security.PermissionSet;System.Security.PermissionSet):void">
				<signature>System.Threading.DomainCompressedStack.GetDomainPermissionSets(native signed int;System.Security.PermissionSet;System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="IgnoreDomain" uniqueID="IgnoreDomain(native signed int):bool">
				<signature>System.Threading.DomainCompressedStack.IgnoreDomain(native signed int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DomainCompressedStack" uniqueID="DomainCompressedStack():void">
				<signature>System.Threading.DomainCompressedStack.DomainCompressedStack():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ConstructionHalted" uniqueID="get_ConstructionHalted():bool">
				<signature>System.Threading.DomainCompressedStack.get_ConstructionHalted():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_PLS" uniqueID="get_PLS():System.Security.PermissionListSet">
				<signature>System.Threading.DomainCompressedStack.get_PLS():System.Security.PermissionListSet</signature>
			</method>
		</class>
		<class name="EventWaitHandle" uniqueID="System.Threading.EventWaitHandle">
			<method accessibility="Public" methodKind="Static" name="OpenExisting" uniqueID="OpenExisting(string):System.Threading.EventWaitHandle">
				<signature>System.Threading.EventWaitHandle.OpenExisting(string):System.Threading.EventWaitHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="OpenExisting" uniqueID="OpenExisting(string;System.Security.AccessControl.EventWaitHandleRights):System.Threading.EventWaitHandle">
				<signature>System.Threading.EventWaitHandle.OpenExisting(string;System.Security.AccessControl.EventWaitHandleRights):System.Threading.EventWaitHandle</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="EventWaitHandle" uniqueID="EventWaitHandle(Microsoft.Win32.SafeHandles.SafeWaitHandle):void">
				<signature>System.Threading.EventWaitHandle.EventWaitHandle(Microsoft.Win32.SafeHandles.SafeWaitHandle):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EventWaitHandle" uniqueID="EventWaitHandle(bool;System.Threading.EventResetMode):void">
				<signature>System.Threading.EventWaitHandle.EventWaitHandle(bool;System.Threading.EventResetMode):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EventWaitHandle" uniqueID="EventWaitHandle(bool;System.Threading.EventResetMode;string):void">
				<signature>System.Threading.EventWaitHandle.EventWaitHandle(bool;System.Threading.EventResetMode;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EventWaitHandle" uniqueID="EventWaitHandle(bool;System.Threading.EventResetMode;string;bool):void">
				<signature>System.Threading.EventWaitHandle.EventWaitHandle(bool;System.Threading.EventResetMode;string;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EventWaitHandle" uniqueID="EventWaitHandle(bool;System.Threading.EventResetMode;string;bool;System.Security.AccessControl.EventWaitHandleSecurity):void">
				<signature>System.Threading.EventWaitHandle.EventWaitHandle(bool;System.Threading.EventResetMode;string;bool;System.Security.AccessControl.EventWaitHandleSecurity):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAccessControl" uniqueID="GetAccessControl():System.Security.AccessControl.EventWaitHandleSecurity">
				<signature>System.Threading.EventWaitHandle.GetAccessControl():System.Security.AccessControl.EventWaitHandleSecurity</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reset" uniqueID="Reset():bool">
				<signature>System.Threading.EventWaitHandle.Reset():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Set" uniqueID="Set():bool">
				<signature>System.Threading.EventWaitHandle.Set():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetAccessControl" uniqueID="SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity):void">
				<signature>System.Threading.EventWaitHandle.SetAccessControl(System.Security.AccessControl.EventWaitHandleSecurity):void</signature>
			</method>
		</class>
		<class name="HostExecutionContext" uniqueID="System.Threading.HostExecutionContext">
			<method accessibility="Public" methodKind="Member" name="CreateCopy" uniqueID="CreateCopy():System.Threading.HostExecutionContext">
				<signature>System.Threading.HostExecutionContext.CreateCopy():System.Threading.HostExecutionContext</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="HostExecutionContext" uniqueID="HostExecutionContext():void">
				<signature>System.Threading.HostExecutionContext.HostExecutionContext():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="HostExecutionContext" uniqueID="HostExecutionContext(object):void">
				<signature>System.Threading.HostExecutionContext.HostExecutionContext(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_State" uniqueID="get_State():object">
				<signature>System.Threading.HostExecutionContext.get_State():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_State" uniqueID="set_State(object):void">
				<signature>System.Threading.HostExecutionContext.set_State(object):void</signature>
			</method>
		</class>
		<class name="HostExecutionContextManager" uniqueID="System.Threading.HostExecutionContextManager">
			<method accessibility="Protected" methodKind="Static" name="CaptureHostExecutionContext" uniqueID="CaptureHostExecutionContext():System.Threading.HostExecutionContext">
				<signature>System.Threading.HostExecutionContextManager.CaptureHostExecutionContext():System.Threading.HostExecutionContext</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CaptureHostSecurityContext" uniqueID="CaptureHostSecurityContext(System.Runtime.InteropServices.SafeHandle):int">
				<signature>System.Threading.HostExecutionContextManager.CaptureHostSecurityContext(System.Runtime.InteropServices.SafeHandle):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CheckIfHosted" uniqueID="CheckIfHosted():bool">
				<signature>System.Threading.HostExecutionContextManager.CheckIfHosted():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CloneHostSecurityContext" uniqueID="CloneHostSecurityContext(System.Runtime.InteropServices.SafeHandle;System.Runtime.InteropServices.SafeHandle):int">
				<signature>System.Threading.HostExecutionContextManager.CloneHostSecurityContext(System.Runtime.InteropServices.SafeHandle;System.Runtime.InteropServices.SafeHandle):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetCurrentHostExecutionContextManager" uniqueID="GetCurrentHostExecutionContextManager():System.Threading.HostExecutionContextManager">
				<signature>System.Threading.HostExecutionContextManager.GetCurrentHostExecutionContextManager():System.Threading.HostExecutionContextManager</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetInternalHostExecutionContextManager" uniqueID="GetInternalHostExecutionContextManager():System.Threading.HostExecutionContextManager">
				<signature>System.Threading.HostExecutionContextManager.GetInternalHostExecutionContextManager():System.Threading.HostExecutionContextManager</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="HostSecurityManagerPresent" uniqueID="HostSecurityManagerPresent():bool">
				<signature>System.Threading.HostExecutionContextManager.HostSecurityManagerPresent():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ReleaseHostSecurityContext" uniqueID="ReleaseHostSecurityContext(native signed int):int">
				<signature>System.Threading.HostExecutionContextManager.ReleaseHostSecurityContext(native signed int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SetHostExecutionContextInternal" uniqueID="SetHostExecutionContextInternal(System.Threading.HostExecutionContext):object">
				<signature>System.Threading.HostExecutionContextManager.SetHostExecutionContextInternal(System.Threading.HostExecutionContext):object</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="SetHostSecurityContext" uniqueID="SetHostSecurityContext(System.Runtime.InteropServices.SafeHandle;bool;System.Runtime.InteropServices.SafeHandle):int">
				<signature>System.Threading.HostExecutionContextManager.SetHostSecurityContext(System.Runtime.InteropServices.SafeHandle;bool;System.Runtime.InteropServices.SafeHandle):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Capture" uniqueID="Capture():System.Threading.HostExecutionContext">
				<signature>System.Threading.HostExecutionContextManager.Capture():System.Threading.HostExecutionContext</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="HostExecutionContextManager" uniqueID="HostExecutionContextManager():void">
				<signature>System.Threading.HostExecutionContextManager.HostExecutionContextManager():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Revert" uniqueID="Revert(object):void">
				<signature>System.Threading.HostExecutionContextManager.Revert(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetHostExecutionContext" uniqueID="SetHostExecutionContext(System.Threading.HostExecutionContext):object">
				<signature>System.Threading.HostExecutionContextManager.SetHostExecutionContext(System.Threading.HostExecutionContext):object</signature>
			</method>
		</class>
		<class name="LockCookie" uniqueID="System.Threading.LockCookie">
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.Threading.LockCookie;System.Threading.LockCookie):bool">
				<signature>System.Threading.LockCookie.op_Equality(System.Threading.LockCookie;System.Threading.LockCookie):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.Threading.LockCookie;System.Threading.LockCookie):bool">
				<signature>System.Threading.LockCookie.op_Inequality(System.Threading.LockCookie;System.Threading.LockCookie):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.Threading.LockCookie):bool">
				<signature>System.Threading.LockCookie.Equals(System.Threading.LockCookie):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Threading.LockCookie.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Threading.LockCookie.GetHashCode():int</signature>
			</method>
		</class>
		<class name="ReaderWriterLock" uniqueID="System.Threading.ReaderWriterLock">
			<method accessibility="Public" methodKind="Member" name="AcquireReaderLock" uniqueID="AcquireReaderLock(System.TimeSpan):void">
				<signature>System.Threading.ReaderWriterLock.AcquireReaderLock(System.TimeSpan):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AcquireReaderLock" uniqueID="AcquireReaderLock(int):void">
				<signature>System.Threading.ReaderWriterLock.AcquireReaderLock(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="AcquireReaderLockInternal" uniqueID="AcquireReaderLockInternal(int):void">
				<signature>System.Threading.ReaderWriterLock.AcquireReaderLockInternal(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AcquireWriterLock" uniqueID="AcquireWriterLock(System.TimeSpan):void">
				<signature>System.Threading.ReaderWriterLock.AcquireWriterLock(System.TimeSpan):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AcquireWriterLock" uniqueID="AcquireWriterLock(int):void">
				<signature>System.Threading.ReaderWriterLock.AcquireWriterLock(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="AcquireWriterLockInternal" uniqueID="AcquireWriterLockInternal(int):void">
				<signature>System.Threading.ReaderWriterLock.AcquireWriterLockInternal(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AnyWritersSince" uniqueID="AnyWritersSince(int):bool">
				<signature>System.Threading.ReaderWriterLock.AnyWritersSince(int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DowngradeFromWriterLock" uniqueID="DowngradeFromWriterLock(System.Threading.LockCookie):void">
				<signature>System.Threading.ReaderWriterLock.DowngradeFromWriterLock(System.Threading.LockCookie):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DowngradeFromWriterLockInternal" uniqueID="DowngradeFromWriterLockInternal(System.Threading.LockCookie):void">
				<signature>System.Threading.ReaderWriterLock.DowngradeFromWriterLockInternal(System.Threading.LockCookie):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="FCallReleaseLock" uniqueID="FCallReleaseLock(System.Threading.LockCookie):void">
				<signature>System.Threading.ReaderWriterLock.FCallReleaseLock(System.Threading.LockCookie):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="FCallUpgradeToWriterLock" uniqueID="FCallUpgradeToWriterLock(System.Threading.LockCookie;int):void">
				<signature>System.Threading.ReaderWriterLock.FCallUpgradeToWriterLock(System.Threading.LockCookie;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Finalize" uniqueID="Finalize():void">
				<signature>System.Threading.ReaderWriterLock.Finalize():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="PrivateDestruct" uniqueID="PrivateDestruct():void">
				<signature>System.Threading.ReaderWriterLock.PrivateDestruct():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="PrivateGetIsReaderLockHeld" uniqueID="PrivateGetIsReaderLockHeld():bool">
				<signature>System.Threading.ReaderWriterLock.PrivateGetIsReaderLockHeld():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="PrivateGetIsWriterLockHeld" uniqueID="PrivateGetIsWriterLockHeld():bool">
				<signature>System.Threading.ReaderWriterLock.PrivateGetIsWriterLockHeld():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="PrivateGetWriterSeqNum" uniqueID="PrivateGetWriterSeqNum():int">
				<signature>System.Threading.ReaderWriterLock.PrivateGetWriterSeqNum():int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="PrivateInitialize" uniqueID="PrivateInitialize():void">
				<signature>System.Threading.ReaderWriterLock.PrivateInitialize():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ReaderWriterLock" uniqueID="ReaderWriterLock():void">
				<signature>System.Threading.ReaderWriterLock.ReaderWriterLock():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ReleaseLock" uniqueID="ReleaseLock():System.Threading.LockCookie">
				<signature>System.Threading.ReaderWriterLock.ReleaseLock():System.Threading.LockCookie</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ReleaseReaderLock" uniqueID="ReleaseReaderLock():void">
				<signature>System.Threading.ReaderWriterLock.ReleaseReaderLock():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ReleaseReaderLockInternal" uniqueID="ReleaseReaderLockInternal():void">
				<signature>System.Threading.ReaderWriterLock.ReleaseReaderLockInternal():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ReleaseWriterLock" uniqueID="ReleaseWriterLock():void">
				<signature>System.Threading.ReaderWriterLock.ReleaseWriterLock():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ReleaseWriterLockInternal" uniqueID="ReleaseWriterLockInternal():void">
				<signature>System.Threading.ReaderWriterLock.ReleaseWriterLockInternal():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RestoreLock" uniqueID="RestoreLock(System.Threading.LockCookie):void">
				<signature>System.Threading.ReaderWriterLock.RestoreLock(System.Threading.LockCookie):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="RestoreLockInternal" uniqueID="RestoreLockInternal(System.Threading.LockCookie):void">
				<signature>System.Threading.ReaderWriterLock.RestoreLockInternal(System.Threading.LockCookie):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="UpgradeToWriterLock" uniqueID="UpgradeToWriterLock(System.TimeSpan):System.Threading.LockCookie">
				<signature>System.Threading.ReaderWriterLock.UpgradeToWriterLock(System.TimeSpan):System.Threading.LockCookie</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="UpgradeToWriterLock" uniqueID="UpgradeToWriterLock(int):System.Threading.LockCookie">
				<signature>System.Threading.ReaderWriterLock.UpgradeToWriterLock(int):System.Threading.LockCookie</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsReaderLockHeld" uniqueID="get_IsReaderLockHeld():bool">
				<signature>System.Threading.ReaderWriterLock.get_IsReaderLockHeld():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsWriterLockHeld" uniqueID="get_IsWriterLockHeld():bool">
				<signature>System.Threading.ReaderWriterLock.get_IsWriterLockHeld():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_WriterSeqNum" uniqueID="get_WriterSeqNum():int">
				<signature>System.Threading.ReaderWriterLock.get_WriterSeqNum():int</signature>
			</method>
		</class>
		<class name="WaitHandle" uniqueID="System.Threading.WaitHandle">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Threading.WaitHandle.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="SignalAndWait" uniqueID="SignalAndWait(System.Threading.WaitHandle;System.Threading.WaitHandle):bool">
				<signature>System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle;System.Threading.WaitHandle):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="SignalAndWait" uniqueID="SignalAndWait(System.Threading.WaitHandle;System.Threading.WaitHandle;System.TimeSpan;bool):bool">
				<signature>System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle;System.Threading.WaitHandle;System.TimeSpan;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="SignalAndWait" uniqueID="SignalAndWait(System.Threading.WaitHandle;System.Threading.WaitHandle;int;bool):bool">
				<signature>System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle;System.Threading.WaitHandle;int;bool):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="SignalAndWaitOne" uniqueID="SignalAndWaitOne(Microsoft.Win32.SafeHandles.SafeWaitHandle;Microsoft.Win32.SafeHandles.SafeWaitHandle;int;bool;bool):int">
				<signature>System.Threading.WaitHandle.SignalAndWaitOne(Microsoft.Win32.SafeHandles.SafeWaitHandle;Microsoft.Win32.SafeHandles.SafeWaitHandle;int;bool;bool):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WaitAll" uniqueID="WaitAll(System.Threading.WaitHandle[]):bool">
				<signature>System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[]):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WaitAll" uniqueID="WaitAll(System.Threading.WaitHandle[];System.TimeSpan):bool">
				<signature>System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[];System.TimeSpan):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WaitAll" uniqueID="WaitAll(System.Threading.WaitHandle[];System.TimeSpan;bool):bool">
				<signature>System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[];System.TimeSpan;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WaitAll" uniqueID="WaitAll(System.Threading.WaitHandle[];int):bool">
				<signature>System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[];int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WaitAll" uniqueID="WaitAll(System.Threading.WaitHandle[];int;bool):bool">
				<signature>System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[];int;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WaitAny" uniqueID="WaitAny(System.Threading.WaitHandle[]):int">
				<signature>System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[]):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WaitAny" uniqueID="WaitAny(System.Threading.WaitHandle[];System.TimeSpan):int">
				<signature>System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[];System.TimeSpan):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WaitAny" uniqueID="WaitAny(System.Threading.WaitHandle[];System.TimeSpan;bool):int">
				<signature>System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[];System.TimeSpan;bool):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WaitAny" uniqueID="WaitAny(System.Threading.WaitHandle[];int):int">
				<signature>System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[];int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WaitAny" uniqueID="WaitAny(System.Threading.WaitHandle[];int;bool):int">
				<signature>System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[];int;bool):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="WaitMultiple" uniqueID="WaitMultiple(System.Threading.WaitHandle[];int;bool;bool):int">
				<signature>System.Threading.WaitHandle.WaitMultiple(System.Threading.WaitHandle[];int;bool;bool):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="WaitOneNative" uniqueID="WaitOneNative(Microsoft.Win32.SafeHandles.SafeWaitHandle;unsigned int;bool;bool):int">
				<signature>System.Threading.WaitHandle.WaitOneNative(Microsoft.Win32.SafeHandles.SafeWaitHandle;unsigned int;bool;bool):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Close" uniqueID="Close():void">
				<signature>System.Threading.WaitHandle.Close():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Dispose" uniqueID="Dispose(bool):void">
				<signature>System.Threading.WaitHandle.Dispose(bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetHandleInternal" uniqueID="SetHandleInternal(Microsoft.Win32.SafeHandles.SafeWaitHandle):void">
				<signature>System.Threading.WaitHandle.SetHandleInternal(Microsoft.Win32.SafeHandles.SafeWaitHandle):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IDisposable.Dispose" uniqueID="System.IDisposable.Dispose():void">
				<signature>System.Threading.WaitHandle.System.IDisposable.Dispose():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="WaitHandle" uniqueID="WaitHandle():void">
				<signature>System.Threading.WaitHandle.WaitHandle():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="WaitOne" uniqueID="WaitOne():bool">
				<signature>System.Threading.WaitHandle.WaitOne():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="WaitOne" uniqueID="WaitOne(System.TimeSpan):bool">
				<signature>System.Threading.WaitHandle.WaitOne(System.TimeSpan):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="WaitOne" uniqueID="WaitOne(System.TimeSpan;bool):bool">
				<signature>System.Threading.WaitHandle.WaitOne(System.TimeSpan;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="WaitOne" uniqueID="WaitOne(int):bool">
				<signature>System.Threading.WaitHandle.WaitOne(int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="WaitOne" uniqueID="WaitOne(int;bool):bool">
				<signature>System.Threading.WaitHandle.WaitOne(int;bool):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="WaitOne" uniqueID="WaitOne(long;bool):bool">
				<signature>System.Threading.WaitHandle.WaitOne(long;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Handle" uniqueID="get_Handle():native signed int">
				<signature>System.Threading.WaitHandle.get_Handle():native signed int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SafeWaitHandle" uniqueID="get_SafeWaitHandle():Microsoft.Win32.SafeHandles.SafeWaitHandle">
				<signature>System.Threading.WaitHandle.get_SafeWaitHandle():Microsoft.Win32.SafeHandles.SafeWaitHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Handle" uniqueID="set_Handle(native signed int):void">
				<signature>System.Threading.WaitHandle.set_Handle(native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_SafeWaitHandle" uniqueID="set_SafeWaitHandle(Microsoft.Win32.SafeHandles.SafeWaitHandle):void">
				<signature>System.Threading.WaitHandle.set_SafeWaitHandle(Microsoft.Win32.SafeHandles.SafeWaitHandle):void</signature>
			</method>
		</class>
		<class name="CompressedStack" uniqueID="System.Threading.CompressedStack">
			<method accessibility="Public" methodKind="Static" name="Capture" uniqueID="Capture():System.Threading.CompressedStack">
				<signature>System.Threading.CompressedStack.Capture():System.Threading.CompressedStack</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="DestroyDCSList" uniqueID="DestroyDCSList(System.Threading.SafeCompressedStackHandle):void">
				<signature>System.Threading.CompressedStack.DestroyDCSList(System.Threading.SafeCompressedStackHandle):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="DestroyDelayedCompressedStack" uniqueID="DestroyDelayedCompressedStack(native signed int):void">
				<signature>System.Threading.CompressedStack.DestroyDelayedCompressedStack(native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCompressedStack" uniqueID="GetCompressedStack():System.Threading.CompressedStack">
				<signature>System.Threading.CompressedStack.GetCompressedStack():System.Threading.CompressedStack</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetCompressedStack" uniqueID="GetCompressedStack(System.Threading.StackCrawlMark):System.Threading.CompressedStack">
				<signature>System.Threading.CompressedStack.GetCompressedStack(System.Threading.StackCrawlMark):System.Threading.CompressedStack</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetCompressedStackThread" uniqueID="GetCompressedStackThread():System.Threading.CompressedStack">
				<signature>System.Threading.CompressedStack.GetCompressedStackThread():System.Threading.CompressedStack</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetDCSCount" uniqueID="GetDCSCount(System.Threading.SafeCompressedStackHandle):int">
				<signature>System.Threading.CompressedStack.GetDCSCount(System.Threading.SafeCompressedStackHandle):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetDelayedCompressedStack" uniqueID="GetDelayedCompressedStack(System.Threading.StackCrawlMark;bool):System.Threading.SafeCompressedStackHandle">
				<signature>System.Threading.CompressedStack.GetDelayedCompressedStack(System.Threading.StackCrawlMark;bool):System.Threading.SafeCompressedStackHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetDomainCompressedStack" uniqueID="GetDomainCompressedStack(System.Threading.SafeCompressedStackHandle;int):System.Threading.DomainCompressedStack">
				<signature>System.Threading.CompressedStack.GetDomainCompressedStack(System.Threading.SafeCompressedStackHandle;int):System.Threading.DomainCompressedStack</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetHomogeneousPLS" uniqueID="GetHomogeneousPLS(System.Security.PermissionListSet):void">
				<signature>System.Threading.CompressedStack.GetHomogeneousPLS(System.Security.PermissionListSet):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="IsImmediateCompletionCandidate" uniqueID="IsImmediateCompletionCandidate(System.Threading.SafeCompressedStackHandle;System.Threading.CompressedStack):bool">
				<signature>System.Threading.CompressedStack.IsImmediateCompletionCandidate(System.Threading.SafeCompressedStackHandle;System.Threading.CompressedStack):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="RestoreAppDomainStack" uniqueID="RestoreAppDomainStack(native signed int):void">
				<signature>System.Threading.CompressedStack.RestoreAppDomainStack(native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Run" uniqueID="Run(System.Threading.CompressedStack;System.Threading.ContextCallback;object):void">
				<signature>System.Threading.CompressedStack.Run(System.Threading.CompressedStack;System.Threading.ContextCallback;object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SetAppDomainStack" uniqueID="SetAppDomainStack(System.Threading.CompressedStack):native signed int">
				<signature>System.Threading.CompressedStack.SetAppDomainStack(System.Threading.CompressedStack):native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SetCompressedStack" uniqueID="SetCompressedStack(System.Threading.CompressedStack;System.Threading.CompressedStack):System.Threading.CompressedStackSwitcher">
				<signature>System.Threading.CompressedStack.SetCompressedStack(System.Threading.CompressedStack;System.Threading.CompressedStack):System.Threading.CompressedStackSwitcher</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SetCompressedStackThread" uniqueID="SetCompressedStackThread(System.Threading.CompressedStack):void">
				<signature>System.Threading.CompressedStack.SetCompressedStackThread(System.Threading.CompressedStack):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="runFinallyCode" uniqueID="runFinallyCode(object;bool):void">
				<signature>System.Threading.CompressedStack.runFinallyCode(object;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="runTryCode" uniqueID="runTryCode(object):void">
				<signature>System.Threading.CompressedStack.runTryCode(object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckDemand" uniqueID="CheckDemand(System.Security.CodeAccessPermission;System.Security.PermissionToken;System.RuntimeMethodHandle):bool">
				<signature>System.Threading.CompressedStack.CheckDemand(System.Security.CodeAccessPermission;System.Security.PermissionToken;System.RuntimeMethodHandle):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckSetDemand" uniqueID="CheckSetDemand(System.Security.PermissionSet;System.RuntimeMethodHandle):bool">
				<signature>System.Threading.CompressedStack.CheckSetDemand(System.Security.PermissionSet;System.RuntimeMethodHandle):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CompleteConstruction" uniqueID="CompleteConstruction(System.Threading.CompressedStack):void">
				<signature>System.Threading.CompressedStack.CompleteConstruction(System.Threading.CompressedStack):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CompressedStack" uniqueID="CompressedStack(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Threading.CompressedStack.CompressedStack(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CompressedStack" uniqueID="CompressedStack(System.Threading.SafeCompressedStackHandle):void">
				<signature>System.Threading.CompressedStack.CompressedStack(System.Threading.SafeCompressedStackHandle):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CompressedStack" uniqueID="CompressedStack(System.Threading.SafeCompressedStackHandle;System.Security.PermissionListSet):void">
				<signature>System.Threading.CompressedStack.CompressedStack(System.Threading.SafeCompressedStackHandle;System.Security.PermissionListSet):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateCopy" uniqueID="CreateCopy():System.Threading.CompressedStack">
				<signature>System.Threading.CompressedStack.CreateCopy():System.Threading.CompressedStack</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="DemandFlagsOrGrantSet" uniqueID="DemandFlagsOrGrantSet(int;System.Security.PermissionSet):void">
				<signature>System.Threading.CompressedStack.DemandFlagsOrGrantSet(int;System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetObjectData" uniqueID="GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Threading.CompressedStack.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetZoneAndOrigin" uniqueID="GetZoneAndOrigin(System.Collections.ArrayList;System.Collections.ArrayList;System.Security.PermissionToken;System.Security.PermissionToken):void">
				<signature>System.Threading.CompressedStack.GetZoneAndOrigin(System.Collections.ArrayList;System.Collections.ArrayList;System.Security.PermissionToken;System.Security.PermissionToken):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_CompressedStackHandle" uniqueID="get_CompressedStackHandle():System.Threading.SafeCompressedStackHandle">
				<signature>System.Threading.CompressedStack.get_CompressedStackHandle():System.Threading.SafeCompressedStackHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_PLS" uniqueID="get_PLS():System.Security.PermissionListSet">
				<signature>System.Threading.CompressedStack.get_PLS():System.Security.PermissionListSet</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="set_CompressedStackHandle" uniqueID="set_CompressedStackHandle(System.Threading.SafeCompressedStackHandle):void">
				<signature>System.Threading.CompressedStack.set_CompressedStackHandle(System.Threading.SafeCompressedStackHandle):void</signature>
			</method>
		</class>
		<class name="SafeCompressedStackHandle" uniqueID="System.Threading.SafeCompressedStackHandle">
			<method accessibility="Protected" methodKind="Member" name="ReleaseHandle" uniqueID="ReleaseHandle():bool">
				<signature>System.Threading.SafeCompressedStackHandle.ReleaseHandle():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SafeCompressedStackHandle" uniqueID="SafeCompressedStackHandle():void">
				<signature>System.Threading.SafeCompressedStackHandle.SafeCompressedStackHandle():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsInvalid" uniqueID="get_IsInvalid():bool">
				<signature>System.Threading.SafeCompressedStackHandle.get_IsInvalid():bool</signature>
			</method>
		</class>
	</package>
	<package name="System.Windows.Forms">
		<class name="HelpInfo" uniqueID="System.Windows.Forms.HelpInfo">
			<method accessibility="Public" methodKind="Member" name="HelpInfo" uniqueID="HelpInfo(string):void">
				<signature>System.Windows.Forms.HelpInfo.HelpInfo(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="HelpInfo" uniqueID="HelpInfo(string;System.Windows.Forms.HelpNavigator):void">
				<signature>System.Windows.Forms.HelpInfo.HelpInfo(string;System.Windows.Forms.HelpNavigator):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="HelpInfo" uniqueID="HelpInfo(string;System.Windows.Forms.HelpNavigator;object):void">
				<signature>System.Windows.Forms.HelpInfo.HelpInfo(string;System.Windows.Forms.HelpNavigator;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="HelpInfo" uniqueID="HelpInfo(string;string):void">
				<signature>System.Windows.Forms.HelpInfo.HelpInfo(string;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Windows.Forms.HelpInfo.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_HelpFilePath" uniqueID="get_HelpFilePath():string">
				<signature>System.Windows.Forms.HelpInfo.get_HelpFilePath():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Keyword" uniqueID="get_Keyword():string">
				<signature>System.Windows.Forms.HelpInfo.get_Keyword():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Navigator" uniqueID="get_Navigator():System.Windows.Forms.HelpNavigator">
				<signature>System.Windows.Forms.HelpInfo.get_Navigator():System.Windows.Forms.HelpNavigator</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Option" uniqueID="get_Option():int">
				<signature>System.Windows.Forms.HelpInfo.get_Option():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Param" uniqueID="get_Param():object">
				<signature>System.Windows.Forms.HelpInfo.get_Param():object</signature>
			</method>
		</class>
		<class name="IWin32Window" uniqueID="System.Windows.Forms.IWin32Window">
			<method accessibility="Public" methodKind="Member" name="get_Handle" uniqueID="get_Handle():native signed int">
				<signature>System.Windows.Forms.IWin32Window.get_Handle():native signed int</signature>
			</method>
		</class>
		<class name="MessageBox" uniqueID="System.Windows.Forms.MessageBox">
			<method accessibility="Private" methodKind="Static" name="PopHelpInfo" uniqueID="PopHelpInfo():void">
				<signature>System.Windows.Forms.MessageBox.PopHelpInfo():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="PushHelpInfo" uniqueID="PushHelpInfo(System.Windows.Forms.HelpInfo):void">
				<signature>System.Windows.Forms.MessageBox.PushHelpInfo(System.Windows.Forms.HelpInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Show" uniqueID="Show(System.Windows.Forms.IWin32Window;string):System.Windows.Forms.DialogResult">
				<signature>System.Windows.Forms.MessageBox.Show(System.Windows.Forms.IWin32Window;string):System.Windows.Forms.DialogResult</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Show" uniqueID="Show(System.Windows.Forms.IWin32Window;string;string):System.Windows.Forms.DialogResult">
				<signature>System.Windows.Forms.MessageBox.Show(System.Windows.Forms.IWin32Window;string;string):System.Windows.Forms.DialogResult</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Show" uniqueID="Show(System.Windows.Forms.IWin32Window;string;string;System.Windows.Forms.MessageBoxButtons):System.Windows.Forms.DialogResult">
				<signature>System.Windows.Forms.MessageBox.Show(System.Windows.Forms.IWin32Window;string;string;System.Windows.Forms.MessageBoxButtons):System.Windows.Forms.DialogResult</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Show" uniqueID="Show(System.Windows.Forms.IWin32Window;string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon):System.Windows.Forms.DialogResult">
				<signature>System.Windows.Forms.MessageBox.Show(System.Windows.Forms.IWin32Window;string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon):System.Windows.Forms.DialogResult</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Show" uniqueID="Show(System.Windows.Forms.IWin32Window;string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton):System.Windows.Forms.DialogResult">
				<signature>System.Windows.Forms.MessageBox.Show(System.Windows.Forms.IWin32Window;string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton):System.Windows.Forms.DialogResult</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Show" uniqueID="Show(System.Windows.Forms.IWin32Window;string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton;System.Windows.Forms.MessageBoxOptions):System.Windows.Forms.DialogResult">
				<signature>System.Windows.Forms.MessageBox.Show(System.Windows.Forms.IWin32Window;string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton;System.Windows.Forms.MessageBoxOptions):System.Windows.Forms.DialogResult</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Show" uniqueID="Show(System.Windows.Forms.IWin32Window;string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton;System.Windows.Forms.MessageBoxOptions;string):System.Windows.Forms.DialogResult">
				<signature>System.Windows.Forms.MessageBox.Show(System.Windows.Forms.IWin32Window;string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton;System.Windows.Forms.MessageBoxOptions;string):System.Windows.Forms.DialogResult</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Show" uniqueID="Show(System.Windows.Forms.IWin32Window;string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton;System.Windows.Forms.MessageBoxOptions;string;System.Windows.Forms.HelpNavigator):System.Windows.Forms.DialogResult">
				<signature>System.Windows.Forms.MessageBox.Show(System.Windows.Forms.IWin32Window;string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton;System.Windows.Forms.MessageBoxOptions;string;System.Windows.Forms.HelpNavigator):System.Windows.Forms.DialogResult</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Show" uniqueID="Show(System.Windows.Forms.IWin32Window;string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton;System.Windows.Forms.MessageBoxOptions;string;System.Windows.Forms.HelpNavigator;object):System.Windows.Forms.DialogResult">
				<signature>System.Windows.Forms.MessageBox.Show(System.Windows.Forms.IWin32Window;string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton;System.Windows.Forms.MessageBoxOptions;string;System.Windows.Forms.HelpNavigator;object):System.Windows.Forms.DialogResult</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Show" uniqueID="Show(System.Windows.Forms.IWin32Window;string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton;System.Windows.Forms.MessageBoxOptions;string;string):System.Windows.Forms.DialogResult">
				<signature>System.Windows.Forms.MessageBox.Show(System.Windows.Forms.IWin32Window;string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton;System.Windows.Forms.MessageBoxOptions;string;string):System.Windows.Forms.DialogResult</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Show" uniqueID="Show(string):System.Windows.Forms.DialogResult">
				<signature>System.Windows.Forms.MessageBox.Show(string):System.Windows.Forms.DialogResult</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Show" uniqueID="Show(string;string):System.Windows.Forms.DialogResult">
				<signature>System.Windows.Forms.MessageBox.Show(string;string):System.Windows.Forms.DialogResult</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Show" uniqueID="Show(string;string;System.Windows.Forms.MessageBoxButtons):System.Windows.Forms.DialogResult">
				<signature>System.Windows.Forms.MessageBox.Show(string;string;System.Windows.Forms.MessageBoxButtons):System.Windows.Forms.DialogResult</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Show" uniqueID="Show(string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon):System.Windows.Forms.DialogResult">
				<signature>System.Windows.Forms.MessageBox.Show(string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon):System.Windows.Forms.DialogResult</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Show" uniqueID="Show(string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton):System.Windows.Forms.DialogResult">
				<signature>System.Windows.Forms.MessageBox.Show(string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton):System.Windows.Forms.DialogResult</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Show" uniqueID="Show(string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton;System.Windows.Forms.MessageBoxOptions):System.Windows.Forms.DialogResult">
				<signature>System.Windows.Forms.MessageBox.Show(string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton;System.Windows.Forms.MessageBoxOptions):System.Windows.Forms.DialogResult</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Show" uniqueID="Show(string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton;System.Windows.Forms.MessageBoxOptions;bool):System.Windows.Forms.DialogResult">
				<signature>System.Windows.Forms.MessageBox.Show(string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton;System.Windows.Forms.MessageBoxOptions;bool):System.Windows.Forms.DialogResult</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Show" uniqueID="Show(string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton;System.Windows.Forms.MessageBoxOptions;string):System.Windows.Forms.DialogResult">
				<signature>System.Windows.Forms.MessageBox.Show(string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton;System.Windows.Forms.MessageBoxOptions;string):System.Windows.Forms.DialogResult</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Show" uniqueID="Show(string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton;System.Windows.Forms.MessageBoxOptions;string;System.Windows.Forms.HelpNavigator):System.Windows.Forms.DialogResult">
				<signature>System.Windows.Forms.MessageBox.Show(string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton;System.Windows.Forms.MessageBoxOptions;string;System.Windows.Forms.HelpNavigator):System.Windows.Forms.DialogResult</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Show" uniqueID="Show(string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton;System.Windows.Forms.MessageBoxOptions;string;System.Windows.Forms.HelpNavigator;object):System.Windows.Forms.DialogResult">
				<signature>System.Windows.Forms.MessageBox.Show(string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton;System.Windows.Forms.MessageBoxOptions;string;System.Windows.Forms.HelpNavigator;object):System.Windows.Forms.DialogResult</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Show" uniqueID="Show(string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton;System.Windows.Forms.MessageBoxOptions;string;string):System.Windows.Forms.DialogResult">
				<signature>System.Windows.Forms.MessageBox.Show(string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton;System.Windows.Forms.MessageBoxOptions;string;string):System.Windows.Forms.DialogResult</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ShowCore" uniqueID="ShowCore(System.Windows.Forms.IWin32Window;string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton;System.Windows.Forms.MessageBoxOptions;System.Windows.Forms.HelpInfo):System.Windows.Forms.DialogResult">
				<signature>System.Windows.Forms.MessageBox.ShowCore(System.Windows.Forms.IWin32Window;string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton;System.Windows.Forms.MessageBoxOptions;System.Windows.Forms.HelpInfo):System.Windows.Forms.DialogResult</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ShowCore" uniqueID="ShowCore(System.Windows.Forms.IWin32Window;string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton;System.Windows.Forms.MessageBoxOptions;bool):System.Windows.Forms.DialogResult">
				<signature>System.Windows.Forms.MessageBox.ShowCore(System.Windows.Forms.IWin32Window;string;string;System.Windows.Forms.MessageBoxButtons;System.Windows.Forms.MessageBoxIcon;System.Windows.Forms.MessageBoxDefaultButton;System.Windows.Forms.MessageBoxOptions;bool):System.Windows.Forms.DialogResult</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="Win32ToDialogResult" uniqueID="Win32ToDialogResult(int):System.Windows.Forms.DialogResult">
				<signature>System.Windows.Forms.MessageBox.Win32ToDialogResult(int):System.Windows.Forms.DialogResult</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_HelpInfo" uniqueID="get_HelpInfo():System.Windows.Forms.HelpInfo">
				<signature>System.Windows.Forms.MessageBox.get_HelpInfo():System.Windows.Forms.HelpInfo</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="MessageBox" uniqueID="MessageBox():void">
				<signature>System.Windows.Forms.MessageBox.MessageBox():void</signature>
			</method>
		</class>
	</package>
	<package>
		<class name="TestCase_IOT_Instance_Val_Confidence" uniqueID="TestCase_IOT_Instance_Val_Confidence">
			<method accessibility="Public" methodKind="Static" name="main" uniqueID="main(string[]):void">
				<signature>TestCase_IOT_Instance_Val_Confidence.main(string[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="testLostNoValidationAvailable" uniqueID="testLostNoValidationAvailable(string[]):void">
				<signature>TestCase_IOT_Instance_Val_Confidence.testLostNoValidationAvailable(string[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="testLostValidated" uniqueID="testLostValidated(string[]):void">
				<signature>TestCase_IOT_Instance_Val_Confidence.testLostValidated(string[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="testLostValidationNotUsed" uniqueID="testLostValidationNotUsed(string[]):void">
				<signature>TestCase_IOT_Instance_Val_Confidence.testLostValidationNotUsed(string[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="testSinkNoValidationAvailable" uniqueID="testSinkNoValidationAvailable(string[]):void">
				<signature>TestCase_IOT_Instance_Val_Confidence.testSinkNoValidationAvailable(string[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="testSinkValidated" uniqueID="testSinkValidated(string[]):void">
				<signature>TestCase_IOT_Instance_Val_Confidence.testSinkValidated(string[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="testSinkValidationNotUsed" uniqueID="testSinkValidationNotUsed(string[]):void">
				<signature>TestCase_IOT_Instance_Val_Confidence.testSinkValidationNotUsed(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_Instance_Val_Confidence" uniqueID="TestCase_IOT_Instance_Val_Confidence():void">
				<signature>TestCase_IOT_Instance_Val_Confidence.TestCase_IOT_Instance_Val_Confidence():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="getCoveredVulnerableSource" uniqueID="getCoveredVulnerableSource(string):string">
				<signature>TestCase_IOT_Instance_Val_Confidence.getCoveredVulnerableSource(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="getUnCoveredVulnerableSource" uniqueID="getUnCoveredVulnerableSource(string):string">
				<signature>TestCase_IOT_Instance_Val_Confidence.getUnCoveredVulnerableSource(string):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="validate" uniqueID="validate(string):void">
				<signature>TestCase_IOT_Instance_Val_Confidence.validate(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="writeToUnknownSink" uniqueID="writeToUnknownSink(string;string):void">
				<signature>TestCase_IOT_Instance_Val_Confidence.writeToUnknownSink(string;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="writeToVulnerableSink" uniqueID="writeToVulnerableSink(string;string):void">
				<signature>TestCase_IOT_Instance_Val_Confidence.writeToVulnerableSink(string;string):void</signature>
			</method>
		</class>
		<class name="TestCase_IOT_Instance_Val_Encode" uniqueID="TestCase_IOT_Instance_Val_Encode">
			<method accessibility="Public" methodKind="Static" name="main" uniqueID="main(string[]):void">
				<signature>TestCase_IOT_Instance_Val_Encode.main(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_Instance_Val_Encode" uniqueID="TestCase_IOT_Instance_Val_Encode():void">
				<signature>TestCase_IOT_Instance_Val_Encode.TestCase_IOT_Instance_Val_Encode():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="encode" uniqueID="encode(string):string">
				<signature>TestCase_IOT_Instance_Val_Encode.encode(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="getVulnerableSource" uniqueID="getVulnerableSource(string):string">
				<signature>TestCase_IOT_Instance_Val_Encode.getVulnerableSource(string):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="validate" uniqueID="validate(string):void">
				<signature>TestCase_IOT_Instance_Val_Encode.validate(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="writeToVulnerableSink" uniqueID="writeToVulnerableSink(string;string):void">
				<signature>TestCase_IOT_Instance_Val_Encode.writeToVulnerableSink(string;string):void</signature>
			</method>
		</class>
		<class name="TestCase_IOT_Lost_Instance" uniqueID="TestCase_IOT_Lost_Instance">
			<method accessibility="Public" methodKind="Static" name="main" uniqueID="main(string[]):void">
				<signature>TestCase_IOT_Lost_Instance.main(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_Lost_Instance" uniqueID="TestCase_IOT_Lost_Instance():void">
				<signature>TestCase_IOT_Lost_Instance.TestCase_IOT_Lost_Instance():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="getVulnerableSource" uniqueID="getVulnerableSource(string):string">
				<signature>TestCase_IOT_Lost_Instance.getVulnerableSource(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="writeToUnknownSink" uniqueID="writeToUnknownSink(string;string):void">
				<signature>TestCase_IOT_Lost_Instance.writeToUnknownSink(string;string):void</signature>
			</method>
		</class>
		<class name="TestCase_IOT_Static_Assigns" uniqueID="TestCase_IOT_Static_Assigns">
			<method accessibility="Public" methodKind="Static" name="getVulnerableSource" uniqueID="getVulnerableSource(string):string">
				<signature>TestCase_IOT_Static_Assigns.getVulnerableSource(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="main" uniqueID="main(string[]):void">
				<signature>TestCase_IOT_Static_Assigns.main(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="writeToVulnerableSink" uniqueID="writeToVulnerableSink(string):void">
				<signature>TestCase_IOT_Static_Assigns.writeToVulnerableSink(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_Static_Assigns" uniqueID="TestCase_IOT_Static_Assigns():void">
				<signature>TestCase_IOT_Static_Assigns.TestCase_IOT_Static_Assigns():void</signature>
			</method>
		</class>
		<class name="TestCase_IOT_XFile_Val_Part1" uniqueID="TestCase_IOT_XFile_Val_Part1">
			<method accessibility="Public" methodKind="Static" name="main" uniqueID="main(string[]):void">
				<signature>TestCase_IOT_XFile_Val_Part1.main(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_XFile_Val_Part1" uniqueID="TestCase_IOT_XFile_Val_Part1():void">
				<signature>TestCase_IOT_XFile_Val_Part1.TestCase_IOT_XFile_Val_Part1():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="getVulnerableSource" uniqueID="getVulnerableSource(string):string">
				<signature>TestCase_IOT_XFile_Val_Part1.getVulnerableSource(string):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="validate" uniqueID="validate(string):string">
				<signature>TestCase_IOT_XFile_Val_Part1.validate(string):string</signature>
			</method>
		</class>
		<class name="TestCase_IOT_Array" uniqueID="TestCase_IOT_Array">
			<method accessibility="Public" methodKind="Static" name="Main" uniqueID="Main(string[]):void">
				<signature>TestCase_IOT_Array.Main(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_Array" uniqueID="TestCase_IOT_Array():void">
				<signature>TestCase_IOT_Array.TestCase_IOT_Array():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="getVulnerableSource" uniqueID="getVulnerableSource(string):string">
				<signature>TestCase_IOT_Array.getVulnerableSource(string):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="writeToVulnerableSink" uniqueID="writeToVulnerableSink(string;string):void">
				<signature>TestCase_IOT_Array.writeToVulnerableSink(string;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="writeToVulnerableSink" uniqueID="writeToVulnerableSink(string;string[]):void">
				<signature>TestCase_IOT_Array.writeToVulnerableSink(string;string[]):void</signature>
			</method>
		</class>
		<class name="TestCase_IOT_Instance_Assigns" uniqueID="TestCase_IOT_Instance_Assigns">
			<method accessibility="Public" methodKind="Static" name="main" uniqueID="main(string[]):void">
				<signature>TestCase_IOT_Instance_Assigns.main(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_Instance_Assigns" uniqueID="TestCase_IOT_Instance_Assigns():void">
				<signature>TestCase_IOT_Instance_Assigns.TestCase_IOT_Instance_Assigns():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="getVulnerableSource" uniqueID="getVulnerableSource(string):string">
				<signature>TestCase_IOT_Instance_Assigns.getVulnerableSource(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="writeToVulnerableSink" uniqueID="writeToVulnerableSink(string):void">
				<signature>TestCase_IOT_Instance_Assigns.writeToVulnerableSink(string):void</signature>
			</method>
		</class>
		<class name="TestCase_IOT_Lost_MemberTaint" uniqueID="TestCase_IOT_Lost_MemberTaint">
			<method accessibility="Public" methodKind="Static" name="main" uniqueID="main(string[]):void">
				<signature>TestCase_IOT_Lost_MemberTaint.main(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_Lost_MemberTaint" uniqueID="TestCase_IOT_Lost_MemberTaint():void">
				<signature>TestCase_IOT_Lost_MemberTaint.TestCase_IOT_Lost_MemberTaint():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="getVulnerableSource" uniqueID="getVulnerableSource(string):string">
				<signature>TestCase_IOT_Lost_MemberTaint.getVulnerableSource(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="writeToUnknownSink1" uniqueID="writeToUnknownSink1(string;string):void">
				<signature>TestCase_IOT_Lost_MemberTaint.writeToUnknownSink1(string;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="writeToUnknownSink2" uniqueID="writeToUnknownSink2(string):void">
				<signature>TestCase_IOT_Lost_MemberTaint.writeToUnknownSink2(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="writeToUnknownSink3" uniqueID="writeToUnknownSink3(string;string):void">
				<signature>TestCase_IOT_Lost_MemberTaint.writeToUnknownSink3(string;string):void</signature>
			</method>
		</class>
		<class name="TestCase_IOT_MediumCallStack" uniqueID="TestCase_IOT_MediumCallStack">
			<method accessibility="Public" methodKind="Static" name="main" uniqueID="main(string[]):void">
				<signature>TestCase_IOT_MediumCallStack.main(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_MediumCallStack" uniqueID="TestCase_IOT_MediumCallStack():void">
				<signature>TestCase_IOT_MediumCallStack.TestCase_IOT_MediumCallStack():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="convertBufTostring" uniqueID="convertBufTostring(byte[]):string">
				<signature>TestCase_IOT_MediumCallStack.convertBufTostring(byte[]):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="createFileOutput" uniqueID="createFileOutput(string):System.IO.FileStream">
				<signature>TestCase_IOT_MediumCallStack.createFileOutput(string):System.IO.FileStream</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="createWriter" uniqueID="createWriter(string):System.IO.StreamWriter">
				<signature>TestCase_IOT_MediumCallStack.createWriter(string):System.IO.StreamWriter</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="getBuffer" uniqueID="getBuffer():byte[]">
				<signature>TestCase_IOT_MediumCallStack.getBuffer():byte[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="getVulnSourceFromFile" uniqueID="getVulnSourceFromFile(string):string">
				<signature>TestCase_IOT_MediumCallStack.getVulnSourceFromFile(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="getVulnerableSource" uniqueID="getVulnerableSource(string):string">
				<signature>TestCase_IOT_MediumCallStack.getVulnerableSource(string):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="readBufFromFile" uniqueID="readBufFromFile(string):byte[]">
				<signature>TestCase_IOT_MediumCallStack.readBufFromFile(string):byte[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="readIntoBuf" uniqueID="readIntoBuf(System.IO.FileStream;byte[]):void">
				<signature>TestCase_IOT_MediumCallStack.readIntoBuf(System.IO.FileStream;byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="writeToVulnerableSink" uniqueID="writeToVulnerableSink(string):void">
				<signature>TestCase_IOT_MediumCallStack.writeToVulnerableSink(string):void</signature>
			</method>
		</class>
		<class name="TestCase_IOT_XFile_Part2" uniqueID="TestCase_IOT_XFile_Part2">
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_XFile_Part2" uniqueID="TestCase_IOT_XFile_Part2():void">
				<signature>TestCase_IOT_XFile_Part2.TestCase_IOT_XFile_Part2():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="writeToVulnerableSink" uniqueID="writeToVulnerableSink(string):void">
				<signature>TestCase_IOT_XFile_Part2.writeToVulnerableSink(string):void</signature>
			</method>
		</class>
		<class name="TestCase_IOT_Instance" uniqueID="TestCase_IOT_Instance">
			<method accessibility="Public" methodKind="Static" name="main" uniqueID="main(string[]):void">
				<signature>TestCase_IOT_Instance.main(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_Instance" uniqueID="TestCase_IOT_Instance():void">
				<signature>TestCase_IOT_Instance.TestCase_IOT_Instance():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="getVulnerableSource" uniqueID="getVulnerableSource(string):string">
				<signature>TestCase_IOT_Instance.getVulnerableSource(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="writeToVulnerableSink" uniqueID="writeToVulnerableSink(string):void">
				<signature>TestCase_IOT_Instance.writeToVulnerableSink(string):void</signature>
			</method>
		</class>
		<class name="TestCase_IOT_Lost_MemberTaint+TaintedStruct" uniqueID="TestCase_IOT_Lost_MemberTaint+TaintedStruct">
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_Lost_MemberTaint+TaintedStruct" uniqueID="TestCase_IOT_Lost_MemberTaint+TaintedStruct():void">
				<signature>TestCase_IOT_Lost_MemberTaint+TaintedStruct.TestCase_IOT_Lost_MemberTaint+TaintedStruct():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_Lost_MemberTaint+TaintedStruct" uniqueID="TestCase_IOT_Lost_MemberTaint+TaintedStruct(string):void">
				<signature>TestCase_IOT_Lost_MemberTaint+TaintedStruct.TestCase_IOT_Lost_MemberTaint+TaintedStruct(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="getTainted" uniqueID="getTainted():string">
				<signature>TestCase_IOT_Lost_MemberTaint+TaintedStruct.getTainted():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="setTainted" uniqueID="setTainted(string):void">
				<signature>TestCase_IOT_Lost_MemberTaint+TaintedStruct.setTainted(string):void</signature>
			</method>
		</class>
		<class name="TestCase_IOT_Lost_XFile_Part2" uniqueID="TestCase_IOT_Lost_XFile_Part2">
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_Lost_XFile_Part2" uniqueID="TestCase_IOT_Lost_XFile_Part2():void">
				<signature>TestCase_IOT_Lost_XFile_Part2.TestCase_IOT_Lost_XFile_Part2():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="writeToUnknownSink" uniqueID="writeToUnknownSink(string;string):void">
				<signature>TestCase_IOT_Lost_XFile_Part2.writeToUnknownSink(string;string):void</signature>
			</method>
		</class>
		<class name="TestCase_IOT_MemberTaint_OutParam" uniqueID="TestCase_IOT_MemberTaint_OutParam">
			<method accessibility="Public" methodKind="Static" name="main" uniqueID="main(string[]):void">
				<signature>TestCase_IOT_MemberTaint_OutParam.main(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_MemberTaint_OutParam" uniqueID="TestCase_IOT_MemberTaint_OutParam():void">
				<signature>TestCase_IOT_MemberTaint_OutParam.TestCase_IOT_MemberTaint_OutParam():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="getTaintedStructSource1" uniqueID="getTaintedStructSource1(string;TestCase_IOT_MemberTaint_OutParam+TaintedStruct):void">
				<signature>TestCase_IOT_MemberTaint_OutParam.getTaintedStructSource1(string;TestCase_IOT_MemberTaint_OutParam+TaintedStruct):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="getTaintedStructSource2" uniqueID="getTaintedStructSource2(string;TestCase_IOT_MemberTaint_OutParam+TaintedStruct):void">
				<signature>TestCase_IOT_MemberTaint_OutParam.getTaintedStructSource2(string;TestCase_IOT_MemberTaint_OutParam+TaintedStruct):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="getVulnerableSource" uniqueID="getVulnerableSource(string):string">
				<signature>TestCase_IOT_MemberTaint_OutParam.getVulnerableSource(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="writeToVulnerableSink1" uniqueID="writeToVulnerableSink1(string;TestCase_IOT_MemberTaint_OutParam+TaintedStruct):void">
				<signature>TestCase_IOT_MemberTaint_OutParam.writeToVulnerableSink1(string;TestCase_IOT_MemberTaint_OutParam+TaintedStruct):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="writeToVulnerableSink2" uniqueID="writeToVulnerableSink2(string;TestCase_IOT_MemberTaint_OutParam+TaintedStruct):void">
				<signature>TestCase_IOT_MemberTaint_OutParam.writeToVulnerableSink2(string;TestCase_IOT_MemberTaint_OutParam+TaintedStruct):void</signature>
			</method>
		</class>
		<class name="TestCase_IOT_Recursion" uniqueID="TestCase_IOT_Recursion">
			<method accessibility="Public" methodKind="Static" name="main" uniqueID="main(string[]):void">
				<signature>TestCase_IOT_Recursion.main(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_Recursion" uniqueID="TestCase_IOT_Recursion():void">
				<signature>TestCase_IOT_Recursion.TestCase_IOT_Recursion():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="readFromVulnerableSource" uniqueID="readFromVulnerableSource(string):string">
				<signature>TestCase_IOT_Recursion.readFromVulnerableSource(string):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="recursiveTrim" uniqueID="recursiveTrim(string):string">
				<signature>TestCase_IOT_Recursion.recursiveTrim(string):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="writeToVulnerableSink" uniqueID="writeToVulnerableSink(string):void">
				<signature>TestCase_IOT_Recursion.writeToVulnerableSink(string):void</signature>
			</method>
		</class>
		<class name="TestCase_IOT_UserValidation" uniqueID="TestCase_IOT_UserValidation">
			<method accessibility="Public" methodKind="Static" name="main" uniqueID="main(string[]):void">
				<signature>TestCase_IOT_UserValidation.main(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_UserValidation" uniqueID="TestCase_IOT_UserValidation():void">
				<signature>TestCase_IOT_UserValidation.TestCase_IOT_UserValidation():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="getVulnerableSource1" uniqueID="getVulnerableSource1():string">
				<signature>TestCase_IOT_UserValidation.getVulnerableSource1():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="getVulnerableSource2" uniqueID="getVulnerableSource2():string">
				<signature>TestCase_IOT_UserValidation.getVulnerableSource2():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="getVulnerableSource3" uniqueID="getVulnerableSource3():string">
				<signature>TestCase_IOT_UserValidation.getVulnerableSource3():string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="trace1" uniqueID="trace1():void">
				<signature>TestCase_IOT_UserValidation.trace1():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="trace2" uniqueID="trace2():void">
				<signature>TestCase_IOT_UserValidation.trace2():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="trace3" uniqueID="trace3():void">
				<signature>TestCase_IOT_UserValidation.trace3():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="validate" uniqueID="validate(string):void">
				<signature>TestCase_IOT_UserValidation.validate(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="writeToVulnerableSink" uniqueID="writeToVulnerableSink(string):void">
				<signature>TestCase_IOT_UserValidation.writeToVulnerableSink(string):void</signature>
			</method>
		</class>
		<class name="TestCase_IOT_List" uniqueID="TestCase_IOT_List">
			<method accessibility="Public" methodKind="Static" name="main" uniqueID="main(string[]):void">
				<signature>TestCase_IOT_List.main(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_List" uniqueID="TestCase_IOT_List():void">
				<signature>TestCase_IOT_List.TestCase_IOT_List():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="getVulnerableSource" uniqueID="getVulnerableSource(string):string">
				<signature>TestCase_IOT_List.getVulnerableSource(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="writeToVulnerableSink" uniqueID="writeToVulnerableSink(string;System.Collections.IList):void">
				<signature>TestCase_IOT_List.writeToVulnerableSink(string;System.Collections.IList):void</signature>
			</method>
		</class>
		<class name="TestCase_IOT_Looping" uniqueID="TestCase_IOT_Looping">
			<method accessibility="Public" methodKind="Static" name="main" uniqueID="main(string[]):void">
				<signature>TestCase_IOT_Looping.main(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_Looping" uniqueID="TestCase_IOT_Looping():void">
				<signature>TestCase_IOT_Looping.TestCase_IOT_Looping():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="getVulnerableSource" uniqueID="getVulnerableSource(string):string">
				<signature>TestCase_IOT_Looping.getVulnerableSource(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="writeToVulnerableSink" uniqueID="writeToVulnerableSink(string):void">
				<signature>TestCase_IOT_Looping.writeToVulnerableSink(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="writeToVulnerableSink2" uniqueID="writeToVulnerableSink2(string):void">
				<signature>TestCase_IOT_Looping.writeToVulnerableSink2(string):void</signature>
			</method>
		</class>
		<class name="TestCase_IOT_Lost_XFile_Part1" uniqueID="TestCase_IOT_Lost_XFile_Part1">
			<method accessibility="Public" methodKind="Static" name="main" uniqueID="main(string[]):void">
				<signature>TestCase_IOT_Lost_XFile_Part1.main(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_Lost_XFile_Part1" uniqueID="TestCase_IOT_Lost_XFile_Part1():void">
				<signature>TestCase_IOT_Lost_XFile_Part1.TestCase_IOT_Lost_XFile_Part1():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="getVulnerableSource" uniqueID="getVulnerableSource(string):string">
				<signature>TestCase_IOT_Lost_XFile_Part1.getVulnerableSource(string):string</signature>
			</method>
		</class>
		<class name="TestCase_IOT_MemberTaint" uniqueID="TestCase_IOT_MemberTaint">
			<method accessibility="Public" methodKind="Static" name="main" uniqueID="main(string[]):void">
				<signature>TestCase_IOT_MemberTaint.main(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_MemberTaint" uniqueID="TestCase_IOT_MemberTaint():void">
				<signature>TestCase_IOT_MemberTaint.TestCase_IOT_MemberTaint():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="getVulnerableSource" uniqueID="getVulnerableSource(string):string">
				<signature>TestCase_IOT_MemberTaint.getVulnerableSource(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="writeToVulnerableSink1" uniqueID="writeToVulnerableSink1(string):void">
				<signature>TestCase_IOT_MemberTaint.writeToVulnerableSink1(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="writeToVulnerableSink2" uniqueID="writeToVulnerableSink2(string):void">
				<signature>TestCase_IOT_MemberTaint.writeToVulnerableSink2(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="writeToVulnerableSink3" uniqueID="writeToVulnerableSink3(string):void">
				<signature>TestCase_IOT_MemberTaint.writeToVulnerableSink3(string):void</signature>
			</method>
		</class>
		<class name="TestCase_IOT_MemberTaint+TaintedStruct" uniqueID="TestCase_IOT_MemberTaint+TaintedStruct">
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_MemberTaint+TaintedStruct" uniqueID="TestCase_IOT_MemberTaint+TaintedStruct():void">
				<signature>TestCase_IOT_MemberTaint+TaintedStruct.TestCase_IOT_MemberTaint+TaintedStruct():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_MemberTaint+TaintedStruct" uniqueID="TestCase_IOT_MemberTaint+TaintedStruct(string):void">
				<signature>TestCase_IOT_MemberTaint+TaintedStruct.TestCase_IOT_MemberTaint+TaintedStruct(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="getTainted" uniqueID="getTainted():string">
				<signature>TestCase_IOT_MemberTaint+TaintedStruct.getTainted():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="setTainted" uniqueID="setTainted(string):void">
				<signature>TestCase_IOT_MemberTaint+TaintedStruct.setTainted(string):void</signature>
			</method>
		</class>
		<class name="TestCase_IOT_Static" uniqueID="TestCase_IOT_Static">
			<method accessibility="Public" methodKind="Static" name="getVulnerableSource" uniqueID="getVulnerableSource(string):string">
				<signature>TestCase_IOT_Static.getVulnerableSource(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="main" uniqueID="main(string[]):void">
				<signature>TestCase_IOT_Static.main(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="writeToVulnerableSink" uniqueID="writeToVulnerableSink(string):void">
				<signature>TestCase_IOT_Static.writeToVulnerableSink(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_Static" uniqueID="TestCase_IOT_Static():void">
				<signature>TestCase_IOT_Static.TestCase_IOT_Static():void</signature>
			</method>
		</class>
		<class name="TestCase_IOT_UserValidation2" uniqueID="TestCase_IOT_UserValidation2">
			<method accessibility="Public" methodKind="Static" name="main" uniqueID="main(string[]):void">
				<signature>TestCase_IOT_UserValidation2.main(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_UserValidation2" uniqueID="TestCase_IOT_UserValidation2():void">
				<signature>TestCase_IOT_UserValidation2.TestCase_IOT_UserValidation2():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="callValidate" uniqueID="callValidate(string):void">
				<signature>TestCase_IOT_UserValidation2.callValidate(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="callValidateAlmostThere" uniqueID="callValidateAlmostThere(string):void">
				<signature>TestCase_IOT_UserValidation2.callValidateAlmostThere(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="callValidateEventually" uniqueID="callValidateEventually(string):void">
				<signature>TestCase_IOT_UserValidation2.callValidateEventually(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="getVulnerableSource" uniqueID="getVulnerableSource():string">
				<signature>TestCase_IOT_UserValidation2.getVulnerableSource():string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="trace1" uniqueID="trace1():void">
				<signature>TestCase_IOT_UserValidation2.trace1():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="validate" uniqueID="validate(string):void">
				<signature>TestCase_IOT_UserValidation2.validate(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="writeToVulnerableSink" uniqueID="writeToVulnerableSink(string):void">
				<signature>TestCase_IOT_UserValidation2.writeToVulnerableSink(string):void</signature>
			</method>
		</class>
		<class name="TestCase_IOT_XFile_Part1" uniqueID="TestCase_IOT_XFile_Part1">
			<method accessibility="Public" methodKind="Static" name="main" uniqueID="main(string[]):void">
				<signature>TestCase_IOT_XFile_Part1.main(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_XFile_Part1" uniqueID="TestCase_IOT_XFile_Part1():void">
				<signature>TestCase_IOT_XFile_Part1.TestCase_IOT_XFile_Part1():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="getVulnerableSource" uniqueID="getVulnerableSource(string):string">
				<signature>TestCase_IOT_XFile_Part1.getVulnerableSource(string):string</signature>
			</method>
		</class>
		<class name="TestCase_IOT_Branching" uniqueID="TestCase_IOT_Branching">
			<method accessibility="Public" methodKind="Static" name="main" uniqueID="main(string[]):void">
				<signature>TestCase_IOT_Branching.main(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_Branching" uniqueID="TestCase_IOT_Branching():void">
				<signature>TestCase_IOT_Branching.TestCase_IOT_Branching():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="getVulnerableSource" uniqueID="getVulnerableSource(string):string">
				<signature>TestCase_IOT_Branching.getVulnerableSource(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="writeToVulnerableSink1" uniqueID="writeToVulnerableSink1(string):void">
				<signature>TestCase_IOT_Branching.writeToVulnerableSink1(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="writeToVulnerableSink2" uniqueID="writeToVulnerableSink2(string):void">
				<signature>TestCase_IOT_Branching.writeToVulnerableSink2(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="writeToVulnerableSink3" uniqueID="writeToVulnerableSink3(string):void">
				<signature>TestCase_IOT_Branching.writeToVulnerableSink3(string):void</signature>
			</method>
		</class>
		<class name="TestCase_IOT_MemberTaint_OutParam+TaintedStruct" uniqueID="TestCase_IOT_MemberTaint_OutParam+TaintedStruct">
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_MemberTaint_OutParam+TaintedStruct" uniqueID="TestCase_IOT_MemberTaint_OutParam+TaintedStruct():void">
				<signature>TestCase_IOT_MemberTaint_OutParam+TaintedStruct.TestCase_IOT_MemberTaint_OutParam+TaintedStruct():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_MemberTaint_OutParam+TaintedStruct" uniqueID="TestCase_IOT_MemberTaint_OutParam+TaintedStruct(string):void">
				<signature>TestCase_IOT_MemberTaint_OutParam+TaintedStruct.TestCase_IOT_MemberTaint_OutParam+TaintedStruct(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="getTainted" uniqueID="getTainted():string">
				<signature>TestCase_IOT_MemberTaint_OutParam+TaintedStruct.getTainted():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="setTainted" uniqueID="setTainted(string):void">
				<signature>TestCase_IOT_MemberTaint_OutParam+TaintedStruct.setTainted(string):void</signature>
			</method>
		</class>
		<class name="TestCase_IOT_OverlapTrace" uniqueID="TestCase_IOT_OverlapTrace">
			<method accessibility="Public" methodKind="Static" name="main" uniqueID="main(string[]):void">
				<signature>TestCase_IOT_OverlapTrace.main(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_OverlapTrace" uniqueID="TestCase_IOT_OverlapTrace():void">
				<signature>TestCase_IOT_OverlapTrace.TestCase_IOT_OverlapTrace():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="readFromVulnerableSource" uniqueID="readFromVulnerableSource(string):string">
				<signature>TestCase_IOT_OverlapTrace.readFromVulnerableSource(string):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="writeToSinkCheck" uniqueID="writeToSinkCheck(string;string):void">
				<signature>TestCase_IOT_OverlapTrace.writeToSinkCheck(string;string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="writeToVulnerableSink" uniqueID="writeToVulnerableSink(string):void">
				<signature>TestCase_IOT_OverlapTrace.writeToVulnerableSink(string):void</signature>
			</method>
		</class>
		<class name="TestCase_IOT_Simple_Validation" uniqueID="TestCase_IOT_Simple_Validation">
			<method accessibility="Public" methodKind="Static" name="main" uniqueID="main(string[]):void">
				<signature>TestCase_IOT_Simple_Validation.main(string[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="testSinkValidated" uniqueID="testSinkValidated(string[]):void">
				<signature>TestCase_IOT_Simple_Validation.testSinkValidated(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TestCase_IOT_Simple_Validation" uniqueID="TestCase_IOT_Simple_Validation():void">
				<signature>TestCase_IOT_Simple_Validation.TestCase_IOT_Simple_Validation():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="getCoveredVulnerableSource" uniqueID="getCoveredVulnerableSource(string):string">
				<signature>TestCase_IOT_Simple_Validation.getCoveredVulnerableSource(string):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="validate" uniqueID="validate(string):void">
				<signature>TestCase_IOT_Simple_Validation.validate(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="writeToVulnerableSink" uniqueID="writeToVulnerableSink(string;string):void">
				<signature>TestCase_IOT_Simple_Validation.writeToVulnerableSink(string;string):void</signature>
			</method>
		</class>
	</package>
	<package name="Microsoft.Win32">
		<class name="IAssemblyEnum" uniqueID="Microsoft.Win32.IAssemblyEnum">
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone(Microsoft.Win32.IAssemblyEnum):int">
				<signature>Microsoft.Win32.IAssemblyEnum.Clone(Microsoft.Win32.IAssemblyEnum):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetNextAssembly" uniqueID="GetNextAssembly(Microsoft.Win32.IApplicationContext;Microsoft.Win32.IAssemblyName;unsigned int):int">
				<signature>Microsoft.Win32.IAssemblyEnum.GetNextAssembly(Microsoft.Win32.IApplicationContext;Microsoft.Win32.IAssemblyName;unsigned int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reset" uniqueID="Reset():int">
				<signature>Microsoft.Win32.IAssemblyEnum.Reset():int</signature>
			</method>
		</class>
		<class name="IAssemblyName" uniqueID="Microsoft.Win32.IAssemblyName">
			<method accessibility="Public" methodKind="Member" name="BindToObject" uniqueID="BindToObject(object;object;Microsoft.Win32.IApplicationContext;string;long;int;unsigned int;int):int">
				<signature>Microsoft.Win32.IAssemblyName.BindToObject(object;object;Microsoft.Win32.IApplicationContext;string;long;int;unsigned int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone(Microsoft.Win32.IAssemblyName):int">
				<signature>Microsoft.Win32.IAssemblyName.Clone(Microsoft.Win32.IAssemblyName):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Finalize" uniqueID="Finalize():int">
				<signature>Microsoft.Win32.IAssemblyName.Finalize():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetDisplayName" uniqueID="GetDisplayName(native signed int;unsigned int;unsigned int):int">
				<signature>Microsoft.Win32.IAssemblyName.GetDisplayName(native signed int;unsigned int;unsigned int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetName" uniqueID="GetName(unsigned int;int):int">
				<signature>Microsoft.Win32.IAssemblyName.GetName(unsigned int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetProperty" uniqueID="GetProperty(unsigned int;native signed int;unsigned int):int">
				<signature>Microsoft.Win32.IAssemblyName.GetProperty(unsigned int;native signed int;unsigned int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetVersion" uniqueID="GetVersion(unsigned int;unsigned int):int">
				<signature>Microsoft.Win32.IAssemblyName.GetVersion(unsigned int;unsigned int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsEqual" uniqueID="IsEqual(Microsoft.Win32.IAssemblyName;unsigned int):int">
				<signature>Microsoft.Win32.IAssemblyName.IsEqual(Microsoft.Win32.IAssemblyName;unsigned int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetProperty" uniqueID="SetProperty(unsigned int;native signed int;unsigned int):int">
				<signature>Microsoft.Win32.IAssemblyName.SetProperty(unsigned int;native signed int;unsigned int):int</signature>
			</method>
		</class>
		<class name="Win32Native+ConsoleCtrlHandlerRoutine" uniqueID="Microsoft.Win32.Win32Native+ConsoleCtrlHandlerRoutine">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(int;System.AsyncCallback;object):System.IAsyncResult">
				<signature>Microsoft.Win32.Win32Native+ConsoleCtrlHandlerRoutine.BeginInvoke(int;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):bool">
				<signature>Microsoft.Win32.Win32Native+ConsoleCtrlHandlerRoutine.EndInvoke(System.IAsyncResult):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(int):bool">
				<signature>Microsoft.Win32.Win32Native+ConsoleCtrlHandlerRoutine.Invoke(int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Win32Native+ConsoleCtrlHandlerRoutine" uniqueID="Win32Native+ConsoleCtrlHandlerRoutine(object;native signed int):void">
				<signature>Microsoft.Win32.Win32Native+ConsoleCtrlHandlerRoutine.Win32Native+ConsoleCtrlHandlerRoutine(object;native signed int):void</signature>
			</method>
		</class>
		<class name="Win32Native+OSVERSIONINFO" uniqueID="Microsoft.Win32.Win32Native+OSVERSIONINFO">
			<method accessibility="Protected" methodKind="Member" name="Win32Native+OSVERSIONINFO" uniqueID="Win32Native+OSVERSIONINFO():void">
				<signature>Microsoft.Win32.Win32Native+OSVERSIONINFO.Win32Native+OSVERSIONINFO():void</signature>
			</method>
		</class>
		<class name="IApplicationContext" uniqueID="Microsoft.Win32.IApplicationContext">
			<method accessibility="Public" methodKind="Member" name="Get" uniqueID="Get(string;int;unsigned int;unsigned int):void">
				<signature>Microsoft.Win32.IApplicationContext.Get(string;int;unsigned int;unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetContextNameObject" uniqueID="GetContextNameObject(Microsoft.Win32.IAssemblyName):void">
				<signature>Microsoft.Win32.IApplicationContext.GetContextNameObject(Microsoft.Win32.IAssemblyName):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetDynamicDirectory" uniqueID="GetDynamicDirectory(int;unsigned int):void">
				<signature>Microsoft.Win32.IApplicationContext.GetDynamicDirectory(int;unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Set" uniqueID="Set(string;int;unsigned int;unsigned int):void">
				<signature>Microsoft.Win32.IApplicationContext.Set(string;int;unsigned int;unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetContextNameObject" uniqueID="SetContextNameObject(Microsoft.Win32.IAssemblyName):void">
				<signature>Microsoft.Win32.IApplicationContext.SetContextNameObject(Microsoft.Win32.IAssemblyName):void</signature>
			</method>
		</class>
		<class name="Win32Native" uniqueID="Microsoft.Win32.Win32Native">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>Microsoft.Win32.Win32Native.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="AdjustTokenPrivileges" uniqueID="AdjustTokenPrivileges(Microsoft.Win32.SafeHandles.SafeTokenHandle;bool;Microsoft.Win32.Win32Native+TOKEN_PRIVILEGE;unsigned int;Microsoft.Win32.Win32Native+TOKEN_PRIVILEGE;unsigned int):bool">
				<signature>Microsoft.Win32.Win32Native.AdjustTokenPrivileges(Microsoft.Win32.SafeHandles.SafeTokenHandle;bool;Microsoft.Win32.Win32Native+TOKEN_PRIVILEGE;unsigned int;Microsoft.Win32.Win32Native+TOKEN_PRIVILEGE;unsigned int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="AllocateLocallyUniqueId" uniqueID="AllocateLocallyUniqueId(Microsoft.Win32.Win32Native+LUID):bool">
				<signature>Microsoft.Win32.Win32Native.AllocateLocallyUniqueId(Microsoft.Win32.Win32Native+LUID):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="BCryptGetFipsAlgorithmMode" uniqueID="BCryptGetFipsAlgorithmMode(bool):unsigned int">
				<signature>Microsoft.Win32.Win32Native.BCryptGetFipsAlgorithmMode(bool):unsigned int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="Beep" uniqueID="Beep(int;int):bool">
				<signature>Microsoft.Win32.Win32Native.Beep(int;int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CheckTokenMembership" uniqueID="CheckTokenMembership(Microsoft.Win32.SafeHandles.SafeTokenHandle;byte[];bool):bool">
				<signature>Microsoft.Win32.Win32Native.CheckTokenMembership(Microsoft.Win32.SafeHandles.SafeTokenHandle;byte[];bool):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CloseHandle" uniqueID="CloseHandle(native signed int):bool">
				<signature>Microsoft.Win32.Win32Native.CloseHandle(native signed int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CoTaskMemAlloc" uniqueID="CoTaskMemAlloc(int):native signed int">
				<signature>Microsoft.Win32.Win32Native.CoTaskMemAlloc(int):native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CoTaskMemFree" uniqueID="CoTaskMemFree(native signed int):void">
				<signature>Microsoft.Win32.Win32Native.CoTaskMemFree(native signed int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CoTaskMemRealloc" uniqueID="CoTaskMemRealloc(native signed int;int):native signed int">
				<signature>Microsoft.Win32.Win32Native.CoTaskMemRealloc(native signed int;int):native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ConvertSdToStringSd" uniqueID="ConvertSdToStringSd(byte[];unsigned int;unsigned int;native signed int;unsigned int):int">
				<signature>Microsoft.Win32.Win32Native.ConvertSdToStringSd(byte[];unsigned int;unsigned int;native signed int;unsigned int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ConvertStringSdToSd" uniqueID="ConvertStringSdToSd(string;unsigned int;native signed int;unsigned int):int">
				<signature>Microsoft.Win32.Win32Native.ConvertStringSdToSd(string;unsigned int;native signed int;unsigned int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ConvertStringSidToSid" uniqueID="ConvertStringSidToSid(string;native signed int):int">
				<signature>Microsoft.Win32.Win32Native.ConvertStringSidToSid(string;native signed int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CopyFile" uniqueID="CopyFile(string;string;bool):bool">
				<signature>Microsoft.Win32.Win32Native.CopyFile(string;string;bool):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CopyMemoryAnsi" uniqueID="CopyMemoryAnsi(System.Text.StringBuilder;native signed int;native signed int):void">
				<signature>Microsoft.Win32.Win32Native.CopyMemoryAnsi(System.Text.StringBuilder;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CopyMemoryAnsi" uniqueID="CopyMemoryAnsi(native signed int;string;native signed int):void">
				<signature>Microsoft.Win32.Win32Native.CopyMemoryAnsi(native signed int;string;native signed int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CopyMemoryUni" uniqueID="CopyMemoryUni(System.Text.StringBuilder;native signed int;native signed int):void">
				<signature>Microsoft.Win32.Win32Native.CopyMemoryUni(System.Text.StringBuilder;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CopyMemoryUni" uniqueID="CopyMemoryUni(native signed int;string;native signed int):void">
				<signature>Microsoft.Win32.Win32Native.CopyMemoryUni(native signed int;string;native signed int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CreateAssemblyEnum" uniqueID="CreateAssemblyEnum(Microsoft.Win32.IAssemblyEnum;Microsoft.Win32.IApplicationContext;Microsoft.Win32.IAssemblyName;unsigned int;native signed int):int">
				<signature>Microsoft.Win32.Win32Native.CreateAssemblyEnum(Microsoft.Win32.IAssemblyEnum;Microsoft.Win32.IApplicationContext;Microsoft.Win32.IAssemblyName;unsigned int;native signed int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CreateAssemblyNameObject" uniqueID="CreateAssemblyNameObject(Microsoft.Win32.IAssemblyName;string;unsigned int;native signed int):int">
				<signature>Microsoft.Win32.Win32Native.CreateAssemblyNameObject(Microsoft.Win32.IAssemblyName;string;unsigned int;native signed int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CreateDirectory" uniqueID="CreateDirectory(string;Microsoft.Win32.Win32Native+SECURITY_ATTRIBUTES):bool">
				<signature>Microsoft.Win32.Win32Native.CreateDirectory(string;Microsoft.Win32.Win32Native+SECURITY_ATTRIBUTES):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CreateEvent" uniqueID="CreateEvent(Microsoft.Win32.Win32Native+SECURITY_ATTRIBUTES;bool;bool;string):Microsoft.Win32.SafeHandles.SafeWaitHandle">
				<signature>Microsoft.Win32.Win32Native.CreateEvent(Microsoft.Win32.Win32Native+SECURITY_ATTRIBUTES;bool;bool;string):Microsoft.Win32.SafeHandles.SafeWaitHandle</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CreateFile" uniqueID="CreateFile(string;int;System.IO.FileShare;Microsoft.Win32.Win32Native+SECURITY_ATTRIBUTES;System.IO.FileMode;int;native signed int):Microsoft.Win32.SafeHandles.SafeFileHandle">
				<signature>Microsoft.Win32.Win32Native.CreateFile(string;int;System.IO.FileShare;Microsoft.Win32.Win32Native+SECURITY_ATTRIBUTES;System.IO.FileMode;int;native signed int):Microsoft.Win32.SafeHandles.SafeFileHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CreateFileMapping" uniqueID="CreateFileMapping(Microsoft.Win32.SafeHandles.SafeFileHandle;native signed int;unsigned int;unsigned int;unsigned int;string):Microsoft.Win32.SafeHandles.SafeFileMappingHandle">
				<signature>Microsoft.Win32.Win32Native.CreateFileMapping(Microsoft.Win32.SafeHandles.SafeFileHandle;native signed int;unsigned int;unsigned int;unsigned int;string):Microsoft.Win32.SafeHandles.SafeFileMappingHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CreateMutex" uniqueID="CreateMutex(Microsoft.Win32.Win32Native+SECURITY_ATTRIBUTES;bool;string):Microsoft.Win32.SafeHandles.SafeWaitHandle">
				<signature>Microsoft.Win32.Win32Native.CreateMutex(Microsoft.Win32.Win32Native+SECURITY_ATTRIBUTES;bool;string):Microsoft.Win32.SafeHandles.SafeWaitHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CreateWellKnownSid" uniqueID="CreateWellKnownSid(int;byte[];byte[];unsigned int):int">
				<signature>Microsoft.Win32.Win32Native.CreateWellKnownSid(int;byte[];byte[];unsigned int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="DecryptFile" uniqueID="DecryptFile(string;int):bool">
				<signature>Microsoft.Win32.Win32Native.DecryptFile(string;int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="DeleteFile" uniqueID="DeleteFile(string):bool">
				<signature>Microsoft.Win32.Win32Native.DeleteFile(string):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="DeleteVolumeMountPoint" uniqueID="DeleteVolumeMountPoint(string):bool">
				<signature>Microsoft.Win32.Win32Native.DeleteVolumeMountPoint(string):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="DuplicateHandle" uniqueID="DuplicateHandle(native signed int;Microsoft.Win32.SafeHandles.SafeTokenHandle;native signed int;Microsoft.Win32.SafeHandles.SafeTokenHandle;unsigned int;bool;unsigned int):bool">
				<signature>Microsoft.Win32.Win32Native.DuplicateHandle(native signed int;Microsoft.Win32.SafeHandles.SafeTokenHandle;native signed int;Microsoft.Win32.SafeHandles.SafeTokenHandle;unsigned int;bool;unsigned int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="DuplicateHandle" uniqueID="DuplicateHandle(native signed int;native signed int;native signed int;Microsoft.Win32.SafeHandles.SafeTokenHandle;unsigned int;bool;unsigned int):bool">
				<signature>Microsoft.Win32.Win32Native.DuplicateHandle(native signed int;native signed int;native signed int;Microsoft.Win32.SafeHandles.SafeTokenHandle;unsigned int;bool;unsigned int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="DuplicateTokenEx" uniqueID="DuplicateTokenEx(Microsoft.Win32.SafeHandles.SafeTokenHandle;System.Security.Principal.TokenAccessLevels;native signed int;Microsoft.Win32.Win32Native+SECURITY_IMPERSONATION_LEVEL;System.Security.Principal.TokenType;Microsoft.Win32.SafeHandles.SafeTokenHandle):bool">
				<signature>Microsoft.Win32.Win32Native.DuplicateTokenEx(Microsoft.Win32.SafeHandles.SafeTokenHandle;System.Security.Principal.TokenAccessLevels;native signed int;Microsoft.Win32.Win32Native+SECURITY_IMPERSONATION_LEVEL;System.Security.Principal.TokenType;Microsoft.Win32.SafeHandles.SafeTokenHandle):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="DuplicateTokenEx" uniqueID="DuplicateTokenEx(Microsoft.Win32.SafeHandles.SafeTokenHandle;unsigned int;native signed int;unsigned int;unsigned int;Microsoft.Win32.SafeHandles.SafeTokenHandle):bool">
				<signature>Microsoft.Win32.Win32Native.DuplicateTokenEx(Microsoft.Win32.SafeHandles.SafeTokenHandle;unsigned int;native signed int;unsigned int;unsigned int;Microsoft.Win32.SafeHandles.SafeTokenHandle):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="EncryptFile" uniqueID="EncryptFile(string):bool">
				<signature>Microsoft.Win32.Win32Native.EncryptFile(string):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ExpandEnvironmentStrings" uniqueID="ExpandEnvironmentStrings(string;System.Text.StringBuilder;int):int">
				<signature>Microsoft.Win32.Win32Native.ExpandEnvironmentStrings(string;System.Text.StringBuilder;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="FillConsoleOutputAttribute" uniqueID="FillConsoleOutputAttribute(native signed int;short;int;Microsoft.Win32.Win32Native+COORD;int):bool">
				<signature>Microsoft.Win32.Win32Native.FillConsoleOutputAttribute(native signed int;short;int;Microsoft.Win32.Win32Native+COORD;int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="FillConsoleOutputCharacter" uniqueID="FillConsoleOutputCharacter(native signed int;char;int;Microsoft.Win32.Win32Native+COORD;int):bool">
				<signature>Microsoft.Win32.Win32Native.FillConsoleOutputCharacter(native signed int;char;int;Microsoft.Win32.Win32Native+COORD;int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="FindClose" uniqueID="FindClose(native signed int):bool">
				<signature>Microsoft.Win32.Win32Native.FindClose(native signed int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="FindFirstFile" uniqueID="FindFirstFile(string;Microsoft.Win32.Win32Native+WIN32_FIND_DATA):Microsoft.Win32.SafeHandles.SafeFindHandle">
				<signature>Microsoft.Win32.Win32Native.FindFirstFile(string;Microsoft.Win32.Win32Native+WIN32_FIND_DATA):Microsoft.Win32.SafeHandles.SafeFindHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="FindNLSString" uniqueID="FindNLSString(int;int;char;int;char;int;native signed int):int">
				<signature>Microsoft.Win32.Win32Native.FindNLSString(int;int;char;int;char;int;native signed int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="FindNextFile" uniqueID="FindNextFile(Microsoft.Win32.SafeHandles.SafeFindHandle;Microsoft.Win32.Win32Native+WIN32_FIND_DATA):bool">
				<signature>Microsoft.Win32.Win32Native.FindNextFile(Microsoft.Win32.SafeHandles.SafeFindHandle;Microsoft.Win32.Win32Native+WIN32_FIND_DATA):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="FormatMessage" uniqueID="FormatMessage(int;native signed int;int;int;System.Text.StringBuilder;int;native signed int):int">
				<signature>Microsoft.Win32.Win32Native.FormatMessage(int;native signed int;int;int;System.Text.StringBuilder;int;native signed int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetACP" uniqueID="GetACP():int">
				<signature>Microsoft.Win32.Win32Native.GetACP():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetCalendarInfo" uniqueID="GetCalendarInfo(int;int;int;System.Text.StringBuilder;int;native signed int):int">
				<signature>Microsoft.Win32.Win32Native.GetCalendarInfo(int;int;int;System.Text.StringBuilder;int;native signed int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetComputerName" uniqueID="GetComputerName(System.Text.StringBuilder;int):int">
				<signature>Microsoft.Win32.Win32Native.GetComputerName(System.Text.StringBuilder;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetConsoleCP" uniqueID="GetConsoleCP():unsigned int">
				<signature>Microsoft.Win32.Win32Native.GetConsoleCP():unsigned int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetConsoleCursorInfo" uniqueID="GetConsoleCursorInfo(native signed int;Microsoft.Win32.Win32Native+CONSOLE_CURSOR_INFO):bool">
				<signature>Microsoft.Win32.Win32Native.GetConsoleCursorInfo(native signed int;Microsoft.Win32.Win32Native+CONSOLE_CURSOR_INFO):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetConsoleMode" uniqueID="GetConsoleMode(native signed int;int):bool">
				<signature>Microsoft.Win32.Win32Native.GetConsoleMode(native signed int;int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetConsoleOutputCP" uniqueID="GetConsoleOutputCP():unsigned int">
				<signature>Microsoft.Win32.Win32Native.GetConsoleOutputCP():unsigned int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetConsoleScreenBufferInfo" uniqueID="GetConsoleScreenBufferInfo(native signed int;Microsoft.Win32.Win32Native+CONSOLE_SCREEN_BUFFER_INFO):bool">
				<signature>Microsoft.Win32.Win32Native.GetConsoleScreenBufferInfo(native signed int;Microsoft.Win32.Win32Native+CONSOLE_SCREEN_BUFFER_INFO):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetConsoleTitle" uniqueID="GetConsoleTitle(System.Text.StringBuilder;int):int">
				<signature>Microsoft.Win32.Win32Native.GetConsoleTitle(System.Text.StringBuilder;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetCurrentDirectory" uniqueID="GetCurrentDirectory(int;System.Text.StringBuilder):int">
				<signature>Microsoft.Win32.Win32Native.GetCurrentDirectory(int;System.Text.StringBuilder):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetCurrentProcess" uniqueID="GetCurrentProcess():native signed int">
				<signature>Microsoft.Win32.Win32Native.GetCurrentProcess():native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetCurrentProcessId" uniqueID="GetCurrentProcessId():unsigned int">
				<signature>Microsoft.Win32.Win32Native.GetCurrentProcessId():unsigned int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetDiskFreeSpaceEx" uniqueID="GetDiskFreeSpaceEx(string;long;long;long):bool">
				<signature>Microsoft.Win32.Win32Native.GetDiskFreeSpaceEx(string;long;long;long):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetDriveType" uniqueID="GetDriveType(string):int">
				<signature>Microsoft.Win32.Win32Native.GetDriveType(string):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetEnvironmentVariable" uniqueID="GetEnvironmentVariable(string;System.Text.StringBuilder;int):int">
				<signature>Microsoft.Win32.Win32Native.GetEnvironmentVariable(string;System.Text.StringBuilder;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetFileAttributesEx" uniqueID="GetFileAttributesEx(string;int;Microsoft.Win32.Win32Native+WIN32_FILE_ATTRIBUTE_DATA):bool">
				<signature>Microsoft.Win32.Win32Native.GetFileAttributesEx(string;int;Microsoft.Win32.Win32Native+WIN32_FILE_ATTRIBUTE_DATA):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetFileSize" uniqueID="GetFileSize(Microsoft.Win32.SafeHandles.SafeFileHandle;int):int">
				<signature>Microsoft.Win32.Win32Native.GetFileSize(Microsoft.Win32.SafeHandles.SafeFileHandle;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetFileType" uniqueID="GetFileType(Microsoft.Win32.SafeHandles.SafeFileHandle):int">
				<signature>Microsoft.Win32.Win32Native.GetFileType(Microsoft.Win32.SafeHandles.SafeFileHandle):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetFullPathName" uniqueID="GetFullPathName(char;int;char;native signed int):int">
				<signature>Microsoft.Win32.Win32Native.GetFullPathName(char;int;char;native signed int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetFullPathName" uniqueID="GetFullPathName(char[];int;char[];native signed int):int">
				<signature>Microsoft.Win32.Win32Native.GetFullPathName(char[];int;char[];native signed int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetKeyState" uniqueID="GetKeyState(int):short">
				<signature>Microsoft.Win32.Win32Native.GetKeyState(int):short</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetLargestConsoleWindowSize" uniqueID="GetLargestConsoleWindowSize(native signed int):Microsoft.Win32.Win32Native+COORD">
				<signature>Microsoft.Win32.Win32Native.GetLargestConsoleWindowSize(native signed int):Microsoft.Win32.Win32Native+COORD</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetLogicalDrives" uniqueID="GetLogicalDrives():int">
				<signature>Microsoft.Win32.Win32Native.GetLogicalDrives():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetLongPathName" uniqueID="GetLongPathName(char;char;int):int">
				<signature>Microsoft.Win32.Win32Native.GetLongPathName(char;char;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetLongPathName" uniqueID="GetLongPathName(char[];char[];int):int">
				<signature>Microsoft.Win32.Win32Native.GetLongPathName(char[];char[];int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetLongPathName" uniqueID="GetLongPathName(string;System.Text.StringBuilder;int):int">
				<signature>Microsoft.Win32.Win32Native.GetLongPathName(string;System.Text.StringBuilder;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetMessage" uniqueID="GetMessage(int):string">
				<signature>Microsoft.Win32.Win32Native.GetMessage(int):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetProcessWindowStation" uniqueID="GetProcessWindowStation():native signed int">
				<signature>Microsoft.Win32.Win32Native.GetProcessWindowStation():native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetSecurityDescriptorLength" uniqueID="GetSecurityDescriptorLength(native signed int):unsigned int">
				<signature>Microsoft.Win32.Win32Native.GetSecurityDescriptorLength(native signed int):unsigned int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetSecurityInfoByHandle" uniqueID="GetSecurityInfoByHandle(System.Runtime.InteropServices.SafeHandle;unsigned int;unsigned int;native signed int;native signed int;native signed int;native signed int;native signed int):unsigned int">
				<signature>Microsoft.Win32.Win32Native.GetSecurityInfoByHandle(System.Runtime.InteropServices.SafeHandle;unsigned int;unsigned int;native signed int;native signed int;native signed int;native signed int;native signed int):unsigned int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetSecurityInfoByName" uniqueID="GetSecurityInfoByName(string;unsigned int;unsigned int;native signed int;native signed int;native signed int;native signed int;native signed int):unsigned int">
				<signature>Microsoft.Win32.Win32Native.GetSecurityInfoByName(string;unsigned int;unsigned int;native signed int;native signed int;native signed int;native signed int;native signed int):unsigned int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetStdHandle" uniqueID="GetStdHandle(int):native signed int">
				<signature>Microsoft.Win32.Win32Native.GetStdHandle(int):native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetSystemDirectory" uniqueID="GetSystemDirectory(System.Text.StringBuilder;int):int">
				<signature>Microsoft.Win32.Win32Native.GetSystemDirectory(System.Text.StringBuilder;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetSystemInfo" uniqueID="GetSystemInfo(Microsoft.Win32.Win32Native+SYSTEM_INFO):void">
				<signature>Microsoft.Win32.Win32Native.GetSystemInfo(Microsoft.Win32.Win32Native+SYSTEM_INFO):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetTempFileName" uniqueID="GetTempFileName(string;string;unsigned int;System.Text.StringBuilder):unsigned int">
				<signature>Microsoft.Win32.Win32Native.GetTempFileName(string;string;unsigned int;System.Text.StringBuilder):unsigned int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetTempPath" uniqueID="GetTempPath(int;System.Text.StringBuilder):unsigned int">
				<signature>Microsoft.Win32.Win32Native.GetTempPath(int;System.Text.StringBuilder):unsigned int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetTokenInformation" uniqueID="GetTokenInformation(Microsoft.Win32.SafeHandles.SafeTokenHandle;unsigned int;Microsoft.Win32.SafeHandles.SafeLocalAllocHandle;unsigned int;unsigned int):bool">
				<signature>Microsoft.Win32.Win32Native.GetTokenInformation(Microsoft.Win32.SafeHandles.SafeTokenHandle;unsigned int;Microsoft.Win32.SafeHandles.SafeLocalAllocHandle;unsigned int;unsigned int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetTokenInformation" uniqueID="GetTokenInformation(native signed int;unsigned int;Microsoft.Win32.SafeHandles.SafeLocalAllocHandle;unsigned int;unsigned int):bool">
				<signature>Microsoft.Win32.Win32Native.GetTokenInformation(native signed int;unsigned int;Microsoft.Win32.SafeHandles.SafeLocalAllocHandle;unsigned int;unsigned int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetUserName" uniqueID="GetUserName(System.Text.StringBuilder;int):bool">
				<signature>Microsoft.Win32.Win32Native.GetUserName(System.Text.StringBuilder;int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetUserNameEx" uniqueID="GetUserNameEx(int;System.Text.StringBuilder;int):byte">
				<signature>Microsoft.Win32.Win32Native.GetUserNameEx(int;System.Text.StringBuilder;int):byte</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetUserObjectInformation" uniqueID="GetUserObjectInformation(native signed int;int;Microsoft.Win32.Win32Native+USEROBJECTFLAGS;int;int):bool">
				<signature>Microsoft.Win32.Win32Native.GetUserObjectInformation(native signed int;int;Microsoft.Win32.Win32Native+USEROBJECTFLAGS;int;int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetVersionEx" uniqueID="GetVersionEx(Microsoft.Win32.Win32Native+OSVERSIONINFO):bool">
				<signature>Microsoft.Win32.Win32Native.GetVersionEx(Microsoft.Win32.Win32Native+OSVERSIONINFO):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetVersionEx" uniqueID="GetVersionEx(Microsoft.Win32.Win32Native+OSVERSIONINFOEX):bool">
				<signature>Microsoft.Win32.Win32Native.GetVersionEx(Microsoft.Win32.Win32Native+OSVERSIONINFOEX):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetVolumeInformation" uniqueID="GetVolumeInformation(string;System.Text.StringBuilder;int;int;int;int;System.Text.StringBuilder;int):bool">
				<signature>Microsoft.Win32.Win32Native.GetVolumeInformation(string;System.Text.StringBuilder;int;int;int;int;System.Text.StringBuilder;int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetWindowsAccountDomainSid" uniqueID="GetWindowsAccountDomainSid(byte[];byte[];unsigned int):int">
				<signature>Microsoft.Win32.Win32Native.GetWindowsAccountDomainSid(byte[];byte[];unsigned int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetWindowsDirectory" uniqueID="GetWindowsDirectory(System.Text.StringBuilder;int):int">
				<signature>Microsoft.Win32.Win32Native.GetWindowsDirectory(System.Text.StringBuilder;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GlobalMemoryStatus" uniqueID="GlobalMemoryStatus(Microsoft.Win32.Win32Native+MEMORYSTATUS):bool">
				<signature>Microsoft.Win32.Win32Native.GlobalMemoryStatus(Microsoft.Win32.Win32Native+MEMORYSTATUS):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GlobalMemoryStatusEx" uniqueID="GlobalMemoryStatusEx(Microsoft.Win32.Win32Native+MEMORYSTATUSEX):bool">
				<signature>Microsoft.Win32.Win32Native.GlobalMemoryStatusEx(Microsoft.Win32.Win32Native+MEMORYSTATUSEX):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="IsEqualDomainSid" uniqueID="IsEqualDomainSid(byte[];byte[];bool):int">
				<signature>Microsoft.Win32.Win32Native.IsEqualDomainSid(byte[];byte[];bool):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="IsWellKnownSid" uniqueID="IsWellKnownSid(byte[];int):int">
				<signature>Microsoft.Win32.Win32Native.IsWellKnownSid(byte[];int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="LCMapStringW" uniqueID="LCMapStringW(int;int;char;int;char;int):int">
				<signature>Microsoft.Win32.Win32Native.LCMapStringW(int;int;char;int;char;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="LocalAlloc" uniqueID="LocalAlloc(int;native signed int):Microsoft.Win32.SafeHandles.SafeLocalAllocHandle">
				<signature>Microsoft.Win32.Win32Native.LocalAlloc(int;native signed int):Microsoft.Win32.SafeHandles.SafeLocalAllocHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="LocalAlloc_NoSafeHandle" uniqueID="LocalAlloc_NoSafeHandle(int;native signed int):native signed int">
				<signature>Microsoft.Win32.Win32Native.LocalAlloc_NoSafeHandle(int;native signed int):native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="LocalFree" uniqueID="LocalFree(native signed int):native signed int">
				<signature>Microsoft.Win32.Win32Native.LocalFree(native signed int):native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="LocalReAlloc" uniqueID="LocalReAlloc(native signed int;native signed int;int):native signed int">
				<signature>Microsoft.Win32.Win32Native.LocalReAlloc(native signed int;native signed int;int):native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="LockFile" uniqueID="LockFile(Microsoft.Win32.SafeHandles.SafeFileHandle;int;int;int;int):bool">
				<signature>Microsoft.Win32.Win32Native.LockFile(Microsoft.Win32.SafeHandles.SafeFileHandle;int;int;int;int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="LookupAccountName" uniqueID="LookupAccountName(string;string;byte[];int;System.Text.StringBuilder;int;int):bool">
				<signature>Microsoft.Win32.Win32Native.LookupAccountName(string;string;byte[];int;System.Text.StringBuilder;int;int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="LookupPrivilegeValue" uniqueID="LookupPrivilegeValue(string;string;Microsoft.Win32.Win32Native+LUID):bool">
				<signature>Microsoft.Win32.Win32Native.LookupPrivilegeValue(string;string;Microsoft.Win32.Win32Native+LUID):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="LsaClose" uniqueID="LsaClose(native signed int):int">
				<signature>Microsoft.Win32.Win32Native.LsaClose(native signed int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="LsaConnectUntrusted" uniqueID="LsaConnectUntrusted(Microsoft.Win32.SafeHandles.SafeLsaLogonProcessHandle):int">
				<signature>Microsoft.Win32.Win32Native.LsaConnectUntrusted(Microsoft.Win32.SafeHandles.SafeLsaLogonProcessHandle):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="LsaDeregisterLogonProcess" uniqueID="LsaDeregisterLogonProcess(native signed int):int">
				<signature>Microsoft.Win32.Win32Native.LsaDeregisterLogonProcess(native signed int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="LsaFreeMemory" uniqueID="LsaFreeMemory(native signed int):int">
				<signature>Microsoft.Win32.Win32Native.LsaFreeMemory(native signed int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="LsaFreeReturnBuffer" uniqueID="LsaFreeReturnBuffer(native signed int):int">
				<signature>Microsoft.Win32.Win32Native.LsaFreeReturnBuffer(native signed int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="LsaGetLogonSessionData" uniqueID="LsaGetLogonSessionData(Microsoft.Win32.Win32Native+LUID;Microsoft.Win32.SafeHandles.SafeLsaReturnBufferHandle):int">
				<signature>Microsoft.Win32.Win32Native.LsaGetLogonSessionData(Microsoft.Win32.Win32Native+LUID;Microsoft.Win32.SafeHandles.SafeLsaReturnBufferHandle):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="LsaLogonUser" uniqueID="LsaLogonUser(Microsoft.Win32.SafeHandles.SafeLsaLogonProcessHandle;Microsoft.Win32.Win32Native+UNICODE_INTPTR_STRING;unsigned int;unsigned int;native signed int;unsigned int;native signed int;Microsoft.Win32.Win32Native+TOKEN_SOURCE;Microsoft.Win32.SafeHandles.SafeLsaReturnBufferHandle;unsigned int;Microsoft.Win32.Win32Native+LUID;Microsoft.Win32.SafeHandles.SafeTokenHandle;Microsoft.Win32.Win32Native+QUOTA_LIMITS;int):int">
				<signature>Microsoft.Win32.Win32Native.LsaLogonUser(Microsoft.Win32.SafeHandles.SafeLsaLogonProcessHandle;Microsoft.Win32.Win32Native+UNICODE_INTPTR_STRING;unsigned int;unsigned int;native signed int;unsigned int;native signed int;Microsoft.Win32.Win32Native+TOKEN_SOURCE;Microsoft.Win32.SafeHandles.SafeLsaReturnBufferHandle;unsigned int;Microsoft.Win32.Win32Native+LUID;Microsoft.Win32.SafeHandles.SafeTokenHandle;Microsoft.Win32.Win32Native+QUOTA_LIMITS;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="LsaLookupAuthenticationPackage" uniqueID="LsaLookupAuthenticationPackage(Microsoft.Win32.SafeHandles.SafeLsaLogonProcessHandle;Microsoft.Win32.Win32Native+UNICODE_INTPTR_STRING;unsigned int):int">
				<signature>Microsoft.Win32.Win32Native.LsaLookupAuthenticationPackage(Microsoft.Win32.SafeHandles.SafeLsaLogonProcessHandle;Microsoft.Win32.Win32Native+UNICODE_INTPTR_STRING;unsigned int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="LsaLookupNames" uniqueID="LsaLookupNames(Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle;int;Microsoft.Win32.Win32Native+UNICODE_STRING[];Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle;Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle):unsigned int">
				<signature>Microsoft.Win32.Win32Native.LsaLookupNames(Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle;int;Microsoft.Win32.Win32Native+UNICODE_STRING[];Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle;Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle):unsigned int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="LsaLookupNames2" uniqueID="LsaLookupNames2(Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle;int;int;Microsoft.Win32.Win32Native+UNICODE_STRING[];Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle;Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle):unsigned int">
				<signature>Microsoft.Win32.Win32Native.LsaLookupNames2(Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle;int;int;Microsoft.Win32.Win32Native+UNICODE_STRING[];Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle;Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle):unsigned int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="LsaLookupSids" uniqueID="LsaLookupSids(Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle;int;native signed int[];Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle;Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle):unsigned int">
				<signature>Microsoft.Win32.Win32Native.LsaLookupSids(Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle;int;native signed int[];Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle;Microsoft.Win32.SafeHandles.SafeLsaMemoryHandle):unsigned int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="LsaNtStatusToWinError" uniqueID="LsaNtStatusToWinError(int):int">
				<signature>Microsoft.Win32.Win32Native.LsaNtStatusToWinError(int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="LsaOpenPolicy" uniqueID="LsaOpenPolicy(string;Microsoft.Win32.Win32Native+LSA_OBJECT_ATTRIBUTES;int;Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle):unsigned int">
				<signature>Microsoft.Win32.Win32Native.LsaOpenPolicy(string;Microsoft.Win32.Win32Native+LSA_OBJECT_ATTRIBUTES;int;Microsoft.Win32.SafeHandles.SafeLsaPolicyHandle):unsigned int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="LsaRegisterLogonProcess" uniqueID="LsaRegisterLogonProcess(Microsoft.Win32.Win32Native+UNICODE_INTPTR_STRING;Microsoft.Win32.SafeHandles.SafeLsaLogonProcessHandle;native signed int):int">
				<signature>Microsoft.Win32.Win32Native.LsaRegisterLogonProcess(Microsoft.Win32.Win32Native+UNICODE_INTPTR_STRING;Microsoft.Win32.SafeHandles.SafeLsaLogonProcessHandle;native signed int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="MakeHRFromErrorCode" uniqueID="MakeHRFromErrorCode(int):int">
				<signature>Microsoft.Win32.Win32Native.MakeHRFromErrorCode(int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="MapViewOfFile" uniqueID="MapViewOfFile(Microsoft.Win32.SafeHandles.SafeFileMappingHandle;unsigned int;unsigned int;unsigned int;native unsigned int):native signed int">
				<signature>Microsoft.Win32.Win32Native.MapViewOfFile(Microsoft.Win32.SafeHandles.SafeFileMappingHandle;unsigned int;unsigned int;unsigned int;native unsigned int):native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="MoveFile" uniqueID="MoveFile(string;string):bool">
				<signature>Microsoft.Win32.Win32Native.MoveFile(string;string):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="OpenEvent" uniqueID="OpenEvent(int;bool;string):Microsoft.Win32.SafeHandles.SafeWaitHandle">
				<signature>Microsoft.Win32.Win32Native.OpenEvent(int;bool;string):Microsoft.Win32.SafeHandles.SafeWaitHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="OpenMutex" uniqueID="OpenMutex(int;bool;string):Microsoft.Win32.SafeHandles.SafeWaitHandle">
				<signature>Microsoft.Win32.Win32Native.OpenMutex(int;bool;string):Microsoft.Win32.SafeHandles.SafeWaitHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="OpenProcessToken" uniqueID="OpenProcessToken(native signed int;System.Security.Principal.TokenAccessLevels;Microsoft.Win32.SafeHandles.SafeTokenHandle):bool">
				<signature>Microsoft.Win32.Win32Native.OpenProcessToken(native signed int;System.Security.Principal.TokenAccessLevels;Microsoft.Win32.SafeHandles.SafeTokenHandle):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="PeekConsoleInput" uniqueID="PeekConsoleInput(native signed int;Microsoft.Win32.Win32Native+InputRecord;int;int):bool">
				<signature>Microsoft.Win32.Win32Native.PeekConsoleInput(native signed int;Microsoft.Win32.Win32Native+InputRecord;int;int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ReadConsoleInput" uniqueID="ReadConsoleInput(native signed int;Microsoft.Win32.Win32Native+InputRecord;int;int):bool">
				<signature>Microsoft.Win32.Win32Native.ReadConsoleInput(native signed int;Microsoft.Win32.Win32Native+InputRecord;int;int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ReadConsoleOutput" uniqueID="ReadConsoleOutput(native signed int;Microsoft.Win32.Win32Native+CHAR_INFO;Microsoft.Win32.Win32Native+COORD;Microsoft.Win32.Win32Native+COORD;Microsoft.Win32.Win32Native+SMALL_RECT):bool">
				<signature>Microsoft.Win32.Win32Native.ReadConsoleOutput(native signed int;Microsoft.Win32.Win32Native+CHAR_INFO;Microsoft.Win32.Win32Native+COORD;Microsoft.Win32.Win32Native+COORD;Microsoft.Win32.Win32Native+SMALL_RECT):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ReadFile" uniqueID="ReadFile(Microsoft.Win32.SafeHandles.SafeFileHandle;byte;int;int;native signed int):int">
				<signature>Microsoft.Win32.Win32Native.ReadFile(Microsoft.Win32.SafeHandles.SafeFileHandle;byte;int;int;native signed int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ReadFile" uniqueID="ReadFile(Microsoft.Win32.SafeHandles.SafeFileHandle;byte;int;native signed int;System.Threading.NativeOverlapped):int">
				<signature>Microsoft.Win32.Win32Native.ReadFile(Microsoft.Win32.SafeHandles.SafeFileHandle;byte;int;native signed int;System.Threading.NativeOverlapped):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="RegConnectRegistry" uniqueID="RegConnectRegistry(string;Microsoft.Win32.SafeHandles.SafeRegistryHandle;Microsoft.Win32.SafeHandles.SafeRegistryHandle):int">
				<signature>Microsoft.Win32.Win32Native.RegConnectRegistry(string;Microsoft.Win32.SafeHandles.SafeRegistryHandle;Microsoft.Win32.SafeHandles.SafeRegistryHandle):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="RegCreateKeyEx" uniqueID="RegCreateKeyEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string;int;string;int;int;Microsoft.Win32.Win32Native+SECURITY_ATTRIBUTES;Microsoft.Win32.SafeHandles.SafeRegistryHandle;int):int">
				<signature>Microsoft.Win32.Win32Native.RegCreateKeyEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string;int;string;int;int;Microsoft.Win32.Win32Native+SECURITY_ATTRIBUTES;Microsoft.Win32.SafeHandles.SafeRegistryHandle;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="RegDeleteKey" uniqueID="RegDeleteKey(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string):int">
				<signature>Microsoft.Win32.Win32Native.RegDeleteKey(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="RegDeleteValue" uniqueID="RegDeleteValue(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string):int">
				<signature>Microsoft.Win32.Win32Native.RegDeleteValue(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="RegEnumKeyEx" uniqueID="RegEnumKeyEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle;int;System.Text.StringBuilder;int;int[];System.Text.StringBuilder;int[];long[]):int">
				<signature>Microsoft.Win32.Win32Native.RegEnumKeyEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle;int;System.Text.StringBuilder;int;int[];System.Text.StringBuilder;int[];long[]):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="RegEnumValue" uniqueID="RegEnumValue(Microsoft.Win32.SafeHandles.SafeRegistryHandle;int;System.Text.StringBuilder;int;native signed int;int[];byte[];int[]):int">
				<signature>Microsoft.Win32.Win32Native.RegEnumValue(Microsoft.Win32.SafeHandles.SafeRegistryHandle;int;System.Text.StringBuilder;int;native signed int;int[];byte[];int[]):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="RegEnumValueA" uniqueID="RegEnumValueA(Microsoft.Win32.SafeHandles.SafeRegistryHandle;int;System.Text.StringBuilder;int;native signed int;int[];byte[];int[]):int">
				<signature>Microsoft.Win32.Win32Native.RegEnumValueA(Microsoft.Win32.SafeHandles.SafeRegistryHandle;int;System.Text.StringBuilder;int;native signed int;int[];byte[];int[]):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="RegFlushKey" uniqueID="RegFlushKey(Microsoft.Win32.SafeHandles.SafeRegistryHandle):int">
				<signature>Microsoft.Win32.Win32Native.RegFlushKey(Microsoft.Win32.SafeHandles.SafeRegistryHandle):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="RegOpenKeyEx" uniqueID="RegOpenKeyEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string;int;int;Microsoft.Win32.SafeHandles.SafeRegistryHandle):int">
				<signature>Microsoft.Win32.Win32Native.RegOpenKeyEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string;int;int;Microsoft.Win32.SafeHandles.SafeRegistryHandle):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="RegQueryInfoKey" uniqueID="RegQueryInfoKey(Microsoft.Win32.SafeHandles.SafeRegistryHandle;System.Text.StringBuilder;int[];native signed int;int;int[];int[];int;int[];int[];int[];int[]):int">
				<signature>Microsoft.Win32.Win32Native.RegQueryInfoKey(Microsoft.Win32.SafeHandles.SafeRegistryHandle;System.Text.StringBuilder;int[];native signed int;int;int[];int[];int;int[];int[];int[];int[]):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="RegQueryValueEx" uniqueID="RegQueryValueEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string;int[];int;System.Text.StringBuilder;int):int">
				<signature>Microsoft.Win32.Win32Native.RegQueryValueEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string;int[];int;System.Text.StringBuilder;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="RegQueryValueEx" uniqueID="RegQueryValueEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string;int[];int;byte[];int):int">
				<signature>Microsoft.Win32.Win32Native.RegQueryValueEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string;int[];int;byte[];int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="RegQueryValueEx" uniqueID="RegQueryValueEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string;int[];int;char[];int):int">
				<signature>Microsoft.Win32.Win32Native.RegQueryValueEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string;int[];int;char[];int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="RegQueryValueEx" uniqueID="RegQueryValueEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string;int[];int;int;int):int">
				<signature>Microsoft.Win32.Win32Native.RegQueryValueEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string;int[];int;int;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="RegQueryValueEx" uniqueID="RegQueryValueEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string;int[];int;long;int):int">
				<signature>Microsoft.Win32.Win32Native.RegQueryValueEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string;int[];int;long;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="RegSetValueEx" uniqueID="RegSetValueEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string;int;Microsoft.Win32.RegistryValueKind;byte[];int):int">
				<signature>Microsoft.Win32.Win32Native.RegSetValueEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string;int;Microsoft.Win32.RegistryValueKind;byte[];int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="RegSetValueEx" uniqueID="RegSetValueEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string;int;Microsoft.Win32.RegistryValueKind;int;int):int">
				<signature>Microsoft.Win32.Win32Native.RegSetValueEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string;int;Microsoft.Win32.RegistryValueKind;int;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="RegSetValueEx" uniqueID="RegSetValueEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string;int;Microsoft.Win32.RegistryValueKind;long;int):int">
				<signature>Microsoft.Win32.Win32Native.RegSetValueEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string;int;Microsoft.Win32.RegistryValueKind;long;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="RegSetValueEx" uniqueID="RegSetValueEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string;int;Microsoft.Win32.RegistryValueKind;string;int):int">
				<signature>Microsoft.Win32.Win32Native.RegSetValueEx(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string;int;Microsoft.Win32.RegistryValueKind;string;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ReleaseMutex" uniqueID="ReleaseMutex(Microsoft.Win32.SafeHandles.SafeWaitHandle):bool">
				<signature>Microsoft.Win32.Win32Native.ReleaseMutex(Microsoft.Win32.SafeHandles.SafeWaitHandle):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="RemoveDirectory" uniqueID="RemoveDirectory(string):bool">
				<signature>Microsoft.Win32.Win32Native.RemoveDirectory(string):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ReplaceFile" uniqueID="ReplaceFile(string;string;string;int;native signed int;native signed int):bool">
				<signature>Microsoft.Win32.Win32Native.ReplaceFile(string;string;string;int;native signed int;native signed int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ResetEvent" uniqueID="ResetEvent(Microsoft.Win32.SafeHandles.SafeWaitHandle):bool">
				<signature>Microsoft.Win32.Win32Native.ResetEvent(Microsoft.Win32.SafeHandles.SafeWaitHandle):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SHGetFolderPath" uniqueID="SHGetFolderPath(native signed int;int;native signed int;int;System.Text.StringBuilder):int">
				<signature>Microsoft.Win32.Win32Native.SHGetFolderPath(native signed int;int;native signed int;int;System.Text.StringBuilder):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SafeCreateFile" uniqueID="SafeCreateFile(string;int;System.IO.FileShare;Microsoft.Win32.Win32Native+SECURITY_ATTRIBUTES;System.IO.FileMode;int;native signed int):Microsoft.Win32.SafeHandles.SafeFileHandle">
				<signature>Microsoft.Win32.Win32Native.SafeCreateFile(string;int;System.IO.FileShare;Microsoft.Win32.Win32Native+SECURITY_ATTRIBUTES;System.IO.FileMode;int;native signed int):Microsoft.Win32.SafeHandles.SafeFileHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SendMessageTimeout" uniqueID="SendMessageTimeout(native signed int;int;native signed int;string;unsigned int;unsigned int;native signed int):native signed int">
				<signature>Microsoft.Win32.Win32Native.SendMessageTimeout(native signed int;int;native signed int;string;unsigned int;unsigned int;native signed int):native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SetConsoleCP" uniqueID="SetConsoleCP(unsigned int):bool">
				<signature>Microsoft.Win32.Win32Native.SetConsoleCP(unsigned int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SetConsoleCtrlHandler" uniqueID="SetConsoleCtrlHandler(Microsoft.Win32.Win32Native+ConsoleCtrlHandlerRoutine;bool):bool">
				<signature>Microsoft.Win32.Win32Native.SetConsoleCtrlHandler(Microsoft.Win32.Win32Native+ConsoleCtrlHandlerRoutine;bool):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SetConsoleCursorInfo" uniqueID="SetConsoleCursorInfo(native signed int;Microsoft.Win32.Win32Native+CONSOLE_CURSOR_INFO):bool">
				<signature>Microsoft.Win32.Win32Native.SetConsoleCursorInfo(native signed int;Microsoft.Win32.Win32Native+CONSOLE_CURSOR_INFO):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SetConsoleCursorPosition" uniqueID="SetConsoleCursorPosition(native signed int;Microsoft.Win32.Win32Native+COORD):bool">
				<signature>Microsoft.Win32.Win32Native.SetConsoleCursorPosition(native signed int;Microsoft.Win32.Win32Native+COORD):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SetConsoleMode" uniqueID="SetConsoleMode(native signed int;int):bool">
				<signature>Microsoft.Win32.Win32Native.SetConsoleMode(native signed int;int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SetConsoleOutputCP" uniqueID="SetConsoleOutputCP(unsigned int):bool">
				<signature>Microsoft.Win32.Win32Native.SetConsoleOutputCP(unsigned int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SetConsoleScreenBufferSize" uniqueID="SetConsoleScreenBufferSize(native signed int;Microsoft.Win32.Win32Native+COORD):bool">
				<signature>Microsoft.Win32.Win32Native.SetConsoleScreenBufferSize(native signed int;Microsoft.Win32.Win32Native+COORD):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SetConsoleTextAttribute" uniqueID="SetConsoleTextAttribute(native signed int;short):bool">
				<signature>Microsoft.Win32.Win32Native.SetConsoleTextAttribute(native signed int;short):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SetConsoleTitle" uniqueID="SetConsoleTitle(string):bool">
				<signature>Microsoft.Win32.Win32Native.SetConsoleTitle(string):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SetConsoleWindowInfo" uniqueID="SetConsoleWindowInfo(native signed int;bool;Microsoft.Win32.Win32Native+SMALL_RECT):bool">
				<signature>Microsoft.Win32.Win32Native.SetConsoleWindowInfo(native signed int;bool;Microsoft.Win32.Win32Native+SMALL_RECT):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SetCurrentDirectory" uniqueID="SetCurrentDirectory(string):bool">
				<signature>Microsoft.Win32.Win32Native.SetCurrentDirectory(string):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SetEndOfFile" uniqueID="SetEndOfFile(Microsoft.Win32.SafeHandles.SafeFileHandle):bool">
				<signature>Microsoft.Win32.Win32Native.SetEndOfFile(Microsoft.Win32.SafeHandles.SafeFileHandle):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SetEnvironmentVariable" uniqueID="SetEnvironmentVariable(string;string):bool">
				<signature>Microsoft.Win32.Win32Native.SetEnvironmentVariable(string;string):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SetErrorMode" uniqueID="SetErrorMode(int):int">
				<signature>Microsoft.Win32.Win32Native.SetErrorMode(int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SetEvent" uniqueID="SetEvent(Microsoft.Win32.SafeHandles.SafeWaitHandle):bool">
				<signature>Microsoft.Win32.Win32Native.SetEvent(Microsoft.Win32.SafeHandles.SafeWaitHandle):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SetFileAttributes" uniqueID="SetFileAttributes(string;int):bool">
				<signature>Microsoft.Win32.Win32Native.SetFileAttributes(string;int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SetFilePointer" uniqueID="SetFilePointer(Microsoft.Win32.SafeHandles.SafeFileHandle;long;System.IO.SeekOrigin;int):long">
				<signature>Microsoft.Win32.Win32Native.SetFilePointer(Microsoft.Win32.SafeHandles.SafeFileHandle;long;System.IO.SeekOrigin;int):long</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="SetFilePointerWin32" uniqueID="SetFilePointerWin32(Microsoft.Win32.SafeHandles.SafeFileHandle;int;int;int):int">
				<signature>Microsoft.Win32.Win32Native.SetFilePointerWin32(Microsoft.Win32.SafeHandles.SafeFileHandle;int;int;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SetFileTime" uniqueID="SetFileTime(Microsoft.Win32.SafeHandles.SafeFileHandle;Microsoft.Win32.Win32Native+FILE_TIME;Microsoft.Win32.Win32Native+FILE_TIME;Microsoft.Win32.Win32Native+FILE_TIME):bool">
				<signature>Microsoft.Win32.Win32Native.SetFileTime(Microsoft.Win32.SafeHandles.SafeFileHandle;Microsoft.Win32.Win32Native+FILE_TIME;Microsoft.Win32.Win32Native+FILE_TIME;Microsoft.Win32.Win32Native+FILE_TIME):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SetLastError" uniqueID="SetLastError(int):void">
				<signature>Microsoft.Win32.Win32Native.SetLastError(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SetSecurityInfoByHandle" uniqueID="SetSecurityInfoByHandle(System.Runtime.InteropServices.SafeHandle;unsigned int;unsigned int;byte[];byte[];byte[];byte[]):unsigned int">
				<signature>Microsoft.Win32.Win32Native.SetSecurityInfoByHandle(System.Runtime.InteropServices.SafeHandle;unsigned int;unsigned int;byte[];byte[];byte[];byte[]):unsigned int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SetSecurityInfoByName" uniqueID="SetSecurityInfoByName(string;unsigned int;unsigned int;byte[];byte[];byte[];byte[]):unsigned int">
				<signature>Microsoft.Win32.Win32Native.SetSecurityInfoByName(string;unsigned int;unsigned int;byte[];byte[];byte[];byte[]):unsigned int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SetVolumeLabel" uniqueID="SetVolumeLabel(string;string):bool">
				<signature>Microsoft.Win32.Win32Native.SetVolumeLabel(string;string):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SysAllocStringLen" uniqueID="SysAllocStringLen(string;int):native signed int">
				<signature>Microsoft.Win32.Win32Native.SysAllocStringLen(string;int):native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SysFreeString" uniqueID="SysFreeString(native signed int):void">
				<signature>Microsoft.Win32.Win32Native.SysFreeString(native signed int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SysStringLen" uniqueID="SysStringLen(native signed int):int">
				<signature>Microsoft.Win32.Win32Native.SysStringLen(native signed int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SystemFunction040" uniqueID="SystemFunction040(System.Security.SafeBSTRHandle;unsigned int;unsigned int):int">
				<signature>Microsoft.Win32.Win32Native.SystemFunction040(System.Security.SafeBSTRHandle;unsigned int;unsigned int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SystemFunction041" uniqueID="SystemFunction041(System.Security.SafeBSTRHandle;unsigned int;unsigned int):int">
				<signature>Microsoft.Win32.Win32Native.SystemFunction041(System.Security.SafeBSTRHandle;unsigned int;unsigned int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="UnlockFile" uniqueID="UnlockFile(Microsoft.Win32.SafeHandles.SafeFileHandle;int;int;int;int):bool">
				<signature>Microsoft.Win32.Win32Native.UnlockFile(Microsoft.Win32.SafeHandles.SafeFileHandle;int;int;int;int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="UnmapViewOfFile" uniqueID="UnmapViewOfFile(native signed int):bool">
				<signature>Microsoft.Win32.Win32Native.UnmapViewOfFile(native signed int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="UnsafeCreateFile" uniqueID="UnsafeCreateFile(string;int;System.IO.FileShare;Microsoft.Win32.Win32Native+SECURITY_ATTRIBUTES;System.IO.FileMode;int;native signed int):Microsoft.Win32.SafeHandles.SafeFileHandle">
				<signature>Microsoft.Win32.Win32Native.UnsafeCreateFile(string;int;System.IO.FileShare;Microsoft.Win32.Win32Native+SECURITY_ATTRIBUTES;System.IO.FileMode;int;native signed int):Microsoft.Win32.SafeHandles.SafeFileHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="VirtualAlloc" uniqueID="VirtualAlloc(void;native unsigned int;int;int):void">
				<signature>Microsoft.Win32.Win32Native.VirtualAlloc(void;native unsigned int;int;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="VirtualFree" uniqueID="VirtualFree(void;native unsigned int;int):bool">
				<signature>Microsoft.Win32.Win32Native.VirtualFree(void;native unsigned int;int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="VirtualQuery" uniqueID="VirtualQuery(void;Microsoft.Win32.Win32Native+MEMORY_BASIC_INFORMATION;native signed int):native signed int">
				<signature>Microsoft.Win32.Win32Native.VirtualQuery(void;Microsoft.Win32.Win32Native+MEMORY_BASIC_INFORMATION;native signed int):native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="WaitForMultipleObjects" uniqueID="WaitForMultipleObjects(unsigned int;native signed int[];bool;unsigned int):unsigned int">
				<signature>Microsoft.Win32.Win32Native.WaitForMultipleObjects(unsigned int;native signed int[];bool;unsigned int):unsigned int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="WideCharToMultiByte" uniqueID="WideCharToMultiByte(unsigned int;unsigned int;char;int;byte;int;native signed int;native signed int):int">
				<signature>Microsoft.Win32.Win32Native.WideCharToMultiByte(unsigned int;unsigned int;char;int;byte;int;native signed int;native signed int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="WriteConsoleOutput" uniqueID="WriteConsoleOutput(native signed int;Microsoft.Win32.Win32Native+CHAR_INFO;Microsoft.Win32.Win32Native+COORD;Microsoft.Win32.Win32Native+COORD;Microsoft.Win32.Win32Native+SMALL_RECT):bool">
				<signature>Microsoft.Win32.Win32Native.WriteConsoleOutput(native signed int;Microsoft.Win32.Win32Native+CHAR_INFO;Microsoft.Win32.Win32Native+COORD;Microsoft.Win32.Win32Native+COORD;Microsoft.Win32.Win32Native+SMALL_RECT):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="WriteFile" uniqueID="WriteFile(Microsoft.Win32.SafeHandles.SafeFileHandle;byte;int;int;native signed int):int">
				<signature>Microsoft.Win32.Win32Native.WriteFile(Microsoft.Win32.SafeHandles.SafeFileHandle;byte;int;int;native signed int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="WriteFile" uniqueID="WriteFile(Microsoft.Win32.SafeHandles.SafeFileHandle;byte;int;native signed int;System.Threading.NativeOverlapped):int">
				<signature>Microsoft.Win32.Win32Native.WriteFile(Microsoft.Win32.SafeHandles.SafeFileHandle;byte;int;native signed int;System.Threading.NativeOverlapped):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ZeroMemory" uniqueID="ZeroMemory(native signed int;unsigned int):void">
				<signature>Microsoft.Win32.Win32Native.ZeroMemory(native signed int;unsigned int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="lstrcpy" uniqueID="lstrcpy(System.Text.StringBuilder;native signed int):native signed int">
				<signature>Microsoft.Win32.Win32Native.lstrcpy(System.Text.StringBuilder;native signed int):native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="lstrcpy" uniqueID="lstrcpy(native signed int;string):native signed int">
				<signature>Microsoft.Win32.Win32Native.lstrcpy(native signed int;string):native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="lstrlen" uniqueID="lstrlen(native signed int):int">
				<signature>Microsoft.Win32.Win32Native.lstrlen(native signed int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="lstrlen" uniqueID="lstrlen(sbyte[]):int">
				<signature>Microsoft.Win32.Win32Native.lstrlen(sbyte[]):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="lstrlenA" uniqueID="lstrlenA(native signed int):int">
				<signature>Microsoft.Win32.Win32Native.lstrlenA(native signed int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="lstrlenW" uniqueID="lstrlenW(native signed int):int">
				<signature>Microsoft.Win32.Win32Native.lstrlenW(native signed int):int</signature>
			</method>
		</class>
		<class name="Win32Native+USEROBJECTFLAGS" uniqueID="Microsoft.Win32.Win32Native+USEROBJECTFLAGS">
			<method accessibility="Public" methodKind="Member" name="Win32Native+USEROBJECTFLAGS" uniqueID="Win32Native+USEROBJECTFLAGS():void">
				<signature>Microsoft.Win32.Win32Native+USEROBJECTFLAGS.Win32Native+USEROBJECTFLAGS():void</signature>
			</method>
		</class>
		<class name="Win32Native+WIN32_FIND_DATA" uniqueID="Microsoft.Win32.Win32Native+WIN32_FIND_DATA">
			<method accessibility="Public" methodKind="Member" name="Win32Native+WIN32_FIND_DATA" uniqueID="Win32Native+WIN32_FIND_DATA():void">
				<signature>Microsoft.Win32.Win32Native+WIN32_FIND_DATA.Win32Native+WIN32_FIND_DATA():void</signature>
			</method>
		</class>
		<class name="RegistryKey" uniqueID="Microsoft.Win32.RegistryKey">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>Microsoft.Win32.RegistryKey.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CheckUnmanagedCodePermission" uniqueID="CheckUnmanagedCodePermission():void">
				<signature>Microsoft.Win32.RegistryKey.CheckUnmanagedCodePermission():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="FixupName" uniqueID="FixupName(string):string">
				<signature>Microsoft.Win32.RegistryKey.FixupName(string):string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="FixupPath" uniqueID="FixupPath(System.Text.StringBuilder):void">
				<signature>Microsoft.Win32.RegistryKey.FixupPath(System.Text.StringBuilder):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetBaseKey" uniqueID="GetBaseKey(native signed int):Microsoft.Win32.RegistryKey">
				<signature>Microsoft.Win32.RegistryKey.GetBaseKey(native signed int):Microsoft.Win32.RegistryKey</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetRegistryKeyAccess" uniqueID="GetRegistryKeyAccess(Microsoft.Win32.RegistryKeyPermissionCheck):int">
				<signature>Microsoft.Win32.RegistryKey.GetRegistryKeyAccess(Microsoft.Win32.RegistryKeyPermissionCheck):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetRegistryKeyAccess" uniqueID="GetRegistryKeyAccess(bool):int">
				<signature>Microsoft.Win32.RegistryKey.GetRegistryKeyAccess(bool):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IsWin9x" uniqueID="IsWin9x():bool">
				<signature>Microsoft.Win32.RegistryKey.IsWin9x():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="OpenRemoteBaseKey" uniqueID="OpenRemoteBaseKey(Microsoft.Win32.RegistryHive;string):Microsoft.Win32.RegistryKey">
				<signature>Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive;string):Microsoft.Win32.RegistryKey</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ValidateKeyMode" uniqueID="ValidateKeyMode(Microsoft.Win32.RegistryKeyPermissionCheck):void">
				<signature>Microsoft.Win32.RegistryKey.ValidateKeyMode(Microsoft.Win32.RegistryKeyPermissionCheck):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ValidateKeyName" uniqueID="ValidateKeyName(string):void">
				<signature>Microsoft.Win32.RegistryKey.ValidateKeyName(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ValidateKeyRights" uniqueID="ValidateKeyRights(int):void">
				<signature>Microsoft.Win32.RegistryKey.ValidateKeyRights(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="Win32ErrorStatic" uniqueID="Win32ErrorStatic(int;string):void">
				<signature>Microsoft.Win32.RegistryKey.Win32ErrorStatic(int;string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CalculateValueKind" uniqueID="CalculateValueKind(object):Microsoft.Win32.RegistryValueKind">
				<signature>Microsoft.Win32.RegistryKey.CalculateValueKind(object):Microsoft.Win32.RegistryValueKind</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CheckKeyReadPermission" uniqueID="CheckKeyReadPermission():void">
				<signature>Microsoft.Win32.RegistryKey.CheckKeyReadPermission():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CheckOpenSubKeyPermission" uniqueID="CheckOpenSubKeyPermission(string;Microsoft.Win32.RegistryKeyPermissionCheck):void">
				<signature>Microsoft.Win32.RegistryKey.CheckOpenSubKeyPermission(string;Microsoft.Win32.RegistryKeyPermissionCheck):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CheckOpenSubKeyPermission" uniqueID="CheckOpenSubKeyPermission(string;bool):void">
				<signature>Microsoft.Win32.RegistryKey.CheckOpenSubKeyPermission(string;bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CheckSubKeyCreatePermission" uniqueID="CheckSubKeyCreatePermission(string):void">
				<signature>Microsoft.Win32.RegistryKey.CheckSubKeyCreatePermission(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CheckSubKeyReadPermission" uniqueID="CheckSubKeyReadPermission(string):void">
				<signature>Microsoft.Win32.RegistryKey.CheckSubKeyReadPermission(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CheckSubKeyWritePermission" uniqueID="CheckSubKeyWritePermission(string):void">
				<signature>Microsoft.Win32.RegistryKey.CheckSubKeyWritePermission(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CheckSubTreePermission" uniqueID="CheckSubTreePermission(string;Microsoft.Win32.RegistryKeyPermissionCheck):void">
				<signature>Microsoft.Win32.RegistryKey.CheckSubTreePermission(string;Microsoft.Win32.RegistryKeyPermissionCheck):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CheckSubTreeReadPermission" uniqueID="CheckSubTreeReadPermission(string):void">
				<signature>Microsoft.Win32.RegistryKey.CheckSubTreeReadPermission(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CheckSubTreeReadWritePermission" uniqueID="CheckSubTreeReadWritePermission(string):void">
				<signature>Microsoft.Win32.RegistryKey.CheckSubTreeReadWritePermission(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CheckSubTreeWritePermission" uniqueID="CheckSubTreeWritePermission(string):void">
				<signature>Microsoft.Win32.RegistryKey.CheckSubTreeWritePermission(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CheckValueCreatePermission" uniqueID="CheckValueCreatePermission(string):void">
				<signature>Microsoft.Win32.RegistryKey.CheckValueCreatePermission(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CheckValueReadPermission" uniqueID="CheckValueReadPermission(string):void">
				<signature>Microsoft.Win32.RegistryKey.CheckValueReadPermission(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CheckValueWritePermission" uniqueID="CheckValueWritePermission(string):void">
				<signature>Microsoft.Win32.RegistryKey.CheckValueWritePermission(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Close" uniqueID="Close():void">
				<signature>Microsoft.Win32.RegistryKey.Close():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ContainsRegistryValue" uniqueID="ContainsRegistryValue(string):bool">
				<signature>Microsoft.Win32.RegistryKey.ContainsRegistryValue(string):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateSubKey" uniqueID="CreateSubKey(string):Microsoft.Win32.RegistryKey">
				<signature>Microsoft.Win32.RegistryKey.CreateSubKey(string):Microsoft.Win32.RegistryKey</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateSubKey" uniqueID="CreateSubKey(string;Microsoft.Win32.RegistryKeyPermissionCheck):Microsoft.Win32.RegistryKey">
				<signature>Microsoft.Win32.RegistryKey.CreateSubKey(string;Microsoft.Win32.RegistryKeyPermissionCheck):Microsoft.Win32.RegistryKey</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateSubKey" uniqueID="CreateSubKey(string;Microsoft.Win32.RegistryKeyPermissionCheck;System.Security.AccessControl.RegistrySecurity):Microsoft.Win32.RegistryKey">
				<signature>Microsoft.Win32.RegistryKey.CreateSubKey(string;Microsoft.Win32.RegistryKeyPermissionCheck;System.Security.AccessControl.RegistrySecurity):Microsoft.Win32.RegistryKey</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DeleteSubKey" uniqueID="DeleteSubKey(string):void">
				<signature>Microsoft.Win32.RegistryKey.DeleteSubKey(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DeleteSubKey" uniqueID="DeleteSubKey(string;bool):void">
				<signature>Microsoft.Win32.RegistryKey.DeleteSubKey(string;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DeleteSubKeyTree" uniqueID="DeleteSubKeyTree(string):void">
				<signature>Microsoft.Win32.RegistryKey.DeleteSubKeyTree(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DeleteSubKeyTreeInternal" uniqueID="DeleteSubKeyTreeInternal(string):void">
				<signature>Microsoft.Win32.RegistryKey.DeleteSubKeyTreeInternal(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DeleteValue" uniqueID="DeleteValue(string):void">
				<signature>Microsoft.Win32.RegistryKey.DeleteValue(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DeleteValue" uniqueID="DeleteValue(string;bool):void">
				<signature>Microsoft.Win32.RegistryKey.DeleteValue(string;bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Dispose" uniqueID="Dispose(bool):void">
				<signature>Microsoft.Win32.RegistryKey.Dispose(bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="EnsureNotDisposed" uniqueID="EnsureNotDisposed():void">
				<signature>Microsoft.Win32.RegistryKey.EnsureNotDisposed():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="EnsureWriteable" uniqueID="EnsureWriteable():void">
				<signature>Microsoft.Win32.RegistryKey.EnsureWriteable():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Flush" uniqueID="Flush():void">
				<signature>Microsoft.Win32.RegistryKey.Flush():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAccessControl" uniqueID="GetAccessControl():System.Security.AccessControl.RegistrySecurity">
				<signature>Microsoft.Win32.RegistryKey.GetAccessControl():System.Security.AccessControl.RegistrySecurity</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAccessControl" uniqueID="GetAccessControl(System.Security.AccessControl.AccessControlSections):System.Security.AccessControl.RegistrySecurity">
				<signature>Microsoft.Win32.RegistryKey.GetAccessControl(System.Security.AccessControl.AccessControlSections):System.Security.AccessControl.RegistrySecurity</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSubKeyNames" uniqueID="GetSubKeyNames():string[]">
				<signature>Microsoft.Win32.RegistryKey.GetSubKeyNames():string[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetSubKeyPermissonCheck" uniqueID="GetSubKeyPermissonCheck(bool):Microsoft.Win32.RegistryKeyPermissionCheck">
				<signature>Microsoft.Win32.RegistryKey.GetSubKeyPermissonCheck(bool):Microsoft.Win32.RegistryKeyPermissionCheck</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValue" uniqueID="GetValue(string):object">
				<signature>Microsoft.Win32.RegistryKey.GetValue(string):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValue" uniqueID="GetValue(string;object):object">
				<signature>Microsoft.Win32.RegistryKey.GetValue(string;object):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValue" uniqueID="GetValue(string;object;Microsoft.Win32.RegistryValueOptions):object">
				<signature>Microsoft.Win32.RegistryKey.GetValue(string;object;Microsoft.Win32.RegistryValueOptions):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValueKind" uniqueID="GetValueKind(string):Microsoft.Win32.RegistryValueKind">
				<signature>Microsoft.Win32.RegistryKey.GetValueKind(string):Microsoft.Win32.RegistryValueKind</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValueNames" uniqueID="GetValueNames():string[]">
				<signature>Microsoft.Win32.RegistryKey.GetValueNames():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalGetSubKeyNames" uniqueID="InternalGetSubKeyNames():string[]">
				<signature>Microsoft.Win32.RegistryKey.InternalGetSubKeyNames():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalGetValue" uniqueID="InternalGetValue(string;object;bool;bool):object">
				<signature>Microsoft.Win32.RegistryKey.InternalGetValue(string;object;bool;bool):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="InternalOpenSubKey" uniqueID="InternalOpenSubKey(string;Microsoft.Win32.RegistryKeyPermissionCheck;int):Microsoft.Win32.RegistryKey">
				<signature>Microsoft.Win32.RegistryKey.InternalOpenSubKey(string;Microsoft.Win32.RegistryKeyPermissionCheck;int):Microsoft.Win32.RegistryKey</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalOpenSubKey" uniqueID="InternalOpenSubKey(string;bool):Microsoft.Win32.RegistryKey">
				<signature>Microsoft.Win32.RegistryKey.InternalOpenSubKey(string;bool):Microsoft.Win32.RegistryKey</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalSubKeyCount" uniqueID="InternalSubKeyCount():int">
				<signature>Microsoft.Win32.RegistryKey.InternalSubKeyCount():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalValueCount" uniqueID="InternalValueCount():int">
				<signature>Microsoft.Win32.RegistryKey.InternalValueCount():int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="IsDirty" uniqueID="IsDirty():bool">
				<signature>Microsoft.Win32.RegistryKey.IsDirty():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="IsPerfDataKey" uniqueID="IsPerfDataKey():bool">
				<signature>Microsoft.Win32.RegistryKey.IsPerfDataKey():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="IsSystemKey" uniqueID="IsSystemKey():bool">
				<signature>Microsoft.Win32.RegistryKey.IsSystemKey():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="IsWritable" uniqueID="IsWritable():bool">
				<signature>Microsoft.Win32.RegistryKey.IsWritable():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="OpenSubKey" uniqueID="OpenSubKey(string):Microsoft.Win32.RegistryKey">
				<signature>Microsoft.Win32.RegistryKey.OpenSubKey(string):Microsoft.Win32.RegistryKey</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="OpenSubKey" uniqueID="OpenSubKey(string;Microsoft.Win32.RegistryKeyPermissionCheck):Microsoft.Win32.RegistryKey">
				<signature>Microsoft.Win32.RegistryKey.OpenSubKey(string;Microsoft.Win32.RegistryKeyPermissionCheck):Microsoft.Win32.RegistryKey</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="OpenSubKey" uniqueID="OpenSubKey(string;Microsoft.Win32.RegistryKeyPermissionCheck;System.Security.AccessControl.RegistryRights):Microsoft.Win32.RegistryKey">
				<signature>Microsoft.Win32.RegistryKey.OpenSubKey(string;Microsoft.Win32.RegistryKeyPermissionCheck;System.Security.AccessControl.RegistryRights):Microsoft.Win32.RegistryKey</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="OpenSubKey" uniqueID="OpenSubKey(string;bool):Microsoft.Win32.RegistryKey">
				<signature>Microsoft.Win32.RegistryKey.OpenSubKey(string;bool):Microsoft.Win32.RegistryKey</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="RegistryKey" uniqueID="RegistryKey(Microsoft.Win32.SafeHandles.SafeRegistryHandle;bool):void">
				<signature>Microsoft.Win32.RegistryKey.RegistryKey(Microsoft.Win32.SafeHandles.SafeRegistryHandle;bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="RegistryKey" uniqueID="RegistryKey(Microsoft.Win32.SafeHandles.SafeRegistryHandle;bool;bool;bool;bool):void">
				<signature>Microsoft.Win32.RegistryKey.RegistryKey(Microsoft.Win32.SafeHandles.SafeRegistryHandle;bool;bool;bool;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetAccessControl" uniqueID="SetAccessControl(System.Security.AccessControl.RegistrySecurity):void">
				<signature>Microsoft.Win32.RegistryKey.SetAccessControl(System.Security.AccessControl.RegistrySecurity):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SetDirty" uniqueID="SetDirty():void">
				<signature>Microsoft.Win32.RegistryKey.SetDirty():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetValue" uniqueID="SetValue(string;object):void">
				<signature>Microsoft.Win32.RegistryKey.SetValue(string;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetValue" uniqueID="SetValue(string;object;Microsoft.Win32.RegistryValueKind):void">
				<signature>Microsoft.Win32.RegistryKey.SetValue(string;object;Microsoft.Win32.RegistryValueKind):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IDisposable.Dispose" uniqueID="System.IDisposable.Dispose():void">
				<signature>Microsoft.Win32.RegistryKey.System.IDisposable.Dispose():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>Microsoft.Win32.RegistryKey.ToString():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Win32Error" uniqueID="Win32Error(int;string):void">
				<signature>Microsoft.Win32.RegistryKey.Win32Error(int;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>Microsoft.Win32.RegistryKey.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SubKeyCount" uniqueID="get_SubKeyCount():int">
				<signature>Microsoft.Win32.RegistryKey.get_SubKeyCount():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ValueCount" uniqueID="get_ValueCount():int">
				<signature>Microsoft.Win32.RegistryKey.get_ValueCount():int</signature>
			</method>
		</class>
		<class name="Win32Native+MEMORYSTATUSEX" uniqueID="Microsoft.Win32.Win32Native+MEMORYSTATUSEX">
			<method accessibility="Protected" methodKind="Member" name="Win32Native+MEMORYSTATUSEX" uniqueID="Win32Native+MEMORYSTATUSEX():void">
				<signature>Microsoft.Win32.Win32Native+MEMORYSTATUSEX.Win32Native+MEMORYSTATUSEX():void</signature>
			</method>
		</class>
		<class name="Win32Native+OSVERSIONINFOEX" uniqueID="Microsoft.Win32.Win32Native+OSVERSIONINFOEX">
			<method accessibility="Public" methodKind="Member" name="Win32Native+OSVERSIONINFOEX" uniqueID="Win32Native+OSVERSIONINFOEX():void">
				<signature>Microsoft.Win32.Win32Native+OSVERSIONINFOEX.Win32Native+OSVERSIONINFOEX():void</signature>
			</method>
		</class>
		<class name="Win32Native+SECURITY_ATTRIBUTES" uniqueID="Microsoft.Win32.Win32Native+SECURITY_ATTRIBUTES">
			<method accessibility="Public" methodKind="Member" name="Win32Native+SECURITY_ATTRIBUTES" uniqueID="Win32Native+SECURITY_ATTRIBUTES():void">
				<signature>Microsoft.Win32.Win32Native+SECURITY_ATTRIBUTES.Win32Native+SECURITY_ATTRIBUTES():void</signature>
			</method>
		</class>
		<class name="Win32Native+UNICODE_INTPTR_STRING" uniqueID="Microsoft.Win32.Win32Native+UNICODE_INTPTR_STRING">
			<method accessibility="Protected" methodKind="Member" name="Win32Native+UNICODE_INTPTR_STRING" uniqueID="Win32Native+UNICODE_INTPTR_STRING(int;int;native signed int):void">
				<signature>Microsoft.Win32.Win32Native+UNICODE_INTPTR_STRING.Win32Native+UNICODE_INTPTR_STRING(int;int;native signed int):void</signature>
			</method>
		</class>
		<class name="Win32Native+FILE_TIME" uniqueID="Microsoft.Win32.Win32Native+FILE_TIME">
			<method accessibility="Public" methodKind="Member" name="ToTicks" uniqueID="ToTicks():long">
				<signature>Microsoft.Win32.Win32Native+FILE_TIME.ToTicks():long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Win32Native+FILE_TIME" uniqueID="Win32Native+FILE_TIME(long):void">
				<signature>Microsoft.Win32.Win32Native+FILE_TIME.Win32Native+FILE_TIME(long):void</signature>
			</method>
		</class>
		<class name="Win32Native+MEMORYSTATUS" uniqueID="Microsoft.Win32.Win32Native+MEMORYSTATUS">
			<method accessibility="Protected" methodKind="Member" name="Win32Native+MEMORYSTATUS" uniqueID="Win32Native+MEMORYSTATUS():void">
				<signature>Microsoft.Win32.Win32Native+MEMORYSTATUS.Win32Native+MEMORYSTATUS():void</signature>
			</method>
		</class>
	</package>
	<package name="System.Collections.Generic">
		<class name="List&lt;string&gt;" uniqueID="System.Collections.Generic.List&lt;string&gt;">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Collections.Generic.List&lt;string&gt;.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IsCompatibleObject" uniqueID="IsCompatibleObject(object):bool">
				<signature>System.Collections.Generic.List&lt;string&gt;.IsCompatibleObject(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="VerifyValueType" uniqueID="VerifyValueType(object):void">
				<signature>System.Collections.Generic.List&lt;string&gt;.VerifyValueType(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(string):void">
				<signature>System.Collections.Generic.List&lt;string&gt;.Add(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddRange" uniqueID="AddRange(System.Collections.Generic.IEnumerable&lt;string&gt;):void">
				<signature>System.Collections.Generic.List&lt;string&gt;.AddRange(System.Collections.Generic.IEnumerable&lt;string&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AsReadOnly" uniqueID="AsReadOnly():System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;">
				<signature>System.Collections.Generic.List&lt;string&gt;.AsReadOnly():System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinarySearch" uniqueID="BinarySearch(int;int;string;System.Collections.Generic.IComparer&lt;string&gt;):int">
				<signature>System.Collections.Generic.List&lt;string&gt;.BinarySearch(int;int;string;System.Collections.Generic.IComparer&lt;string&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinarySearch" uniqueID="BinarySearch(string):int">
				<signature>System.Collections.Generic.List&lt;string&gt;.BinarySearch(string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinarySearch" uniqueID="BinarySearch(string;System.Collections.Generic.IComparer&lt;string&gt;):int">
				<signature>System.Collections.Generic.List&lt;string&gt;.BinarySearch(string;System.Collections.Generic.IComparer&lt;string&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Collections.Generic.List&lt;string&gt;.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(string):bool">
				<signature>System.Collections.Generic.List&lt;string&gt;.Contains(string):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(int;string[];int;int):void">
				<signature>System.Collections.Generic.List&lt;string&gt;.CopyTo(int;string[];int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(string[]):void">
				<signature>System.Collections.Generic.List&lt;string&gt;.CopyTo(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(string[];int):void">
				<signature>System.Collections.Generic.List&lt;string&gt;.CopyTo(string[];int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="EnsureCapacity" uniqueID="EnsureCapacity(int):void">
				<signature>System.Collections.Generic.List&lt;string&gt;.EnsureCapacity(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Exists" uniqueID="Exists(System.Predicate&lt;string&gt;):bool">
				<signature>System.Collections.Generic.List&lt;string&gt;.Exists(System.Predicate&lt;string&gt;):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Find" uniqueID="Find(System.Predicate&lt;string&gt;):string">
				<signature>System.Collections.Generic.List&lt;string&gt;.Find(System.Predicate&lt;string&gt;):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindAll" uniqueID="FindAll(System.Predicate&lt;string&gt;):System.Collections.Generic.List&lt;string&gt;">
				<signature>System.Collections.Generic.List&lt;string&gt;.FindAll(System.Predicate&lt;string&gt;):System.Collections.Generic.List&lt;string&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindIndex" uniqueID="FindIndex(System.Predicate&lt;string&gt;):int">
				<signature>System.Collections.Generic.List&lt;string&gt;.FindIndex(System.Predicate&lt;string&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindIndex" uniqueID="FindIndex(int;System.Predicate&lt;string&gt;):int">
				<signature>System.Collections.Generic.List&lt;string&gt;.FindIndex(int;System.Predicate&lt;string&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindIndex" uniqueID="FindIndex(int;int;System.Predicate&lt;string&gt;):int">
				<signature>System.Collections.Generic.List&lt;string&gt;.FindIndex(int;int;System.Predicate&lt;string&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLast" uniqueID="FindLast(System.Predicate&lt;string&gt;):string">
				<signature>System.Collections.Generic.List&lt;string&gt;.FindLast(System.Predicate&lt;string&gt;):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLastIndex" uniqueID="FindLastIndex(System.Predicate&lt;string&gt;):int">
				<signature>System.Collections.Generic.List&lt;string&gt;.FindLastIndex(System.Predicate&lt;string&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLastIndex" uniqueID="FindLastIndex(int;System.Predicate&lt;string&gt;):int">
				<signature>System.Collections.Generic.List&lt;string&gt;.FindLastIndex(int;System.Predicate&lt;string&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLastIndex" uniqueID="FindLastIndex(int;int;System.Predicate&lt;string&gt;):int">
				<signature>System.Collections.Generic.List&lt;string&gt;.FindLastIndex(int;int;System.Predicate&lt;string&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ForEach" uniqueID="ForEach(System.Action&lt;string&gt;):void">
				<signature>System.Collections.Generic.List&lt;string&gt;.ForEach(System.Action&lt;string&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.List`1+Enumerator&lt;string&gt;">
				<signature>System.Collections.Generic.List&lt;string&gt;.GetEnumerator():System.Collections.Generic.List`1+Enumerator&lt;string&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRange" uniqueID="GetRange(int;int):System.Collections.Generic.List&lt;string&gt;">
				<signature>System.Collections.Generic.List&lt;string&gt;.GetRange(int;int):System.Collections.Generic.List&lt;string&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(string):int">
				<signature>System.Collections.Generic.List&lt;string&gt;.IndexOf(string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(string;int):int">
				<signature>System.Collections.Generic.List&lt;string&gt;.IndexOf(string;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(string;int;int):int">
				<signature>System.Collections.Generic.List&lt;string&gt;.IndexOf(string;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;string):void">
				<signature>System.Collections.Generic.List&lt;string&gt;.Insert(int;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InsertRange" uniqueID="InsertRange(int;System.Collections.Generic.IEnumerable&lt;string&gt;):void">
				<signature>System.Collections.Generic.List&lt;string&gt;.InsertRange(int;System.Collections.Generic.IEnumerable&lt;string&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(string):int">
				<signature>System.Collections.Generic.List&lt;string&gt;.LastIndexOf(string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(string;int):int">
				<signature>System.Collections.Generic.List&lt;string&gt;.LastIndexOf(string;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(string;int;int):int">
				<signature>System.Collections.Generic.List&lt;string&gt;.LastIndexOf(string;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="List&lt;string&gt;" uniqueID="List&lt;string&gt;():void">
				<signature>System.Collections.Generic.List&lt;string&gt;.List&lt;string&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="List&lt;string&gt;" uniqueID="List&lt;string&gt;(System.Collections.Generic.IEnumerable&lt;string&gt;):void">
				<signature>System.Collections.Generic.List&lt;string&gt;.List&lt;string&gt;(System.Collections.Generic.IEnumerable&lt;string&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="List&lt;string&gt;" uniqueID="List&lt;string&gt;(int):void">
				<signature>System.Collections.Generic.List&lt;string&gt;.List&lt;string&gt;(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(string):bool">
				<signature>System.Collections.Generic.List&lt;string&gt;.Remove(string):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAll" uniqueID="RemoveAll(System.Predicate&lt;string&gt;):int">
				<signature>System.Collections.Generic.List&lt;string&gt;.RemoveAll(System.Predicate&lt;string&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAt" uniqueID="RemoveAt(int):void">
				<signature>System.Collections.Generic.List&lt;string&gt;.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveRange" uniqueID="RemoveRange(int;int):void">
				<signature>System.Collections.Generic.List&lt;string&gt;.RemoveRange(int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reverse" uniqueID="Reverse():void">
				<signature>System.Collections.Generic.List&lt;string&gt;.Reverse():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reverse" uniqueID="Reverse(int;int):void">
				<signature>System.Collections.Generic.List&lt;string&gt;.Reverse(int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort():void">
				<signature>System.Collections.Generic.List&lt;string&gt;.Sort():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort(System.Collections.Generic.IComparer&lt;string&gt;):void">
				<signature>System.Collections.Generic.List&lt;string&gt;.Sort(System.Collections.Generic.IComparer&lt;string&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort(System.Comparison&lt;string&gt;):void">
				<signature>System.Collections.Generic.List&lt;string&gt;.Sort(System.Comparison&lt;string&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort(int;int;System.Collections.Generic.IComparer&lt;string&gt;):void">
				<signature>System.Collections.Generic.List&lt;string&gt;.Sort(int;int;System.Collections.Generic.IComparer&lt;string&gt;):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool">
				<signature>System.Collections.Generic.List&lt;string&gt;.System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator" uniqueID="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;string&gt;">
				<signature>System.Collections.Generic.List&lt;string&gt;.System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;string&gt;</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.CopyTo" uniqueID="System.Collections.ICollection.CopyTo(System.Array;int):void">
				<signature>System.Collections.Generic.List&lt;string&gt;.System.Collections.ICollection.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_IsSynchronized" uniqueID="System.Collections.ICollection.get_IsSynchronized():bool">
				<signature>System.Collections.Generic.List&lt;string&gt;.System.Collections.ICollection.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_SyncRoot" uniqueID="System.Collections.ICollection.get_SyncRoot():object">
				<signature>System.Collections.Generic.List&lt;string&gt;.System.Collections.ICollection.get_SyncRoot():object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerable.GetEnumerator" uniqueID="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Collections.Generic.List&lt;string&gt;.System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Add" uniqueID="System.Collections.IList.Add(object):int">
				<signature>System.Collections.Generic.List&lt;string&gt;.System.Collections.IList.Add(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Contains" uniqueID="System.Collections.IList.Contains(object):bool">
				<signature>System.Collections.Generic.List&lt;string&gt;.System.Collections.IList.Contains(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.IndexOf" uniqueID="System.Collections.IList.IndexOf(object):int">
				<signature>System.Collections.Generic.List&lt;string&gt;.System.Collections.IList.IndexOf(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Insert" uniqueID="System.Collections.IList.Insert(int;object):void">
				<signature>System.Collections.Generic.List&lt;string&gt;.System.Collections.IList.Insert(int;object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Remove" uniqueID="System.Collections.IList.Remove(object):void">
				<signature>System.Collections.Generic.List&lt;string&gt;.System.Collections.IList.Remove(object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsFixedSize" uniqueID="System.Collections.IList.get_IsFixedSize():bool">
				<signature>System.Collections.Generic.List&lt;string&gt;.System.Collections.IList.get_IsFixedSize():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsReadOnly" uniqueID="System.Collections.IList.get_IsReadOnly():bool">
				<signature>System.Collections.Generic.List&lt;string&gt;.System.Collections.IList.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_Item" uniqueID="System.Collections.IList.get_Item(int):object">
				<signature>System.Collections.Generic.List&lt;string&gt;.System.Collections.IList.get_Item(int):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.set_Item" uniqueID="System.Collections.IList.set_Item(int;object):void">
				<signature>System.Collections.Generic.List&lt;string&gt;.System.Collections.IList.set_Item(int;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToArray" uniqueID="ToArray():string[]">
				<signature>System.Collections.Generic.List&lt;string&gt;.ToArray():string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TrimExcess" uniqueID="TrimExcess():void">
				<signature>System.Collections.Generic.List&lt;string&gt;.TrimExcess():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TrueForAll" uniqueID="TrueForAll(System.Predicate&lt;string&gt;):bool">
				<signature>System.Collections.Generic.List&lt;string&gt;.TrueForAll(System.Predicate&lt;string&gt;):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Capacity" uniqueID="get_Capacity():int">
				<signature>System.Collections.Generic.List&lt;string&gt;.get_Capacity():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.Generic.List&lt;string&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):string">
				<signature>System.Collections.Generic.List&lt;string&gt;.get_Item(int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Capacity" uniqueID="set_Capacity(int):void">
				<signature>System.Collections.Generic.List&lt;string&gt;.set_Capacity(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(int;string):void">
				<signature>System.Collections.Generic.List&lt;string&gt;.set_Item(int;string):void</signature>
			</method>
		</class>
		<class name="IEnumerable&lt;System.Reflection.RuntimeFieldInfo&gt;" uniqueID="System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeFieldInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeFieldInfo&gt;">
				<signature>System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeFieldInfo&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeFieldInfo&gt;</signature>
			</method>
		</class>
		<class name="IEnumerator&lt;System.Reflection.LocalVariableInfo&gt;" uniqueID="System.Collections.Generic.IEnumerator&lt;System.Reflection.LocalVariableInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="get_Current" uniqueID="get_Current():System.Reflection.LocalVariableInfo">
				<signature>System.Collections.Generic.IEnumerator&lt;System.Reflection.LocalVariableInfo&gt;.get_Current():System.Reflection.LocalVariableInfo</signature>
			</method>
		</class>
		<class name="IEnumerator&lt;System.Reflection.RuntimeMethodInfo&gt;" uniqueID="System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeMethodInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="get_Current" uniqueID="get_Current():System.Reflection.RuntimeMethodInfo">
				<signature>System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeMethodInfo&gt;.get_Current():System.Reflection.RuntimeMethodInfo</signature>
			</method>
		</class>
		<class name="IEnumerator&lt;char&gt;" uniqueID="System.Collections.Generic.IEnumerator&lt;char&gt;">
			<method accessibility="Public" methodKind="Member" name="get_Current" uniqueID="get_Current():char">
				<signature>System.Collections.Generic.IEnumerator&lt;char&gt;.get_Current():char</signature>
			</method>
		</class>
		<class name="List&lt;System.Reflection.RuntimeMethodInfo&gt;" uniqueID="System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IsCompatibleObject" uniqueID="IsCompatibleObject(object):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.IsCompatibleObject(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="VerifyValueType" uniqueID="VerifyValueType(object):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.VerifyValueType(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(System.Reflection.RuntimeMethodInfo):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.Add(System.Reflection.RuntimeMethodInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddRange" uniqueID="AddRange(System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeMethodInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.AddRange(System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeMethodInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AsReadOnly" uniqueID="AsReadOnly():System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.AsReadOnly():System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinarySearch" uniqueID="BinarySearch(System.Reflection.RuntimeMethodInfo):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.BinarySearch(System.Reflection.RuntimeMethodInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinarySearch" uniqueID="BinarySearch(System.Reflection.RuntimeMethodInfo;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeMethodInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.BinarySearch(System.Reflection.RuntimeMethodInfo;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeMethodInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinarySearch" uniqueID="BinarySearch(int;int;System.Reflection.RuntimeMethodInfo;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeMethodInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.BinarySearch(int;int;System.Reflection.RuntimeMethodInfo;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeMethodInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(System.Reflection.RuntimeMethodInfo):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.Contains(System.Reflection.RuntimeMethodInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Reflection.RuntimeMethodInfo[]):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.CopyTo(System.Reflection.RuntimeMethodInfo[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Reflection.RuntimeMethodInfo[];int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.CopyTo(System.Reflection.RuntimeMethodInfo[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(int;System.Reflection.RuntimeMethodInfo[];int;int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.CopyTo(int;System.Reflection.RuntimeMethodInfo[];int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="EnsureCapacity" uniqueID="EnsureCapacity(int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.EnsureCapacity(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Exists" uniqueID="Exists(System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.Exists(System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Find" uniqueID="Find(System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;):System.Reflection.RuntimeMethodInfo">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.Find(System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;):System.Reflection.RuntimeMethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindAll" uniqueID="FindAll(System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;):System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.FindAll(System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;):System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindIndex" uniqueID="FindIndex(System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.FindIndex(System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindIndex" uniqueID="FindIndex(int;System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.FindIndex(int;System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindIndex" uniqueID="FindIndex(int;int;System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.FindIndex(int;int;System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLast" uniqueID="FindLast(System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;):System.Reflection.RuntimeMethodInfo">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.FindLast(System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;):System.Reflection.RuntimeMethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLastIndex" uniqueID="FindLastIndex(System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.FindLastIndex(System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLastIndex" uniqueID="FindLastIndex(int;System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.FindLastIndex(int;System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLastIndex" uniqueID="FindLastIndex(int;int;System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.FindLastIndex(int;int;System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ForEach" uniqueID="ForEach(System.Action&lt;System.Reflection.RuntimeMethodInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.ForEach(System.Action&lt;System.Reflection.RuntimeMethodInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeMethodInfo&gt;">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.GetEnumerator():System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeMethodInfo&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRange" uniqueID="GetRange(int;int):System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.GetRange(int;int):System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.Reflection.RuntimeMethodInfo):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.IndexOf(System.Reflection.RuntimeMethodInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.Reflection.RuntimeMethodInfo;int):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.IndexOf(System.Reflection.RuntimeMethodInfo;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.Reflection.RuntimeMethodInfo;int;int):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.IndexOf(System.Reflection.RuntimeMethodInfo;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;System.Reflection.RuntimeMethodInfo):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.Insert(int;System.Reflection.RuntimeMethodInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InsertRange" uniqueID="InsertRange(int;System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeMethodInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.InsertRange(int;System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeMethodInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(System.Reflection.RuntimeMethodInfo):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.LastIndexOf(System.Reflection.RuntimeMethodInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(System.Reflection.RuntimeMethodInfo;int):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.LastIndexOf(System.Reflection.RuntimeMethodInfo;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(System.Reflection.RuntimeMethodInfo;int;int):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.LastIndexOf(System.Reflection.RuntimeMethodInfo;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="List&lt;System.Reflection.RuntimeMethodInfo&gt;" uniqueID="List&lt;System.Reflection.RuntimeMethodInfo&gt;():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.List&lt;System.Reflection.RuntimeMethodInfo&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="List&lt;System.Reflection.RuntimeMethodInfo&gt;" uniqueID="List&lt;System.Reflection.RuntimeMethodInfo&gt;(System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeMethodInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.List&lt;System.Reflection.RuntimeMethodInfo&gt;(System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeMethodInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="List&lt;System.Reflection.RuntimeMethodInfo&gt;" uniqueID="List&lt;System.Reflection.RuntimeMethodInfo&gt;(int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.List&lt;System.Reflection.RuntimeMethodInfo&gt;(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(System.Reflection.RuntimeMethodInfo):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.Remove(System.Reflection.RuntimeMethodInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAll" uniqueID="RemoveAll(System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.RemoveAll(System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAt" uniqueID="RemoveAt(int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveRange" uniqueID="RemoveRange(int;int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.RemoveRange(int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reverse" uniqueID="Reverse():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.Reverse():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reverse" uniqueID="Reverse(int;int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.Reverse(int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.Sort():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort(System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeMethodInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.Sort(System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeMethodInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort(System.Comparison&lt;System.Reflection.RuntimeMethodInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.Sort(System.Comparison&lt;System.Reflection.RuntimeMethodInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort(int;int;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeMethodInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.Sort(int;int;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeMethodInfo&gt;):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator" uniqueID="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeMethodInfo&gt;">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeMethodInfo&gt;</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.CopyTo" uniqueID="System.Collections.ICollection.CopyTo(System.Array;int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.ICollection.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_IsSynchronized" uniqueID="System.Collections.ICollection.get_IsSynchronized():bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.ICollection.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_SyncRoot" uniqueID="System.Collections.ICollection.get_SyncRoot():object">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.ICollection.get_SyncRoot():object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerable.GetEnumerator" uniqueID="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Add" uniqueID="System.Collections.IList.Add(object):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.IList.Add(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Contains" uniqueID="System.Collections.IList.Contains(object):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.IList.Contains(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.IndexOf" uniqueID="System.Collections.IList.IndexOf(object):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.IList.IndexOf(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Insert" uniqueID="System.Collections.IList.Insert(int;object):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.IList.Insert(int;object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Remove" uniqueID="System.Collections.IList.Remove(object):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.IList.Remove(object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsFixedSize" uniqueID="System.Collections.IList.get_IsFixedSize():bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.IList.get_IsFixedSize():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsReadOnly" uniqueID="System.Collections.IList.get_IsReadOnly():bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.IList.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_Item" uniqueID="System.Collections.IList.get_Item(int):object">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.IList.get_Item(int):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.set_Item" uniqueID="System.Collections.IList.set_Item(int;object):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.IList.set_Item(int;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToArray" uniqueID="ToArray():System.Reflection.RuntimeMethodInfo[]">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.ToArray():System.Reflection.RuntimeMethodInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TrimExcess" uniqueID="TrimExcess():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.TrimExcess():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TrueForAll" uniqueID="TrueForAll(System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.TrueForAll(System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Capacity" uniqueID="get_Capacity():int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.get_Capacity():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.Reflection.RuntimeMethodInfo">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.get_Item(int):System.Reflection.RuntimeMethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Capacity" uniqueID="set_Capacity(int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.set_Capacity(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(int;System.Reflection.RuntimeMethodInfo):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;.set_Item(int;System.Reflection.RuntimeMethodInfo):void</signature>
			</method>
		</class>
		<class name="List&lt;System.Reflection.RuntimePropertyInfo&gt;" uniqueID="System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IsCompatibleObject" uniqueID="IsCompatibleObject(object):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.IsCompatibleObject(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="VerifyValueType" uniqueID="VerifyValueType(object):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.VerifyValueType(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(System.Reflection.RuntimePropertyInfo):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.Add(System.Reflection.RuntimePropertyInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddRange" uniqueID="AddRange(System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimePropertyInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.AddRange(System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimePropertyInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AsReadOnly" uniqueID="AsReadOnly():System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.AsReadOnly():System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinarySearch" uniqueID="BinarySearch(System.Reflection.RuntimePropertyInfo):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.BinarySearch(System.Reflection.RuntimePropertyInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinarySearch" uniqueID="BinarySearch(System.Reflection.RuntimePropertyInfo;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimePropertyInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.BinarySearch(System.Reflection.RuntimePropertyInfo;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimePropertyInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinarySearch" uniqueID="BinarySearch(int;int;System.Reflection.RuntimePropertyInfo;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimePropertyInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.BinarySearch(int;int;System.Reflection.RuntimePropertyInfo;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimePropertyInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(System.Reflection.RuntimePropertyInfo):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.Contains(System.Reflection.RuntimePropertyInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Reflection.RuntimePropertyInfo[]):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.CopyTo(System.Reflection.RuntimePropertyInfo[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Reflection.RuntimePropertyInfo[];int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.CopyTo(System.Reflection.RuntimePropertyInfo[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(int;System.Reflection.RuntimePropertyInfo[];int;int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.CopyTo(int;System.Reflection.RuntimePropertyInfo[];int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="EnsureCapacity" uniqueID="EnsureCapacity(int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.EnsureCapacity(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Exists" uniqueID="Exists(System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.Exists(System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Find" uniqueID="Find(System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;):System.Reflection.RuntimePropertyInfo">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.Find(System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;):System.Reflection.RuntimePropertyInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindAll" uniqueID="FindAll(System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;):System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.FindAll(System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;):System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindIndex" uniqueID="FindIndex(System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.FindIndex(System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindIndex" uniqueID="FindIndex(int;System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.FindIndex(int;System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindIndex" uniqueID="FindIndex(int;int;System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.FindIndex(int;int;System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLast" uniqueID="FindLast(System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;):System.Reflection.RuntimePropertyInfo">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.FindLast(System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;):System.Reflection.RuntimePropertyInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLastIndex" uniqueID="FindLastIndex(System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.FindLastIndex(System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLastIndex" uniqueID="FindLastIndex(int;System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.FindLastIndex(int;System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLastIndex" uniqueID="FindLastIndex(int;int;System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.FindLastIndex(int;int;System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ForEach" uniqueID="ForEach(System.Action&lt;System.Reflection.RuntimePropertyInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.ForEach(System.Action&lt;System.Reflection.RuntimePropertyInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimePropertyInfo&gt;">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.GetEnumerator():System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimePropertyInfo&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRange" uniqueID="GetRange(int;int):System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.GetRange(int;int):System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.Reflection.RuntimePropertyInfo):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.IndexOf(System.Reflection.RuntimePropertyInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.Reflection.RuntimePropertyInfo;int):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.IndexOf(System.Reflection.RuntimePropertyInfo;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.Reflection.RuntimePropertyInfo;int;int):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.IndexOf(System.Reflection.RuntimePropertyInfo;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;System.Reflection.RuntimePropertyInfo):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.Insert(int;System.Reflection.RuntimePropertyInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InsertRange" uniqueID="InsertRange(int;System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimePropertyInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.InsertRange(int;System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimePropertyInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(System.Reflection.RuntimePropertyInfo):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.LastIndexOf(System.Reflection.RuntimePropertyInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(System.Reflection.RuntimePropertyInfo;int):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.LastIndexOf(System.Reflection.RuntimePropertyInfo;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(System.Reflection.RuntimePropertyInfo;int;int):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.LastIndexOf(System.Reflection.RuntimePropertyInfo;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="List&lt;System.Reflection.RuntimePropertyInfo&gt;" uniqueID="List&lt;System.Reflection.RuntimePropertyInfo&gt;():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.List&lt;System.Reflection.RuntimePropertyInfo&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="List&lt;System.Reflection.RuntimePropertyInfo&gt;" uniqueID="List&lt;System.Reflection.RuntimePropertyInfo&gt;(System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimePropertyInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.List&lt;System.Reflection.RuntimePropertyInfo&gt;(System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimePropertyInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="List&lt;System.Reflection.RuntimePropertyInfo&gt;" uniqueID="List&lt;System.Reflection.RuntimePropertyInfo&gt;(int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.List&lt;System.Reflection.RuntimePropertyInfo&gt;(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(System.Reflection.RuntimePropertyInfo):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.Remove(System.Reflection.RuntimePropertyInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAll" uniqueID="RemoveAll(System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.RemoveAll(System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAt" uniqueID="RemoveAt(int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveRange" uniqueID="RemoveRange(int;int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.RemoveRange(int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reverse" uniqueID="Reverse():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.Reverse():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reverse" uniqueID="Reverse(int;int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.Reverse(int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.Sort():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort(System.Collections.Generic.IComparer&lt;System.Reflection.RuntimePropertyInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.Sort(System.Collections.Generic.IComparer&lt;System.Reflection.RuntimePropertyInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort(System.Comparison&lt;System.Reflection.RuntimePropertyInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.Sort(System.Comparison&lt;System.Reflection.RuntimePropertyInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort(int;int;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimePropertyInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.Sort(int;int;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimePropertyInfo&gt;):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator" uniqueID="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimePropertyInfo&gt;">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimePropertyInfo&gt;</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.CopyTo" uniqueID="System.Collections.ICollection.CopyTo(System.Array;int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.ICollection.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_IsSynchronized" uniqueID="System.Collections.ICollection.get_IsSynchronized():bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.ICollection.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_SyncRoot" uniqueID="System.Collections.ICollection.get_SyncRoot():object">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.ICollection.get_SyncRoot():object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerable.GetEnumerator" uniqueID="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Add" uniqueID="System.Collections.IList.Add(object):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.IList.Add(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Contains" uniqueID="System.Collections.IList.Contains(object):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.IList.Contains(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.IndexOf" uniqueID="System.Collections.IList.IndexOf(object):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.IList.IndexOf(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Insert" uniqueID="System.Collections.IList.Insert(int;object):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.IList.Insert(int;object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Remove" uniqueID="System.Collections.IList.Remove(object):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.IList.Remove(object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsFixedSize" uniqueID="System.Collections.IList.get_IsFixedSize():bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.IList.get_IsFixedSize():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsReadOnly" uniqueID="System.Collections.IList.get_IsReadOnly():bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.IList.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_Item" uniqueID="System.Collections.IList.get_Item(int):object">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.IList.get_Item(int):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.set_Item" uniqueID="System.Collections.IList.set_Item(int;object):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.IList.set_Item(int;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToArray" uniqueID="ToArray():System.Reflection.RuntimePropertyInfo[]">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.ToArray():System.Reflection.RuntimePropertyInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TrimExcess" uniqueID="TrimExcess():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.TrimExcess():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TrueForAll" uniqueID="TrueForAll(System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.TrueForAll(System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Capacity" uniqueID="get_Capacity():int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.get_Capacity():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.Reflection.RuntimePropertyInfo">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.get_Item(int):System.Reflection.RuntimePropertyInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Capacity" uniqueID="set_Capacity(int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.set_Capacity(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(int;System.Reflection.RuntimePropertyInfo):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;.set_Item(int;System.Reflection.RuntimePropertyInfo):void</signature>
			</method>
		</class>
		<class name="List`1+Enumerator&lt;string&gt;" uniqueID="System.Collections.Generic.List`1+Enumerator&lt;string&gt;">
			<method accessibility="Public" methodKind="Member" name="Dispose" uniqueID="Dispose():void">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;string&gt;.Dispose():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="List`1+Enumerator&lt;string&gt;" uniqueID="List`1+Enumerator&lt;string&gt;(System.Collections.Generic.List&lt;string&gt;):void">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;string&gt;.List`1+Enumerator&lt;string&gt;(System.Collections.Generic.List&lt;string&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MoveNext" uniqueID="MoveNext():bool">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;string&gt;.MoveNext():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="MoveNextRare" uniqueID="MoveNextRare():bool">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;string&gt;.MoveNextRare():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerator.Reset" uniqueID="System.Collections.IEnumerator.Reset():void">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;string&gt;.System.Collections.IEnumerator.Reset():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerator.get_Current" uniqueID="System.Collections.IEnumerator.get_Current():object">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;string&gt;.System.Collections.IEnumerator.get_Current():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Current" uniqueID="get_Current():string">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;string&gt;.get_Current():string</signature>
			</method>
		</class>
		<class name="IEnumerable&lt;System.Reflection.RuntimeEventInfo&gt;" uniqueID="System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeEventInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeEventInfo&gt;">
				<signature>System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeEventInfo&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeEventInfo&gt;</signature>
			</method>
		</class>
		<class name="IEnumerable&lt;System.Reflection.RuntimeMethodInfo&gt;" uniqueID="System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeMethodInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeMethodInfo&gt;">
				<signature>System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeMethodInfo&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeMethodInfo&gt;</signature>
			</method>
		</class>
		<class name="IEnumerable&lt;string&gt;" uniqueID="System.Collections.Generic.IEnumerable&lt;string&gt;">
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.IEnumerator&lt;string&gt;">
				<signature>System.Collections.Generic.IEnumerable&lt;string&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;string&gt;</signature>
			</method>
		</class>
		<class name="IEnumerator&lt;System.Reflection.RuntimeFieldInfo&gt;" uniqueID="System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeFieldInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="get_Current" uniqueID="get_Current():System.Reflection.RuntimeFieldInfo">
				<signature>System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeFieldInfo&gt;.get_Current():System.Reflection.RuntimeFieldInfo</signature>
			</method>
		</class>
		<class name="IList&lt;System.Reflection.ExceptionHandlingClause&gt;" uniqueID="System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt;">
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.Reflection.ExceptionHandlingClause):int">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt;.IndexOf(System.Reflection.ExceptionHandlingClause):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;System.Reflection.ExceptionHandlingClause):void">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt;.Insert(int;System.Reflection.ExceptionHandlingClause):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAt" uniqueID="RemoveAt(int):void">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt;.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.Reflection.ExceptionHandlingClause">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt;.get_Item(int):System.Reflection.ExceptionHandlingClause</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(int;System.Reflection.ExceptionHandlingClause):void">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt;.set_Item(int;System.Reflection.ExceptionHandlingClause):void</signature>
			</method>
		</class>
		<class name="IList&lt;System.Reflection.RuntimeMethodInfo&gt;" uniqueID="System.Collections.Generic.IList&lt;System.Reflection.RuntimeMethodInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.Reflection.RuntimeMethodInfo):int">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.RuntimeMethodInfo&gt;.IndexOf(System.Reflection.RuntimeMethodInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;System.Reflection.RuntimeMethodInfo):void">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.RuntimeMethodInfo&gt;.Insert(int;System.Reflection.RuntimeMethodInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAt" uniqueID="RemoveAt(int):void">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.RuntimeMethodInfo&gt;.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.Reflection.RuntimeMethodInfo">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.RuntimeMethodInfo&gt;.get_Item(int):System.Reflection.RuntimeMethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(int;System.Reflection.RuntimeMethodInfo):void">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.RuntimeMethodInfo&gt;.set_Item(int;System.Reflection.RuntimeMethodInfo):void</signature>
			</method>
		</class>
		<class name="IList&lt;System.RuntimeType&gt;" uniqueID="System.Collections.Generic.IList&lt;System.RuntimeType&gt;">
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.RuntimeType):int">
				<signature>System.Collections.Generic.IList&lt;System.RuntimeType&gt;.IndexOf(System.RuntimeType):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;System.RuntimeType):void">
				<signature>System.Collections.Generic.IList&lt;System.RuntimeType&gt;.Insert(int;System.RuntimeType):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAt" uniqueID="RemoveAt(int):void">
				<signature>System.Collections.Generic.IList&lt;System.RuntimeType&gt;.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.RuntimeType">
				<signature>System.Collections.Generic.IList&lt;System.RuntimeType&gt;.get_Item(int):System.RuntimeType</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(int;System.RuntimeType):void">
				<signature>System.Collections.Generic.IList&lt;System.RuntimeType&gt;.set_Item(int;System.RuntimeType):void</signature>
			</method>
		</class>
		<class name="ICollection&lt;System.Reflection.RuntimePropertyInfo&gt;" uniqueID="System.Collections.Generic.ICollection&lt;System.Reflection.RuntimePropertyInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(System.Reflection.RuntimePropertyInfo):void">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimePropertyInfo&gt;.Add(System.Reflection.RuntimePropertyInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimePropertyInfo&gt;.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(System.Reflection.RuntimePropertyInfo):bool">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimePropertyInfo&gt;.Contains(System.Reflection.RuntimePropertyInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Reflection.RuntimePropertyInfo[];int):void">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimePropertyInfo&gt;.CopyTo(System.Reflection.RuntimePropertyInfo[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(System.Reflection.RuntimePropertyInfo):bool">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimePropertyInfo&gt;.Remove(System.Reflection.RuntimePropertyInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimePropertyInfo&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsReadOnly" uniqueID="get_IsReadOnly():bool">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimePropertyInfo&gt;.get_IsReadOnly():bool</signature>
			</method>
		</class>
		<class name="IComparer&lt;string&gt;" uniqueID="System.Collections.Generic.IComparer&lt;string&gt;">
			<method accessibility="Public" methodKind="Member" name="Compare" uniqueID="Compare(string;string):int">
				<signature>System.Collections.Generic.IComparer&lt;string&gt;.Compare(string;string):int</signature>
			</method>
		</class>
		<class name="IList&lt;System.Reflection.RuntimeConstructorInfo&gt;" uniqueID="System.Collections.Generic.IList&lt;System.Reflection.RuntimeConstructorInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.Reflection.RuntimeConstructorInfo):int">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.RuntimeConstructorInfo&gt;.IndexOf(System.Reflection.RuntimeConstructorInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;System.Reflection.RuntimeConstructorInfo):void">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.RuntimeConstructorInfo&gt;.Insert(int;System.Reflection.RuntimeConstructorInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAt" uniqueID="RemoveAt(int):void">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.RuntimeConstructorInfo&gt;.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.Reflection.RuntimeConstructorInfo">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.RuntimeConstructorInfo&gt;.get_Item(int):System.Reflection.RuntimeConstructorInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(int;System.Reflection.RuntimeConstructorInfo):void">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.RuntimeConstructorInfo&gt;.set_Item(int;System.Reflection.RuntimeConstructorInfo):void</signature>
			</method>
		</class>
		<class name="IComparer&lt;System.Reflection.RuntimeConstructorInfo&gt;" uniqueID="System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeConstructorInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="Compare" uniqueID="Compare(System.Reflection.RuntimeConstructorInfo;System.Reflection.RuntimeConstructorInfo):int">
				<signature>System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeConstructorInfo&gt;.Compare(System.Reflection.RuntimeConstructorInfo;System.Reflection.RuntimeConstructorInfo):int</signature>
			</method>
		</class>
		<class name="IComparer&lt;System.Reflection.RuntimePropertyInfo&gt;" uniqueID="System.Collections.Generic.IComparer&lt;System.Reflection.RuntimePropertyInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="Compare" uniqueID="Compare(System.Reflection.RuntimePropertyInfo;System.Reflection.RuntimePropertyInfo):int">
				<signature>System.Collections.Generic.IComparer&lt;System.Reflection.RuntimePropertyInfo&gt;.Compare(System.Reflection.RuntimePropertyInfo;System.Reflection.RuntimePropertyInfo):int</signature>
			</method>
		</class>
		<class name="IEnumerable&lt;System.Reflection.RuntimePropertyInfo&gt;" uniqueID="System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimePropertyInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimePropertyInfo&gt;">
				<signature>System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimePropertyInfo&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimePropertyInfo&gt;</signature>
			</method>
		</class>
		<class name="List`1+Enumerator&lt;System.Reflection.RuntimeConstructorInfo&gt;" uniqueID="System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeConstructorInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="Dispose" uniqueID="Dispose():void">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeConstructorInfo&gt;.Dispose():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="List`1+Enumerator&lt;System.Reflection.RuntimeConstructorInfo&gt;" uniqueID="List`1+Enumerator&lt;System.Reflection.RuntimeConstructorInfo&gt;(System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;):void">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeConstructorInfo&gt;.List`1+Enumerator&lt;System.Reflection.RuntimeConstructorInfo&gt;(System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MoveNext" uniqueID="MoveNext():bool">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeConstructorInfo&gt;.MoveNext():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="MoveNextRare" uniqueID="MoveNextRare():bool">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeConstructorInfo&gt;.MoveNextRare():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerator.Reset" uniqueID="System.Collections.IEnumerator.Reset():void">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.IEnumerator.Reset():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerator.get_Current" uniqueID="System.Collections.IEnumerator.get_Current():object">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.IEnumerator.get_Current():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Current" uniqueID="get_Current():System.Reflection.RuntimeConstructorInfo">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeConstructorInfo&gt;.get_Current():System.Reflection.RuntimeConstructorInfo</signature>
			</method>
		</class>
		<class name="ICollection&lt;System.Reflection.RuntimeMethodInfo&gt;" uniqueID="System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeMethodInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(System.Reflection.RuntimeMethodInfo):void">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeMethodInfo&gt;.Add(System.Reflection.RuntimeMethodInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeMethodInfo&gt;.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(System.Reflection.RuntimeMethodInfo):bool">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeMethodInfo&gt;.Contains(System.Reflection.RuntimeMethodInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Reflection.RuntimeMethodInfo[];int):void">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeMethodInfo&gt;.CopyTo(System.Reflection.RuntimeMethodInfo[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(System.Reflection.RuntimeMethodInfo):bool">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeMethodInfo&gt;.Remove(System.Reflection.RuntimeMethodInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeMethodInfo&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsReadOnly" uniqueID="get_IsReadOnly():bool">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeMethodInfo&gt;.get_IsReadOnly():bool</signature>
			</method>
		</class>
		<class name="IComparer&lt;System.Reflection.RuntimeEventInfo&gt;" uniqueID="System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeEventInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="Compare" uniqueID="Compare(System.Reflection.RuntimeEventInfo;System.Reflection.RuntimeEventInfo):int">
				<signature>System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeEventInfo&gt;.Compare(System.Reflection.RuntimeEventInfo;System.Reflection.RuntimeEventInfo):int</signature>
			</method>
		</class>
		<class name="IEnumerable&lt;System.Reflection.ExceptionHandlingClause&gt;" uniqueID="System.Collections.Generic.IEnumerable&lt;System.Reflection.ExceptionHandlingClause&gt;">
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.ExceptionHandlingClause&gt;">
				<signature>System.Collections.Generic.IEnumerable&lt;System.Reflection.ExceptionHandlingClause&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.ExceptionHandlingClause&gt;</signature>
			</method>
		</class>
		<class name="IEnumerable&lt;System.Reflection.RuntimeConstructorInfo&gt;" uniqueID="System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeConstructorInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeConstructorInfo&gt;">
				<signature>System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeConstructorInfo&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeConstructorInfo&gt;</signature>
			</method>
		</class>
		<class name="IEnumerable&lt;System.Security.Principal.IdentityReference&gt;" uniqueID="System.Collections.Generic.IEnumerable&lt;System.Security.Principal.IdentityReference&gt;">
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Security.Principal.IdentityReference&gt;">
				<signature>System.Collections.Generic.IEnumerable&lt;System.Security.Principal.IdentityReference&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Security.Principal.IdentityReference&gt;</signature>
			</method>
		</class>
		<class name="IList&lt;System.Reflection.RuntimeFieldInfo&gt;" uniqueID="System.Collections.Generic.IList&lt;System.Reflection.RuntimeFieldInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.Reflection.RuntimeFieldInfo):int">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.RuntimeFieldInfo&gt;.IndexOf(System.Reflection.RuntimeFieldInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;System.Reflection.RuntimeFieldInfo):void">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.RuntimeFieldInfo&gt;.Insert(int;System.Reflection.RuntimeFieldInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAt" uniqueID="RemoveAt(int):void">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.RuntimeFieldInfo&gt;.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.Reflection.RuntimeFieldInfo">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.RuntimeFieldInfo&gt;.get_Item(int):System.Reflection.RuntimeFieldInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(int;System.Reflection.RuntimeFieldInfo):void">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.RuntimeFieldInfo&gt;.set_Item(int;System.Reflection.RuntimeFieldInfo):void</signature>
			</method>
		</class>
		<class name="List&lt;System.Reflection.RuntimeFieldInfo&gt;" uniqueID="System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IsCompatibleObject" uniqueID="IsCompatibleObject(object):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.IsCompatibleObject(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="VerifyValueType" uniqueID="VerifyValueType(object):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.VerifyValueType(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(System.Reflection.RuntimeFieldInfo):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.Add(System.Reflection.RuntimeFieldInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddRange" uniqueID="AddRange(System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeFieldInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.AddRange(System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeFieldInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AsReadOnly" uniqueID="AsReadOnly():System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.AsReadOnly():System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinarySearch" uniqueID="BinarySearch(System.Reflection.RuntimeFieldInfo):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.BinarySearch(System.Reflection.RuntimeFieldInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinarySearch" uniqueID="BinarySearch(System.Reflection.RuntimeFieldInfo;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeFieldInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.BinarySearch(System.Reflection.RuntimeFieldInfo;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeFieldInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinarySearch" uniqueID="BinarySearch(int;int;System.Reflection.RuntimeFieldInfo;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeFieldInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.BinarySearch(int;int;System.Reflection.RuntimeFieldInfo;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeFieldInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(System.Reflection.RuntimeFieldInfo):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.Contains(System.Reflection.RuntimeFieldInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Reflection.RuntimeFieldInfo[]):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.CopyTo(System.Reflection.RuntimeFieldInfo[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Reflection.RuntimeFieldInfo[];int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.CopyTo(System.Reflection.RuntimeFieldInfo[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(int;System.Reflection.RuntimeFieldInfo[];int;int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.CopyTo(int;System.Reflection.RuntimeFieldInfo[];int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="EnsureCapacity" uniqueID="EnsureCapacity(int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.EnsureCapacity(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Exists" uniqueID="Exists(System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.Exists(System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Find" uniqueID="Find(System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;):System.Reflection.RuntimeFieldInfo">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.Find(System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;):System.Reflection.RuntimeFieldInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindAll" uniqueID="FindAll(System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;):System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.FindAll(System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;):System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindIndex" uniqueID="FindIndex(System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.FindIndex(System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindIndex" uniqueID="FindIndex(int;System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.FindIndex(int;System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindIndex" uniqueID="FindIndex(int;int;System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.FindIndex(int;int;System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLast" uniqueID="FindLast(System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;):System.Reflection.RuntimeFieldInfo">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.FindLast(System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;):System.Reflection.RuntimeFieldInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLastIndex" uniqueID="FindLastIndex(System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.FindLastIndex(System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLastIndex" uniqueID="FindLastIndex(int;System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.FindLastIndex(int;System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLastIndex" uniqueID="FindLastIndex(int;int;System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.FindLastIndex(int;int;System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ForEach" uniqueID="ForEach(System.Action&lt;System.Reflection.RuntimeFieldInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.ForEach(System.Action&lt;System.Reflection.RuntimeFieldInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeFieldInfo&gt;">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.GetEnumerator():System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeFieldInfo&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRange" uniqueID="GetRange(int;int):System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.GetRange(int;int):System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.Reflection.RuntimeFieldInfo):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.IndexOf(System.Reflection.RuntimeFieldInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.Reflection.RuntimeFieldInfo;int):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.IndexOf(System.Reflection.RuntimeFieldInfo;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.Reflection.RuntimeFieldInfo;int;int):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.IndexOf(System.Reflection.RuntimeFieldInfo;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;System.Reflection.RuntimeFieldInfo):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.Insert(int;System.Reflection.RuntimeFieldInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InsertRange" uniqueID="InsertRange(int;System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeFieldInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.InsertRange(int;System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeFieldInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(System.Reflection.RuntimeFieldInfo):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.LastIndexOf(System.Reflection.RuntimeFieldInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(System.Reflection.RuntimeFieldInfo;int):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.LastIndexOf(System.Reflection.RuntimeFieldInfo;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(System.Reflection.RuntimeFieldInfo;int;int):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.LastIndexOf(System.Reflection.RuntimeFieldInfo;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="List&lt;System.Reflection.RuntimeFieldInfo&gt;" uniqueID="List&lt;System.Reflection.RuntimeFieldInfo&gt;():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.List&lt;System.Reflection.RuntimeFieldInfo&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="List&lt;System.Reflection.RuntimeFieldInfo&gt;" uniqueID="List&lt;System.Reflection.RuntimeFieldInfo&gt;(System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeFieldInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.List&lt;System.Reflection.RuntimeFieldInfo&gt;(System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeFieldInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="List&lt;System.Reflection.RuntimeFieldInfo&gt;" uniqueID="List&lt;System.Reflection.RuntimeFieldInfo&gt;(int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.List&lt;System.Reflection.RuntimeFieldInfo&gt;(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(System.Reflection.RuntimeFieldInfo):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.Remove(System.Reflection.RuntimeFieldInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAll" uniqueID="RemoveAll(System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.RemoveAll(System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAt" uniqueID="RemoveAt(int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveRange" uniqueID="RemoveRange(int;int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.RemoveRange(int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reverse" uniqueID="Reverse():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.Reverse():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reverse" uniqueID="Reverse(int;int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.Reverse(int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.Sort():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort(System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeFieldInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.Sort(System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeFieldInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort(System.Comparison&lt;System.Reflection.RuntimeFieldInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.Sort(System.Comparison&lt;System.Reflection.RuntimeFieldInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort(int;int;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeFieldInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.Sort(int;int;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeFieldInfo&gt;):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator" uniqueID="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeFieldInfo&gt;">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeFieldInfo&gt;</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.CopyTo" uniqueID="System.Collections.ICollection.CopyTo(System.Array;int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.ICollection.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_IsSynchronized" uniqueID="System.Collections.ICollection.get_IsSynchronized():bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.ICollection.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_SyncRoot" uniqueID="System.Collections.ICollection.get_SyncRoot():object">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.ICollection.get_SyncRoot():object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerable.GetEnumerator" uniqueID="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Add" uniqueID="System.Collections.IList.Add(object):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.IList.Add(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Contains" uniqueID="System.Collections.IList.Contains(object):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.IList.Contains(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.IndexOf" uniqueID="System.Collections.IList.IndexOf(object):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.IList.IndexOf(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Insert" uniqueID="System.Collections.IList.Insert(int;object):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.IList.Insert(int;object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Remove" uniqueID="System.Collections.IList.Remove(object):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.IList.Remove(object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsFixedSize" uniqueID="System.Collections.IList.get_IsFixedSize():bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.IList.get_IsFixedSize():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsReadOnly" uniqueID="System.Collections.IList.get_IsReadOnly():bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.IList.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_Item" uniqueID="System.Collections.IList.get_Item(int):object">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.IList.get_Item(int):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.set_Item" uniqueID="System.Collections.IList.set_Item(int;object):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.IList.set_Item(int;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToArray" uniqueID="ToArray():System.Reflection.RuntimeFieldInfo[]">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.ToArray():System.Reflection.RuntimeFieldInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TrimExcess" uniqueID="TrimExcess():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.TrimExcess():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TrueForAll" uniqueID="TrueForAll(System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.TrueForAll(System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Capacity" uniqueID="get_Capacity():int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.get_Capacity():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.Reflection.RuntimeFieldInfo">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.get_Item(int):System.Reflection.RuntimeFieldInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Capacity" uniqueID="set_Capacity(int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.set_Capacity(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(int;System.Reflection.RuntimeFieldInfo):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;.set_Item(int;System.Reflection.RuntimeFieldInfo):void</signature>
			</method>
		</class>
		<class name="List`1" uniqueID="System.Collections.Generic.List`1">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Collections.Generic.List`1.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IsCompatibleObject" uniqueID="IsCompatibleObject(object):bool">
				<signature>System.Collections.Generic.List`1.IsCompatibleObject(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="VerifyValueType" uniqueID="VerifyValueType(object):void">
				<signature>System.Collections.Generic.List`1.VerifyValueType(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(string):void">
				<signature>System.Collections.Generic.List`1.Add(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddRange" uniqueID="AddRange(System.Collections.Generic.IEnumerable&lt;string&gt;):void">
				<signature>System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable&lt;string&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AsReadOnly" uniqueID="AsReadOnly():System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;">
				<signature>System.Collections.Generic.List`1.AsReadOnly():System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinarySearch" uniqueID="BinarySearch(int;int;string;System.Collections.Generic.IComparer&lt;string&gt;):int">
				<signature>System.Collections.Generic.List`1.BinarySearch(int;int;string;System.Collections.Generic.IComparer&lt;string&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinarySearch" uniqueID="BinarySearch(string):int">
				<signature>System.Collections.Generic.List`1.BinarySearch(string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinarySearch" uniqueID="BinarySearch(string;System.Collections.Generic.IComparer&lt;string&gt;):int">
				<signature>System.Collections.Generic.List`1.BinarySearch(string;System.Collections.Generic.IComparer&lt;string&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Collections.Generic.List`1.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(string):bool">
				<signature>System.Collections.Generic.List`1.Contains(string):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(int;string[];int;int):void">
				<signature>System.Collections.Generic.List`1.CopyTo(int;string[];int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(string[]):void">
				<signature>System.Collections.Generic.List`1.CopyTo(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(string[];int):void">
				<signature>System.Collections.Generic.List`1.CopyTo(string[];int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="EnsureCapacity" uniqueID="EnsureCapacity(int):void">
				<signature>System.Collections.Generic.List`1.EnsureCapacity(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Exists" uniqueID="Exists(System.Predicate&lt;string&gt;):bool">
				<signature>System.Collections.Generic.List`1.Exists(System.Predicate&lt;string&gt;):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Find" uniqueID="Find(System.Predicate&lt;string&gt;):string">
				<signature>System.Collections.Generic.List`1.Find(System.Predicate&lt;string&gt;):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindAll" uniqueID="FindAll(System.Predicate&lt;string&gt;):System.Collections.Generic.List&lt;string&gt;">
				<signature>System.Collections.Generic.List`1.FindAll(System.Predicate&lt;string&gt;):System.Collections.Generic.List&lt;string&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindIndex" uniqueID="FindIndex(System.Predicate&lt;string&gt;):int">
				<signature>System.Collections.Generic.List`1.FindIndex(System.Predicate&lt;string&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindIndex" uniqueID="FindIndex(int;System.Predicate&lt;string&gt;):int">
				<signature>System.Collections.Generic.List`1.FindIndex(int;System.Predicate&lt;string&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindIndex" uniqueID="FindIndex(int;int;System.Predicate&lt;string&gt;):int">
				<signature>System.Collections.Generic.List`1.FindIndex(int;int;System.Predicate&lt;string&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLast" uniqueID="FindLast(System.Predicate&lt;string&gt;):string">
				<signature>System.Collections.Generic.List`1.FindLast(System.Predicate&lt;string&gt;):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLastIndex" uniqueID="FindLastIndex(System.Predicate&lt;string&gt;):int">
				<signature>System.Collections.Generic.List`1.FindLastIndex(System.Predicate&lt;string&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLastIndex" uniqueID="FindLastIndex(int;System.Predicate&lt;string&gt;):int">
				<signature>System.Collections.Generic.List`1.FindLastIndex(int;System.Predicate&lt;string&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLastIndex" uniqueID="FindLastIndex(int;int;System.Predicate&lt;string&gt;):int">
				<signature>System.Collections.Generic.List`1.FindLastIndex(int;int;System.Predicate&lt;string&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ForEach" uniqueID="ForEach(System.Action&lt;string&gt;):void">
				<signature>System.Collections.Generic.List`1.ForEach(System.Action&lt;string&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.List`1+Enumerator&lt;string&gt;">
				<signature>System.Collections.Generic.List`1.GetEnumerator():System.Collections.Generic.List`1+Enumerator&lt;string&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRange" uniqueID="GetRange(int;int):System.Collections.Generic.List&lt;string&gt;">
				<signature>System.Collections.Generic.List`1.GetRange(int;int):System.Collections.Generic.List&lt;string&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(string):int">
				<signature>System.Collections.Generic.List`1.IndexOf(string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(string;int):int">
				<signature>System.Collections.Generic.List`1.IndexOf(string;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(string;int;int):int">
				<signature>System.Collections.Generic.List`1.IndexOf(string;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;string):void">
				<signature>System.Collections.Generic.List`1.Insert(int;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InsertRange" uniqueID="InsertRange(int;System.Collections.Generic.IEnumerable&lt;string&gt;):void">
				<signature>System.Collections.Generic.List`1.InsertRange(int;System.Collections.Generic.IEnumerable&lt;string&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(string):int">
				<signature>System.Collections.Generic.List`1.LastIndexOf(string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(string;int):int">
				<signature>System.Collections.Generic.List`1.LastIndexOf(string;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(string;int;int):int">
				<signature>System.Collections.Generic.List`1.LastIndexOf(string;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="List`1" uniqueID="List`1():void">
				<signature>System.Collections.Generic.List`1.List`1():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="List`1" uniqueID="List`1(System.Collections.Generic.IEnumerable&lt;string&gt;):void">
				<signature>System.Collections.Generic.List`1.List`1(System.Collections.Generic.IEnumerable&lt;string&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="List`1" uniqueID="List`1(int):void">
				<signature>System.Collections.Generic.List`1.List`1(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(string):bool">
				<signature>System.Collections.Generic.List`1.Remove(string):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAll" uniqueID="RemoveAll(System.Predicate&lt;string&gt;):int">
				<signature>System.Collections.Generic.List`1.RemoveAll(System.Predicate&lt;string&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAt" uniqueID="RemoveAt(int):void">
				<signature>System.Collections.Generic.List`1.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveRange" uniqueID="RemoveRange(int;int):void">
				<signature>System.Collections.Generic.List`1.RemoveRange(int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reverse" uniqueID="Reverse():void">
				<signature>System.Collections.Generic.List`1.Reverse():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reverse" uniqueID="Reverse(int;int):void">
				<signature>System.Collections.Generic.List`1.Reverse(int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort():void">
				<signature>System.Collections.Generic.List`1.Sort():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort(System.Collections.Generic.IComparer&lt;string&gt;):void">
				<signature>System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer&lt;string&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort(System.Comparison&lt;string&gt;):void">
				<signature>System.Collections.Generic.List`1.Sort(System.Comparison&lt;string&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort(int;int;System.Collections.Generic.IComparer&lt;string&gt;):void">
				<signature>System.Collections.Generic.List`1.Sort(int;int;System.Collections.Generic.IComparer&lt;string&gt;):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool">
				<signature>System.Collections.Generic.List`1.System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator" uniqueID="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;string&gt;">
				<signature>System.Collections.Generic.List`1.System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;string&gt;</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.CopyTo" uniqueID="System.Collections.ICollection.CopyTo(System.Array;int):void">
				<signature>System.Collections.Generic.List`1.System.Collections.ICollection.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_IsSynchronized" uniqueID="System.Collections.ICollection.get_IsSynchronized():bool">
				<signature>System.Collections.Generic.List`1.System.Collections.ICollection.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_SyncRoot" uniqueID="System.Collections.ICollection.get_SyncRoot():object">
				<signature>System.Collections.Generic.List`1.System.Collections.ICollection.get_SyncRoot():object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerable.GetEnumerator" uniqueID="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Collections.Generic.List`1.System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Add" uniqueID="System.Collections.IList.Add(object):int">
				<signature>System.Collections.Generic.List`1.System.Collections.IList.Add(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Contains" uniqueID="System.Collections.IList.Contains(object):bool">
				<signature>System.Collections.Generic.List`1.System.Collections.IList.Contains(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.IndexOf" uniqueID="System.Collections.IList.IndexOf(object):int">
				<signature>System.Collections.Generic.List`1.System.Collections.IList.IndexOf(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Insert" uniqueID="System.Collections.IList.Insert(int;object):void">
				<signature>System.Collections.Generic.List`1.System.Collections.IList.Insert(int;object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Remove" uniqueID="System.Collections.IList.Remove(object):void">
				<signature>System.Collections.Generic.List`1.System.Collections.IList.Remove(object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsFixedSize" uniqueID="System.Collections.IList.get_IsFixedSize():bool">
				<signature>System.Collections.Generic.List`1.System.Collections.IList.get_IsFixedSize():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsReadOnly" uniqueID="System.Collections.IList.get_IsReadOnly():bool">
				<signature>System.Collections.Generic.List`1.System.Collections.IList.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_Item" uniqueID="System.Collections.IList.get_Item(int):object">
				<signature>System.Collections.Generic.List`1.System.Collections.IList.get_Item(int):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.set_Item" uniqueID="System.Collections.IList.set_Item(int;object):void">
				<signature>System.Collections.Generic.List`1.System.Collections.IList.set_Item(int;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToArray" uniqueID="ToArray():string[]">
				<signature>System.Collections.Generic.List`1.ToArray():string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TrimExcess" uniqueID="TrimExcess():void">
				<signature>System.Collections.Generic.List`1.TrimExcess():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TrueForAll" uniqueID="TrueForAll(System.Predicate&lt;string&gt;):bool">
				<signature>System.Collections.Generic.List`1.TrueForAll(System.Predicate&lt;string&gt;):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Capacity" uniqueID="get_Capacity():int">
				<signature>System.Collections.Generic.List`1.get_Capacity():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.Generic.List`1.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):string">
				<signature>System.Collections.Generic.List`1.get_Item(int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Capacity" uniqueID="set_Capacity(int):void">
				<signature>System.Collections.Generic.List`1.set_Capacity(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(int;string):void">
				<signature>System.Collections.Generic.List`1.set_Item(int;string):void</signature>
			</method>
		</class>
		<class name="IEnumerator&lt;string&gt;" uniqueID="System.Collections.Generic.IEnumerator&lt;string&gt;">
			<method accessibility="Public" methodKind="Member" name="get_Current" uniqueID="get_Current():string">
				<signature>System.Collections.Generic.IEnumerator&lt;string&gt;.get_Current():string</signature>
			</method>
		</class>
		<class name="ICollection&lt;System.Reflection.ExceptionHandlingClause&gt;" uniqueID="System.Collections.Generic.ICollection&lt;System.Reflection.ExceptionHandlingClause&gt;">
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(System.Reflection.ExceptionHandlingClause):void">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.ExceptionHandlingClause&gt;.Add(System.Reflection.ExceptionHandlingClause):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.ExceptionHandlingClause&gt;.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(System.Reflection.ExceptionHandlingClause):bool">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.ExceptionHandlingClause&gt;.Contains(System.Reflection.ExceptionHandlingClause):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Reflection.ExceptionHandlingClause[];int):void">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.ExceptionHandlingClause&gt;.CopyTo(System.Reflection.ExceptionHandlingClause[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(System.Reflection.ExceptionHandlingClause):bool">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.ExceptionHandlingClause&gt;.Remove(System.Reflection.ExceptionHandlingClause):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.ExceptionHandlingClause&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsReadOnly" uniqueID="get_IsReadOnly():bool">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.ExceptionHandlingClause&gt;.get_IsReadOnly():bool</signature>
			</method>
		</class>
		<class name="IComparer&lt;System.Reflection.RuntimeFieldInfo&gt;" uniqueID="System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeFieldInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="Compare" uniqueID="Compare(System.Reflection.RuntimeFieldInfo;System.Reflection.RuntimeFieldInfo):int">
				<signature>System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeFieldInfo&gt;.Compare(System.Reflection.RuntimeFieldInfo;System.Reflection.RuntimeFieldInfo):int</signature>
			</method>
		</class>
		<class name="IList&lt;System.Reflection.RuntimeEventInfo&gt;" uniqueID="System.Collections.Generic.IList&lt;System.Reflection.RuntimeEventInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.Reflection.RuntimeEventInfo):int">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.RuntimeEventInfo&gt;.IndexOf(System.Reflection.RuntimeEventInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;System.Reflection.RuntimeEventInfo):void">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.RuntimeEventInfo&gt;.Insert(int;System.Reflection.RuntimeEventInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAt" uniqueID="RemoveAt(int):void">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.RuntimeEventInfo&gt;.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.Reflection.RuntimeEventInfo">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.RuntimeEventInfo&gt;.get_Item(int):System.Reflection.RuntimeEventInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(int;System.Reflection.RuntimeEventInfo):void">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.RuntimeEventInfo&gt;.set_Item(int;System.Reflection.RuntimeEventInfo):void</signature>
			</method>
		</class>
		<class name="IList&lt;System.Reflection.RuntimePropertyInfo&gt;" uniqueID="System.Collections.Generic.IList&lt;System.Reflection.RuntimePropertyInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.Reflection.RuntimePropertyInfo):int">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.RuntimePropertyInfo&gt;.IndexOf(System.Reflection.RuntimePropertyInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;System.Reflection.RuntimePropertyInfo):void">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.RuntimePropertyInfo&gt;.Insert(int;System.Reflection.RuntimePropertyInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAt" uniqueID="RemoveAt(int):void">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.RuntimePropertyInfo&gt;.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.Reflection.RuntimePropertyInfo">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.RuntimePropertyInfo&gt;.get_Item(int):System.Reflection.RuntimePropertyInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(int;System.Reflection.RuntimePropertyInfo):void">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.RuntimePropertyInfo&gt;.set_Item(int;System.Reflection.RuntimePropertyInfo):void</signature>
			</method>
		</class>
		<class name="ICollection&lt;System.Reflection.LocalVariableInfo&gt;" uniqueID="System.Collections.Generic.ICollection&lt;System.Reflection.LocalVariableInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(System.Reflection.LocalVariableInfo):void">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.LocalVariableInfo&gt;.Add(System.Reflection.LocalVariableInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.LocalVariableInfo&gt;.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(System.Reflection.LocalVariableInfo):bool">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.LocalVariableInfo&gt;.Contains(System.Reflection.LocalVariableInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Reflection.LocalVariableInfo[];int):void">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.LocalVariableInfo&gt;.CopyTo(System.Reflection.LocalVariableInfo[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(System.Reflection.LocalVariableInfo):bool">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.LocalVariableInfo&gt;.Remove(System.Reflection.LocalVariableInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.LocalVariableInfo&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsReadOnly" uniqueID="get_IsReadOnly():bool">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.LocalVariableInfo&gt;.get_IsReadOnly():bool</signature>
			</method>
		</class>
		<class name="ICollection&lt;System.Reflection.RuntimeConstructorInfo&gt;" uniqueID="System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeConstructorInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(System.Reflection.RuntimeConstructorInfo):void">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.Add(System.Reflection.RuntimeConstructorInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(System.Reflection.RuntimeConstructorInfo):bool">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.Contains(System.Reflection.RuntimeConstructorInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Reflection.RuntimeConstructorInfo[];int):void">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.CopyTo(System.Reflection.RuntimeConstructorInfo[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(System.Reflection.RuntimeConstructorInfo):bool">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.Remove(System.Reflection.RuntimeConstructorInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsReadOnly" uniqueID="get_IsReadOnly():bool">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.get_IsReadOnly():bool</signature>
			</method>
		</class>
		<class name="IEnumerable&lt;System.Reflection.LocalVariableInfo&gt;" uniqueID="System.Collections.Generic.IEnumerable&lt;System.Reflection.LocalVariableInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.LocalVariableInfo&gt;">
				<signature>System.Collections.Generic.IEnumerable&lt;System.Reflection.LocalVariableInfo&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.LocalVariableInfo&gt;</signature>
			</method>
		</class>
		<class name="IEnumerable&lt;System.RuntimeType&gt;" uniqueID="System.Collections.Generic.IEnumerable&lt;System.RuntimeType&gt;">
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.RuntimeType&gt;">
				<signature>System.Collections.Generic.IEnumerable&lt;System.RuntimeType&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.RuntimeType&gt;</signature>
			</method>
		</class>
		<class name="IEnumerator&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;" uniqueID="System.Collections.Generic.IEnumerator&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;">
			<method accessibility="Public" methodKind="Member" name="get_Current" uniqueID="get_Current():System.Reflection.Emit.CustomAttributeBuilder">
				<signature>System.Collections.Generic.IEnumerator&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;.get_Current():System.Reflection.Emit.CustomAttributeBuilder</signature>
			</method>
		</class>
		<class name="IEnumerator&lt;System.Reflection.ExceptionHandlingClause&gt;" uniqueID="System.Collections.Generic.IEnumerator&lt;System.Reflection.ExceptionHandlingClause&gt;">
			<method accessibility="Public" methodKind="Member" name="get_Current" uniqueID="get_Current():System.Reflection.ExceptionHandlingClause">
				<signature>System.Collections.Generic.IEnumerator&lt;System.Reflection.ExceptionHandlingClause&gt;.get_Current():System.Reflection.ExceptionHandlingClause</signature>
			</method>
		</class>
		<class name="IEnumerator&lt;System.Reflection.RuntimePropertyInfo&gt;" uniqueID="System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimePropertyInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="get_Current" uniqueID="get_Current():System.Reflection.RuntimePropertyInfo">
				<signature>System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimePropertyInfo&gt;.get_Current():System.Reflection.RuntimePropertyInfo</signature>
			</method>
		</class>
		<class name="IList&lt;System.Reflection.LocalVariableInfo&gt;" uniqueID="System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.Reflection.LocalVariableInfo):int">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt;.IndexOf(System.Reflection.LocalVariableInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;System.Reflection.LocalVariableInfo):void">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt;.Insert(int;System.Reflection.LocalVariableInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAt" uniqueID="RemoveAt(int):void">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt;.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.Reflection.LocalVariableInfo">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt;.get_Item(int):System.Reflection.LocalVariableInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(int;System.Reflection.LocalVariableInfo):void">
				<signature>System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt;.set_Item(int;System.Reflection.LocalVariableInfo):void</signature>
			</method>
		</class>
		<class name="ICollection&lt;System.Security.Principal.IdentityReference&gt;" uniqueID="System.Collections.Generic.ICollection&lt;System.Security.Principal.IdentityReference&gt;">
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(System.Security.Principal.IdentityReference):void">
				<signature>System.Collections.Generic.ICollection&lt;System.Security.Principal.IdentityReference&gt;.Add(System.Security.Principal.IdentityReference):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Collections.Generic.ICollection&lt;System.Security.Principal.IdentityReference&gt;.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(System.Security.Principal.IdentityReference):bool">
				<signature>System.Collections.Generic.ICollection&lt;System.Security.Principal.IdentityReference&gt;.Contains(System.Security.Principal.IdentityReference):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Security.Principal.IdentityReference[];int):void">
				<signature>System.Collections.Generic.ICollection&lt;System.Security.Principal.IdentityReference&gt;.CopyTo(System.Security.Principal.IdentityReference[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(System.Security.Principal.IdentityReference):bool">
				<signature>System.Collections.Generic.ICollection&lt;System.Security.Principal.IdentityReference&gt;.Remove(System.Security.Principal.IdentityReference):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.Generic.ICollection&lt;System.Security.Principal.IdentityReference&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsReadOnly" uniqueID="get_IsReadOnly():bool">
				<signature>System.Collections.Generic.ICollection&lt;System.Security.Principal.IdentityReference&gt;.get_IsReadOnly():bool</signature>
			</method>
		</class>
		<class name="IEnumerator&lt;System.Reflection.RuntimeConstructorInfo&gt;" uniqueID="System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeConstructorInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="get_Current" uniqueID="get_Current():System.Reflection.RuntimeConstructorInfo">
				<signature>System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeConstructorInfo&gt;.get_Current():System.Reflection.RuntimeConstructorInfo</signature>
			</method>
		</class>
		<class name="IEnumerator&lt;System.RuntimeType&gt;" uniqueID="System.Collections.Generic.IEnumerator&lt;System.RuntimeType&gt;">
			<method accessibility="Public" methodKind="Member" name="get_Current" uniqueID="get_Current():System.RuntimeType">
				<signature>System.Collections.Generic.IEnumerator&lt;System.RuntimeType&gt;.get_Current():System.RuntimeType</signature>
			</method>
		</class>
		<class name="IEnumerator&lt;System.Security.Policy.IDelayEvaluatedEvidence&gt;" uniqueID="System.Collections.Generic.IEnumerator&lt;System.Security.Policy.IDelayEvaluatedEvidence&gt;">
			<method accessibility="Public" methodKind="Member" name="get_Current" uniqueID="get_Current():System.Security.Policy.IDelayEvaluatedEvidence">
				<signature>System.Collections.Generic.IEnumerator&lt;System.Security.Policy.IDelayEvaluatedEvidence&gt;.get_Current():System.Security.Policy.IDelayEvaluatedEvidence</signature>
			</method>
		</class>
		<class name="ICollection&lt;System.Reflection.RuntimeFieldInfo&gt;" uniqueID="System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeFieldInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(System.Reflection.RuntimeFieldInfo):void">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeFieldInfo&gt;.Add(System.Reflection.RuntimeFieldInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeFieldInfo&gt;.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(System.Reflection.RuntimeFieldInfo):bool">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeFieldInfo&gt;.Contains(System.Reflection.RuntimeFieldInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Reflection.RuntimeFieldInfo[];int):void">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeFieldInfo&gt;.CopyTo(System.Reflection.RuntimeFieldInfo[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(System.Reflection.RuntimeFieldInfo):bool">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeFieldInfo&gt;.Remove(System.Reflection.RuntimeFieldInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeFieldInfo&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsReadOnly" uniqueID="get_IsReadOnly():bool">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeFieldInfo&gt;.get_IsReadOnly():bool</signature>
			</method>
		</class>
		<class name="ICollection&lt;string&gt;" uniqueID="System.Collections.Generic.ICollection&lt;string&gt;">
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(string):void">
				<signature>System.Collections.Generic.ICollection&lt;string&gt;.Add(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Collections.Generic.ICollection&lt;string&gt;.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(string):bool">
				<signature>System.Collections.Generic.ICollection&lt;string&gt;.Contains(string):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(string[];int):void">
				<signature>System.Collections.Generic.ICollection&lt;string&gt;.CopyTo(string[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(string):bool">
				<signature>System.Collections.Generic.ICollection&lt;string&gt;.Remove(string):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.Generic.ICollection&lt;string&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsReadOnly" uniqueID="get_IsReadOnly():bool">
				<signature>System.Collections.Generic.ICollection&lt;string&gt;.get_IsReadOnly():bool</signature>
			</method>
		</class>
		<class name="IEnumerator&lt;System.Reflection.RuntimeEventInfo&gt;" uniqueID="System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeEventInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="get_Current" uniqueID="get_Current():System.Reflection.RuntimeEventInfo">
				<signature>System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeEventInfo&gt;.get_Current():System.Reflection.RuntimeEventInfo</signature>
			</method>
		</class>
		<class name="IList&lt;string&gt;" uniqueID="System.Collections.Generic.IList&lt;string&gt;">
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(string):int">
				<signature>System.Collections.Generic.IList&lt;string&gt;.IndexOf(string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;string):void">
				<signature>System.Collections.Generic.IList&lt;string&gt;.Insert(int;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAt" uniqueID="RemoveAt(int):void">
				<signature>System.Collections.Generic.IList&lt;string&gt;.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):string">
				<signature>System.Collections.Generic.IList&lt;string&gt;.get_Item(int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(int;string):void">
				<signature>System.Collections.Generic.IList&lt;string&gt;.set_Item(int;string):void</signature>
			</method>
		</class>
		<class name="List`1+Enumerator&lt;System.Reflection.RuntimeEventInfo&gt;" uniqueID="System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeEventInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="Dispose" uniqueID="Dispose():void">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeEventInfo&gt;.Dispose():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="List`1+Enumerator&lt;System.Reflection.RuntimeEventInfo&gt;" uniqueID="List`1+Enumerator&lt;System.Reflection.RuntimeEventInfo&gt;(System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;):void">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeEventInfo&gt;.List`1+Enumerator&lt;System.Reflection.RuntimeEventInfo&gt;(System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MoveNext" uniqueID="MoveNext():bool">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeEventInfo&gt;.MoveNext():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="MoveNextRare" uniqueID="MoveNextRare():bool">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeEventInfo&gt;.MoveNextRare():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerator.Reset" uniqueID="System.Collections.IEnumerator.Reset():void">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.IEnumerator.Reset():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerator.get_Current" uniqueID="System.Collections.IEnumerator.get_Current():object">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.IEnumerator.get_Current():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Current" uniqueID="get_Current():System.Reflection.RuntimeEventInfo">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeEventInfo&gt;.get_Current():System.Reflection.RuntimeEventInfo</signature>
			</method>
		</class>
		<class name="List`1+Enumerator&lt;System.Reflection.RuntimePropertyInfo&gt;" uniqueID="System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimePropertyInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="Dispose" uniqueID="Dispose():void">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimePropertyInfo&gt;.Dispose():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="List`1+Enumerator&lt;System.Reflection.RuntimePropertyInfo&gt;" uniqueID="List`1+Enumerator&lt;System.Reflection.RuntimePropertyInfo&gt;(System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;):void">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimePropertyInfo&gt;.List`1+Enumerator&lt;System.Reflection.RuntimePropertyInfo&gt;(System.Collections.Generic.List&lt;System.Reflection.RuntimePropertyInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MoveNext" uniqueID="MoveNext():bool">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimePropertyInfo&gt;.MoveNext():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="MoveNextRare" uniqueID="MoveNextRare():bool">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimePropertyInfo&gt;.MoveNextRare():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerator.Reset" uniqueID="System.Collections.IEnumerator.Reset():void">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.IEnumerator.Reset():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerator.get_Current" uniqueID="System.Collections.IEnumerator.get_Current():object">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.IEnumerator.get_Current():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Current" uniqueID="get_Current():System.Reflection.RuntimePropertyInfo">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimePropertyInfo&gt;.get_Current():System.Reflection.RuntimePropertyInfo</signature>
			</method>
		</class>
		<class name="IComparer&lt;System.Reflection.RuntimeMethodInfo&gt;" uniqueID="System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeMethodInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="Compare" uniqueID="Compare(System.Reflection.RuntimeMethodInfo;System.Reflection.RuntimeMethodInfo):int">
				<signature>System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeMethodInfo&gt;.Compare(System.Reflection.RuntimeMethodInfo;System.Reflection.RuntimeMethodInfo):int</signature>
			</method>
		</class>
		<class name="IComparer&lt;System.RuntimeType&gt;" uniqueID="System.Collections.Generic.IComparer&lt;System.RuntimeType&gt;">
			<method accessibility="Public" methodKind="Member" name="Compare" uniqueID="Compare(System.RuntimeType;System.RuntimeType):int">
				<signature>System.Collections.Generic.IComparer&lt;System.RuntimeType&gt;.Compare(System.RuntimeType;System.RuntimeType):int</signature>
			</method>
		</class>
		<class name="IEnumerator&lt;System.Security.Principal.IdentityReference&gt;" uniqueID="System.Collections.Generic.IEnumerator&lt;System.Security.Principal.IdentityReference&gt;">
			<method accessibility="Public" methodKind="Member" name="get_Current" uniqueID="get_Current():System.Security.Principal.IdentityReference">
				<signature>System.Collections.Generic.IEnumerator&lt;System.Security.Principal.IdentityReference&gt;.get_Current():System.Security.Principal.IdentityReference</signature>
			</method>
		</class>
		<class name="List`1+Enumerator&lt;System.Reflection.RuntimeFieldInfo&gt;" uniqueID="System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeFieldInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="Dispose" uniqueID="Dispose():void">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeFieldInfo&gt;.Dispose():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="List`1+Enumerator&lt;System.Reflection.RuntimeFieldInfo&gt;" uniqueID="List`1+Enumerator&lt;System.Reflection.RuntimeFieldInfo&gt;(System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;):void">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeFieldInfo&gt;.List`1+Enumerator&lt;System.Reflection.RuntimeFieldInfo&gt;(System.Collections.Generic.List&lt;System.Reflection.RuntimeFieldInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MoveNext" uniqueID="MoveNext():bool">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeFieldInfo&gt;.MoveNext():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="MoveNextRare" uniqueID="MoveNextRare():bool">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeFieldInfo&gt;.MoveNextRare():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerator.Reset" uniqueID="System.Collections.IEnumerator.Reset():void">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.IEnumerator.Reset():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerator.get_Current" uniqueID="System.Collections.IEnumerator.get_Current():object">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.IEnumerator.get_Current():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Current" uniqueID="get_Current():System.Reflection.RuntimeFieldInfo">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeFieldInfo&gt;.get_Current():System.Reflection.RuntimeFieldInfo</signature>
			</method>
		</class>
		<class name="ICollection&lt;System.RuntimeType&gt;" uniqueID="System.Collections.Generic.ICollection&lt;System.RuntimeType&gt;">
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(System.RuntimeType):void">
				<signature>System.Collections.Generic.ICollection&lt;System.RuntimeType&gt;.Add(System.RuntimeType):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Collections.Generic.ICollection&lt;System.RuntimeType&gt;.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(System.RuntimeType):bool">
				<signature>System.Collections.Generic.ICollection&lt;System.RuntimeType&gt;.Contains(System.RuntimeType):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.RuntimeType[];int):void">
				<signature>System.Collections.Generic.ICollection&lt;System.RuntimeType&gt;.CopyTo(System.RuntimeType[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(System.RuntimeType):bool">
				<signature>System.Collections.Generic.ICollection&lt;System.RuntimeType&gt;.Remove(System.RuntimeType):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.Generic.ICollection&lt;System.RuntimeType&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsReadOnly" uniqueID="get_IsReadOnly():bool">
				<signature>System.Collections.Generic.ICollection&lt;System.RuntimeType&gt;.get_IsReadOnly():bool</signature>
			</method>
		</class>
		<class name="IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;" uniqueID="System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;">
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;">
				<signature>System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;</signature>
			</method>
		</class>
		<class name="IEnumerable&lt;System.Security.Policy.IDelayEvaluatedEvidence&gt;" uniqueID="System.Collections.Generic.IEnumerable&lt;System.Security.Policy.IDelayEvaluatedEvidence&gt;">
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Security.Policy.IDelayEvaluatedEvidence&gt;">
				<signature>System.Collections.Generic.IEnumerable&lt;System.Security.Policy.IDelayEvaluatedEvidence&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Security.Policy.IDelayEvaluatedEvidence&gt;</signature>
			</method>
		</class>
		<class name="IEnumerable&lt;char&gt;" uniqueID="System.Collections.Generic.IEnumerable&lt;char&gt;">
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.IEnumerator&lt;char&gt;">
				<signature>System.Collections.Generic.IEnumerable&lt;char&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;char&gt;</signature>
			</method>
		</class>
		<class name="List&lt;System.Reflection.RuntimeConstructorInfo&gt;" uniqueID="System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IsCompatibleObject" uniqueID="IsCompatibleObject(object):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.IsCompatibleObject(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="VerifyValueType" uniqueID="VerifyValueType(object):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.VerifyValueType(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(System.Reflection.RuntimeConstructorInfo):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.Add(System.Reflection.RuntimeConstructorInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddRange" uniqueID="AddRange(System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeConstructorInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.AddRange(System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeConstructorInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AsReadOnly" uniqueID="AsReadOnly():System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.AsReadOnly():System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinarySearch" uniqueID="BinarySearch(System.Reflection.RuntimeConstructorInfo):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.BinarySearch(System.Reflection.RuntimeConstructorInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinarySearch" uniqueID="BinarySearch(System.Reflection.RuntimeConstructorInfo;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeConstructorInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.BinarySearch(System.Reflection.RuntimeConstructorInfo;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeConstructorInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinarySearch" uniqueID="BinarySearch(int;int;System.Reflection.RuntimeConstructorInfo;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeConstructorInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.BinarySearch(int;int;System.Reflection.RuntimeConstructorInfo;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeConstructorInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(System.Reflection.RuntimeConstructorInfo):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.Contains(System.Reflection.RuntimeConstructorInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Reflection.RuntimeConstructorInfo[]):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.CopyTo(System.Reflection.RuntimeConstructorInfo[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Reflection.RuntimeConstructorInfo[];int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.CopyTo(System.Reflection.RuntimeConstructorInfo[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(int;System.Reflection.RuntimeConstructorInfo[];int;int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.CopyTo(int;System.Reflection.RuntimeConstructorInfo[];int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="EnsureCapacity" uniqueID="EnsureCapacity(int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.EnsureCapacity(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Exists" uniqueID="Exists(System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.Exists(System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Find" uniqueID="Find(System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;):System.Reflection.RuntimeConstructorInfo">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.Find(System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;):System.Reflection.RuntimeConstructorInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindAll" uniqueID="FindAll(System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;):System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.FindAll(System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;):System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindIndex" uniqueID="FindIndex(System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.FindIndex(System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindIndex" uniqueID="FindIndex(int;System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.FindIndex(int;System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindIndex" uniqueID="FindIndex(int;int;System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.FindIndex(int;int;System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLast" uniqueID="FindLast(System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;):System.Reflection.RuntimeConstructorInfo">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.FindLast(System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;):System.Reflection.RuntimeConstructorInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLastIndex" uniqueID="FindLastIndex(System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.FindLastIndex(System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLastIndex" uniqueID="FindLastIndex(int;System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.FindLastIndex(int;System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLastIndex" uniqueID="FindLastIndex(int;int;System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.FindLastIndex(int;int;System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ForEach" uniqueID="ForEach(System.Action&lt;System.Reflection.RuntimeConstructorInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.ForEach(System.Action&lt;System.Reflection.RuntimeConstructorInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeConstructorInfo&gt;">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.GetEnumerator():System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeConstructorInfo&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRange" uniqueID="GetRange(int;int):System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.GetRange(int;int):System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.Reflection.RuntimeConstructorInfo):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.IndexOf(System.Reflection.RuntimeConstructorInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.Reflection.RuntimeConstructorInfo;int):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.IndexOf(System.Reflection.RuntimeConstructorInfo;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.Reflection.RuntimeConstructorInfo;int;int):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.IndexOf(System.Reflection.RuntimeConstructorInfo;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;System.Reflection.RuntimeConstructorInfo):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.Insert(int;System.Reflection.RuntimeConstructorInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InsertRange" uniqueID="InsertRange(int;System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeConstructorInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.InsertRange(int;System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeConstructorInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(System.Reflection.RuntimeConstructorInfo):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.LastIndexOf(System.Reflection.RuntimeConstructorInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(System.Reflection.RuntimeConstructorInfo;int):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.LastIndexOf(System.Reflection.RuntimeConstructorInfo;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(System.Reflection.RuntimeConstructorInfo;int;int):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.LastIndexOf(System.Reflection.RuntimeConstructorInfo;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="List&lt;System.Reflection.RuntimeConstructorInfo&gt;" uniqueID="List&lt;System.Reflection.RuntimeConstructorInfo&gt;():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.List&lt;System.Reflection.RuntimeConstructorInfo&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="List&lt;System.Reflection.RuntimeConstructorInfo&gt;" uniqueID="List&lt;System.Reflection.RuntimeConstructorInfo&gt;(System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeConstructorInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.List&lt;System.Reflection.RuntimeConstructorInfo&gt;(System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeConstructorInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="List&lt;System.Reflection.RuntimeConstructorInfo&gt;" uniqueID="List&lt;System.Reflection.RuntimeConstructorInfo&gt;(int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.List&lt;System.Reflection.RuntimeConstructorInfo&gt;(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(System.Reflection.RuntimeConstructorInfo):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.Remove(System.Reflection.RuntimeConstructorInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAll" uniqueID="RemoveAll(System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.RemoveAll(System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAt" uniqueID="RemoveAt(int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveRange" uniqueID="RemoveRange(int;int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.RemoveRange(int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reverse" uniqueID="Reverse():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.Reverse():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reverse" uniqueID="Reverse(int;int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.Reverse(int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.Sort():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort(System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeConstructorInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.Sort(System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeConstructorInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort(System.Comparison&lt;System.Reflection.RuntimeConstructorInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.Sort(System.Comparison&lt;System.Reflection.RuntimeConstructorInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort(int;int;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeConstructorInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.Sort(int;int;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeConstructorInfo&gt;):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator" uniqueID="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeConstructorInfo&gt;">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeConstructorInfo&gt;</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.CopyTo" uniqueID="System.Collections.ICollection.CopyTo(System.Array;int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.ICollection.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_IsSynchronized" uniqueID="System.Collections.ICollection.get_IsSynchronized():bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.ICollection.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_SyncRoot" uniqueID="System.Collections.ICollection.get_SyncRoot():object">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.ICollection.get_SyncRoot():object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerable.GetEnumerator" uniqueID="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Add" uniqueID="System.Collections.IList.Add(object):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.IList.Add(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Contains" uniqueID="System.Collections.IList.Contains(object):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.IList.Contains(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.IndexOf" uniqueID="System.Collections.IList.IndexOf(object):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.IList.IndexOf(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Insert" uniqueID="System.Collections.IList.Insert(int;object):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.IList.Insert(int;object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Remove" uniqueID="System.Collections.IList.Remove(object):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.IList.Remove(object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsFixedSize" uniqueID="System.Collections.IList.get_IsFixedSize():bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.IList.get_IsFixedSize():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsReadOnly" uniqueID="System.Collections.IList.get_IsReadOnly():bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.IList.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_Item" uniqueID="System.Collections.IList.get_Item(int):object">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.IList.get_Item(int):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.set_Item" uniqueID="System.Collections.IList.set_Item(int;object):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.IList.set_Item(int;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToArray" uniqueID="ToArray():System.Reflection.RuntimeConstructorInfo[]">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.ToArray():System.Reflection.RuntimeConstructorInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TrimExcess" uniqueID="TrimExcess():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.TrimExcess():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TrueForAll" uniqueID="TrueForAll(System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.TrueForAll(System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Capacity" uniqueID="get_Capacity():int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.get_Capacity():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.Reflection.RuntimeConstructorInfo">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.get_Item(int):System.Reflection.RuntimeConstructorInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Capacity" uniqueID="set_Capacity(int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.set_Capacity(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(int;System.Reflection.RuntimeConstructorInfo):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeConstructorInfo&gt;.set_Item(int;System.Reflection.RuntimeConstructorInfo):void</signature>
			</method>
		</class>
		<class name="List&lt;System.Reflection.RuntimeEventInfo&gt;" uniqueID="System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IsCompatibleObject" uniqueID="IsCompatibleObject(object):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.IsCompatibleObject(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="VerifyValueType" uniqueID="VerifyValueType(object):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.VerifyValueType(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(System.Reflection.RuntimeEventInfo):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.Add(System.Reflection.RuntimeEventInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddRange" uniqueID="AddRange(System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeEventInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.AddRange(System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeEventInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AsReadOnly" uniqueID="AsReadOnly():System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.AsReadOnly():System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinarySearch" uniqueID="BinarySearch(System.Reflection.RuntimeEventInfo):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.BinarySearch(System.Reflection.RuntimeEventInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinarySearch" uniqueID="BinarySearch(System.Reflection.RuntimeEventInfo;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeEventInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.BinarySearch(System.Reflection.RuntimeEventInfo;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeEventInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinarySearch" uniqueID="BinarySearch(int;int;System.Reflection.RuntimeEventInfo;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeEventInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.BinarySearch(int;int;System.Reflection.RuntimeEventInfo;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeEventInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(System.Reflection.RuntimeEventInfo):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.Contains(System.Reflection.RuntimeEventInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Reflection.RuntimeEventInfo[]):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.CopyTo(System.Reflection.RuntimeEventInfo[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Reflection.RuntimeEventInfo[];int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.CopyTo(System.Reflection.RuntimeEventInfo[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(int;System.Reflection.RuntimeEventInfo[];int;int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.CopyTo(int;System.Reflection.RuntimeEventInfo[];int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="EnsureCapacity" uniqueID="EnsureCapacity(int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.EnsureCapacity(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Exists" uniqueID="Exists(System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.Exists(System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Find" uniqueID="Find(System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;):System.Reflection.RuntimeEventInfo">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.Find(System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;):System.Reflection.RuntimeEventInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindAll" uniqueID="FindAll(System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;):System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.FindAll(System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;):System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindIndex" uniqueID="FindIndex(System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.FindIndex(System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindIndex" uniqueID="FindIndex(int;System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.FindIndex(int;System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindIndex" uniqueID="FindIndex(int;int;System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.FindIndex(int;int;System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLast" uniqueID="FindLast(System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;):System.Reflection.RuntimeEventInfo">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.FindLast(System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;):System.Reflection.RuntimeEventInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLastIndex" uniqueID="FindLastIndex(System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.FindLastIndex(System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLastIndex" uniqueID="FindLastIndex(int;System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.FindLastIndex(int;System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLastIndex" uniqueID="FindLastIndex(int;int;System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.FindLastIndex(int;int;System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ForEach" uniqueID="ForEach(System.Action&lt;System.Reflection.RuntimeEventInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.ForEach(System.Action&lt;System.Reflection.RuntimeEventInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeEventInfo&gt;">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.GetEnumerator():System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeEventInfo&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRange" uniqueID="GetRange(int;int):System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.GetRange(int;int):System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.Reflection.RuntimeEventInfo):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.IndexOf(System.Reflection.RuntimeEventInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.Reflection.RuntimeEventInfo;int):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.IndexOf(System.Reflection.RuntimeEventInfo;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.Reflection.RuntimeEventInfo;int;int):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.IndexOf(System.Reflection.RuntimeEventInfo;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;System.Reflection.RuntimeEventInfo):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.Insert(int;System.Reflection.RuntimeEventInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InsertRange" uniqueID="InsertRange(int;System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeEventInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.InsertRange(int;System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeEventInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(System.Reflection.RuntimeEventInfo):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.LastIndexOf(System.Reflection.RuntimeEventInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(System.Reflection.RuntimeEventInfo;int):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.LastIndexOf(System.Reflection.RuntimeEventInfo;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(System.Reflection.RuntimeEventInfo;int;int):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.LastIndexOf(System.Reflection.RuntimeEventInfo;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="List&lt;System.Reflection.RuntimeEventInfo&gt;" uniqueID="List&lt;System.Reflection.RuntimeEventInfo&gt;():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.List&lt;System.Reflection.RuntimeEventInfo&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="List&lt;System.Reflection.RuntimeEventInfo&gt;" uniqueID="List&lt;System.Reflection.RuntimeEventInfo&gt;(System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeEventInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.List&lt;System.Reflection.RuntimeEventInfo&gt;(System.Collections.Generic.IEnumerable&lt;System.Reflection.RuntimeEventInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="List&lt;System.Reflection.RuntimeEventInfo&gt;" uniqueID="List&lt;System.Reflection.RuntimeEventInfo&gt;(int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.List&lt;System.Reflection.RuntimeEventInfo&gt;(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(System.Reflection.RuntimeEventInfo):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.Remove(System.Reflection.RuntimeEventInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAll" uniqueID="RemoveAll(System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.RemoveAll(System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAt" uniqueID="RemoveAt(int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveRange" uniqueID="RemoveRange(int;int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.RemoveRange(int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reverse" uniqueID="Reverse():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.Reverse():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reverse" uniqueID="Reverse(int;int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.Reverse(int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.Sort():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort(System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeEventInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.Sort(System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeEventInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort(System.Comparison&lt;System.Reflection.RuntimeEventInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.Sort(System.Comparison&lt;System.Reflection.RuntimeEventInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort(int;int;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeEventInfo&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.Sort(int;int;System.Collections.Generic.IComparer&lt;System.Reflection.RuntimeEventInfo&gt;):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator" uniqueID="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeEventInfo&gt;">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeEventInfo&gt;</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.CopyTo" uniqueID="System.Collections.ICollection.CopyTo(System.Array;int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.ICollection.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_IsSynchronized" uniqueID="System.Collections.ICollection.get_IsSynchronized():bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.ICollection.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_SyncRoot" uniqueID="System.Collections.ICollection.get_SyncRoot():object">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.ICollection.get_SyncRoot():object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerable.GetEnumerator" uniqueID="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Add" uniqueID="System.Collections.IList.Add(object):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.IList.Add(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Contains" uniqueID="System.Collections.IList.Contains(object):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.IList.Contains(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.IndexOf" uniqueID="System.Collections.IList.IndexOf(object):int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.IList.IndexOf(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Insert" uniqueID="System.Collections.IList.Insert(int;object):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.IList.Insert(int;object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Remove" uniqueID="System.Collections.IList.Remove(object):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.IList.Remove(object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsFixedSize" uniqueID="System.Collections.IList.get_IsFixedSize():bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.IList.get_IsFixedSize():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsReadOnly" uniqueID="System.Collections.IList.get_IsReadOnly():bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.IList.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_Item" uniqueID="System.Collections.IList.get_Item(int):object">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.IList.get_Item(int):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.set_Item" uniqueID="System.Collections.IList.set_Item(int;object):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.IList.set_Item(int;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToArray" uniqueID="ToArray():System.Reflection.RuntimeEventInfo[]">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.ToArray():System.Reflection.RuntimeEventInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TrimExcess" uniqueID="TrimExcess():void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.TrimExcess():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TrueForAll" uniqueID="TrueForAll(System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;):bool">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.TrueForAll(System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Capacity" uniqueID="get_Capacity():int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.get_Capacity():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.Reflection.RuntimeEventInfo">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.get_Item(int):System.Reflection.RuntimeEventInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Capacity" uniqueID="set_Capacity(int):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.set_Capacity(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(int;System.Reflection.RuntimeEventInfo):void">
				<signature>System.Collections.Generic.List&lt;System.Reflection.RuntimeEventInfo&gt;.set_Item(int;System.Reflection.RuntimeEventInfo):void</signature>
			</method>
		</class>
		<class name="List`1+Enumerator&lt;System.Reflection.RuntimeMethodInfo&gt;" uniqueID="System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeMethodInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="Dispose" uniqueID="Dispose():void">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeMethodInfo&gt;.Dispose():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="List`1+Enumerator&lt;System.Reflection.RuntimeMethodInfo&gt;" uniqueID="List`1+Enumerator&lt;System.Reflection.RuntimeMethodInfo&gt;(System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;):void">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeMethodInfo&gt;.List`1+Enumerator&lt;System.Reflection.RuntimeMethodInfo&gt;(System.Collections.Generic.List&lt;System.Reflection.RuntimeMethodInfo&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MoveNext" uniqueID="MoveNext():bool">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeMethodInfo&gt;.MoveNext():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="MoveNextRare" uniqueID="MoveNextRare():bool">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeMethodInfo&gt;.MoveNextRare():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerator.Reset" uniqueID="System.Collections.IEnumerator.Reset():void">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.IEnumerator.Reset():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerator.get_Current" uniqueID="System.Collections.IEnumerator.get_Current():object">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.IEnumerator.get_Current():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Current" uniqueID="get_Current():System.Reflection.RuntimeMethodInfo">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.Reflection.RuntimeMethodInfo&gt;.get_Current():System.Reflection.RuntimeMethodInfo</signature>
			</method>
		</class>
		<class name="List`1+Enumerator&lt;System.RuntimeType&gt;" uniqueID="System.Collections.Generic.List`1+Enumerator&lt;System.RuntimeType&gt;">
			<method accessibility="Public" methodKind="Member" name="Dispose" uniqueID="Dispose():void">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.RuntimeType&gt;.Dispose():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="List`1+Enumerator&lt;System.RuntimeType&gt;" uniqueID="List`1+Enumerator&lt;System.RuntimeType&gt;(System.Collections.Generic.List&lt;System.RuntimeType&gt;):void">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.RuntimeType&gt;.List`1+Enumerator&lt;System.RuntimeType&gt;(System.Collections.Generic.List&lt;System.RuntimeType&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MoveNext" uniqueID="MoveNext():bool">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.RuntimeType&gt;.MoveNext():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="MoveNextRare" uniqueID="MoveNextRare():bool">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.RuntimeType&gt;.MoveNextRare():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerator.Reset" uniqueID="System.Collections.IEnumerator.Reset():void">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.RuntimeType&gt;.System.Collections.IEnumerator.Reset():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerator.get_Current" uniqueID="System.Collections.IEnumerator.get_Current():object">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.RuntimeType&gt;.System.Collections.IEnumerator.get_Current():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Current" uniqueID="get_Current():System.RuntimeType">
				<signature>System.Collections.Generic.List`1+Enumerator&lt;System.RuntimeType&gt;.get_Current():System.RuntimeType</signature>
			</method>
		</class>
		<class name="ICollection&lt;System.Reflection.RuntimeEventInfo&gt;" uniqueID="System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeEventInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(System.Reflection.RuntimeEventInfo):void">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeEventInfo&gt;.Add(System.Reflection.RuntimeEventInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeEventInfo&gt;.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(System.Reflection.RuntimeEventInfo):bool">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeEventInfo&gt;.Contains(System.Reflection.RuntimeEventInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Reflection.RuntimeEventInfo[];int):void">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeEventInfo&gt;.CopyTo(System.Reflection.RuntimeEventInfo[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(System.Reflection.RuntimeEventInfo):bool">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeEventInfo&gt;.Remove(System.Reflection.RuntimeEventInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeEventInfo&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsReadOnly" uniqueID="get_IsReadOnly():bool">
				<signature>System.Collections.Generic.ICollection&lt;System.Reflection.RuntimeEventInfo&gt;.get_IsReadOnly():bool</signature>
			</method>
		</class>
		<class name="List&lt;System.RuntimeType&gt;" uniqueID="System.Collections.Generic.List&lt;System.RuntimeType&gt;">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IsCompatibleObject" uniqueID="IsCompatibleObject(object):bool">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.IsCompatibleObject(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="VerifyValueType" uniqueID="VerifyValueType(object):void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.VerifyValueType(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(System.RuntimeType):void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.Add(System.RuntimeType):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddRange" uniqueID="AddRange(System.Collections.Generic.IEnumerable&lt;System.RuntimeType&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.AddRange(System.Collections.Generic.IEnumerable&lt;System.RuntimeType&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AsReadOnly" uniqueID="AsReadOnly():System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.AsReadOnly():System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinarySearch" uniqueID="BinarySearch(System.RuntimeType):int">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.BinarySearch(System.RuntimeType):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinarySearch" uniqueID="BinarySearch(System.RuntimeType;System.Collections.Generic.IComparer&lt;System.RuntimeType&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.BinarySearch(System.RuntimeType;System.Collections.Generic.IComparer&lt;System.RuntimeType&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinarySearch" uniqueID="BinarySearch(int;int;System.RuntimeType;System.Collections.Generic.IComparer&lt;System.RuntimeType&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.BinarySearch(int;int;System.RuntimeType;System.Collections.Generic.IComparer&lt;System.RuntimeType&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(System.RuntimeType):bool">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.Contains(System.RuntimeType):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.RuntimeType[]):void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.CopyTo(System.RuntimeType[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.RuntimeType[];int):void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.CopyTo(System.RuntimeType[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(int;System.RuntimeType[];int;int):void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.CopyTo(int;System.RuntimeType[];int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="EnsureCapacity" uniqueID="EnsureCapacity(int):void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.EnsureCapacity(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Exists" uniqueID="Exists(System.Predicate&lt;System.RuntimeType&gt;):bool">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.Exists(System.Predicate&lt;System.RuntimeType&gt;):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Find" uniqueID="Find(System.Predicate&lt;System.RuntimeType&gt;):System.RuntimeType">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.Find(System.Predicate&lt;System.RuntimeType&gt;):System.RuntimeType</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindAll" uniqueID="FindAll(System.Predicate&lt;System.RuntimeType&gt;):System.Collections.Generic.List&lt;System.RuntimeType&gt;">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.FindAll(System.Predicate&lt;System.RuntimeType&gt;):System.Collections.Generic.List&lt;System.RuntimeType&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindIndex" uniqueID="FindIndex(System.Predicate&lt;System.RuntimeType&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.FindIndex(System.Predicate&lt;System.RuntimeType&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindIndex" uniqueID="FindIndex(int;System.Predicate&lt;System.RuntimeType&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.FindIndex(int;System.Predicate&lt;System.RuntimeType&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindIndex" uniqueID="FindIndex(int;int;System.Predicate&lt;System.RuntimeType&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.FindIndex(int;int;System.Predicate&lt;System.RuntimeType&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLast" uniqueID="FindLast(System.Predicate&lt;System.RuntimeType&gt;):System.RuntimeType">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.FindLast(System.Predicate&lt;System.RuntimeType&gt;):System.RuntimeType</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLastIndex" uniqueID="FindLastIndex(System.Predicate&lt;System.RuntimeType&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.FindLastIndex(System.Predicate&lt;System.RuntimeType&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLastIndex" uniqueID="FindLastIndex(int;System.Predicate&lt;System.RuntimeType&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.FindLastIndex(int;System.Predicate&lt;System.RuntimeType&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindLastIndex" uniqueID="FindLastIndex(int;int;System.Predicate&lt;System.RuntimeType&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.FindLastIndex(int;int;System.Predicate&lt;System.RuntimeType&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ForEach" uniqueID="ForEach(System.Action&lt;System.RuntimeType&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.ForEach(System.Action&lt;System.RuntimeType&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.List`1+Enumerator&lt;System.RuntimeType&gt;">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.GetEnumerator():System.Collections.Generic.List`1+Enumerator&lt;System.RuntimeType&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRange" uniqueID="GetRange(int;int):System.Collections.Generic.List&lt;System.RuntimeType&gt;">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.GetRange(int;int):System.Collections.Generic.List&lt;System.RuntimeType&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.RuntimeType):int">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.IndexOf(System.RuntimeType):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.RuntimeType;int):int">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.IndexOf(System.RuntimeType;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.RuntimeType;int;int):int">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.IndexOf(System.RuntimeType;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;System.RuntimeType):void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.Insert(int;System.RuntimeType):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InsertRange" uniqueID="InsertRange(int;System.Collections.Generic.IEnumerable&lt;System.RuntimeType&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.InsertRange(int;System.Collections.Generic.IEnumerable&lt;System.RuntimeType&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(System.RuntimeType):int">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.LastIndexOf(System.RuntimeType):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(System.RuntimeType;int):int">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.LastIndexOf(System.RuntimeType;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(System.RuntimeType;int;int):int">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.LastIndexOf(System.RuntimeType;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="List&lt;System.RuntimeType&gt;" uniqueID="List&lt;System.RuntimeType&gt;():void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.List&lt;System.RuntimeType&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="List&lt;System.RuntimeType&gt;" uniqueID="List&lt;System.RuntimeType&gt;(System.Collections.Generic.IEnumerable&lt;System.RuntimeType&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.List&lt;System.RuntimeType&gt;(System.Collections.Generic.IEnumerable&lt;System.RuntimeType&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="List&lt;System.RuntimeType&gt;" uniqueID="List&lt;System.RuntimeType&gt;(int):void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.List&lt;System.RuntimeType&gt;(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(System.RuntimeType):bool">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.Remove(System.RuntimeType):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAll" uniqueID="RemoveAll(System.Predicate&lt;System.RuntimeType&gt;):int">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.RemoveAll(System.Predicate&lt;System.RuntimeType&gt;):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAt" uniqueID="RemoveAt(int):void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveRange" uniqueID="RemoveRange(int;int):void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.RemoveRange(int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reverse" uniqueID="Reverse():void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.Reverse():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reverse" uniqueID="Reverse(int;int):void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.Reverse(int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort():void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.Sort():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort(System.Collections.Generic.IComparer&lt;System.RuntimeType&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.Sort(System.Collections.Generic.IComparer&lt;System.RuntimeType&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort(System.Comparison&lt;System.RuntimeType&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.Sort(System.Comparison&lt;System.RuntimeType&gt;):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort(int;int;System.Collections.Generic.IComparer&lt;System.RuntimeType&gt;):void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.Sort(int;int;System.Collections.Generic.IComparer&lt;System.RuntimeType&gt;):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator" uniqueID="System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.RuntimeType&gt;">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.System.Collections.Generic.IEnumerable&lt;T&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.RuntimeType&gt;</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.CopyTo" uniqueID="System.Collections.ICollection.CopyTo(System.Array;int):void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.System.Collections.ICollection.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_IsSynchronized" uniqueID="System.Collections.ICollection.get_IsSynchronized():bool">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.System.Collections.ICollection.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_SyncRoot" uniqueID="System.Collections.ICollection.get_SyncRoot():object">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.System.Collections.ICollection.get_SyncRoot():object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerable.GetEnumerator" uniqueID="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Add" uniqueID="System.Collections.IList.Add(object):int">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.System.Collections.IList.Add(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Contains" uniqueID="System.Collections.IList.Contains(object):bool">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.System.Collections.IList.Contains(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.IndexOf" uniqueID="System.Collections.IList.IndexOf(object):int">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.System.Collections.IList.IndexOf(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Insert" uniqueID="System.Collections.IList.Insert(int;object):void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.System.Collections.IList.Insert(int;object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Remove" uniqueID="System.Collections.IList.Remove(object):void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.System.Collections.IList.Remove(object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsFixedSize" uniqueID="System.Collections.IList.get_IsFixedSize():bool">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.System.Collections.IList.get_IsFixedSize():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsReadOnly" uniqueID="System.Collections.IList.get_IsReadOnly():bool">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.System.Collections.IList.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_Item" uniqueID="System.Collections.IList.get_Item(int):object">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.System.Collections.IList.get_Item(int):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.set_Item" uniqueID="System.Collections.IList.set_Item(int;object):void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.System.Collections.IList.set_Item(int;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToArray" uniqueID="ToArray():System.RuntimeType[]">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.ToArray():System.RuntimeType[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TrimExcess" uniqueID="TrimExcess():void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.TrimExcess():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TrueForAll" uniqueID="TrueForAll(System.Predicate&lt;System.RuntimeType&gt;):bool">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.TrueForAll(System.Predicate&lt;System.RuntimeType&gt;):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Capacity" uniqueID="get_Capacity():int">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.get_Capacity():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.RuntimeType">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.get_Item(int):System.RuntimeType</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Capacity" uniqueID="set_Capacity(int):void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.set_Capacity(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(int;System.RuntimeType):void">
				<signature>System.Collections.Generic.List&lt;System.RuntimeType&gt;.set_Item(int;System.RuntimeType):void</signature>
			</method>
		</class>
	</package>
	<package name="System.Configuration">
		<class name="SettingChangingEventArgs" uniqueID="System.Configuration.SettingChangingEventArgs">
			<method accessibility="Public" methodKind="Member" name="SettingChangingEventArgs" uniqueID="SettingChangingEventArgs(string;string;string;object;bool):void">
				<signature>System.Configuration.SettingChangingEventArgs.SettingChangingEventArgs(string;string;string;object;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_NewValue" uniqueID="get_NewValue():object">
				<signature>System.Configuration.SettingChangingEventArgs.get_NewValue():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SettingClass" uniqueID="get_SettingClass():string">
				<signature>System.Configuration.SettingChangingEventArgs.get_SettingClass():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SettingKey" uniqueID="get_SettingKey():string">
				<signature>System.Configuration.SettingChangingEventArgs.get_SettingKey():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SettingName" uniqueID="get_SettingName():string">
				<signature>System.Configuration.SettingChangingEventArgs.get_SettingName():string</signature>
			</method>
		</class>
		<class name="SettingsLoadedEventArgs" uniqueID="System.Configuration.SettingsLoadedEventArgs">
			<method accessibility="Public" methodKind="Member" name="SettingsLoadedEventArgs" uniqueID="SettingsLoadedEventArgs(System.Configuration.SettingsProvider):void">
				<signature>System.Configuration.SettingsLoadedEventArgs.SettingsLoadedEventArgs(System.Configuration.SettingsProvider):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Provider" uniqueID="get_Provider():System.Configuration.SettingsProvider">
				<signature>System.Configuration.SettingsLoadedEventArgs.get_Provider():System.Configuration.SettingsProvider</signature>
			</method>
		</class>
		<class name="SettingsPropertyCollection" uniqueID="System.Configuration.SettingsPropertyCollection">
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(System.Configuration.SettingsProperty):void">
				<signature>System.Configuration.SettingsPropertyCollection.Add(System.Configuration.SettingsProperty):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Configuration.SettingsPropertyCollection.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone():object">
				<signature>System.Configuration.SettingsPropertyCollection.Clone():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Array;int):void">
				<signature>System.Configuration.SettingsPropertyCollection.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Configuration.SettingsPropertyCollection.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="OnAdd" uniqueID="OnAdd(System.Configuration.SettingsProperty):void">
				<signature>System.Configuration.SettingsPropertyCollection.OnAdd(System.Configuration.SettingsProperty):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="OnAddComplete" uniqueID="OnAddComplete(System.Configuration.SettingsProperty):void">
				<signature>System.Configuration.SettingsPropertyCollection.OnAddComplete(System.Configuration.SettingsProperty):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="OnClear" uniqueID="OnClear():void">
				<signature>System.Configuration.SettingsPropertyCollection.OnClear():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="OnClearComplete" uniqueID="OnClearComplete():void">
				<signature>System.Configuration.SettingsPropertyCollection.OnClearComplete():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="OnRemove" uniqueID="OnRemove(System.Configuration.SettingsProperty):void">
				<signature>System.Configuration.SettingsPropertyCollection.OnRemove(System.Configuration.SettingsProperty):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="OnRemoveComplete" uniqueID="OnRemoveComplete(System.Configuration.SettingsProperty):void">
				<signature>System.Configuration.SettingsPropertyCollection.OnRemoveComplete(System.Configuration.SettingsProperty):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(string):void">
				<signature>System.Configuration.SettingsPropertyCollection.Remove(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetReadOnly" uniqueID="SetReadOnly():void">
				<signature>System.Configuration.SettingsPropertyCollection.SetReadOnly():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SettingsPropertyCollection" uniqueID="SettingsPropertyCollection():void">
				<signature>System.Configuration.SettingsPropertyCollection.SettingsPropertyCollection():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SettingsPropertyCollection" uniqueID="SettingsPropertyCollection(System.Collections.Hashtable):void">
				<signature>System.Configuration.SettingsPropertyCollection.SettingsPropertyCollection(System.Collections.Hashtable):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Configuration.SettingsPropertyCollection.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSynchronized" uniqueID="get_IsSynchronized():bool">
				<signature>System.Configuration.SettingsPropertyCollection.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(string):System.Configuration.SettingsProperty">
				<signature>System.Configuration.SettingsPropertyCollection.get_Item(string):System.Configuration.SettingsProperty</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SyncRoot" uniqueID="get_SyncRoot():object">
				<signature>System.Configuration.SettingsPropertyCollection.get_SyncRoot():object</signature>
			</method>
		</class>
		<class name="SettingsPropertyValue" uniqueID="System.Configuration.SettingsPropertyValue">
			<method accessibility="Private" methodKind="Static" name="ConvertObjectToString" uniqueID="ConvertObjectToString(object;System.Type;System.Configuration.SettingsSerializeAs;bool):string">
				<signature>System.Configuration.SettingsPropertyValue.ConvertObjectToString(object;System.Type;System.Configuration.SettingsSerializeAs;bool):string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetObjectFromString" uniqueID="GetObjectFromString(System.Type;System.Configuration.SettingsSerializeAs;string):object">
				<signature>System.Configuration.SettingsPropertyValue.GetObjectFromString(System.Type;System.Configuration.SettingsSerializeAs;string):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Deserialize" uniqueID="Deserialize():object">
				<signature>System.Configuration.SettingsPropertyValue.Deserialize():object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="IsHostedInAspnet" uniqueID="IsHostedInAspnet():bool">
				<signature>System.Configuration.SettingsPropertyValue.IsHostedInAspnet():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SerializePropertyValue" uniqueID="SerializePropertyValue():object">
				<signature>System.Configuration.SettingsPropertyValue.SerializePropertyValue():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SettingsPropertyValue" uniqueID="SettingsPropertyValue(System.Configuration.SettingsProperty):void">
				<signature>System.Configuration.SettingsPropertyValue.SettingsPropertyValue(System.Configuration.SettingsProperty):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Deserialized" uniqueID="get_Deserialized():bool">
				<signature>System.Configuration.SettingsPropertyValue.get_Deserialized():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsDirty" uniqueID="get_IsDirty():bool">
				<signature>System.Configuration.SettingsPropertyValue.get_IsDirty():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Configuration.SettingsPropertyValue.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Property" uniqueID="get_Property():System.Configuration.SettingsProperty">
				<signature>System.Configuration.SettingsPropertyValue.get_Property():System.Configuration.SettingsProperty</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PropertyValue" uniqueID="get_PropertyValue():object">
				<signature>System.Configuration.SettingsPropertyValue.get_PropertyValue():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SerializedValue" uniqueID="get_SerializedValue():object">
				<signature>System.Configuration.SettingsPropertyValue.get_SerializedValue():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_UsingDefaultValue" uniqueID="get_UsingDefaultValue():bool">
				<signature>System.Configuration.SettingsPropertyValue.get_UsingDefaultValue():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Deserialized" uniqueID="set_Deserialized(bool):void">
				<signature>System.Configuration.SettingsPropertyValue.set_Deserialized(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_IsDirty" uniqueID="set_IsDirty(bool):void">
				<signature>System.Configuration.SettingsPropertyValue.set_IsDirty(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_PropertyValue" uniqueID="set_PropertyValue(object):void">
				<signature>System.Configuration.SettingsPropertyValue.set_PropertyValue(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_SerializedValue" uniqueID="set_SerializedValue(object):void">
				<signature>System.Configuration.SettingsPropertyValue.set_SerializedValue(object):void</signature>
			</method>
		</class>
		<class name="SettingsProvider" uniqueID="System.Configuration.SettingsProvider">
			<method accessibility="Public" methodKind="Member" name="GetPropertyValues" uniqueID="GetPropertyValues(System.Configuration.SettingsContext;System.Configuration.SettingsPropertyCollection):System.Configuration.SettingsPropertyValueCollection">
				<signature>System.Configuration.SettingsProvider.GetPropertyValues(System.Configuration.SettingsContext;System.Configuration.SettingsPropertyCollection):System.Configuration.SettingsPropertyValueCollection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetPropertyValues" uniqueID="SetPropertyValues(System.Configuration.SettingsContext;System.Configuration.SettingsPropertyValueCollection):void">
				<signature>System.Configuration.SettingsProvider.SetPropertyValues(System.Configuration.SettingsContext;System.Configuration.SettingsPropertyValueCollection):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SettingsProvider" uniqueID="SettingsProvider():void">
				<signature>System.Configuration.SettingsProvider.SettingsProvider():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ApplicationName" uniqueID="get_ApplicationName():string">
				<signature>System.Configuration.SettingsProvider.get_ApplicationName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ApplicationName" uniqueID="set_ApplicationName(string):void">
				<signature>System.Configuration.SettingsProvider.set_ApplicationName(string):void</signature>
			</method>
		</class>
		<class name="SettingsAttributeDictionary" uniqueID="System.Configuration.SettingsAttributeDictionary">
			<method accessibility="Public" methodKind="Member" name="SettingsAttributeDictionary" uniqueID="SettingsAttributeDictionary():void">
				<signature>System.Configuration.SettingsAttributeDictionary.SettingsAttributeDictionary():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SettingsAttributeDictionary" uniqueID="SettingsAttributeDictionary(System.Configuration.SettingsAttributeDictionary):void">
				<signature>System.Configuration.SettingsAttributeDictionary.SettingsAttributeDictionary(System.Configuration.SettingsAttributeDictionary):void</signature>
			</method>
		</class>
		<class name="SettingsBase" uniqueID="System.Configuration.SettingsBase">
			<method accessibility="Public" methodKind="Static" name="Synchronized" uniqueID="Synchronized(System.Configuration.SettingsBase):System.Configuration.SettingsBase">
				<signature>System.Configuration.SettingsBase.Synchronized(System.Configuration.SettingsBase):System.Configuration.SettingsBase</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetPropertiesFromProvider" uniqueID="GetPropertiesFromProvider(System.Configuration.SettingsProvider):void">
				<signature>System.Configuration.SettingsBase.GetPropertiesFromProvider(System.Configuration.SettingsProvider):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetPropertyValueByName" uniqueID="GetPropertyValueByName(string):object">
				<signature>System.Configuration.SettingsBase.GetPropertyValueByName(string):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Initialize" uniqueID="Initialize(System.Configuration.SettingsContext;System.Configuration.SettingsPropertyCollection;System.Configuration.SettingsProviderCollection):void">
				<signature>System.Configuration.SettingsBase.Initialize(System.Configuration.SettingsContext;System.Configuration.SettingsPropertyCollection;System.Configuration.SettingsProviderCollection):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Save" uniqueID="Save():void">
				<signature>System.Configuration.SettingsBase.Save():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SaveCore" uniqueID="SaveCore():void">
				<signature>System.Configuration.SettingsBase.SaveCore():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SetPropertyValueByName" uniqueID="SetPropertyValueByName(string;object):void">
				<signature>System.Configuration.SettingsBase.SetPropertyValueByName(string;object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SettingsBase" uniqueID="SettingsBase():void">
				<signature>System.Configuration.SettingsBase.SettingsBase():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Context" uniqueID="get_Context():System.Configuration.SettingsContext">
				<signature>System.Configuration.SettingsBase.get_Context():System.Configuration.SettingsContext</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSynchronized" uniqueID="get_IsSynchronized():bool">
				<signature>System.Configuration.SettingsBase.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(string):object">
				<signature>System.Configuration.SettingsBase.get_Item(string):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Properties" uniqueID="get_Properties():System.Configuration.SettingsPropertyCollection">
				<signature>System.Configuration.SettingsBase.get_Properties():System.Configuration.SettingsPropertyCollection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PropertyValues" uniqueID="get_PropertyValues():System.Configuration.SettingsPropertyValueCollection">
				<signature>System.Configuration.SettingsBase.get_PropertyValues():System.Configuration.SettingsPropertyValueCollection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Providers" uniqueID="get_Providers():System.Configuration.SettingsProviderCollection">
				<signature>System.Configuration.SettingsBase.get_Providers():System.Configuration.SettingsProviderCollection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(string;object):void">
				<signature>System.Configuration.SettingsBase.set_Item(string;object):void</signature>
			</method>
		</class>
		<class name="SettingsLoadedEventHandler" uniqueID="System.Configuration.SettingsLoadedEventHandler">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(object;System.Configuration.SettingsLoadedEventArgs;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Configuration.SettingsLoadedEventHandler.BeginInvoke(object;System.Configuration.SettingsLoadedEventArgs;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):void">
				<signature>System.Configuration.SettingsLoadedEventHandler.EndInvoke(System.IAsyncResult):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(object;System.Configuration.SettingsLoadedEventArgs):void">
				<signature>System.Configuration.SettingsLoadedEventHandler.Invoke(object;System.Configuration.SettingsLoadedEventArgs):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SettingsLoadedEventHandler" uniqueID="SettingsLoadedEventHandler(object;native signed int):void">
				<signature>System.Configuration.SettingsLoadedEventHandler.SettingsLoadedEventHandler(object;native signed int):void</signature>
			</method>
		</class>
		<class name="SettingsProperty" uniqueID="System.Configuration.SettingsProperty">
			<method accessibility="Public" methodKind="Member" name="SettingsProperty" uniqueID="SettingsProperty(System.Configuration.SettingsProperty):void">
				<signature>System.Configuration.SettingsProperty.SettingsProperty(System.Configuration.SettingsProperty):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SettingsProperty" uniqueID="SettingsProperty(string):void">
				<signature>System.Configuration.SettingsProperty.SettingsProperty(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SettingsProperty" uniqueID="SettingsProperty(string;System.Type;System.Configuration.SettingsProvider;bool;object;System.Configuration.SettingsSerializeAs;System.Configuration.SettingsAttributeDictionary;bool;bool):void">
				<signature>System.Configuration.SettingsProperty.SettingsProperty(string;System.Type;System.Configuration.SettingsProvider;bool;object;System.Configuration.SettingsSerializeAs;System.Configuration.SettingsAttributeDictionary;bool;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Attributes" uniqueID="get_Attributes():System.Configuration.SettingsAttributeDictionary">
				<signature>System.Configuration.SettingsProperty.get_Attributes():System.Configuration.SettingsAttributeDictionary</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DefaultValue" uniqueID="get_DefaultValue():object">
				<signature>System.Configuration.SettingsProperty.get_DefaultValue():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsReadOnly" uniqueID="get_IsReadOnly():bool">
				<signature>System.Configuration.SettingsProperty.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Configuration.SettingsProperty.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PropertyType" uniqueID="get_PropertyType():System.Type">
				<signature>System.Configuration.SettingsProperty.get_PropertyType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Provider" uniqueID="get_Provider():System.Configuration.SettingsProvider">
				<signature>System.Configuration.SettingsProperty.get_Provider():System.Configuration.SettingsProvider</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SerializeAs" uniqueID="get_SerializeAs():System.Configuration.SettingsSerializeAs">
				<signature>System.Configuration.SettingsProperty.get_SerializeAs():System.Configuration.SettingsSerializeAs</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ThrowOnErrorDeserializing" uniqueID="get_ThrowOnErrorDeserializing():bool">
				<signature>System.Configuration.SettingsProperty.get_ThrowOnErrorDeserializing():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ThrowOnErrorSerializing" uniqueID="get_ThrowOnErrorSerializing():bool">
				<signature>System.Configuration.SettingsProperty.get_ThrowOnErrorSerializing():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_DefaultValue" uniqueID="set_DefaultValue(object):void">
				<signature>System.Configuration.SettingsProperty.set_DefaultValue(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_IsReadOnly" uniqueID="set_IsReadOnly(bool):void">
				<signature>System.Configuration.SettingsProperty.set_IsReadOnly(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Name" uniqueID="set_Name(string):void">
				<signature>System.Configuration.SettingsProperty.set_Name(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_PropertyType" uniqueID="set_PropertyType(System.Type):void">
				<signature>System.Configuration.SettingsProperty.set_PropertyType(System.Type):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Provider" uniqueID="set_Provider(System.Configuration.SettingsProvider):void">
				<signature>System.Configuration.SettingsProperty.set_Provider(System.Configuration.SettingsProvider):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_SerializeAs" uniqueID="set_SerializeAs(System.Configuration.SettingsSerializeAs):void">
				<signature>System.Configuration.SettingsProperty.set_SerializeAs(System.Configuration.SettingsSerializeAs):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ThrowOnErrorDeserializing" uniqueID="set_ThrowOnErrorDeserializing(bool):void">
				<signature>System.Configuration.SettingsProperty.set_ThrowOnErrorDeserializing(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ThrowOnErrorSerializing" uniqueID="set_ThrowOnErrorSerializing(bool):void">
				<signature>System.Configuration.SettingsProperty.set_ThrowOnErrorSerializing(bool):void</signature>
			</method>
		</class>
		<class name="SettingsProviderCollection" uniqueID="System.Configuration.SettingsProviderCollection">
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(System.Configuration.Provider.ProviderBase):void">
				<signature>System.Configuration.SettingsProviderCollection.Add(System.Configuration.Provider.ProviderBase):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SettingsProviderCollection" uniqueID="SettingsProviderCollection():void">
				<signature>System.Configuration.SettingsProviderCollection.SettingsProviderCollection():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(string):System.Configuration.SettingsProvider">
				<signature>System.Configuration.SettingsProviderCollection.get_Item(string):System.Configuration.SettingsProvider</signature>
			</method>
		</class>
		<class name="SettingChangingEventHandler" uniqueID="System.Configuration.SettingChangingEventHandler">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(object;System.Configuration.SettingChangingEventArgs;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Configuration.SettingChangingEventHandler.BeginInvoke(object;System.Configuration.SettingChangingEventArgs;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):void">
				<signature>System.Configuration.SettingChangingEventHandler.EndInvoke(System.IAsyncResult):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(object;System.Configuration.SettingChangingEventArgs):void">
				<signature>System.Configuration.SettingChangingEventHandler.Invoke(object;System.Configuration.SettingChangingEventArgs):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SettingChangingEventHandler" uniqueID="SettingChangingEventHandler(object;native signed int):void">
				<signature>System.Configuration.SettingChangingEventHandler.SettingChangingEventHandler(object;native signed int):void</signature>
			</method>
		</class>
		<class name="SettingsPropertyValueCollection" uniqueID="System.Configuration.SettingsPropertyValueCollection">
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(System.Configuration.SettingsPropertyValue):void">
				<signature>System.Configuration.SettingsPropertyValueCollection.Add(System.Configuration.SettingsPropertyValue):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Configuration.SettingsPropertyValueCollection.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone():object">
				<signature>System.Configuration.SettingsPropertyValueCollection.Clone():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Array;int):void">
				<signature>System.Configuration.SettingsPropertyValueCollection.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Configuration.SettingsPropertyValueCollection.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(string):void">
				<signature>System.Configuration.SettingsPropertyValueCollection.Remove(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetReadOnly" uniqueID="SetReadOnly():void">
				<signature>System.Configuration.SettingsPropertyValueCollection.SetReadOnly():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SettingsPropertyValueCollection" uniqueID="SettingsPropertyValueCollection():void">
				<signature>System.Configuration.SettingsPropertyValueCollection.SettingsPropertyValueCollection():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SettingsPropertyValueCollection" uniqueID="SettingsPropertyValueCollection(System.Collections.Hashtable;System.Collections.ArrayList):void">
				<signature>System.Configuration.SettingsPropertyValueCollection.SettingsPropertyValueCollection(System.Collections.Hashtable;System.Collections.ArrayList):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Configuration.SettingsPropertyValueCollection.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSynchronized" uniqueID="get_IsSynchronized():bool">
				<signature>System.Configuration.SettingsPropertyValueCollection.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(string):System.Configuration.SettingsPropertyValue">
				<signature>System.Configuration.SettingsPropertyValueCollection.get_Item(string):System.Configuration.SettingsPropertyValue</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SyncRoot" uniqueID="get_SyncRoot():object">
				<signature>System.Configuration.SettingsPropertyValueCollection.get_SyncRoot():object</signature>
			</method>
		</class>
		<class name="SettingsSavingEventHandler" uniqueID="System.Configuration.SettingsSavingEventHandler">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(object;System.ComponentModel.CancelEventArgs;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Configuration.SettingsSavingEventHandler.BeginInvoke(object;System.ComponentModel.CancelEventArgs;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):void">
				<signature>System.Configuration.SettingsSavingEventHandler.EndInvoke(System.IAsyncResult):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(object;System.ComponentModel.CancelEventArgs):void">
				<signature>System.Configuration.SettingsSavingEventHandler.Invoke(object;System.ComponentModel.CancelEventArgs):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SettingsSavingEventHandler" uniqueID="SettingsSavingEventHandler(object;native signed int):void">
				<signature>System.Configuration.SettingsSavingEventHandler.SettingsSavingEventHandler(object;native signed int):void</signature>
			</method>
		</class>
		<class name="ApplicationSettingsBase" uniqueID="System.Configuration.ApplicationSettingsBase">
			<method accessibility="Protected" methodKind="Static" name="IsClickOnceDeployed" uniqueID="IsClickOnceDeployed(System.AppDomain):bool">
				<signature>System.Configuration.ApplicationSettingsBase.IsClickOnceDeployed(System.AppDomain):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ApplicationSettingsBase" uniqueID="ApplicationSettingsBase():void">
				<signature>System.Configuration.ApplicationSettingsBase.ApplicationSettingsBase():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ApplicationSettingsBase" uniqueID="ApplicationSettingsBase(System.ComponentModel.IComponent):void">
				<signature>System.Configuration.ApplicationSettingsBase.ApplicationSettingsBase(System.ComponentModel.IComponent):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ApplicationSettingsBase" uniqueID="ApplicationSettingsBase(System.ComponentModel.IComponent;string):void">
				<signature>System.Configuration.ApplicationSettingsBase.ApplicationSettingsBase(System.ComponentModel.IComponent;string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ApplicationSettingsBase" uniqueID="ApplicationSettingsBase(string):void">
				<signature>System.Configuration.ApplicationSettingsBase.ApplicationSettingsBase(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CreateSetting" uniqueID="CreateSetting(System.Reflection.PropertyInfo):System.Configuration.SettingsProperty">
				<signature>System.Configuration.ApplicationSettingsBase.CreateSetting(System.Reflection.PropertyInfo):System.Configuration.SettingsProperty</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="EnsureInitialized" uniqueID="EnsureInitialized():void">
				<signature>System.Configuration.ApplicationSettingsBase.EnsureInitialized():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetPreviousVersion" uniqueID="GetPreviousVersion(string):object">
				<signature>System.Configuration.ApplicationSettingsBase.GetPreviousVersion(string):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetPropertiesForProvider" uniqueID="GetPropertiesForProvider(System.Configuration.SettingsProvider):System.Configuration.SettingsPropertyCollection">
				<signature>System.Configuration.ApplicationSettingsBase.GetPropertiesForProvider(System.Configuration.SettingsProvider):System.Configuration.SettingsPropertyCollection</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetPropertyValue" uniqueID="GetPropertyValue(string):object">
				<signature>System.Configuration.ApplicationSettingsBase.GetPropertyValue(string):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetSerializeAs" uniqueID="GetSerializeAs(System.Type):System.Configuration.SettingsSerializeAs">
				<signature>System.Configuration.ApplicationSettingsBase.GetSerializeAs(System.Type):System.Configuration.SettingsSerializeAs</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="IsFirstRunOfClickOnceApp" uniqueID="IsFirstRunOfClickOnceApp():bool">
				<signature>System.Configuration.ApplicationSettingsBase.IsFirstRunOfClickOnceApp():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="OnPropertyChanged" uniqueID="OnPropertyChanged(object;System.ComponentModel.PropertyChangedEventArgs):void">
				<signature>System.Configuration.ApplicationSettingsBase.OnPropertyChanged(object;System.ComponentModel.PropertyChangedEventArgs):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="OnSettingChanging" uniqueID="OnSettingChanging(object;System.Configuration.SettingChangingEventArgs):void">
				<signature>System.Configuration.ApplicationSettingsBase.OnSettingChanging(object;System.Configuration.SettingChangingEventArgs):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="OnSettingsLoaded" uniqueID="OnSettingsLoaded(object;System.Configuration.SettingsLoadedEventArgs):void">
				<signature>System.Configuration.ApplicationSettingsBase.OnSettingsLoaded(object;System.Configuration.SettingsLoadedEventArgs):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="OnSettingsSaving" uniqueID="OnSettingsSaving(object;System.ComponentModel.CancelEventArgs):void">
				<signature>System.Configuration.ApplicationSettingsBase.OnSettingsSaving(object;System.ComponentModel.CancelEventArgs):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reload" uniqueID="Reload():void">
				<signature>System.Configuration.ApplicationSettingsBase.Reload():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reset" uniqueID="Reset():void">
				<signature>System.Configuration.ApplicationSettingsBase.Reset():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ResetProviders" uniqueID="ResetProviders():void">
				<signature>System.Configuration.ApplicationSettingsBase.ResetProviders():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Save" uniqueID="Save():void">
				<signature>System.Configuration.ApplicationSettingsBase.Save():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SettingsFilter" uniqueID="SettingsFilter(System.Reflection.PropertyInfo[]):System.Reflection.PropertyInfo[]">
				<signature>System.Configuration.ApplicationSettingsBase.SettingsFilter(System.Reflection.PropertyInfo[]):System.Reflection.PropertyInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Upgrade" uniqueID="Upgrade():void">
				<signature>System.Configuration.ApplicationSettingsBase.Upgrade():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="add_PropertyChanged" uniqueID="add_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler):void">
				<signature>System.Configuration.ApplicationSettingsBase.add_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="add_SettingChanging" uniqueID="add_SettingChanging(System.Configuration.SettingChangingEventHandler):void">
				<signature>System.Configuration.ApplicationSettingsBase.add_SettingChanging(System.Configuration.SettingChangingEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="add_SettingsLoaded" uniqueID="add_SettingsLoaded(System.Configuration.SettingsLoadedEventHandler):void">
				<signature>System.Configuration.ApplicationSettingsBase.add_SettingsLoaded(System.Configuration.SettingsLoadedEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="add_SettingsSaving" uniqueID="add_SettingsSaving(System.Configuration.SettingsSavingEventHandler):void">
				<signature>System.Configuration.ApplicationSettingsBase.add_SettingsSaving(System.Configuration.SettingsSavingEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Context" uniqueID="get_Context():System.Configuration.SettingsContext">
				<signature>System.Configuration.ApplicationSettingsBase.get_Context():System.Configuration.SettingsContext</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_Initializer" uniqueID="get_Initializer():System.Configuration.SettingsProperty">
				<signature>System.Configuration.ApplicationSettingsBase.get_Initializer():System.Configuration.SettingsProperty</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(string):object">
				<signature>System.Configuration.ApplicationSettingsBase.get_Item(string):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Properties" uniqueID="get_Properties():System.Configuration.SettingsPropertyCollection">
				<signature>System.Configuration.ApplicationSettingsBase.get_Properties():System.Configuration.SettingsPropertyCollection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PropertyValues" uniqueID="get_PropertyValues():System.Configuration.SettingsPropertyValueCollection">
				<signature>System.Configuration.ApplicationSettingsBase.get_PropertyValues():System.Configuration.SettingsPropertyValueCollection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Providers" uniqueID="get_Providers():System.Configuration.SettingsProviderCollection">
				<signature>System.Configuration.ApplicationSettingsBase.get_Providers():System.Configuration.SettingsProviderCollection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SettingsKey" uniqueID="get_SettingsKey():string">
				<signature>System.Configuration.ApplicationSettingsBase.get_SettingsKey():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="remove_PropertyChanged" uniqueID="remove_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler):void">
				<signature>System.Configuration.ApplicationSettingsBase.remove_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="remove_SettingChanging" uniqueID="remove_SettingChanging(System.Configuration.SettingChangingEventHandler):void">
				<signature>System.Configuration.ApplicationSettingsBase.remove_SettingChanging(System.Configuration.SettingChangingEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="remove_SettingsLoaded" uniqueID="remove_SettingsLoaded(System.Configuration.SettingsLoadedEventHandler):void">
				<signature>System.Configuration.ApplicationSettingsBase.remove_SettingsLoaded(System.Configuration.SettingsLoadedEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="remove_SettingsSaving" uniqueID="remove_SettingsSaving(System.Configuration.SettingsSavingEventHandler):void">
				<signature>System.Configuration.ApplicationSettingsBase.remove_SettingsSaving(System.Configuration.SettingsSavingEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(string;object):void">
				<signature>System.Configuration.ApplicationSettingsBase.set_Item(string;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_SettingsKey" uniqueID="set_SettingsKey(string):void">
				<signature>System.Configuration.ApplicationSettingsBase.set_SettingsKey(string):void</signature>
			</method>
		</class>
		<class name="SettingsContext" uniqueID="System.Configuration.SettingsContext">
			<method accessibility="Public" methodKind="Member" name="SettingsContext" uniqueID="SettingsContext():void">
				<signature>System.Configuration.SettingsContext.SettingsContext():void</signature>
			</method>
		</class>
	</package>
	<package name="System.Configuration.Provider">
		<class name="ProviderBase" uniqueID="System.Configuration.Provider.ProviderBase">
			<method accessibility="Public" methodKind="Member" name="Initialize" uniqueID="Initialize(string;System.Collections.Specialized.NameValueCollection):void">
				<signature>System.Configuration.Provider.ProviderBase.Initialize(string;System.Collections.Specialized.NameValueCollection):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ProviderBase" uniqueID="ProviderBase():void">
				<signature>System.Configuration.Provider.ProviderBase.ProviderBase():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Description" uniqueID="get_Description():string">
				<signature>System.Configuration.Provider.ProviderBase.get_Description():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Configuration.Provider.ProviderBase.get_Name():string</signature>
			</method>
		</class>
		<class name="ProviderCollection" uniqueID="System.Configuration.Provider.ProviderCollection">
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(System.Configuration.Provider.ProviderBase):void">
				<signature>System.Configuration.Provider.ProviderCollection.Add(System.Configuration.Provider.ProviderBase):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Configuration.Provider.ProviderCollection.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Configuration.Provider.ProviderBase[];int):void">
				<signature>System.Configuration.Provider.ProviderCollection.CopyTo(System.Configuration.Provider.ProviderBase[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Configuration.Provider.ProviderCollection.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ProviderCollection" uniqueID="ProviderCollection():void">
				<signature>System.Configuration.Provider.ProviderCollection.ProviderCollection():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(string):void">
				<signature>System.Configuration.Provider.ProviderCollection.Remove(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetReadOnly" uniqueID="SetReadOnly():void">
				<signature>System.Configuration.Provider.ProviderCollection.SetReadOnly():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.CopyTo" uniqueID="System.Collections.ICollection.CopyTo(System.Array;int):void">
				<signature>System.Configuration.Provider.ProviderCollection.System.Collections.ICollection.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Configuration.Provider.ProviderCollection.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSynchronized" uniqueID="get_IsSynchronized():bool">
				<signature>System.Configuration.Provider.ProviderCollection.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(string):System.Configuration.Provider.ProviderBase">
				<signature>System.Configuration.Provider.ProviderCollection.get_Item(string):System.Configuration.Provider.ProviderBase</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SyncRoot" uniqueID="get_SyncRoot():object">
				<signature>System.Configuration.Provider.ProviderCollection.get_SyncRoot():object</signature>
			</method>
		</class>
	</package>
	<package name="System.Deployment.Internal.Isolation.Manifest">
		<class name="AssemblyReferenceEntry" uniqueID="System.Deployment.Internal.Isolation.Manifest.AssemblyReferenceEntry">
			<method accessibility="Public" methodKind="Member" name="AssemblyReferenceEntry" uniqueID="AssemblyReferenceEntry():void">
				<signature>System.Deployment.Internal.Isolation.Manifest.AssemblyReferenceEntry.AssemblyReferenceEntry():void</signature>
			</method>
		</class>
		<class name="IAssemblyReferenceDependentAssemblyEntry" uniqueID="System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceDependentAssemblyEntry">
			<method accessibility="Public" methodKind="Member" name="get_AllData" uniqueID="get_AllData():System.Deployment.Internal.Isolation.Manifest.AssemblyReferenceDependentAssemblyEntry">
				<signature>System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceDependentAssemblyEntry.get_AllData():System.Deployment.Internal.Isolation.Manifest.AssemblyReferenceDependentAssemblyEntry</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Codebase" uniqueID="get_Codebase():string">
				<signature>System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceDependentAssemblyEntry.get_Codebase():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Description" uniqueID="get_Description():string">
				<signature>System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceDependentAssemblyEntry.get_Description():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Flags" uniqueID="get_Flags():unsigned int">
				<signature>System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceDependentAssemblyEntry.get_Flags():unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Group" uniqueID="get_Group():string">
				<signature>System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceDependentAssemblyEntry.get_Group():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_HashAlgorithm" uniqueID="get_HashAlgorithm():unsigned int">
				<signature>System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceDependentAssemblyEntry.get_HashAlgorithm():unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_HashElements" uniqueID="get_HashElements():System.Deployment.Internal.Isolation.ISection">
				<signature>System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceDependentAssemblyEntry.get_HashElements():System.Deployment.Internal.Isolation.ISection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_HashValue" uniqueID="get_HashValue():object">
				<signature>System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceDependentAssemblyEntry.get_HashValue():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ResourceFallbackCulture" uniqueID="get_ResourceFallbackCulture():string">
				<signature>System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceDependentAssemblyEntry.get_ResourceFallbackCulture():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Size" uniqueID="get_Size():unsigned long">
				<signature>System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceDependentAssemblyEntry.get_Size():unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SupportUrl" uniqueID="get_SupportUrl():string">
				<signature>System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceDependentAssemblyEntry.get_SupportUrl():string</signature>
			</method>
		</class>
		<class name="ICMS" uniqueID="System.Deployment.Internal.Isolation.Manifest.ICMS">
			<method accessibility="Public" methodKind="Member" name="get_AssemblyReferenceSection" uniqueID="get_AssemblyReferenceSection():System.Deployment.Internal.Isolation.ISection">
				<signature>System.Deployment.Internal.Isolation.Manifest.ICMS.get_AssemblyReferenceSection():System.Deployment.Internal.Isolation.ISection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AssemblyRequestSection" uniqueID="get_AssemblyRequestSection():System.Deployment.Internal.Isolation.ISection">
				<signature>System.Deployment.Internal.Isolation.Manifest.ICMS.get_AssemblyRequestSection():System.Deployment.Internal.Isolation.ISection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CLRSurrogateSection" uniqueID="get_CLRSurrogateSection():System.Deployment.Internal.Isolation.ISection">
				<signature>System.Deployment.Internal.Isolation.Manifest.ICMS.get_CLRSurrogateSection():System.Deployment.Internal.Isolation.ISection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_COMRedirectionSection" uniqueID="get_COMRedirectionSection():System.Deployment.Internal.Isolation.ISection">
				<signature>System.Deployment.Internal.Isolation.Manifest.ICMS.get_COMRedirectionSection():System.Deployment.Internal.Isolation.ISection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CategoryMembershipSection" uniqueID="get_CategoryMembershipSection():System.Deployment.Internal.Isolation.ISection">
				<signature>System.Deployment.Internal.Isolation.Manifest.ICMS.get_CategoryMembershipSection():System.Deployment.Internal.Isolation.ISection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CounterSection" uniqueID="get_CounterSection():System.Deployment.Internal.Isolation.ISection">
				<signature>System.Deployment.Internal.Isolation.Manifest.ICMS.get_CounterSection():System.Deployment.Internal.Isolation.ISection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CounterSetSection" uniqueID="get_CounterSetSection():System.Deployment.Internal.Isolation.ISection">
				<signature>System.Deployment.Internal.Isolation.Manifest.ICMS.get_CounterSetSection():System.Deployment.Internal.Isolation.ISection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DirectorySection" uniqueID="get_DirectorySection():System.Deployment.Internal.Isolation.ISection">
				<signature>System.Deployment.Internal.Isolation.Manifest.ICMS.get_DirectorySection():System.Deployment.Internal.Isolation.ISection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_EntryPointSection" uniqueID="get_EntryPointSection():System.Deployment.Internal.Isolation.ISection">
				<signature>System.Deployment.Internal.Isolation.Manifest.ICMS.get_EntryPointSection():System.Deployment.Internal.Isolation.ISection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_EventMapSection" uniqueID="get_EventMapSection():System.Deployment.Internal.Isolation.ISection">
				<signature>System.Deployment.Internal.Isolation.Manifest.ICMS.get_EventMapSection():System.Deployment.Internal.Isolation.ISection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_EventSection" uniqueID="get_EventSection():System.Deployment.Internal.Isolation.ISection">
				<signature>System.Deployment.Internal.Isolation.Manifest.ICMS.get_EventSection():System.Deployment.Internal.Isolation.ISection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_EventTagSection" uniqueID="get_EventTagSection():System.Deployment.Internal.Isolation.ISection">
				<signature>System.Deployment.Internal.Isolation.Manifest.ICMS.get_EventTagSection():System.Deployment.Internal.Isolation.ISection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FileAssociationSection" uniqueID="get_FileAssociationSection():System.Deployment.Internal.Isolation.ISection">
				<signature>System.Deployment.Internal.Isolation.Manifest.ICMS.get_FileAssociationSection():System.Deployment.Internal.Isolation.ISection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FileSection" uniqueID="get_FileSection():System.Deployment.Internal.Isolation.ISection">
				<signature>System.Deployment.Internal.Isolation.Manifest.ICMS.get_FileSection():System.Deployment.Internal.Isolation.ISection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Identity" uniqueID="get_Identity():System.Deployment.Internal.Isolation.IDefinitionIdentity">
				<signature>System.Deployment.Internal.Isolation.Manifest.ICMS.get_Identity():System.Deployment.Internal.Isolation.IDefinitionIdentity</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MetadataSectionEntry" uniqueID="get_MetadataSectionEntry():System.Deployment.Internal.Isolation.ISectionEntry">
				<signature>System.Deployment.Internal.Isolation.Manifest.ICMS.get_MetadataSectionEntry():System.Deployment.Internal.Isolation.ISectionEntry</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PermissionSetSection" uniqueID="get_PermissionSetSection():System.Deployment.Internal.Isolation.ISection">
				<signature>System.Deployment.Internal.Isolation.Manifest.ICMS.get_PermissionSetSection():System.Deployment.Internal.Isolation.ISection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ProgIdRedirectionSection" uniqueID="get_ProgIdRedirectionSection():System.Deployment.Internal.Isolation.ISection">
				<signature>System.Deployment.Internal.Isolation.Manifest.ICMS.get_ProgIdRedirectionSection():System.Deployment.Internal.Isolation.ISection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_RegistryKeySection" uniqueID="get_RegistryKeySection():System.Deployment.Internal.Isolation.ISection">
				<signature>System.Deployment.Internal.Isolation.Manifest.ICMS.get_RegistryKeySection():System.Deployment.Internal.Isolation.ISection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_StringSection" uniqueID="get_StringSection():System.Deployment.Internal.Isolation.ISection">
				<signature>System.Deployment.Internal.Isolation.Manifest.ICMS.get_StringSection():System.Deployment.Internal.Isolation.ISection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_WindowClassSection" uniqueID="get_WindowClassSection():System.Deployment.Internal.Isolation.ISection">
				<signature>System.Deployment.Internal.Isolation.Manifest.ICMS.get_WindowClassSection():System.Deployment.Internal.Isolation.ISection</signature>
			</method>
		</class>
		<class name="AssemblyReferenceDependentAssemblyEntry" uniqueID="System.Deployment.Internal.Isolation.Manifest.AssemblyReferenceDependentAssemblyEntry">
			<method accessibility="Public" methodKind="Member" name="AssemblyReferenceDependentAssemblyEntry" uniqueID="AssemblyReferenceDependentAssemblyEntry():void">
				<signature>System.Deployment.Internal.Isolation.Manifest.AssemblyReferenceDependentAssemblyEntry.AssemblyReferenceDependentAssemblyEntry():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Dispose" uniqueID="Dispose(bool):void">
				<signature>System.Deployment.Internal.Isolation.Manifest.AssemblyReferenceDependentAssemblyEntry.Dispose(bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Finalize" uniqueID="Finalize():void">
				<signature>System.Deployment.Internal.Isolation.Manifest.AssemblyReferenceDependentAssemblyEntry.Finalize():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IDisposable.Dispose" uniqueID="System.IDisposable.Dispose():void">
				<signature>System.Deployment.Internal.Isolation.Manifest.AssemblyReferenceDependentAssemblyEntry.System.IDisposable.Dispose():void</signature>
			</method>
		</class>
		<class name="IAssemblyReferenceEntry" uniqueID="System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceEntry">
			<method accessibility="Public" methodKind="Member" name="get_AllData" uniqueID="get_AllData():System.Deployment.Internal.Isolation.Manifest.AssemblyReferenceEntry">
				<signature>System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceEntry.get_AllData():System.Deployment.Internal.Isolation.Manifest.AssemblyReferenceEntry</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DependentAssembly" uniqueID="get_DependentAssembly():System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceDependentAssemblyEntry">
				<signature>System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceEntry.get_DependentAssembly():System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceDependentAssemblyEntry</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Flags" uniqueID="get_Flags():unsigned int">
				<signature>System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceEntry.get_Flags():unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReferenceIdentity" uniqueID="get_ReferenceIdentity():System.Deployment.Internal.Isolation.IReferenceIdentity">
				<signature>System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceEntry.get_ReferenceIdentity():System.Deployment.Internal.Isolation.IReferenceIdentity</signature>
			</method>
		</class>
	</package>
	<package name="System.Runtime.Serialization">
		<class name="IDeserializationCallback" uniqueID="System.Runtime.Serialization.IDeserializationCallback">
			<method accessibility="Public" methodKind="Member" name="OnDeserialization" uniqueID="OnDeserialization(object):void">
				<signature>System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object):void</signature>
			</method>
		</class>
		<class name="IFormatterConverter" uniqueID="System.Runtime.Serialization.IFormatterConverter">
			<method accessibility="Public" methodKind="Member" name="Convert" uniqueID="Convert(object;System.Type):object">
				<signature>System.Runtime.Serialization.IFormatterConverter.Convert(object;System.Type):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Convert" uniqueID="Convert(object;System.TypeCode):object">
				<signature>System.Runtime.Serialization.IFormatterConverter.Convert(object;System.TypeCode):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToBoolean" uniqueID="ToBoolean(object):bool">
				<signature>System.Runtime.Serialization.IFormatterConverter.ToBoolean(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToByte" uniqueID="ToByte(object):byte">
				<signature>System.Runtime.Serialization.IFormatterConverter.ToByte(object):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToChar" uniqueID="ToChar(object):char">
				<signature>System.Runtime.Serialization.IFormatterConverter.ToChar(object):char</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToDateTime" uniqueID="ToDateTime(object):System.DateTime">
				<signature>System.Runtime.Serialization.IFormatterConverter.ToDateTime(object):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToDecimal" uniqueID="ToDecimal(object):System.Decimal">
				<signature>System.Runtime.Serialization.IFormatterConverter.ToDecimal(object):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToDouble" uniqueID="ToDouble(object):double">
				<signature>System.Runtime.Serialization.IFormatterConverter.ToDouble(object):double</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToInt16" uniqueID="ToInt16(object):short">
				<signature>System.Runtime.Serialization.IFormatterConverter.ToInt16(object):short</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToInt32" uniqueID="ToInt32(object):int">
				<signature>System.Runtime.Serialization.IFormatterConverter.ToInt32(object):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToInt64" uniqueID="ToInt64(object):long">
				<signature>System.Runtime.Serialization.IFormatterConverter.ToInt64(object):long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToSByte" uniqueID="ToSByte(object):sbyte">
				<signature>System.Runtime.Serialization.IFormatterConverter.ToSByte(object):sbyte</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToSingle" uniqueID="ToSingle(object):float">
				<signature>System.Runtime.Serialization.IFormatterConverter.ToSingle(object):float</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString(object):string">
				<signature>System.Runtime.Serialization.IFormatterConverter.ToString(object):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToUInt16" uniqueID="ToUInt16(object):unsigned short">
				<signature>System.Runtime.Serialization.IFormatterConverter.ToUInt16(object):unsigned short</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToUInt32" uniqueID="ToUInt32(object):unsigned int">
				<signature>System.Runtime.Serialization.IFormatterConverter.ToUInt32(object):unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToUInt64" uniqueID="ToUInt64(object):unsigned long">
				<signature>System.Runtime.Serialization.IFormatterConverter.ToUInt64(object):unsigned long</signature>
			</method>
		</class>
		<class name="IObjectReference" uniqueID="System.Runtime.Serialization.IObjectReference">
			<method accessibility="Public" methodKind="Member" name="GetRealObject" uniqueID="GetRealObject(System.Runtime.Serialization.StreamingContext):object">
				<signature>System.Runtime.Serialization.IObjectReference.GetRealObject(System.Runtime.Serialization.StreamingContext):object</signature>
			</method>
		</class>
		<class name="ISerializationSurrogate" uniqueID="System.Runtime.Serialization.ISerializationSurrogate">
			<method accessibility="Public" methodKind="Member" name="GetObjectData" uniqueID="GetObjectData(object;System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Runtime.Serialization.ISerializationSurrogate.GetObjectData(object;System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetObjectData" uniqueID="SetObjectData(object;System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext;System.Runtime.Serialization.ISurrogateSelector):object">
				<signature>System.Runtime.Serialization.ISerializationSurrogate.SetObjectData(object;System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext;System.Runtime.Serialization.ISurrogateSelector):object</signature>
			</method>
		</class>
		<class name="ISerializable" uniqueID="System.Runtime.Serialization.ISerializable">
			<method accessibility="Public" methodKind="Member" name="GetObjectData" uniqueID="GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
		</class>
		<class name="ISurrogateSelector" uniqueID="System.Runtime.Serialization.ISurrogateSelector">
			<method accessibility="Public" methodKind="Member" name="ChainSelector" uniqueID="ChainSelector(System.Runtime.Serialization.ISurrogateSelector):void">
				<signature>System.Runtime.Serialization.ISurrogateSelector.ChainSelector(System.Runtime.Serialization.ISurrogateSelector):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetNextSelector" uniqueID="GetNextSelector():System.Runtime.Serialization.ISurrogateSelector">
				<signature>System.Runtime.Serialization.ISurrogateSelector.GetNextSelector():System.Runtime.Serialization.ISurrogateSelector</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSurrogate" uniqueID="GetSurrogate(System.Type;System.Runtime.Serialization.StreamingContext;System.Runtime.Serialization.ISurrogateSelector):System.Runtime.Serialization.ISerializationSurrogate">
				<signature>System.Runtime.Serialization.ISurrogateSelector.GetSurrogate(System.Type;System.Runtime.Serialization.StreamingContext;System.Runtime.Serialization.ISurrogateSelector):System.Runtime.Serialization.ISerializationSurrogate</signature>
			</method>
		</class>
		<class name="SerializationEntry" uniqueID="System.Runtime.Serialization.SerializationEntry">
			<method accessibility="Protected" methodKind="Member" name="SerializationEntry" uniqueID="SerializationEntry(string;object;System.Type):void">
				<signature>System.Runtime.Serialization.SerializationEntry.SerializationEntry(string;object;System.Type):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Runtime.Serialization.SerializationEntry.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ObjectType" uniqueID="get_ObjectType():System.Type">
				<signature>System.Runtime.Serialization.SerializationEntry.get_ObjectType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Value" uniqueID="get_Value():object">
				<signature>System.Runtime.Serialization.SerializationEntry.get_Value():object</signature>
			</method>
		</class>
		<class name="SerializationInfo" uniqueID="System.Runtime.Serialization.SerializationInfo">
			<method accessibility="Public" methodKind="Member" name="AddValue" uniqueID="AddValue(string;System.DateTime):void">
				<signature>System.Runtime.Serialization.SerializationInfo.AddValue(string;System.DateTime):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddValue" uniqueID="AddValue(string;System.Decimal):void">
				<signature>System.Runtime.Serialization.SerializationInfo.AddValue(string;System.Decimal):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddValue" uniqueID="AddValue(string;bool):void">
				<signature>System.Runtime.Serialization.SerializationInfo.AddValue(string;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddValue" uniqueID="AddValue(string;byte):void">
				<signature>System.Runtime.Serialization.SerializationInfo.AddValue(string;byte):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddValue" uniqueID="AddValue(string;char):void">
				<signature>System.Runtime.Serialization.SerializationInfo.AddValue(string;char):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddValue" uniqueID="AddValue(string;double):void">
				<signature>System.Runtime.Serialization.SerializationInfo.AddValue(string;double):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddValue" uniqueID="AddValue(string;float):void">
				<signature>System.Runtime.Serialization.SerializationInfo.AddValue(string;float):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddValue" uniqueID="AddValue(string;int):void">
				<signature>System.Runtime.Serialization.SerializationInfo.AddValue(string;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddValue" uniqueID="AddValue(string;long):void">
				<signature>System.Runtime.Serialization.SerializationInfo.AddValue(string;long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddValue" uniqueID="AddValue(string;object):void">
				<signature>System.Runtime.Serialization.SerializationInfo.AddValue(string;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddValue" uniqueID="AddValue(string;object;System.Type):void">
				<signature>System.Runtime.Serialization.SerializationInfo.AddValue(string;object;System.Type):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AddValue" uniqueID="AddValue(string;object;System.Type;int):void">
				<signature>System.Runtime.Serialization.SerializationInfo.AddValue(string;object;System.Type;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddValue" uniqueID="AddValue(string;sbyte):void">
				<signature>System.Runtime.Serialization.SerializationInfo.AddValue(string;sbyte):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddValue" uniqueID="AddValue(string;short):void">
				<signature>System.Runtime.Serialization.SerializationInfo.AddValue(string;short):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddValue" uniqueID="AddValue(string;unsigned int):void">
				<signature>System.Runtime.Serialization.SerializationInfo.AddValue(string;unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddValue" uniqueID="AddValue(string;unsigned long):void">
				<signature>System.Runtime.Serialization.SerializationInfo.AddValue(string;unsigned long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddValue" uniqueID="AddValue(string;unsigned short):void">
				<signature>System.Runtime.Serialization.SerializationInfo.AddValue(string;unsigned short):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ExpandArrays" uniqueID="ExpandArrays():void">
				<signature>System.Runtime.Serialization.SerializationInfo.ExpandArrays():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="FindElement" uniqueID="FindElement(string):int">
				<signature>System.Runtime.Serialization.SerializationInfo.FindElement(string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetBoolean" uniqueID="GetBoolean(string):bool">
				<signature>System.Runtime.Serialization.SerializationInfo.GetBoolean(string):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetByte" uniqueID="GetByte(string):byte">
				<signature>System.Runtime.Serialization.SerializationInfo.GetByte(string):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetChar" uniqueID="GetChar(string):char">
				<signature>System.Runtime.Serialization.SerializationInfo.GetChar(string):char</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetDateTime" uniqueID="GetDateTime(string):System.DateTime">
				<signature>System.Runtime.Serialization.SerializationInfo.GetDateTime(string):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetDecimal" uniqueID="GetDecimal(string):System.Decimal">
				<signature>System.Runtime.Serialization.SerializationInfo.GetDecimal(string):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetDouble" uniqueID="GetDouble(string):double">
				<signature>System.Runtime.Serialization.SerializationInfo.GetDouble(string):double</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetElement" uniqueID="GetElement(string;System.Type):object">
				<signature>System.Runtime.Serialization.SerializationInfo.GetElement(string;System.Type):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetElementNoThrow" uniqueID="GetElementNoThrow(string;System.Type):object">
				<signature>System.Runtime.Serialization.SerializationInfo.GetElementNoThrow(string;System.Type):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Runtime.Serialization.SerializationInfoEnumerator">
				<signature>System.Runtime.Serialization.SerializationInfo.GetEnumerator():System.Runtime.Serialization.SerializationInfoEnumerator</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetInt16" uniqueID="GetInt16(string):short">
				<signature>System.Runtime.Serialization.SerializationInfo.GetInt16(string):short</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetInt32" uniqueID="GetInt32(string):int">
				<signature>System.Runtime.Serialization.SerializationInfo.GetInt32(string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetInt64" uniqueID="GetInt64(string):long">
				<signature>System.Runtime.Serialization.SerializationInfo.GetInt64(string):long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSByte" uniqueID="GetSByte(string):sbyte">
				<signature>System.Runtime.Serialization.SerializationInfo.GetSByte(string):sbyte</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSingle" uniqueID="GetSingle(string):float">
				<signature>System.Runtime.Serialization.SerializationInfo.GetSingle(string):float</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetString" uniqueID="GetString(string):string">
				<signature>System.Runtime.Serialization.SerializationInfo.GetString(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetUInt16" uniqueID="GetUInt16(string):unsigned short">
				<signature>System.Runtime.Serialization.SerializationInfo.GetUInt16(string):unsigned short</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetUInt32" uniqueID="GetUInt32(string):unsigned int">
				<signature>System.Runtime.Serialization.SerializationInfo.GetUInt32(string):unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetUInt64" uniqueID="GetUInt64(string):unsigned long">
				<signature>System.Runtime.Serialization.SerializationInfo.GetUInt64(string):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValue" uniqueID="GetValue(string;System.Type):object">
				<signature>System.Runtime.Serialization.SerializationInfo.GetValue(string;System.Type):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetValueNoThrow" uniqueID="GetValueNoThrow(string;System.Type):object">
				<signature>System.Runtime.Serialization.SerializationInfo.GetValueNoThrow(string;System.Type):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SerializationInfo" uniqueID="SerializationInfo(System.Type;System.Runtime.Serialization.IFormatterConverter):void">
				<signature>System.Runtime.Serialization.SerializationInfo.SerializationInfo(System.Type;System.Runtime.Serialization.IFormatterConverter):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetType" uniqueID="SetType(System.Type):void">
				<signature>System.Runtime.Serialization.SerializationInfo.SetType(System.Type):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="UpdateValue" uniqueID="UpdateValue(string;object;System.Type):void">
				<signature>System.Runtime.Serialization.SerializationInfo.UpdateValue(string;object;System.Type):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AssemblyName" uniqueID="get_AssemblyName():string">
				<signature>System.Runtime.Serialization.SerializationInfo.get_AssemblyName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FullTypeName" uniqueID="get_FullTypeName():string">
				<signature>System.Runtime.Serialization.SerializationInfo.get_FullTypeName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MemberCount" uniqueID="get_MemberCount():int">
				<signature>System.Runtime.Serialization.SerializationInfo.get_MemberCount():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_MemberNames" uniqueID="get_MemberNames():string[]">
				<signature>System.Runtime.Serialization.SerializationInfo.get_MemberNames():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_MemberValues" uniqueID="get_MemberValues():object[]">
				<signature>System.Runtime.Serialization.SerializationInfo.get_MemberValues():object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_AssemblyName" uniqueID="set_AssemblyName(string):void">
				<signature>System.Runtime.Serialization.SerializationInfo.set_AssemblyName(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_FullTypeName" uniqueID="set_FullTypeName(string):void">
				<signature>System.Runtime.Serialization.SerializationInfo.set_FullTypeName(string):void</signature>
			</method>
		</class>
		<class name="SerializationInfoEnumerator" uniqueID="System.Runtime.Serialization.SerializationInfoEnumerator">
			<method accessibility="Public" methodKind="Member" name="MoveNext" uniqueID="MoveNext():bool">
				<signature>System.Runtime.Serialization.SerializationInfoEnumerator.MoveNext():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reset" uniqueID="Reset():void">
				<signature>System.Runtime.Serialization.SerializationInfoEnumerator.Reset():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SerializationInfoEnumerator" uniqueID="SerializationInfoEnumerator(string[];object[];System.Type[];int):void">
				<signature>System.Runtime.Serialization.SerializationInfoEnumerator.SerializationInfoEnumerator(string[];object[];System.Type[];int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerator.get_Current" uniqueID="System.Collections.IEnumerator.get_Current():object">
				<signature>System.Runtime.Serialization.SerializationInfoEnumerator.System.Collections.IEnumerator.get_Current():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Current" uniqueID="get_Current():System.Runtime.Serialization.SerializationEntry">
				<signature>System.Runtime.Serialization.SerializationInfoEnumerator.get_Current():System.Runtime.Serialization.SerializationEntry</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Runtime.Serialization.SerializationInfoEnumerator.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ObjectType" uniqueID="get_ObjectType():System.Type">
				<signature>System.Runtime.Serialization.SerializationInfoEnumerator.get_ObjectType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Value" uniqueID="get_Value():object">
				<signature>System.Runtime.Serialization.SerializationInfoEnumerator.get_Value():object</signature>
			</method>
		</class>
		<class name="StreamingContext" uniqueID="System.Runtime.Serialization.StreamingContext">
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Runtime.Serialization.StreamingContext.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Runtime.Serialization.StreamingContext.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StreamingContext" uniqueID="StreamingContext(System.Runtime.Serialization.StreamingContextStates):void">
				<signature>System.Runtime.Serialization.StreamingContext.StreamingContext(System.Runtime.Serialization.StreamingContextStates):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StreamingContext" uniqueID="StreamingContext(System.Runtime.Serialization.StreamingContextStates;object):void">
				<signature>System.Runtime.Serialization.StreamingContext.StreamingContext(System.Runtime.Serialization.StreamingContextStates;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Context" uniqueID="get_Context():object">
				<signature>System.Runtime.Serialization.StreamingContext.get_Context():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_State" uniqueID="get_State():System.Runtime.Serialization.StreamingContextStates">
				<signature>System.Runtime.Serialization.StreamingContext.get_State():System.Runtime.Serialization.StreamingContextStates</signature>
			</method>
		</class>
		<class name="IFormatter" uniqueID="System.Runtime.Serialization.IFormatter">
			<method accessibility="Public" methodKind="Member" name="Deserialize" uniqueID="Deserialize(System.IO.Stream):object">
				<signature>System.Runtime.Serialization.IFormatter.Deserialize(System.IO.Stream):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Serialize" uniqueID="Serialize(System.IO.Stream;object):void">
				<signature>System.Runtime.Serialization.IFormatter.Serialize(System.IO.Stream;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Binder" uniqueID="get_Binder():System.Runtime.Serialization.SerializationBinder">
				<signature>System.Runtime.Serialization.IFormatter.get_Binder():System.Runtime.Serialization.SerializationBinder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Context" uniqueID="get_Context():System.Runtime.Serialization.StreamingContext">
				<signature>System.Runtime.Serialization.IFormatter.get_Context():System.Runtime.Serialization.StreamingContext</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SurrogateSelector" uniqueID="get_SurrogateSelector():System.Runtime.Serialization.ISurrogateSelector">
				<signature>System.Runtime.Serialization.IFormatter.get_SurrogateSelector():System.Runtime.Serialization.ISurrogateSelector</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Binder" uniqueID="set_Binder(System.Runtime.Serialization.SerializationBinder):void">
				<signature>System.Runtime.Serialization.IFormatter.set_Binder(System.Runtime.Serialization.SerializationBinder):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Context" uniqueID="set_Context(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Runtime.Serialization.IFormatter.set_Context(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_SurrogateSelector" uniqueID="set_SurrogateSelector(System.Runtime.Serialization.ISurrogateSelector):void">
				<signature>System.Runtime.Serialization.IFormatter.set_SurrogateSelector(System.Runtime.Serialization.ISurrogateSelector):void</signature>
			</method>
		</class>
		<class name="SerializationBinder" uniqueID="System.Runtime.Serialization.SerializationBinder">
			<method accessibility="Public" methodKind="Member" name="BindToType" uniqueID="BindToType(string;string):System.Type">
				<signature>System.Runtime.Serialization.SerializationBinder.BindToType(string;string):System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SerializationBinder" uniqueID="SerializationBinder():void">
				<signature>System.Runtime.Serialization.SerializationBinder.SerializationBinder():void</signature>
			</method>
		</class>
	</package>
	<package name="System.Security.Permissions">
		<class name="IBuiltInPermission" uniqueID="System.Security.Permissions.IBuiltInPermission">
			<method accessibility="Public" methodKind="Member" name="GetTokenIndex" uniqueID="GetTokenIndex():int">
				<signature>System.Security.Permissions.IBuiltInPermission.GetTokenIndex():int</signature>
			</method>
		</class>
		<class name="StrongNamePublicKeyBlob" uniqueID="System.Security.Permissions.StrongNamePublicKeyBlob">
			<method accessibility="Private" methodKind="Static" name="CompareArrays" uniqueID="CompareArrays(byte[];byte[]):bool">
				<signature>System.Security.Permissions.StrongNamePublicKeyBlob.CompareArrays(byte[];byte[]):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetByteArrayHashCode" uniqueID="GetByteArrayHashCode(byte[]):int">
				<signature>System.Security.Permissions.StrongNamePublicKeyBlob.GetByteArrayHashCode(byte[]):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Equals" uniqueID="Equals(System.Security.Permissions.StrongNamePublicKeyBlob):bool">
				<signature>System.Security.Permissions.StrongNamePublicKeyBlob.Equals(System.Security.Permissions.StrongNamePublicKeyBlob):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Security.Permissions.StrongNamePublicKeyBlob.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Security.Permissions.StrongNamePublicKeyBlob.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="StrongNamePublicKeyBlob" uniqueID="StrongNamePublicKeyBlob():void">
				<signature>System.Security.Permissions.StrongNamePublicKeyBlob.StrongNamePublicKeyBlob():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StrongNamePublicKeyBlob" uniqueID="StrongNamePublicKeyBlob(byte[]):void">
				<signature>System.Security.Permissions.StrongNamePublicKeyBlob.StrongNamePublicKeyBlob(byte[]):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="StrongNamePublicKeyBlob" uniqueID="StrongNamePublicKeyBlob(string):void">
				<signature>System.Security.Permissions.StrongNamePublicKeyBlob.StrongNamePublicKeyBlob(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Security.Permissions.StrongNamePublicKeyBlob.ToString():string</signature>
			</method>
		</class>
		<class name="UrlIdentityPermission" uniqueID="System.Security.Permissions.UrlIdentityPermission">
			<method accessibility="Protected" methodKind="Static" name="GetTokenIndex" uniqueID="GetTokenIndex():int">
				<signature>System.Security.Permissions.UrlIdentityPermission.GetTokenIndex():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Copy" uniqueID="Copy():System.Security.IPermission">
				<signature>System.Security.Permissions.UrlIdentityPermission.Copy():System.Security.IPermission</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FromXml" uniqueID="FromXml(System.Security.SecurityElement):void">
				<signature>System.Security.Permissions.UrlIdentityPermission.FromXml(System.Security.SecurityElement):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Intersect" uniqueID="Intersect(System.Security.IPermission):System.Security.IPermission">
				<signature>System.Security.Permissions.UrlIdentityPermission.Intersect(System.Security.IPermission):System.Security.IPermission</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsSubsetOf" uniqueID="IsSubsetOf(System.Security.IPermission):bool">
				<signature>System.Security.Permissions.UrlIdentityPermission.IsSubsetOf(System.Security.IPermission):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnDeserialized" uniqueID="OnDeserialized(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Security.Permissions.UrlIdentityPermission.OnDeserialized(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnSerialized" uniqueID="OnSerialized(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Security.Permissions.UrlIdentityPermission.OnSerialized(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnSerializing" uniqueID="OnSerializing(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Security.Permissions.UrlIdentityPermission.OnSerializing(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Security.Permissions.IBuiltInPermission.GetTokenIndex" uniqueID="System.Security.Permissions.IBuiltInPermission.GetTokenIndex():int">
				<signature>System.Security.Permissions.UrlIdentityPermission.System.Security.Permissions.IBuiltInPermission.GetTokenIndex():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToXml" uniqueID="ToXml():System.Security.SecurityElement">
				<signature>System.Security.Permissions.UrlIdentityPermission.ToXml():System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Union" uniqueID="Union(System.Security.IPermission):System.Security.IPermission">
				<signature>System.Security.Permissions.UrlIdentityPermission.Union(System.Security.IPermission):System.Security.IPermission</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="UrlIdentityPermission" uniqueID="UrlIdentityPermission(System.Security.Permissions.PermissionState):void">
				<signature>System.Security.Permissions.UrlIdentityPermission.UrlIdentityPermission(System.Security.Permissions.PermissionState):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="UrlIdentityPermission" uniqueID="UrlIdentityPermission(System.Security.Util.URLString):void">
				<signature>System.Security.Permissions.UrlIdentityPermission.UrlIdentityPermission(System.Security.Util.URLString):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="UrlIdentityPermission" uniqueID="UrlIdentityPermission(string):void">
				<signature>System.Security.Permissions.UrlIdentityPermission.UrlIdentityPermission(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Url" uniqueID="get_Url():string">
				<signature>System.Security.Permissions.UrlIdentityPermission.get_Url():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Url" uniqueID="set_Url(string):void">
				<signature>System.Security.Permissions.UrlIdentityPermission.set_Url(string):void</signature>
			</method>
		</class>
		<class name="ZoneIdentityPermission" uniqueID="System.Security.Permissions.ZoneIdentityPermission">
			<method accessibility="Protected" methodKind="Static" name="GetTokenIndex" uniqueID="GetTokenIndex():int">
				<signature>System.Security.Permissions.ZoneIdentityPermission.GetTokenIndex():int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="VerifyZone" uniqueID="VerifyZone(System.Security.SecurityZone):void">
				<signature>System.Security.Permissions.ZoneIdentityPermission.VerifyZone(System.Security.SecurityZone):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Copy" uniqueID="Copy():System.Security.IPermission">
				<signature>System.Security.Permissions.ZoneIdentityPermission.Copy():System.Security.IPermission</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FromXml" uniqueID="FromXml(System.Security.SecurityElement):void">
				<signature>System.Security.Permissions.ZoneIdentityPermission.FromXml(System.Security.SecurityElement):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Intersect" uniqueID="Intersect(System.Security.IPermission):System.Security.IPermission">
				<signature>System.Security.Permissions.ZoneIdentityPermission.Intersect(System.Security.IPermission):System.Security.IPermission</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsSubsetOf" uniqueID="IsSubsetOf(System.Security.IPermission):bool">
				<signature>System.Security.Permissions.ZoneIdentityPermission.IsSubsetOf(System.Security.IPermission):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnDeserialized" uniqueID="OnDeserialized(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Security.Permissions.ZoneIdentityPermission.OnDeserialized(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnSerialized" uniqueID="OnSerialized(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Security.Permissions.ZoneIdentityPermission.OnSerialized(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnSerializing" uniqueID="OnSerializing(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Security.Permissions.ZoneIdentityPermission.OnSerializing(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Security.Permissions.IBuiltInPermission.GetTokenIndex" uniqueID="System.Security.Permissions.IBuiltInPermission.GetTokenIndex():int">
				<signature>System.Security.Permissions.ZoneIdentityPermission.System.Security.Permissions.IBuiltInPermission.GetTokenIndex():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToXml" uniqueID="ToXml():System.Security.SecurityElement">
				<signature>System.Security.Permissions.ZoneIdentityPermission.ToXml():System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Union" uniqueID="Union(System.Security.IPermission):System.Security.IPermission">
				<signature>System.Security.Permissions.ZoneIdentityPermission.Union(System.Security.IPermission):System.Security.IPermission</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ZoneIdentityPermission" uniqueID="ZoneIdentityPermission(System.Security.Permissions.PermissionState):void">
				<signature>System.Security.Permissions.ZoneIdentityPermission.ZoneIdentityPermission(System.Security.Permissions.PermissionState):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ZoneIdentityPermission" uniqueID="ZoneIdentityPermission(System.Security.SecurityZone):void">
				<signature>System.Security.Permissions.ZoneIdentityPermission.ZoneIdentityPermission(System.Security.SecurityZone):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ZoneIdentityPermission" uniqueID="ZoneIdentityPermission(unsigned int):void">
				<signature>System.Security.Permissions.ZoneIdentityPermission.ZoneIdentityPermission(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SecurityZone" uniqueID="get_SecurityZone():System.Security.SecurityZone">
				<signature>System.Security.Permissions.ZoneIdentityPermission.get_SecurityZone():System.Security.SecurityZone</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_SecurityZone" uniqueID="set_SecurityZone(System.Security.SecurityZone):void">
				<signature>System.Security.Permissions.ZoneIdentityPermission.set_SecurityZone(System.Security.SecurityZone):void</signature>
			</method>
		</class>
	</package>
	<package name="System.Resources">
		<class name="IResourceWriter" uniqueID="System.Resources.IResourceWriter">
			<method accessibility="Public" methodKind="Member" name="AddResource" uniqueID="AddResource(string;byte[]):void">
				<signature>System.Resources.IResourceWriter.AddResource(string;byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddResource" uniqueID="AddResource(string;object):void">
				<signature>System.Resources.IResourceWriter.AddResource(string;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddResource" uniqueID="AddResource(string;string):void">
				<signature>System.Resources.IResourceWriter.AddResource(string;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Close" uniqueID="Close():void">
				<signature>System.Resources.IResourceWriter.Close():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Generate" uniqueID="Generate():void">
				<signature>System.Resources.IResourceWriter.Generate():void</signature>
			</method>
		</class>
		<class name="ResourceWriter" uniqueID="System.Resources.ResourceWriter">
			<method accessibility="Private" methodKind="Static" name="Write7BitEncodedInt" uniqueID="Write7BitEncodedInt(System.IO.BinaryWriter;int):void">
				<signature>System.Resources.ResourceWriter.Write7BitEncodedInt(System.IO.BinaryWriter;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddResource" uniqueID="AddResource(string;byte[]):void">
				<signature>System.Resources.ResourceWriter.AddResource(string;byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddResource" uniqueID="AddResource(string;object):void">
				<signature>System.Resources.ResourceWriter.AddResource(string;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddResource" uniqueID="AddResource(string;string):void">
				<signature>System.Resources.ResourceWriter.AddResource(string;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddResourceData" uniqueID="AddResourceData(string;string;byte[]):void">
				<signature>System.Resources.ResourceWriter.AddResourceData(string;string;byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Close" uniqueID="Close():void">
				<signature>System.Resources.ResourceWriter.Close():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Dispose" uniqueID="Dispose():void">
				<signature>System.Resources.ResourceWriter.Dispose():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Dispose" uniqueID="Dispose(bool):void">
				<signature>System.Resources.ResourceWriter.Dispose(bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="FindTypeCode" uniqueID="FindTypeCode(object;System.Collections.Generic.List&lt;string&gt;):System.Resources.ResourceTypeCode">
				<signature>System.Resources.ResourceWriter.FindTypeCode(object;System.Collections.Generic.List&lt;string&gt;):System.Resources.ResourceTypeCode</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Generate" uniqueID="Generate():void">
				<signature>System.Resources.ResourceWriter.Generate():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ResourceWriter" uniqueID="ResourceWriter(System.IO.Stream):void">
				<signature>System.Resources.ResourceWriter.ResourceWriter(System.IO.Stream):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ResourceWriter" uniqueID="ResourceWriter(string):void">
				<signature>System.Resources.ResourceWriter.ResourceWriter(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="WriteValue" uniqueID="WriteValue(System.Resources.ResourceTypeCode;object;System.IO.BinaryWriter;System.Runtime.Serialization.IFormatter):void">
				<signature>System.Resources.ResourceWriter.WriteValue(System.Resources.ResourceTypeCode;object;System.IO.BinaryWriter;System.Runtime.Serialization.IFormatter):void</signature>
			</method>
		</class>
	</package>
	<package name="System.Runtime.Remoting">
		<class name="IObjectHandle" uniqueID="System.Runtime.Remoting.IObjectHandle">
			<method accessibility="Public" methodKind="Member" name="Unwrap" uniqueID="Unwrap():object">
				<signature>System.Runtime.Remoting.IObjectHandle.Unwrap():object</signature>
			</method>
		</class>
		<class name="ServerIdentity" uniqueID="System.Runtime.Remoting.ServerIdentity">
			<method accessibility="Protected" methodKind="Member" name="AddServerSideDynamicProperty" uniqueID="AddServerSideDynamicProperty(System.Runtime.Remoting.Contexts.IDynamicProperty):bool">
				<signature>System.Runtime.Remoting.ServerIdentity.AddServerSideDynamicProperty(System.Runtime.Remoting.Contexts.IDynamicProperty):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AssertValid" uniqueID="AssertValid():void">
				<signature>System.Runtime.Remoting.ServerIdentity.AssertValid():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetHandle" uniqueID="GetHandle():System.Runtime.InteropServices.GCHandle">
				<signature>System.Runtime.Remoting.ServerIdentity.GetHandle():System.Runtime.InteropServices.GCHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetLastCalledType" uniqueID="GetLastCalledType(string):System.Type">
				<signature>System.Runtime.Remoting.ServerIdentity.GetLastCalledType(string):System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetServerObjectChain" uniqueID="GetServerObjectChain(System.MarshalByRefObject):System.Runtime.Remoting.Messaging.IMessageSink">
				<signature>System.Runtime.Remoting.ServerIdentity.GetServerObjectChain(System.MarshalByRefObject):System.Runtime.Remoting.Messaging.IMessageSink</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsSingleCall" uniqueID="IsSingleCall():bool">
				<signature>System.Runtime.Remoting.ServerIdentity.IsSingleCall():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsSingleton" uniqueID="IsSingleton():bool">
				<signature>System.Runtime.Remoting.ServerIdentity.IsSingleton():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RaceSetServerObjectChain" uniqueID="RaceSetServerObjectChain(System.Runtime.Remoting.Messaging.IMessageSink):System.Runtime.Remoting.Messaging.IMessageSink">
				<signature>System.Runtime.Remoting.ServerIdentity.RaceSetServerObjectChain(System.Runtime.Remoting.Messaging.IMessageSink):System.Runtime.Remoting.Messaging.IMessageSink</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RemoveServerSideDynamicProperty" uniqueID="RemoveServerSideDynamicProperty(string):bool">
				<signature>System.Runtime.Remoting.ServerIdentity.RemoveServerSideDynamicProperty(string):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ResetHandle" uniqueID="ResetHandle():void">
				<signature>System.Runtime.Remoting.ServerIdentity.ResetHandle():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ServerIdentity" uniqueID="ServerIdentity(System.MarshalByRefObject;System.Runtime.Remoting.Contexts.Context):void">
				<signature>System.Runtime.Remoting.ServerIdentity.ServerIdentity(System.MarshalByRefObject;System.Runtime.Remoting.Contexts.Context):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ServerIdentity" uniqueID="ServerIdentity(System.MarshalByRefObject;System.Runtime.Remoting.Contexts.Context;string):void">
				<signature>System.Runtime.Remoting.ServerIdentity.ServerIdentity(System.MarshalByRefObject;System.Runtime.Remoting.Contexts.Context;string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetHandle" uniqueID="SetHandle():void">
				<signature>System.Runtime.Remoting.ServerIdentity.SetHandle():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetLastCalledType" uniqueID="SetLastCalledType(string;System.Type):void">
				<signature>System.Runtime.Remoting.ServerIdentity.SetLastCalledType(string;System.Type):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetSingleCallObjectMode" uniqueID="SetSingleCallObjectMode():void">
				<signature>System.Runtime.Remoting.ServerIdentity.SetSingleCallObjectMode():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetSingletonObjectMode" uniqueID="SetSingletonObjectMode():void">
				<signature>System.Runtime.Remoting.ServerIdentity.SetSingletonObjectMode():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_MarshaledAsSpecificType" uniqueID="get_MarshaledAsSpecificType():bool">
				<signature>System.Runtime.Remoting.ServerIdentity.get_MarshaledAsSpecificType():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ServerContext" uniqueID="get_ServerContext():System.Runtime.Remoting.Contexts.Context">
				<signature>System.Runtime.Remoting.ServerIdentity.get_ServerContext():System.Runtime.Remoting.Contexts.Context</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ServerSideDynamicSinks" uniqueID="get_ServerSideDynamicSinks():System.Runtime.Remoting.Contexts.ArrayWithSize">
				<signature>System.Runtime.Remoting.ServerIdentity.get_ServerSideDynamicSinks():System.Runtime.Remoting.Contexts.ArrayWithSize</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ServerType" uniqueID="get_ServerType():System.Type">
				<signature>System.Runtime.Remoting.ServerIdentity.get_ServerType():System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_MarshaledAsSpecificType" uniqueID="set_MarshaledAsSpecificType(bool):void">
				<signature>System.Runtime.Remoting.ServerIdentity.set_MarshaledAsSpecificType(bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_ServerType" uniqueID="set_ServerType(System.Type):void">
				<signature>System.Runtime.Remoting.ServerIdentity.set_ServerType(System.Type):void</signature>
			</method>
		</class>
		<class name="DomainSpecificRemotingData" uniqueID="System.Runtime.Remoting.DomainSpecificRemotingData">
			<method accessibility="Protected" methodKind="Member" name="DomainSpecificRemotingData" uniqueID="DomainSpecificRemotingData():void">
				<signature>System.Runtime.Remoting.DomainSpecificRemotingData.DomainSpecificRemotingData():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ActivationInitialized" uniqueID="get_ActivationInitialized():bool">
				<signature>System.Runtime.Remoting.DomainSpecificRemotingData.get_ActivationInitialized():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ActivationListener" uniqueID="get_ActivationListener():System.Runtime.Remoting.Activation.ActivationListener">
				<signature>System.Runtime.Remoting.DomainSpecificRemotingData.get_ActivationListener():System.Runtime.Remoting.Activation.ActivationListener</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ActivatorListening" uniqueID="get_ActivatorListening():bool">
				<signature>System.Runtime.Remoting.DomainSpecificRemotingData.get_ActivatorListening():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_AppDomainContextProperties" uniqueID="get_AppDomainContextProperties():System.Runtime.Remoting.Contexts.IContextProperty[]">
				<signature>System.Runtime.Remoting.DomainSpecificRemotingData.get_AppDomainContextProperties():System.Runtime.Remoting.Contexts.IContextProperty[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ChannelServicesData" uniqueID="get_ChannelServicesData():System.Runtime.Remoting.Channels.ChannelServicesData">
				<signature>System.Runtime.Remoting.DomainSpecificRemotingData.get_ChannelServicesData():System.Runtime.Remoting.Channels.ChannelServicesData</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ConfigLock" uniqueID="get_ConfigLock():object">
				<signature>System.Runtime.Remoting.DomainSpecificRemotingData.get_ConfigLock():object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IDTableLock" uniqueID="get_IDTableLock():System.Threading.ReaderWriterLock">
				<signature>System.Runtime.Remoting.DomainSpecificRemotingData.get_IDTableLock():System.Threading.ReaderWriterLock</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_InitializingActivation" uniqueID="get_InitializingActivation():bool">
				<signature>System.Runtime.Remoting.DomainSpecificRemotingData.get_InitializingActivation():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_LeaseManager" uniqueID="get_LeaseManager():System.Runtime.Remoting.Lifetime.LeaseManager">
				<signature>System.Runtime.Remoting.DomainSpecificRemotingData.get_LeaseManager():System.Runtime.Remoting.Lifetime.LeaseManager</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_LocalActivator" uniqueID="get_LocalActivator():System.Runtime.Remoting.Activation.LocalActivator">
				<signature>System.Runtime.Remoting.DomainSpecificRemotingData.get_LocalActivator():System.Runtime.Remoting.Activation.LocalActivator</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_ActivationInitialized" uniqueID="set_ActivationInitialized(bool):void">
				<signature>System.Runtime.Remoting.DomainSpecificRemotingData.set_ActivationInitialized(bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_ActivationListener" uniqueID="set_ActivationListener(System.Runtime.Remoting.Activation.ActivationListener):void">
				<signature>System.Runtime.Remoting.DomainSpecificRemotingData.set_ActivationListener(System.Runtime.Remoting.Activation.ActivationListener):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_ActivatorListening" uniqueID="set_ActivatorListening(bool):void">
				<signature>System.Runtime.Remoting.DomainSpecificRemotingData.set_ActivatorListening(bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_InitializingActivation" uniqueID="set_InitializingActivation(bool):void">
				<signature>System.Runtime.Remoting.DomainSpecificRemotingData.set_InitializingActivation(bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_LeaseManager" uniqueID="set_LeaseManager(System.Runtime.Remoting.Lifetime.LeaseManager):void">
				<signature>System.Runtime.Remoting.DomainSpecificRemotingData.set_LeaseManager(System.Runtime.Remoting.Lifetime.LeaseManager):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_LocalActivator" uniqueID="set_LocalActivator(System.Runtime.Remoting.Activation.LocalActivator):void">
				<signature>System.Runtime.Remoting.DomainSpecificRemotingData.set_LocalActivator(System.Runtime.Remoting.Activation.LocalActivator):void</signature>
			</method>
		</class>
		<class name="IChannelInfo" uniqueID="System.Runtime.Remoting.IChannelInfo">
			<method accessibility="Public" methodKind="Member" name="get_ChannelData" uniqueID="get_ChannelData():object[]">
				<signature>System.Runtime.Remoting.IChannelInfo.get_ChannelData():object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ChannelData" uniqueID="set_ChannelData(object[]):void">
				<signature>System.Runtime.Remoting.IChannelInfo.set_ChannelData(object[]):void</signature>
			</method>
		</class>
		<class name="IEnvoyInfo" uniqueID="System.Runtime.Remoting.IEnvoyInfo">
			<method accessibility="Public" methodKind="Member" name="get_EnvoySinks" uniqueID="get_EnvoySinks():System.Runtime.Remoting.Messaging.IMessageSink">
				<signature>System.Runtime.Remoting.IEnvoyInfo.get_EnvoySinks():System.Runtime.Remoting.Messaging.IMessageSink</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_EnvoySinks" uniqueID="set_EnvoySinks(System.Runtime.Remoting.Messaging.IMessageSink):void">
				<signature>System.Runtime.Remoting.IEnvoyInfo.set_EnvoySinks(System.Runtime.Remoting.Messaging.IMessageSink):void</signature>
			</method>
		</class>
		<class name="Identity" uniqueID="System.Runtime.Remoting.Identity">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Runtime.Remoting.Identity.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetNewLogicalCallID" uniqueID="GetNewLogicalCallID():string">
				<signature>System.Runtime.Remoting.Identity.GetNewLogicalCallID():string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetNextSeqNum" uniqueID="GetNextSeqNum():int">
				<signature>System.Runtime.Remoting.Identity.GetNextSeqNum():int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetRandomBytes" uniqueID="GetRandomBytes():byte[]">
				<signature>System.Runtime.Remoting.Identity.GetRandomBytes():byte[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="RemoveAppNameOrAppGuidIfNecessary" uniqueID="RemoveAppNameOrAppGuidIfNecessary(string):string">
				<signature>System.Runtime.Remoting.Identity.RemoveAppNameOrAppGuidIfNecessary(string):string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="StringStartsWith" uniqueID="StringStartsWith(string;string):bool">
				<signature>System.Runtime.Remoting.Identity.StringStartsWith(string;string):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_AppDomainUniqueId" uniqueID="get_AppDomainUniqueId():string">
				<signature>System.Runtime.Remoting.Identity.get_AppDomainUniqueId():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_IDGuidString" uniqueID="get_IDGuidString():string">
				<signature>System.Runtime.Remoting.Identity.get_IDGuidString():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_ProcessGuid" uniqueID="get_ProcessGuid():string">
				<signature>System.Runtime.Remoting.Identity.get_ProcessGuid():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_ProcessIDGuid" uniqueID="get_ProcessIDGuid():string">
				<signature>System.Runtime.Remoting.Identity.get_ProcessIDGuid():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AddProxySideDynamicProperty" uniqueID="AddProxySideDynamicProperty(System.Runtime.Remoting.Contexts.IDynamicProperty):bool">
				<signature>System.Runtime.Remoting.Identity.AddProxySideDynamicProperty(System.Runtime.Remoting.Contexts.IDynamicProperty):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AssertValid" uniqueID="AssertValid():void">
				<signature>System.Runtime.Remoting.Identity.AssertValid():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Identity" uniqueID="Identity(bool):void">
				<signature>System.Runtime.Remoting.Identity.Identity(bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Identity" uniqueID="Identity(string;string):void">
				<signature>System.Runtime.Remoting.Identity.Identity(string;string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsDisconnected" uniqueID="IsDisconnected():bool">
				<signature>System.Runtime.Remoting.Identity.IsDisconnected():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsFullyDisconnected" uniqueID="IsFullyDisconnected():bool">
				<signature>System.Runtime.Remoting.Identity.IsFullyDisconnected():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsInIDTable" uniqueID="IsInIDTable():bool">
				<signature>System.Runtime.Remoting.Identity.IsInIDTable():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsRemoteDisconnected" uniqueID="IsRemoteDisconnected():bool">
				<signature>System.Runtime.Remoting.Identity.IsRemoteDisconnected():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsWellKnown" uniqueID="IsWellKnown():bool">
				<signature>System.Runtime.Remoting.Identity.IsWellKnown():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RaceSetChannelSink" uniqueID="RaceSetChannelSink(System.Runtime.Remoting.Messaging.IMessageSink):System.Runtime.Remoting.Messaging.IMessageSink">
				<signature>System.Runtime.Remoting.Identity.RaceSetChannelSink(System.Runtime.Remoting.Messaging.IMessageSink):System.Runtime.Remoting.Messaging.IMessageSink</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RaceSetEnvoyChain" uniqueID="RaceSetEnvoyChain(System.Runtime.Remoting.Messaging.IMessageSink):System.Runtime.Remoting.Messaging.IMessageSink">
				<signature>System.Runtime.Remoting.Identity.RaceSetEnvoyChain(System.Runtime.Remoting.Messaging.IMessageSink):System.Runtime.Remoting.Messaging.IMessageSink</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RaceSetObjRef" uniqueID="RaceSetObjRef(System.Runtime.Remoting.ObjRef):System.Runtime.Remoting.ObjRef">
				<signature>System.Runtime.Remoting.Identity.RaceSetObjRef(System.Runtime.Remoting.ObjRef):System.Runtime.Remoting.ObjRef</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RaceSetTransparentProxy" uniqueID="RaceSetTransparentProxy(object):object">
				<signature>System.Runtime.Remoting.Identity.RaceSetTransparentProxy(object):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RemoveProxySideDynamicProperty" uniqueID="RemoveProxySideDynamicProperty(string):bool">
				<signature>System.Runtime.Remoting.Identity.RemoveProxySideDynamicProperty(string):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ResetInIDTable" uniqueID="ResetInIDTable(bool):void">
				<signature>System.Runtime.Remoting.Identity.ResetInIDTable(bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetFullyConnected" uniqueID="SetFullyConnected():void">
				<signature>System.Runtime.Remoting.Identity.SetFullyConnected():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetInIDTable" uniqueID="SetInIDTable():void">
				<signature>System.Runtime.Remoting.Identity.SetInIDTable():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetOrCreateURI" uniqueID="SetOrCreateURI(string):void">
				<signature>System.Runtime.Remoting.Identity.SetOrCreateURI(string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetOrCreateURI" uniqueID="SetOrCreateURI(string;bool):void">
				<signature>System.Runtime.Remoting.Identity.SetOrCreateURI(string;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ChannelSink" uniqueID="get_ChannelSink():System.Runtime.Remoting.Messaging.IMessageSink">
				<signature>System.Runtime.Remoting.Identity.get_ChannelSink():System.Runtime.Remoting.Messaging.IMessageSink</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_EnvoyChain" uniqueID="get_EnvoyChain():System.Runtime.Remoting.Messaging.IMessageSink">
				<signature>System.Runtime.Remoting.Identity.get_EnvoyChain():System.Runtime.Remoting.Messaging.IMessageSink</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IsContextBound" uniqueID="get_IsContextBound():bool">
				<signature>System.Runtime.Remoting.Identity.get_IsContextBound():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Lease" uniqueID="get_Lease():System.Runtime.Remoting.Lifetime.Lease">
				<signature>System.Runtime.Remoting.Identity.get_Lease():System.Runtime.Remoting.Lifetime.Lease</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ObjURI" uniqueID="get_ObjURI():string">
				<signature>System.Runtime.Remoting.Identity.get_ObjURI():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ObjectRef" uniqueID="get_ObjectRef():System.Runtime.Remoting.ObjRef">
				<signature>System.Runtime.Remoting.Identity.get_ObjectRef():System.Runtime.Remoting.ObjRef</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ProxySideDynamicSinks" uniqueID="get_ProxySideDynamicSinks():System.Runtime.Remoting.Contexts.ArrayWithSize">
				<signature>System.Runtime.Remoting.Identity.get_ProxySideDynamicSinks():System.Runtime.Remoting.Contexts.ArrayWithSize</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_TPOrObject" uniqueID="get_TPOrObject():System.MarshalByRefObject">
				<signature>System.Runtime.Remoting.Identity.get_TPOrObject():System.MarshalByRefObject</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_URI" uniqueID="get_URI():string">
				<signature>System.Runtime.Remoting.Identity.get_URI():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_Lease" uniqueID="set_Lease(System.Runtime.Remoting.Lifetime.Lease):void">
				<signature>System.Runtime.Remoting.Identity.set_Lease(System.Runtime.Remoting.Lifetime.Lease):void</signature>
			</method>
		</class>
		<class name="ObjRef" uniqueID="System.Runtime.Remoting.ObjRef">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Runtime.Remoting.ObjRef.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="IsWellFormed" uniqueID="IsWellFormed(System.Runtime.Remoting.ObjRef):bool">
				<signature>System.Runtime.Remoting.ObjRef.IsWellFormed(System.Runtime.Remoting.ObjRef):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ShouldUseUrlObjRef" uniqueID="ShouldUseUrlObjRef():bool">
				<signature>System.Runtime.Remoting.ObjRef.ShouldUseUrlObjRef():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CanSmuggle" uniqueID="CanSmuggle():bool">
				<signature>System.Runtime.Remoting.ObjRef.CanSmuggle():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CreateSmuggleableCopy" uniqueID="CreateSmuggleableCopy():System.Runtime.Remoting.ObjRef">
				<signature>System.Runtime.Remoting.ObjRef.CreateSmuggleableCopy():System.Runtime.Remoting.ObjRef</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetAppDomainChannelData" uniqueID="GetAppDomainChannelData():System.Runtime.Remoting.Channels.CrossAppDomainData">
				<signature>System.Runtime.Remoting.ObjRef.GetAppDomainChannelData():System.Runtime.Remoting.Channels.CrossAppDomainData</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetChannelInfoHelper" uniqueID="GetChannelInfoHelper():System.Runtime.Remoting.IChannelInfo">
				<signature>System.Runtime.Remoting.ObjRef.GetChannelInfoHelper():System.Runtime.Remoting.IChannelInfo</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetCustomMarshaledCOMObject" uniqueID="GetCustomMarshaledCOMObject(object):object">
				<signature>System.Runtime.Remoting.ObjRef.GetCustomMarshaledCOMObject(object):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetDomainID" uniqueID="GetDomainID():int">
				<signature>System.Runtime.Remoting.ObjRef.GetDomainID():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetObjectData" uniqueID="GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Runtime.Remoting.ObjRef.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRealObject" uniqueID="GetRealObject(System.Runtime.Serialization.StreamingContext):object">
				<signature>System.Runtime.Remoting.ObjRef.GetRealObject(System.Runtime.Serialization.StreamingContext):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetRealObjectHelper" uniqueID="GetRealObjectHelper():object">
				<signature>System.Runtime.Remoting.ObjRef.GetRealObjectHelper():object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetServerContext" uniqueID="GetServerContext(int):native signed int">
				<signature>System.Runtime.Remoting.ObjRef.GetServerContext(int):native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetServerDomainId" uniqueID="GetServerDomainId():int">
				<signature>System.Runtime.Remoting.ObjRef.GetServerDomainId():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetServerIdentity" uniqueID="GetServerIdentity():System.Runtime.InteropServices.GCHandle">
				<signature>System.Runtime.Remoting.ObjRef.GetServerIdentity():System.Runtime.InteropServices.GCHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="HasProxyAttribute" uniqueID="HasProxyAttribute():bool">
				<signature>System.Runtime.Remoting.ObjRef.HasProxyAttribute():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Init" uniqueID="Init(object;System.Runtime.Remoting.Identity;System.Type):void">
				<signature>System.Runtime.Remoting.ObjRef.Init(object;System.Runtime.Remoting.Identity;System.Type):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsFromThisAppDomain" uniqueID="IsFromThisAppDomain():bool">
				<signature>System.Runtime.Remoting.ObjRef.IsFromThisAppDomain():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsFromThisProcess" uniqueID="IsFromThisProcess():bool">
				<signature>System.Runtime.Remoting.ObjRef.IsFromThisProcess():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsMarshaledObject" uniqueID="IsMarshaledObject():bool">
				<signature>System.Runtime.Remoting.ObjRef.IsMarshaledObject():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsObjRefLite" uniqueID="IsObjRefLite():bool">
				<signature>System.Runtime.Remoting.ObjRef.IsObjRefLite():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsWellKnown" uniqueID="IsWellKnown():bool">
				<signature>System.Runtime.Remoting.ObjRef.IsWellKnown():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ObjRef" uniqueID="ObjRef():void">
				<signature>System.Runtime.Remoting.ObjRef.ObjRef():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ObjRef" uniqueID="ObjRef(System.MarshalByRefObject;System.Type):void">
				<signature>System.Runtime.Remoting.ObjRef.ObjRef(System.MarshalByRefObject;System.Type):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ObjRef" uniqueID="ObjRef(System.Runtime.Remoting.ObjRef):void">
				<signature>System.Runtime.Remoting.ObjRef.ObjRef(System.Runtime.Remoting.ObjRef):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ObjRef" uniqueID="ObjRef(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Runtime.Remoting.ObjRef.ObjRef(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetDomainID" uniqueID="SetDomainID(int):void">
				<signature>System.Runtime.Remoting.ObjRef.SetDomainID(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetHasProxyAttribute" uniqueID="SetHasProxyAttribute():void">
				<signature>System.Runtime.Remoting.ObjRef.SetHasProxyAttribute():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetMarshaledObject" uniqueID="SetMarshaledObject():void">
				<signature>System.Runtime.Remoting.ObjRef.SetMarshaledObject():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetObjRefLite" uniqueID="SetObjRefLite():void">
				<signature>System.Runtime.Remoting.ObjRef.SetObjRefLite():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetServerIdentity" uniqueID="SetServerIdentity(System.Runtime.InteropServices.GCHandle):void">
				<signature>System.Runtime.Remoting.ObjRef.SetServerIdentity(System.Runtime.InteropServices.GCHandle):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetWellKnown" uniqueID="SetWellKnown():void">
				<signature>System.Runtime.Remoting.ObjRef.SetWellKnown():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ChannelInfo" uniqueID="get_ChannelInfo():System.Runtime.Remoting.IChannelInfo">
				<signature>System.Runtime.Remoting.ObjRef.get_ChannelInfo():System.Runtime.Remoting.IChannelInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_EnvoyInfo" uniqueID="get_EnvoyInfo():System.Runtime.Remoting.IEnvoyInfo">
				<signature>System.Runtime.Remoting.ObjRef.get_EnvoyInfo():System.Runtime.Remoting.IEnvoyInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TypeInfo" uniqueID="get_TypeInfo():System.Runtime.Remoting.IRemotingTypeInfo">
				<signature>System.Runtime.Remoting.ObjRef.get_TypeInfo():System.Runtime.Remoting.IRemotingTypeInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_URI" uniqueID="get_URI():string">
				<signature>System.Runtime.Remoting.ObjRef.get_URI():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ChannelInfo" uniqueID="set_ChannelInfo(System.Runtime.Remoting.IChannelInfo):void">
				<signature>System.Runtime.Remoting.ObjRef.set_ChannelInfo(System.Runtime.Remoting.IChannelInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_EnvoyInfo" uniqueID="set_EnvoyInfo(System.Runtime.Remoting.IEnvoyInfo):void">
				<signature>System.Runtime.Remoting.ObjRef.set_EnvoyInfo(System.Runtime.Remoting.IEnvoyInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_TypeInfo" uniqueID="set_TypeInfo(System.Runtime.Remoting.IRemotingTypeInfo):void">
				<signature>System.Runtime.Remoting.ObjRef.set_TypeInfo(System.Runtime.Remoting.IRemotingTypeInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_URI" uniqueID="set_URI(string):void">
				<signature>System.Runtime.Remoting.ObjRef.set_URI(string):void</signature>
			</method>
		</class>
		<class name="ObjectHandle" uniqueID="System.Runtime.Remoting.ObjectHandle">
			<method accessibility="Public" methodKind="Member" name="InitializeLifetimeService" uniqueID="InitializeLifetimeService():object">
				<signature>System.Runtime.Remoting.ObjectHandle.InitializeLifetimeService():object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ObjectHandle" uniqueID="ObjectHandle():void">
				<signature>System.Runtime.Remoting.ObjectHandle.ObjectHandle():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ObjectHandle" uniqueID="ObjectHandle(object):void">
				<signature>System.Runtime.Remoting.ObjectHandle.ObjectHandle(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Unwrap" uniqueID="Unwrap():object">
				<signature>System.Runtime.Remoting.ObjectHandle.Unwrap():object</signature>
			</method>
		</class>
		<class name="IRemotingTypeInfo" uniqueID="System.Runtime.Remoting.IRemotingTypeInfo">
			<method accessibility="Public" methodKind="Member" name="CanCastTo" uniqueID="CanCastTo(System.Type;object):bool">
				<signature>System.Runtime.Remoting.IRemotingTypeInfo.CanCastTo(System.Type;object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TypeName" uniqueID="get_TypeName():string">
				<signature>System.Runtime.Remoting.IRemotingTypeInfo.get_TypeName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_TypeName" uniqueID="set_TypeName(string):void">
				<signature>System.Runtime.Remoting.IRemotingTypeInfo.set_TypeName(string):void</signature>
			</method>
		</class>
	</package>
	<package name="System.Security.AccessControl">
		<class name="EventWaitHandleSecurity" uniqueID="System.Security.AccessControl.EventWaitHandleSecurity">
			<method accessibility="Private" methodKind="Static" name="_HandleErrorCode" uniqueID="_HandleErrorCode(int;string;System.Runtime.InteropServices.SafeHandle;object):System.Exception">
				<signature>System.Security.AccessControl.EventWaitHandleSecurity._HandleErrorCode(int;string;System.Runtime.InteropServices.SafeHandle;object):System.Exception</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AccessRuleFactory" uniqueID="AccessRuleFactory(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AccessControlType):System.Security.AccessControl.AccessRule">
				<signature>System.Security.AccessControl.EventWaitHandleSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AccessControlType):System.Security.AccessControl.AccessRule</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddAccessRule" uniqueID="AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule):void">
				<signature>System.Security.AccessControl.EventWaitHandleSecurity.AddAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddAuditRule" uniqueID="AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule):void">
				<signature>System.Security.AccessControl.EventWaitHandleSecurity.AddAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AuditRuleFactory" uniqueID="AuditRuleFactory(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AuditFlags):System.Security.AccessControl.AuditRule">
				<signature>System.Security.AccessControl.EventWaitHandleSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AuditFlags):System.Security.AccessControl.AuditRule</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EventWaitHandleSecurity" uniqueID="EventWaitHandleSecurity():void">
				<signature>System.Security.AccessControl.EventWaitHandleSecurity.EventWaitHandleSecurity():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EventWaitHandleSecurity" uniqueID="EventWaitHandleSecurity(Microsoft.Win32.SafeHandles.SafeWaitHandle;System.Security.AccessControl.AccessControlSections):void">
				<signature>System.Security.AccessControl.EventWaitHandleSecurity.EventWaitHandleSecurity(Microsoft.Win32.SafeHandles.SafeWaitHandle;System.Security.AccessControl.AccessControlSections):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EventWaitHandleSecurity" uniqueID="EventWaitHandleSecurity(string;System.Security.AccessControl.AccessControlSections):void">
				<signature>System.Security.AccessControl.EventWaitHandleSecurity.EventWaitHandleSecurity(string;System.Security.AccessControl.AccessControlSections):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetAccessControlSectionsFromChanges" uniqueID="GetAccessControlSectionsFromChanges():System.Security.AccessControl.AccessControlSections">
				<signature>System.Security.AccessControl.EventWaitHandleSecurity.GetAccessControlSectionsFromChanges():System.Security.AccessControl.AccessControlSections</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Persist" uniqueID="Persist(Microsoft.Win32.SafeHandles.SafeWaitHandle):void">
				<signature>System.Security.AccessControl.EventWaitHandleSecurity.Persist(Microsoft.Win32.SafeHandles.SafeWaitHandle):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAccessRule" uniqueID="RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule):bool">
				<signature>System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAccessRuleAll" uniqueID="RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule):void">
				<signature>System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleAll(System.Security.AccessControl.EventWaitHandleAccessRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAccessRuleSpecific" uniqueID="RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule):void">
				<signature>System.Security.AccessControl.EventWaitHandleSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.EventWaitHandleAccessRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAuditRule" uniqueID="RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule):bool">
				<signature>System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAuditRuleAll" uniqueID="RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule):void">
				<signature>System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleAll(System.Security.AccessControl.EventWaitHandleAuditRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAuditRuleSpecific" uniqueID="RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule):void">
				<signature>System.Security.AccessControl.EventWaitHandleSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.EventWaitHandleAuditRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ResetAccessRule" uniqueID="ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule):void">
				<signature>System.Security.AccessControl.EventWaitHandleSecurity.ResetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetAccessRule" uniqueID="SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule):void">
				<signature>System.Security.AccessControl.EventWaitHandleSecurity.SetAccessRule(System.Security.AccessControl.EventWaitHandleAccessRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetAuditRule" uniqueID="SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule):void">
				<signature>System.Security.AccessControl.EventWaitHandleSecurity.SetAuditRule(System.Security.AccessControl.EventWaitHandleAuditRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AccessRightType" uniqueID="get_AccessRightType():System.Type">
				<signature>System.Security.AccessControl.EventWaitHandleSecurity.get_AccessRightType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AccessRuleType" uniqueID="get_AccessRuleType():System.Type">
				<signature>System.Security.AccessControl.EventWaitHandleSecurity.get_AccessRuleType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AuditRuleType" uniqueID="get_AuditRuleType():System.Type">
				<signature>System.Security.AccessControl.EventWaitHandleSecurity.get_AuditRuleType():System.Type</signature>
			</method>
		</class>
		<class name="AceEnumerator" uniqueID="System.Security.AccessControl.AceEnumerator">
			<method accessibility="Protected" methodKind="Member" name="AceEnumerator" uniqueID="AceEnumerator(System.Security.AccessControl.GenericAcl):void">
				<signature>System.Security.AccessControl.AceEnumerator.AceEnumerator(System.Security.AccessControl.GenericAcl):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MoveNext" uniqueID="MoveNext():bool">
				<signature>System.Security.AccessControl.AceEnumerator.MoveNext():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reset" uniqueID="Reset():void">
				<signature>System.Security.AccessControl.AceEnumerator.Reset():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerator.get_Current" uniqueID="System.Collections.IEnumerator.get_Current():object">
				<signature>System.Security.AccessControl.AceEnumerator.System.Collections.IEnumerator.get_Current():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Current" uniqueID="get_Current():System.Security.AccessControl.GenericAce">
				<signature>System.Security.AccessControl.AceEnumerator.get_Current():System.Security.AccessControl.GenericAce</signature>
			</method>
		</class>
		<class name="CommonAce" uniqueID="System.Security.AccessControl.CommonAce">
			<method accessibility="Public" methodKind="Static" name="MaxOpaqueLength" uniqueID="MaxOpaqueLength(bool):int">
				<signature>System.Security.AccessControl.CommonAce.MaxOpaqueLength(bool):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ParseBinaryForm" uniqueID="ParseBinaryForm(byte[];int;System.Security.AccessControl.AceQualifier;int;System.Security.Principal.SecurityIdentifier;bool;byte[]):bool">
				<signature>System.Security.AccessControl.CommonAce.ParseBinaryForm(byte[];int;System.Security.AccessControl.AceQualifier;int;System.Security.Principal.SecurityIdentifier;bool;byte[]):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="TypeFromQualifier" uniqueID="TypeFromQualifier(bool;System.Security.AccessControl.AceQualifier):System.Security.AccessControl.AceType">
				<signature>System.Security.AccessControl.CommonAce.TypeFromQualifier(bool;System.Security.AccessControl.AceQualifier):System.Security.AccessControl.AceType</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CommonAce" uniqueID="CommonAce(System.Security.AccessControl.AceFlags;System.Security.AccessControl.AceQualifier;int;System.Security.Principal.SecurityIdentifier;bool;byte[]):void">
				<signature>System.Security.AccessControl.CommonAce.CommonAce(System.Security.AccessControl.AceFlags;System.Security.AccessControl.AceQualifier;int;System.Security.Principal.SecurityIdentifier;bool;byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetBinaryForm" uniqueID="GetBinaryForm(byte[];int):void">
				<signature>System.Security.AccessControl.CommonAce.GetBinaryForm(byte[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_BinaryLength" uniqueID="get_BinaryLength():int">
				<signature>System.Security.AccessControl.CommonAce.get_BinaryLength():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_MaxOpaqueLengthInternal" uniqueID="get_MaxOpaqueLengthInternal():int">
				<signature>System.Security.AccessControl.CommonAce.get_MaxOpaqueLengthInternal():int</signature>
			</method>
		</class>
		<class name="FileSystemAuditRule" uniqueID="System.Security.AccessControl.FileSystemAuditRule">
			<method accessibility="Private" methodKind="Static" name="AccessMaskFromRights" uniqueID="AccessMaskFromRights(System.Security.AccessControl.FileSystemRights):int">
				<signature>System.Security.AccessControl.FileSystemAuditRule.AccessMaskFromRights(System.Security.AccessControl.FileSystemRights):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FileSystemAuditRule" uniqueID="FileSystemAuditRule(System.Security.Principal.IdentityReference;System.Security.AccessControl.FileSystemRights;System.Security.AccessControl.AuditFlags):void">
				<signature>System.Security.AccessControl.FileSystemAuditRule.FileSystemAuditRule(System.Security.Principal.IdentityReference;System.Security.AccessControl.FileSystemRights;System.Security.AccessControl.AuditFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FileSystemAuditRule" uniqueID="FileSystemAuditRule(System.Security.Principal.IdentityReference;System.Security.AccessControl.FileSystemRights;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AuditFlags):void">
				<signature>System.Security.AccessControl.FileSystemAuditRule.FileSystemAuditRule(System.Security.Principal.IdentityReference;System.Security.AccessControl.FileSystemRights;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AuditFlags):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FileSystemAuditRule" uniqueID="FileSystemAuditRule(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AuditFlags):void">
				<signature>System.Security.AccessControl.FileSystemAuditRule.FileSystemAuditRule(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AuditFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FileSystemAuditRule" uniqueID="FileSystemAuditRule(string;System.Security.AccessControl.FileSystemRights;System.Security.AccessControl.AuditFlags):void">
				<signature>System.Security.AccessControl.FileSystemAuditRule.FileSystemAuditRule(string;System.Security.AccessControl.FileSystemRights;System.Security.AccessControl.AuditFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FileSystemAuditRule" uniqueID="FileSystemAuditRule(string;System.Security.AccessControl.FileSystemRights;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AuditFlags):void">
				<signature>System.Security.AccessControl.FileSystemAuditRule.FileSystemAuditRule(string;System.Security.AccessControl.FileSystemRights;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AuditFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FileSystemRights" uniqueID="get_FileSystemRights():System.Security.AccessControl.FileSystemRights">
				<signature>System.Security.AccessControl.FileSystemAuditRule.get_FileSystemRights():System.Security.AccessControl.FileSystemRights</signature>
			</method>
		</class>
		<class name="ObjectSecurity" uniqueID="System.Security.AccessControl.ObjectSecurity">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Security.AccessControl.ObjectSecurity.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsSddlConversionSupported" uniqueID="IsSddlConversionSupported():bool">
				<signature>System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AccessRuleFactory" uniqueID="AccessRuleFactory(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AccessControlType):System.Security.AccessControl.AccessRule">
				<signature>System.Security.AccessControl.ObjectSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AccessControlType):System.Security.AccessControl.AccessRule</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AuditRuleFactory" uniqueID="AuditRuleFactory(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AuditFlags):System.Security.AccessControl.AuditRule">
				<signature>System.Security.AccessControl.ObjectSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AuditFlags):System.Security.AccessControl.AuditRule</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetGroup" uniqueID="GetGroup(System.Type):System.Security.Principal.IdentityReference">
				<signature>System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type):System.Security.Principal.IdentityReference</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetOwner" uniqueID="GetOwner(System.Type):System.Security.Principal.IdentityReference">
				<signature>System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type):System.Security.Principal.IdentityReference</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSecurityDescriptorBinaryForm" uniqueID="GetSecurityDescriptorBinaryForm():byte[]">
				<signature>System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm():byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSecurityDescriptorSddlForm" uniqueID="GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections):string">
				<signature>System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ModifyAccess" uniqueID="ModifyAccess(System.Security.AccessControl.AccessControlModification;System.Security.AccessControl.AccessRule;bool):bool">
				<signature>System.Security.AccessControl.ObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification;System.Security.AccessControl.AccessRule;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ModifyAccessRule" uniqueID="ModifyAccessRule(System.Security.AccessControl.AccessControlModification;System.Security.AccessControl.AccessRule;bool):bool">
				<signature>System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification;System.Security.AccessControl.AccessRule;bool):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ModifyAudit" uniqueID="ModifyAudit(System.Security.AccessControl.AccessControlModification;System.Security.AccessControl.AuditRule;bool):bool">
				<signature>System.Security.AccessControl.ObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification;System.Security.AccessControl.AuditRule;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ModifyAuditRule" uniqueID="ModifyAuditRule(System.Security.AccessControl.AccessControlModification;System.Security.AccessControl.AuditRule;bool):bool">
				<signature>System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification;System.Security.AccessControl.AuditRule;bool):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ObjectSecurity" uniqueID="ObjectSecurity():void">
				<signature>System.Security.AccessControl.ObjectSecurity.ObjectSecurity():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ObjectSecurity" uniqueID="ObjectSecurity(System.Security.AccessControl.CommonSecurityDescriptor):void">
				<signature>System.Security.AccessControl.ObjectSecurity.ObjectSecurity(System.Security.AccessControl.CommonSecurityDescriptor):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ObjectSecurity" uniqueID="ObjectSecurity(bool;bool):void">
				<signature>System.Security.AccessControl.ObjectSecurity.ObjectSecurity(bool;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Persist" uniqueID="Persist(System.Runtime.InteropServices.SafeHandle;System.Security.AccessControl.AccessControlSections):void">
				<signature>System.Security.AccessControl.ObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle;System.Security.AccessControl.AccessControlSections):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Persist" uniqueID="Persist(bool;string;System.Security.AccessControl.AccessControlSections):void">
				<signature>System.Security.AccessControl.ObjectSecurity.Persist(bool;string;System.Security.AccessControl.AccessControlSections):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Persist" uniqueID="Persist(string;System.Security.AccessControl.AccessControlSections):void">
				<signature>System.Security.AccessControl.ObjectSecurity.Persist(string;System.Security.AccessControl.AccessControlSections):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="PurgeAccessRules" uniqueID="PurgeAccessRules(System.Security.Principal.IdentityReference):void">
				<signature>System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="PurgeAuditRules" uniqueID="PurgeAuditRules(System.Security.Principal.IdentityReference):void">
				<signature>System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ReadLock" uniqueID="ReadLock():void">
				<signature>System.Security.AccessControl.ObjectSecurity.ReadLock():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ReadUnlock" uniqueID="ReadUnlock():void">
				<signature>System.Security.AccessControl.ObjectSecurity.ReadUnlock():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetAccessRuleProtection" uniqueID="SetAccessRuleProtection(bool;bool):void">
				<signature>System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(bool;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetAuditRuleProtection" uniqueID="SetAuditRuleProtection(bool;bool):void">
				<signature>System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(bool;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetGroup" uniqueID="SetGroup(System.Security.Principal.IdentityReference):void">
				<signature>System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetOwner" uniqueID="SetOwner(System.Security.Principal.IdentityReference):void">
				<signature>System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetSecurityDescriptorBinaryForm" uniqueID="SetSecurityDescriptorBinaryForm(byte[]):void">
				<signature>System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetSecurityDescriptorBinaryForm" uniqueID="SetSecurityDescriptorBinaryForm(byte[];System.Security.AccessControl.AccessControlSections):void">
				<signature>System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(byte[];System.Security.AccessControl.AccessControlSections):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetSecurityDescriptorSddlForm" uniqueID="SetSecurityDescriptorSddlForm(string):void">
				<signature>System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetSecurityDescriptorSddlForm" uniqueID="SetSecurityDescriptorSddlForm(string;System.Security.AccessControl.AccessControlSections):void">
				<signature>System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(string;System.Security.AccessControl.AccessControlSections):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="UpdateWithNewSecurityDescriptor" uniqueID="UpdateWithNewSecurityDescriptor(System.Security.AccessControl.RawSecurityDescriptor;System.Security.AccessControl.AccessControlSections):void">
				<signature>System.Security.AccessControl.ObjectSecurity.UpdateWithNewSecurityDescriptor(System.Security.AccessControl.RawSecurityDescriptor;System.Security.AccessControl.AccessControlSections):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="WriteLock" uniqueID="WriteLock():void">
				<signature>System.Security.AccessControl.ObjectSecurity.WriteLock():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="WriteUnlock" uniqueID="WriteUnlock():void">
				<signature>System.Security.AccessControl.ObjectSecurity.WriteUnlock():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AccessRightType" uniqueID="get_AccessRightType():System.Type">
				<signature>System.Security.AccessControl.ObjectSecurity.get_AccessRightType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AccessRuleType" uniqueID="get_AccessRuleType():System.Type">
				<signature>System.Security.AccessControl.ObjectSecurity.get_AccessRuleType():System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_AccessRulesModified" uniqueID="get_AccessRulesModified():bool">
				<signature>System.Security.AccessControl.ObjectSecurity.get_AccessRulesModified():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AreAccessRulesCanonical" uniqueID="get_AreAccessRulesCanonical():bool">
				<signature>System.Security.AccessControl.ObjectSecurity.get_AreAccessRulesCanonical():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AreAccessRulesProtected" uniqueID="get_AreAccessRulesProtected():bool">
				<signature>System.Security.AccessControl.ObjectSecurity.get_AreAccessRulesProtected():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AreAuditRulesCanonical" uniqueID="get_AreAuditRulesCanonical():bool">
				<signature>System.Security.AccessControl.ObjectSecurity.get_AreAuditRulesCanonical():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AreAuditRulesProtected" uniqueID="get_AreAuditRulesProtected():bool">
				<signature>System.Security.AccessControl.ObjectSecurity.get_AreAuditRulesProtected():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AuditRuleType" uniqueID="get_AuditRuleType():System.Type">
				<signature>System.Security.AccessControl.ObjectSecurity.get_AuditRuleType():System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_AuditRulesModified" uniqueID="get_AuditRulesModified():bool">
				<signature>System.Security.AccessControl.ObjectSecurity.get_AuditRulesModified():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_GroupModified" uniqueID="get_GroupModified():bool">
				<signature>System.Security.AccessControl.ObjectSecurity.get_GroupModified():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IsContainer" uniqueID="get_IsContainer():bool">
				<signature>System.Security.AccessControl.ObjectSecurity.get_IsContainer():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IsDS" uniqueID="get_IsDS():bool">
				<signature>System.Security.AccessControl.ObjectSecurity.get_IsDS():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_OwnerModified" uniqueID="get_OwnerModified():bool">
				<signature>System.Security.AccessControl.ObjectSecurity.get_OwnerModified():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_AccessRulesModified" uniqueID="set_AccessRulesModified(bool):void">
				<signature>System.Security.AccessControl.ObjectSecurity.set_AccessRulesModified(bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_AuditRulesModified" uniqueID="set_AuditRulesModified(bool):void">
				<signature>System.Security.AccessControl.ObjectSecurity.set_AuditRulesModified(bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_GroupModified" uniqueID="set_GroupModified(bool):void">
				<signature>System.Security.AccessControl.ObjectSecurity.set_GroupModified(bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_OwnerModified" uniqueID="set_OwnerModified(bool):void">
				<signature>System.Security.AccessControl.ObjectSecurity.set_OwnerModified(bool):void</signature>
			</method>
		</class>
		<class name="RawAcl" uniqueID="System.Security.AccessControl.RawAcl">
			<method accessibility="Private" methodKind="Static" name="VerifyHeader" uniqueID="VerifyHeader(byte[];int;byte;int;int):void">
				<signature>System.Security.AccessControl.RawAcl.VerifyHeader(byte[];int;byte;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetBinaryForm" uniqueID="GetBinaryForm(byte[];int):void">
				<signature>System.Security.AccessControl.RawAcl.GetBinaryForm(byte[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InsertAce" uniqueID="InsertAce(int;System.Security.AccessControl.GenericAce):void">
				<signature>System.Security.AccessControl.RawAcl.InsertAce(int;System.Security.AccessControl.GenericAce):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="MarshalHeader" uniqueID="MarshalHeader(byte[];int):void">
				<signature>System.Security.AccessControl.RawAcl.MarshalHeader(byte[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RawAcl" uniqueID="RawAcl(byte;int):void">
				<signature>System.Security.AccessControl.RawAcl.RawAcl(byte;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RawAcl" uniqueID="RawAcl(byte[];int):void">
				<signature>System.Security.AccessControl.RawAcl.RawAcl(byte[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAce" uniqueID="RemoveAce(int):void">
				<signature>System.Security.AccessControl.RawAcl.RemoveAce(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetBinaryForm" uniqueID="SetBinaryForm(byte[];int):void">
				<signature>System.Security.AccessControl.RawAcl.SetBinaryForm(byte[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_BinaryLength" uniqueID="get_BinaryLength():int">
				<signature>System.Security.AccessControl.RawAcl.get_BinaryLength():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Security.AccessControl.RawAcl.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.Security.AccessControl.GenericAce">
				<signature>System.Security.AccessControl.RawAcl.get_Item(int):System.Security.AccessControl.GenericAce</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Revision" uniqueID="get_Revision():byte">
				<signature>System.Security.AccessControl.RawAcl.get_Revision():byte</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(int;System.Security.AccessControl.GenericAce):void">
				<signature>System.Security.AccessControl.RawAcl.set_Item(int;System.Security.AccessControl.GenericAce):void</signature>
			</method>
		</class>
		<class name="RegistryAccessRule" uniqueID="System.Security.AccessControl.RegistryAccessRule">
			<method accessibility="Public" methodKind="Member" name="RegistryAccessRule" uniqueID="RegistryAccessRule(System.Security.Principal.IdentityReference;System.Security.AccessControl.RegistryRights;System.Security.AccessControl.AccessControlType):void">
				<signature>System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(System.Security.Principal.IdentityReference;System.Security.AccessControl.RegistryRights;System.Security.AccessControl.AccessControlType):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RegistryAccessRule" uniqueID="RegistryAccessRule(System.Security.Principal.IdentityReference;System.Security.AccessControl.RegistryRights;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AccessControlType):void">
				<signature>System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(System.Security.Principal.IdentityReference;System.Security.AccessControl.RegistryRights;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AccessControlType):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RegistryAccessRule" uniqueID="RegistryAccessRule(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AccessControlType):void">
				<signature>System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AccessControlType):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RegistryAccessRule" uniqueID="RegistryAccessRule(string;System.Security.AccessControl.RegistryRights;System.Security.AccessControl.AccessControlType):void">
				<signature>System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(string;System.Security.AccessControl.RegistryRights;System.Security.AccessControl.AccessControlType):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RegistryAccessRule" uniqueID="RegistryAccessRule(string;System.Security.AccessControl.RegistryRights;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AccessControlType):void">
				<signature>System.Security.AccessControl.RegistryAccessRule.RegistryAccessRule(string;System.Security.AccessControl.RegistryRights;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AccessControlType):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_RegistryRights" uniqueID="get_RegistryRights():System.Security.AccessControl.RegistryRights">
				<signature>System.Security.AccessControl.RegistryAccessRule.get_RegistryRights():System.Security.AccessControl.RegistryRights</signature>
			</method>
		</class>
		<class name="RegistryAuditRule" uniqueID="System.Security.AccessControl.RegistryAuditRule">
			<method accessibility="Public" methodKind="Member" name="RegistryAuditRule" uniqueID="RegistryAuditRule(System.Security.Principal.IdentityReference;System.Security.AccessControl.RegistryRights;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AuditFlags):void">
				<signature>System.Security.AccessControl.RegistryAuditRule.RegistryAuditRule(System.Security.Principal.IdentityReference;System.Security.AccessControl.RegistryRights;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AuditFlags):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RegistryAuditRule" uniqueID="RegistryAuditRule(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AuditFlags):void">
				<signature>System.Security.AccessControl.RegistryAuditRule.RegistryAuditRule(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AuditFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RegistryAuditRule" uniqueID="RegistryAuditRule(string;System.Security.AccessControl.RegistryRights;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AuditFlags):void">
				<signature>System.Security.AccessControl.RegistryAuditRule.RegistryAuditRule(string;System.Security.AccessControl.RegistryRights;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AuditFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_RegistryRights" uniqueID="get_RegistryRights():System.Security.AccessControl.RegistryRights">
				<signature>System.Security.AccessControl.RegistryAuditRule.get_RegistryRights():System.Security.AccessControl.RegistryRights</signature>
			</method>
		</class>
		<class name="SystemAcl" uniqueID="System.Security.AccessControl.SystemAcl">
			<method accessibility="Public" methodKind="Member" name="AddAudit" uniqueID="AddAudit(System.Security.AccessControl.AuditFlags;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags):void">
				<signature>System.Security.AccessControl.SystemAcl.AddAudit(System.Security.AccessControl.AuditFlags;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddAudit" uniqueID="AddAudit(System.Security.AccessControl.AuditFlags;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid):void">
				<signature>System.Security.AccessControl.SystemAcl.AddAudit(System.Security.AccessControl.AuditFlags;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAudit" uniqueID="RemoveAudit(System.Security.AccessControl.AuditFlags;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags):bool">
				<signature>System.Security.AccessControl.SystemAcl.RemoveAudit(System.Security.AccessControl.AuditFlags;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAudit" uniqueID="RemoveAudit(System.Security.AccessControl.AuditFlags;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid):bool">
				<signature>System.Security.AccessControl.SystemAcl.RemoveAudit(System.Security.AccessControl.AuditFlags;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAuditSpecific" uniqueID="RemoveAuditSpecific(System.Security.AccessControl.AuditFlags;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags):void">
				<signature>System.Security.AccessControl.SystemAcl.RemoveAuditSpecific(System.Security.AccessControl.AuditFlags;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAuditSpecific" uniqueID="RemoveAuditSpecific(System.Security.AccessControl.AuditFlags;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid):void">
				<signature>System.Security.AccessControl.SystemAcl.RemoveAuditSpecific(System.Security.AccessControl.AuditFlags;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetAudit" uniqueID="SetAudit(System.Security.AccessControl.AuditFlags;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags):void">
				<signature>System.Security.AccessControl.SystemAcl.SetAudit(System.Security.AccessControl.AuditFlags;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetAudit" uniqueID="SetAudit(System.Security.AccessControl.AuditFlags;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid):void">
				<signature>System.Security.AccessControl.SystemAcl.SetAudit(System.Security.AccessControl.AuditFlags;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SystemAcl" uniqueID="SystemAcl(bool;bool;System.Security.AccessControl.RawAcl):void">
				<signature>System.Security.AccessControl.SystemAcl.SystemAcl(bool;bool;System.Security.AccessControl.RawAcl):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SystemAcl" uniqueID="SystemAcl(bool;bool;System.Security.AccessControl.RawAcl;bool):void">
				<signature>System.Security.AccessControl.SystemAcl.SystemAcl(bool;bool;System.Security.AccessControl.RawAcl;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SystemAcl" uniqueID="SystemAcl(bool;bool;byte;int):void">
				<signature>System.Security.AccessControl.SystemAcl.SystemAcl(bool;bool;byte;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SystemAcl" uniqueID="SystemAcl(bool;bool;int):void">
				<signature>System.Security.AccessControl.SystemAcl.SystemAcl(bool;bool;int):void</signature>
			</method>
		</class>
		<class name="AuditRule" uniqueID="System.Security.AccessControl.AuditRule">
			<method accessibility="Protected" methodKind="Member" name="AuditRule" uniqueID="AuditRule(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AuditFlags):void">
				<signature>System.Security.AccessControl.AuditRule.AuditRule(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AuditFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AuditFlags" uniqueID="get_AuditFlags():System.Security.AccessControl.AuditFlags">
				<signature>System.Security.AccessControl.AuditRule.get_AuditFlags():System.Security.AccessControl.AuditFlags</signature>
			</method>
		</class>
		<class name="DiscretionaryAcl" uniqueID="System.Security.AccessControl.DiscretionaryAcl">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Security.AccessControl.DiscretionaryAcl.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CreateAllowEveryoneFullAccess" uniqueID="CreateAllowEveryoneFullAccess(bool;bool):System.Security.AccessControl.DiscretionaryAcl">
				<signature>System.Security.AccessControl.DiscretionaryAcl.CreateAllowEveryoneFullAccess(bool;bool):System.Security.AccessControl.DiscretionaryAcl</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddAccess" uniqueID="AddAccess(System.Security.AccessControl.AccessControlType;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags):void">
				<signature>System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddAccess" uniqueID="AddAccess(System.Security.AccessControl.AccessControlType;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid):void">
				<signature>System.Security.AccessControl.DiscretionaryAcl.AddAccess(System.Security.AccessControl.AccessControlType;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DiscretionaryAcl" uniqueID="DiscretionaryAcl(bool;bool;System.Security.AccessControl.RawAcl):void">
				<signature>System.Security.AccessControl.DiscretionaryAcl.DiscretionaryAcl(bool;bool;System.Security.AccessControl.RawAcl):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="DiscretionaryAcl" uniqueID="DiscretionaryAcl(bool;bool;System.Security.AccessControl.RawAcl;bool):void">
				<signature>System.Security.AccessControl.DiscretionaryAcl.DiscretionaryAcl(bool;bool;System.Security.AccessControl.RawAcl;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DiscretionaryAcl" uniqueID="DiscretionaryAcl(bool;bool;byte;int):void">
				<signature>System.Security.AccessControl.DiscretionaryAcl.DiscretionaryAcl(bool;bool;byte;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DiscretionaryAcl" uniqueID="DiscretionaryAcl(bool;bool;int):void">
				<signature>System.Security.AccessControl.DiscretionaryAcl.DiscretionaryAcl(bool;bool;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="OnAclModificationTried" uniqueID="OnAclModificationTried():void">
				<signature>System.Security.AccessControl.DiscretionaryAcl.OnAclModificationTried():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAccess" uniqueID="RemoveAccess(System.Security.AccessControl.AccessControlType;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags):bool">
				<signature>System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAccess" uniqueID="RemoveAccess(System.Security.AccessControl.AccessControlType;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid):bool">
				<signature>System.Security.AccessControl.DiscretionaryAcl.RemoveAccess(System.Security.AccessControl.AccessControlType;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAccessSpecific" uniqueID="RemoveAccessSpecific(System.Security.AccessControl.AccessControlType;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags):void">
				<signature>System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAccessSpecific" uniqueID="RemoveAccessSpecific(System.Security.AccessControl.AccessControlType;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid):void">
				<signature>System.Security.AccessControl.DiscretionaryAcl.RemoveAccessSpecific(System.Security.AccessControl.AccessControlType;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetAccess" uniqueID="SetAccess(System.Security.AccessControl.AccessControlType;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags):void">
				<signature>System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetAccess" uniqueID="SetAccess(System.Security.AccessControl.AccessControlType;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid):void">
				<signature>System.Security.AccessControl.DiscretionaryAcl.SetAccess(System.Security.AccessControl.AccessControlType;System.Security.Principal.SecurityIdentifier;int;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_EveryOneFullAccessForNullDacl" uniqueID="get_EveryOneFullAccessForNullDacl():bool">
				<signature>System.Security.AccessControl.DiscretionaryAcl.get_EveryOneFullAccessForNullDacl():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_EveryOneFullAccessForNullDacl" uniqueID="set_EveryOneFullAccessForNullDacl(bool):void">
				<signature>System.Security.AccessControl.DiscretionaryAcl.set_EveryOneFullAccessForNullDacl(bool):void</signature>
			</method>
		</class>
		<class name="FileSystemAccessRule" uniqueID="System.Security.AccessControl.FileSystemAccessRule">
			<method accessibility="Protected" methodKind="Static" name="AccessMaskFromRights" uniqueID="AccessMaskFromRights(System.Security.AccessControl.FileSystemRights;System.Security.AccessControl.AccessControlType):int">
				<signature>System.Security.AccessControl.FileSystemAccessRule.AccessMaskFromRights(System.Security.AccessControl.FileSystemRights;System.Security.AccessControl.AccessControlType):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="RightsFromAccessMask" uniqueID="RightsFromAccessMask(int):System.Security.AccessControl.FileSystemRights">
				<signature>System.Security.AccessControl.FileSystemAccessRule.RightsFromAccessMask(int):System.Security.AccessControl.FileSystemRights</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FileSystemAccessRule" uniqueID="FileSystemAccessRule(System.Security.Principal.IdentityReference;System.Security.AccessControl.FileSystemRights;System.Security.AccessControl.AccessControlType):void">
				<signature>System.Security.AccessControl.FileSystemAccessRule.FileSystemAccessRule(System.Security.Principal.IdentityReference;System.Security.AccessControl.FileSystemRights;System.Security.AccessControl.AccessControlType):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FileSystemAccessRule" uniqueID="FileSystemAccessRule(System.Security.Principal.IdentityReference;System.Security.AccessControl.FileSystemRights;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AccessControlType):void">
				<signature>System.Security.AccessControl.FileSystemAccessRule.FileSystemAccessRule(System.Security.Principal.IdentityReference;System.Security.AccessControl.FileSystemRights;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AccessControlType):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FileSystemAccessRule" uniqueID="FileSystemAccessRule(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AccessControlType):void">
				<signature>System.Security.AccessControl.FileSystemAccessRule.FileSystemAccessRule(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AccessControlType):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FileSystemAccessRule" uniqueID="FileSystemAccessRule(string;System.Security.AccessControl.FileSystemRights;System.Security.AccessControl.AccessControlType):void">
				<signature>System.Security.AccessControl.FileSystemAccessRule.FileSystemAccessRule(string;System.Security.AccessControl.FileSystemRights;System.Security.AccessControl.AccessControlType):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FileSystemAccessRule" uniqueID="FileSystemAccessRule(string;System.Security.AccessControl.FileSystemRights;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AccessControlType):void">
				<signature>System.Security.AccessControl.FileSystemAccessRule.FileSystemAccessRule(string;System.Security.AccessControl.FileSystemRights;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AccessControlType):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FileSystemRights" uniqueID="get_FileSystemRights():System.Security.AccessControl.FileSystemRights">
				<signature>System.Security.AccessControl.FileSystemAccessRule.get_FileSystemRights():System.Security.AccessControl.FileSystemRights</signature>
			</method>
		</class>
		<class name="AuthorizationRule" uniqueID="System.Security.AccessControl.AuthorizationRule">
			<method accessibility="Public" methodKind="Member" name="AuthorizationRule" uniqueID="AuthorizationRule(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags):void">
				<signature>System.Security.AccessControl.AuthorizationRule.AuthorizationRule(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AccessMask" uniqueID="get_AccessMask():int">
				<signature>System.Security.AccessControl.AuthorizationRule.get_AccessMask():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IdentityReference" uniqueID="get_IdentityReference():System.Security.Principal.IdentityReference">
				<signature>System.Security.AccessControl.AuthorizationRule.get_IdentityReference():System.Security.Principal.IdentityReference</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_InheritanceFlags" uniqueID="get_InheritanceFlags():System.Security.AccessControl.InheritanceFlags">
				<signature>System.Security.AccessControl.AuthorizationRule.get_InheritanceFlags():System.Security.AccessControl.InheritanceFlags</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsInherited" uniqueID="get_IsInherited():bool">
				<signature>System.Security.AccessControl.AuthorizationRule.get_IsInherited():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PropagationFlags" uniqueID="get_PropagationFlags():System.Security.AccessControl.PropagationFlags">
				<signature>System.Security.AccessControl.AuthorizationRule.get_PropagationFlags():System.Security.AccessControl.PropagationFlags</signature>
			</method>
		</class>
		<class name="CommonSecurityDescriptor" uniqueID="System.Security.AccessControl.CommonSecurityDescriptor">
			<method accessibility="Protected" methodKind="Member" name="AddControlFlags" uniqueID="AddControlFlags(System.Security.AccessControl.ControlFlags):void">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.AddControlFlags(System.Security.AccessControl.ControlFlags):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CommonSecurityDescriptor" uniqueID="CommonSecurityDescriptor(bool;bool;System.Security.AccessControl.ControlFlags;System.Security.Principal.SecurityIdentifier;System.Security.Principal.SecurityIdentifier;System.Security.AccessControl.RawAcl;System.Security.AccessControl.RawAcl):void">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(bool;bool;System.Security.AccessControl.ControlFlags;System.Security.Principal.SecurityIdentifier;System.Security.Principal.SecurityIdentifier;System.Security.AccessControl.RawAcl;System.Security.AccessControl.RawAcl):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CommonSecurityDescriptor" uniqueID="CommonSecurityDescriptor(bool;bool;System.Security.AccessControl.ControlFlags;System.Security.Principal.SecurityIdentifier;System.Security.Principal.SecurityIdentifier;System.Security.AccessControl.SystemAcl;System.Security.AccessControl.DiscretionaryAcl):void">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(bool;bool;System.Security.AccessControl.ControlFlags;System.Security.Principal.SecurityIdentifier;System.Security.Principal.SecurityIdentifier;System.Security.AccessControl.SystemAcl;System.Security.AccessControl.DiscretionaryAcl):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CommonSecurityDescriptor" uniqueID="CommonSecurityDescriptor(bool;bool;System.Security.AccessControl.RawSecurityDescriptor):void">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(bool;bool;System.Security.AccessControl.RawSecurityDescriptor):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CommonSecurityDescriptor" uniqueID="CommonSecurityDescriptor(bool;bool;System.Security.AccessControl.RawSecurityDescriptor;bool):void">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(bool;bool;System.Security.AccessControl.RawSecurityDescriptor;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CommonSecurityDescriptor" uniqueID="CommonSecurityDescriptor(bool;bool;byte[];int):void">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(bool;bool;byte[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CommonSecurityDescriptor" uniqueID="CommonSecurityDescriptor(bool;bool;string):void">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.CommonSecurityDescriptor(bool;bool;string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CreateFromParts" uniqueID="CreateFromParts(bool;bool;System.Security.AccessControl.ControlFlags;System.Security.Principal.SecurityIdentifier;System.Security.Principal.SecurityIdentifier;System.Security.AccessControl.SystemAcl;System.Security.AccessControl.DiscretionaryAcl):void">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.CreateFromParts(bool;bool;System.Security.AccessControl.ControlFlags;System.Security.Principal.SecurityIdentifier;System.Security.Principal.SecurityIdentifier;System.Security.AccessControl.SystemAcl;System.Security.AccessControl.DiscretionaryAcl):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="PurgeAccessControl" uniqueID="PurgeAccessControl(System.Security.Principal.SecurityIdentifier):void">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.PurgeAccessControl(System.Security.Principal.SecurityIdentifier):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="PurgeAudit" uniqueID="PurgeAudit(System.Security.Principal.SecurityIdentifier):void">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.PurgeAudit(System.Security.Principal.SecurityIdentifier):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RemoveControlFlags" uniqueID="RemoveControlFlags(System.Security.AccessControl.ControlFlags):void">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.RemoveControlFlags(System.Security.AccessControl.ControlFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetDiscretionaryAclProtection" uniqueID="SetDiscretionaryAclProtection(bool;bool):void">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.SetDiscretionaryAclProtection(bool;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetSystemAclProtection" uniqueID="SetSystemAclProtection(bool;bool):void">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.SetSystemAclProtection(bool;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="UpdateControlFlags" uniqueID="UpdateControlFlags(System.Security.AccessControl.ControlFlags;System.Security.AccessControl.ControlFlags):void">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.UpdateControlFlags(System.Security.AccessControl.ControlFlags;System.Security.AccessControl.ControlFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ControlFlags" uniqueID="get_ControlFlags():System.Security.AccessControl.ControlFlags">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.get_ControlFlags():System.Security.AccessControl.ControlFlags</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DiscretionaryAcl" uniqueID="get_DiscretionaryAcl():System.Security.AccessControl.DiscretionaryAcl">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.get_DiscretionaryAcl():System.Security.AccessControl.DiscretionaryAcl</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_GenericDacl" uniqueID="get_GenericDacl():System.Security.AccessControl.GenericAcl">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.get_GenericDacl():System.Security.AccessControl.GenericAcl</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_GenericSacl" uniqueID="get_GenericSacl():System.Security.AccessControl.GenericAcl">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.get_GenericSacl():System.Security.AccessControl.GenericAcl</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Group" uniqueID="get_Group():System.Security.Principal.SecurityIdentifier">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.get_Group():System.Security.Principal.SecurityIdentifier</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsContainer" uniqueID="get_IsContainer():bool">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.get_IsContainer():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsDS" uniqueID="get_IsDS():bool">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.get_IsDS():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsDiscretionaryAclCanonical" uniqueID="get_IsDiscretionaryAclCanonical():bool">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.get_IsDiscretionaryAclCanonical():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IsDiscretionaryAclPresent" uniqueID="get_IsDiscretionaryAclPresent():bool">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.get_IsDiscretionaryAclPresent():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSystemAclCanonical" uniqueID="get_IsSystemAclCanonical():bool">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.get_IsSystemAclCanonical():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IsSystemAclPresent" uniqueID="get_IsSystemAclPresent():bool">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.get_IsSystemAclPresent():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Owner" uniqueID="get_Owner():System.Security.Principal.SecurityIdentifier">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.get_Owner():System.Security.Principal.SecurityIdentifier</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SystemAcl" uniqueID="get_SystemAcl():System.Security.AccessControl.SystemAcl">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.get_SystemAcl():System.Security.AccessControl.SystemAcl</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_DiscretionaryAcl" uniqueID="set_DiscretionaryAcl(System.Security.AccessControl.DiscretionaryAcl):void">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.set_DiscretionaryAcl(System.Security.AccessControl.DiscretionaryAcl):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Group" uniqueID="set_Group(System.Security.Principal.SecurityIdentifier):void">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.set_Group(System.Security.Principal.SecurityIdentifier):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Owner" uniqueID="set_Owner(System.Security.Principal.SecurityIdentifier):void">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.set_Owner(System.Security.Principal.SecurityIdentifier):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_SystemAcl" uniqueID="set_SystemAcl(System.Security.AccessControl.SystemAcl):void">
				<signature>System.Security.AccessControl.CommonSecurityDescriptor.set_SystemAcl(System.Security.AccessControl.SystemAcl):void</signature>
			</method>
		</class>
		<class name="EventWaitHandleAccessRule" uniqueID="System.Security.AccessControl.EventWaitHandleAccessRule">
			<method accessibility="Public" methodKind="Member" name="EventWaitHandleAccessRule" uniqueID="EventWaitHandleAccessRule(System.Security.Principal.IdentityReference;System.Security.AccessControl.EventWaitHandleRights;System.Security.AccessControl.AccessControlType):void">
				<signature>System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(System.Security.Principal.IdentityReference;System.Security.AccessControl.EventWaitHandleRights;System.Security.AccessControl.AccessControlType):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EventWaitHandleAccessRule" uniqueID="EventWaitHandleAccessRule(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AccessControlType):void">
				<signature>System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AccessControlType):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EventWaitHandleAccessRule" uniqueID="EventWaitHandleAccessRule(string;System.Security.AccessControl.EventWaitHandleRights;System.Security.AccessControl.AccessControlType):void">
				<signature>System.Security.AccessControl.EventWaitHandleAccessRule.EventWaitHandleAccessRule(string;System.Security.AccessControl.EventWaitHandleRights;System.Security.AccessControl.AccessControlType):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_EventWaitHandleRights" uniqueID="get_EventWaitHandleRights():System.Security.AccessControl.EventWaitHandleRights">
				<signature>System.Security.AccessControl.EventWaitHandleAccessRule.get_EventWaitHandleRights():System.Security.AccessControl.EventWaitHandleRights</signature>
			</method>
		</class>
		<class name="GenericAcl" uniqueID="System.Security.AccessControl.GenericAcl">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Security.AccessControl.GenericAcl.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Security.AccessControl.GenericAce[];int):void">
				<signature>System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[];int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GenericAcl" uniqueID="GenericAcl():void">
				<signature>System.Security.AccessControl.GenericAcl.GenericAcl():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetBinaryForm" uniqueID="GetBinaryForm(byte[];int):void">
				<signature>System.Security.AccessControl.GenericAcl.GetBinaryForm(byte[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Security.AccessControl.AceEnumerator">
				<signature>System.Security.AccessControl.GenericAcl.GetEnumerator():System.Security.AccessControl.AceEnumerator</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.CopyTo" uniqueID="System.Collections.ICollection.CopyTo(System.Array;int):void">
				<signature>System.Security.AccessControl.GenericAcl.System.Collections.ICollection.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerable.GetEnumerator" uniqueID="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Security.AccessControl.GenericAcl.System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_BinaryLength" uniqueID="get_BinaryLength():int">
				<signature>System.Security.AccessControl.GenericAcl.get_BinaryLength():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Security.AccessControl.GenericAcl.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSynchronized" uniqueID="get_IsSynchronized():bool">
				<signature>System.Security.AccessControl.GenericAcl.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.Security.AccessControl.GenericAce">
				<signature>System.Security.AccessControl.GenericAcl.get_Item(int):System.Security.AccessControl.GenericAce</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Revision" uniqueID="get_Revision():byte">
				<signature>System.Security.AccessControl.GenericAcl.get_Revision():byte</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SyncRoot" uniqueID="get_SyncRoot():object">
				<signature>System.Security.AccessControl.GenericAcl.get_SyncRoot():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(int;System.Security.AccessControl.GenericAce):void">
				<signature>System.Security.AccessControl.GenericAcl.set_Item(int;System.Security.AccessControl.GenericAce):void</signature>
			</method>
		</class>
		<class name="KnownAce" uniqueID="System.Security.AccessControl.KnownAce">
			<method accessibility="Protected" methodKind="Member" name="KnownAce" uniqueID="KnownAce(System.Security.AccessControl.AceType;System.Security.AccessControl.AceFlags;int;System.Security.Principal.SecurityIdentifier):void">
				<signature>System.Security.AccessControl.KnownAce.KnownAce(System.Security.AccessControl.AceType;System.Security.AccessControl.AceFlags;int;System.Security.Principal.SecurityIdentifier):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AccessMask" uniqueID="get_AccessMask():int">
				<signature>System.Security.AccessControl.KnownAce.get_AccessMask():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SecurityIdentifier" uniqueID="get_SecurityIdentifier():System.Security.Principal.SecurityIdentifier">
				<signature>System.Security.AccessControl.KnownAce.get_SecurityIdentifier():System.Security.Principal.SecurityIdentifier</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_AccessMask" uniqueID="set_AccessMask(int):void">
				<signature>System.Security.AccessControl.KnownAce.set_AccessMask(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_SecurityIdentifier" uniqueID="set_SecurityIdentifier(System.Security.Principal.SecurityIdentifier):void">
				<signature>System.Security.AccessControl.KnownAce.set_SecurityIdentifier(System.Security.Principal.SecurityIdentifier):void</signature>
			</method>
		</class>
		<class name="CommonObjectSecurity" uniqueID="System.Security.AccessControl.CommonObjectSecurity">
			<method accessibility="Private" methodKind="Member" name="AceNeedsTranslation" uniqueID="AceNeedsTranslation(System.Security.AccessControl.CommonAce;bool;bool;bool):bool">
				<signature>System.Security.AccessControl.CommonObjectSecurity.AceNeedsTranslation(System.Security.AccessControl.CommonAce;bool;bool;bool):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AddAccessRule" uniqueID="AddAccessRule(System.Security.AccessControl.AccessRule):void">
				<signature>System.Security.AccessControl.CommonObjectSecurity.AddAccessRule(System.Security.AccessControl.AccessRule):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AddAuditRule" uniqueID="AddAuditRule(System.Security.AccessControl.AuditRule):void">
				<signature>System.Security.AccessControl.CommonObjectSecurity.AddAuditRule(System.Security.AccessControl.AuditRule):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CommonObjectSecurity" uniqueID="CommonObjectSecurity(System.Security.AccessControl.CommonSecurityDescriptor):void">
				<signature>System.Security.AccessControl.CommonObjectSecurity.CommonObjectSecurity(System.Security.AccessControl.CommonSecurityDescriptor):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CommonObjectSecurity" uniqueID="CommonObjectSecurity(bool):void">
				<signature>System.Security.AccessControl.CommonObjectSecurity.CommonObjectSecurity(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAccessRules" uniqueID="GetAccessRules(bool;bool;System.Type):System.Security.AccessControl.AuthorizationRuleCollection">
				<signature>System.Security.AccessControl.CommonObjectSecurity.GetAccessRules(bool;bool;System.Type):System.Security.AccessControl.AuthorizationRuleCollection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAuditRules" uniqueID="GetAuditRules(bool;bool;System.Type):System.Security.AccessControl.AuthorizationRuleCollection">
				<signature>System.Security.AccessControl.CommonObjectSecurity.GetAuditRules(bool;bool;System.Type):System.Security.AccessControl.AuthorizationRuleCollection</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetRules" uniqueID="GetRules(bool;bool;bool;System.Type):System.Security.AccessControl.AuthorizationRuleCollection">
				<signature>System.Security.AccessControl.CommonObjectSecurity.GetRules(bool;bool;bool;System.Type):System.Security.AccessControl.AuthorizationRuleCollection</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ModifyAccess" uniqueID="ModifyAccess(System.Security.AccessControl.AccessControlModification;System.Security.AccessControl.AccessRule;bool):bool">
				<signature>System.Security.AccessControl.CommonObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification;System.Security.AccessControl.AccessRule;bool):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ModifyAudit" uniqueID="ModifyAudit(System.Security.AccessControl.AccessControlModification;System.Security.AccessControl.AuditRule;bool):bool">
				<signature>System.Security.AccessControl.CommonObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification;System.Security.AccessControl.AuditRule;bool):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RemoveAccessRule" uniqueID="RemoveAccessRule(System.Security.AccessControl.AccessRule):bool">
				<signature>System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRule(System.Security.AccessControl.AccessRule):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RemoveAccessRuleAll" uniqueID="RemoveAccessRuleAll(System.Security.AccessControl.AccessRule):void">
				<signature>System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleAll(System.Security.AccessControl.AccessRule):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RemoveAccessRuleSpecific" uniqueID="RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule):void">
				<signature>System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RemoveAuditRule" uniqueID="RemoveAuditRule(System.Security.AccessControl.AuditRule):bool">
				<signature>System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRule(System.Security.AccessControl.AuditRule):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RemoveAuditRuleAll" uniqueID="RemoveAuditRuleAll(System.Security.AccessControl.AuditRule):void">
				<signature>System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleAll(System.Security.AccessControl.AuditRule):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RemoveAuditRuleSpecific" uniqueID="RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule):void">
				<signature>System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ResetAccessRule" uniqueID="ResetAccessRule(System.Security.AccessControl.AccessRule):void">
				<signature>System.Security.AccessControl.CommonObjectSecurity.ResetAccessRule(System.Security.AccessControl.AccessRule):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetAccessRule" uniqueID="SetAccessRule(System.Security.AccessControl.AccessRule):void">
				<signature>System.Security.AccessControl.CommonObjectSecurity.SetAccessRule(System.Security.AccessControl.AccessRule):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetAuditRule" uniqueID="SetAuditRule(System.Security.AccessControl.AuditRule):void">
				<signature>System.Security.AccessControl.CommonObjectSecurity.SetAuditRule(System.Security.AccessControl.AuditRule):void</signature>
			</method>
		</class>
		<class name="RegistrySecurity" uniqueID="System.Security.AccessControl.RegistrySecurity">
			<method accessibility="Private" methodKind="Static" name="_HandleErrorCode" uniqueID="_HandleErrorCode(int;string;System.Runtime.InteropServices.SafeHandle;object):System.Exception">
				<signature>System.Security.AccessControl.RegistrySecurity._HandleErrorCode(int;string;System.Runtime.InteropServices.SafeHandle;object):System.Exception</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AccessRuleFactory" uniqueID="AccessRuleFactory(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AccessControlType):System.Security.AccessControl.AccessRule">
				<signature>System.Security.AccessControl.RegistrySecurity.AccessRuleFactory(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AccessControlType):System.Security.AccessControl.AccessRule</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddAccessRule" uniqueID="AddAccessRule(System.Security.AccessControl.RegistryAccessRule):void">
				<signature>System.Security.AccessControl.RegistrySecurity.AddAccessRule(System.Security.AccessControl.RegistryAccessRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddAuditRule" uniqueID="AddAuditRule(System.Security.AccessControl.RegistryAuditRule):void">
				<signature>System.Security.AccessControl.RegistrySecurity.AddAuditRule(System.Security.AccessControl.RegistryAuditRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AuditRuleFactory" uniqueID="AuditRuleFactory(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AuditFlags):System.Security.AccessControl.AuditRule">
				<signature>System.Security.AccessControl.RegistrySecurity.AuditRuleFactory(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AuditFlags):System.Security.AccessControl.AuditRule</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetAccessControlSectionsFromChanges" uniqueID="GetAccessControlSectionsFromChanges():System.Security.AccessControl.AccessControlSections">
				<signature>System.Security.AccessControl.RegistrySecurity.GetAccessControlSectionsFromChanges():System.Security.AccessControl.AccessControlSections</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Persist" uniqueID="Persist(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string):void">
				<signature>System.Security.AccessControl.RegistrySecurity.Persist(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RegistrySecurity" uniqueID="RegistrySecurity():void">
				<signature>System.Security.AccessControl.RegistrySecurity.RegistrySecurity():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RegistrySecurity" uniqueID="RegistrySecurity(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string;System.Security.AccessControl.AccessControlSections):void">
				<signature>System.Security.AccessControl.RegistrySecurity.RegistrySecurity(Microsoft.Win32.SafeHandles.SafeRegistryHandle;string;System.Security.AccessControl.AccessControlSections):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAccessRule" uniqueID="RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule):bool">
				<signature>System.Security.AccessControl.RegistrySecurity.RemoveAccessRule(System.Security.AccessControl.RegistryAccessRule):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAccessRuleAll" uniqueID="RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule):void">
				<signature>System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleAll(System.Security.AccessControl.RegistryAccessRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAccessRuleSpecific" uniqueID="RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule):void">
				<signature>System.Security.AccessControl.RegistrySecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.RegistryAccessRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAuditRule" uniqueID="RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule):bool">
				<signature>System.Security.AccessControl.RegistrySecurity.RemoveAuditRule(System.Security.AccessControl.RegistryAuditRule):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAuditRuleAll" uniqueID="RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule):void">
				<signature>System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleAll(System.Security.AccessControl.RegistryAuditRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAuditRuleSpecific" uniqueID="RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule):void">
				<signature>System.Security.AccessControl.RegistrySecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.RegistryAuditRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ResetAccessRule" uniqueID="ResetAccessRule(System.Security.AccessControl.RegistryAccessRule):void">
				<signature>System.Security.AccessControl.RegistrySecurity.ResetAccessRule(System.Security.AccessControl.RegistryAccessRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetAccessRule" uniqueID="SetAccessRule(System.Security.AccessControl.RegistryAccessRule):void">
				<signature>System.Security.AccessControl.RegistrySecurity.SetAccessRule(System.Security.AccessControl.RegistryAccessRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetAuditRule" uniqueID="SetAuditRule(System.Security.AccessControl.RegistryAuditRule):void">
				<signature>System.Security.AccessControl.RegistrySecurity.SetAuditRule(System.Security.AccessControl.RegistryAuditRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AccessRightType" uniqueID="get_AccessRightType():System.Type">
				<signature>System.Security.AccessControl.RegistrySecurity.get_AccessRightType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AccessRuleType" uniqueID="get_AccessRuleType():System.Type">
				<signature>System.Security.AccessControl.RegistrySecurity.get_AccessRuleType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AuditRuleType" uniqueID="get_AuditRuleType():System.Type">
				<signature>System.Security.AccessControl.RegistrySecurity.get_AuditRuleType():System.Type</signature>
			</method>
		</class>
		<class name="CommonAcl" uniqueID="System.Security.AccessControl.CommonAcl">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Security.AccessControl.CommonAcl.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="AFFromAceFlags" uniqueID="AFFromAceFlags(System.Security.AccessControl.AceFlags;bool):System.Security.AccessControl.CommonAcl+AF">
				<signature>System.Security.AccessControl.CommonAcl.AFFromAceFlags(System.Security.AccessControl.AceFlags;bool):System.Security.AccessControl.CommonAcl+AF</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="AceFlagsFromAF" uniqueID="AceFlagsFromAF(System.Security.AccessControl.CommonAcl+AF;bool):System.Security.AccessControl.AceFlags">
				<signature>System.Security.AccessControl.CommonAcl.AceFlagsFromAF(System.Security.AccessControl.CommonAcl+AF;bool):System.Security.AccessControl.AceFlags</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CompareAces" uniqueID="CompareAces(System.Security.AccessControl.GenericAce;System.Security.AccessControl.GenericAce;bool):System.Security.AccessControl.CommonAcl+ComparisonResult">
				<signature>System.Security.AccessControl.CommonAcl.CompareAces(System.Security.AccessControl.GenericAce;System.Security.AccessControl.GenericAce;bool):System.Security.AccessControl.CommonAcl+ComparisonResult</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="DaclAcePriority" uniqueID="DaclAcePriority(System.Security.AccessControl.GenericAce):int">
				<signature>System.Security.AccessControl.CommonAcl.DaclAcePriority(System.Security.AccessControl.GenericAce):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="MergeInheritanceBits" uniqueID="MergeInheritanceBits(System.Security.AccessControl.AceFlags;System.Security.AccessControl.AceFlags;bool;System.Security.AccessControl.AceFlags):bool">
				<signature>System.Security.AccessControl.CommonAcl.MergeInheritanceBits(System.Security.AccessControl.AceFlags;System.Security.AccessControl.AceFlags;bool;System.Security.AccessControl.AceFlags):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="RemoveInheritanceBits" uniqueID="RemoveInheritanceBits(System.Security.AccessControl.AceFlags;System.Security.AccessControl.AceFlags;bool;System.Security.AccessControl.AceFlags;bool):bool">
				<signature>System.Security.AccessControl.CommonAcl.RemoveInheritanceBits(System.Security.AccessControl.AceFlags;System.Security.AccessControl.AceFlags;bool;System.Security.AccessControl.AceFlags;bool):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="SaclAcePriority" uniqueID="SaclAcePriority(System.Security.AccessControl.GenericAce):int">
				<signature>System.Security.AccessControl.CommonAcl.SaclAcePriority(System.Security.AccessControl.GenericAce):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="AccessMasksAreMergeable" uniqueID="AccessMasksAreMergeable(System.Security.AccessControl.QualifiedAce;System.Security.AccessControl.QualifiedAce):bool">
				<signature>System.Security.AccessControl.CommonAcl.AccessMasksAreMergeable(System.Security.AccessControl.QualifiedAce;System.Security.AccessControl.QualifiedAce):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="AceFlagsAreMergeable" uniqueID="AceFlagsAreMergeable(System.Security.AccessControl.QualifiedAce;System.Security.AccessControl.QualifiedAce):bool">
				<signature>System.Security.AccessControl.CommonAcl.AceFlagsAreMergeable(System.Security.AccessControl.QualifiedAce;System.Security.AccessControl.QualifiedAce):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AddQualifiedAce" uniqueID="AddQualifiedAce(System.Security.Principal.SecurityIdentifier;System.Security.AccessControl.AceQualifier;int;System.Security.AccessControl.AceFlags;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid):void">
				<signature>System.Security.AccessControl.CommonAcl.AddQualifiedAce(System.Security.Principal.SecurityIdentifier;System.Security.AccessControl.AceQualifier;int;System.Security.AccessControl.AceFlags;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CanonicalCheck" uniqueID="CanonicalCheck(bool):bool">
				<signature>System.Security.AccessControl.CommonAcl.CanonicalCheck(bool):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Canonicalize" uniqueID="Canonicalize(bool;bool):void">
				<signature>System.Security.AccessControl.CommonAcl.Canonicalize(bool;bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CanonicalizeIfNecessary" uniqueID="CanonicalizeIfNecessary():void">
				<signature>System.Security.AccessControl.CommonAcl.CanonicalizeIfNecessary():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckAccessType" uniqueID="CheckAccessType(System.Security.AccessControl.AccessControlType):void">
				<signature>System.Security.AccessControl.CommonAcl.CheckAccessType(System.Security.AccessControl.AccessControlType):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckFlags" uniqueID="CheckFlags(System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags):void">
				<signature>System.Security.AccessControl.CommonAcl.CheckFlags(System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CommonAcl" uniqueID="CommonAcl(bool;bool;System.Security.AccessControl.RawAcl;bool;bool):void">
				<signature>System.Security.AccessControl.CommonAcl.CommonAcl(bool;bool;System.Security.AccessControl.RawAcl;bool;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CommonAcl" uniqueID="CommonAcl(bool;bool;byte;int):void">
				<signature>System.Security.AccessControl.CommonAcl.CommonAcl(bool;bool;byte;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetAccessMaskForRemoval" uniqueID="GetAccessMaskForRemoval(System.Security.AccessControl.QualifiedAce;System.Security.AccessControl.ObjectAceFlags;System.Guid;int):bool">
				<signature>System.Security.AccessControl.CommonAcl.GetAccessMaskForRemoval(System.Security.AccessControl.QualifiedAce;System.Security.AccessControl.ObjectAceFlags;System.Guid;int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetBinaryForm" uniqueID="GetBinaryForm(byte[];int):void">
				<signature>System.Security.AccessControl.CommonAcl.GetBinaryForm(byte[];int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetInheritanceFlagsForRemoval" uniqueID="GetInheritanceFlagsForRemoval(System.Security.AccessControl.QualifiedAce;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Security.AccessControl.AceFlags):bool">
				<signature>System.Security.AccessControl.CommonAcl.GetInheritanceFlagsForRemoval(System.Security.AccessControl.QualifiedAce;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Security.AccessControl.AceFlags):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetObjectTypesForSplit" uniqueID="GetObjectTypesForSplit(System.Security.AccessControl.ObjectAce;int;System.Security.AccessControl.AceFlags;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid):void">
				<signature>System.Security.AccessControl.CommonAcl.GetObjectTypesForSplit(System.Security.AccessControl.ObjectAce;int;System.Security.AccessControl.AceFlags;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="InheritedObjectTypesMatch" uniqueID="InheritedObjectTypesMatch(System.Security.AccessControl.QualifiedAce;System.Security.AccessControl.QualifiedAce):bool">
				<signature>System.Security.AccessControl.CommonAcl.InheritedObjectTypesMatch(System.Security.AccessControl.QualifiedAce;System.Security.AccessControl.QualifiedAce):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="InspectAce" uniqueID="InspectAce(System.Security.AccessControl.GenericAce;bool):bool">
				<signature>System.Security.AccessControl.CommonAcl.InspectAce(System.Security.AccessControl.GenericAce;bool):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="MergeAces" uniqueID="MergeAces(System.Security.AccessControl.QualifiedAce;System.Security.AccessControl.QualifiedAce):bool">
				<signature>System.Security.AccessControl.CommonAcl.MergeAces(System.Security.AccessControl.QualifiedAce;System.Security.AccessControl.QualifiedAce):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ObjectTypesMatch" uniqueID="ObjectTypesMatch(System.Security.AccessControl.QualifiedAce;System.Security.AccessControl.QualifiedAce):bool">
				<signature>System.Security.AccessControl.CommonAcl.ObjectTypesMatch(System.Security.AccessControl.QualifiedAce;System.Security.AccessControl.QualifiedAce):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="OnAclModificationTried" uniqueID="OnAclModificationTried():void">
				<signature>System.Security.AccessControl.CommonAcl.OnAclModificationTried():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Purge" uniqueID="Purge(System.Security.Principal.SecurityIdentifier):void">
				<signature>System.Security.AccessControl.CommonAcl.Purge(System.Security.Principal.SecurityIdentifier):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="QuickSort" uniqueID="QuickSort(int;int;bool):void">
				<signature>System.Security.AccessControl.CommonAcl.QuickSort(int;int;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveInheritedAces" uniqueID="RemoveInheritedAces():void">
				<signature>System.Security.AccessControl.CommonAcl.RemoveInheritedAces():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="RemoveMeaninglessAcesAndFlags" uniqueID="RemoveMeaninglessAcesAndFlags(bool):void">
				<signature>System.Security.AccessControl.CommonAcl.RemoveMeaninglessAcesAndFlags(bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RemoveQualifiedAces" uniqueID="RemoveQualifiedAces(System.Security.Principal.SecurityIdentifier;System.Security.AccessControl.AceQualifier;int;System.Security.AccessControl.AceFlags;bool;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid):bool">
				<signature>System.Security.AccessControl.CommonAcl.RemoveQualifiedAces(System.Security.Principal.SecurityIdentifier;System.Security.AccessControl.AceQualifier;int;System.Security.AccessControl.AceFlags;bool;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RemoveQualifiedAcesSpecific" uniqueID="RemoveQualifiedAcesSpecific(System.Security.Principal.SecurityIdentifier;System.Security.AccessControl.AceQualifier;int;System.Security.AccessControl.AceFlags;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid):void">
				<signature>System.Security.AccessControl.CommonAcl.RemoveQualifiedAcesSpecific(System.Security.Principal.SecurityIdentifier;System.Security.AccessControl.AceQualifier;int;System.Security.AccessControl.AceFlags;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetQualifiedAce" uniqueID="SetQualifiedAce(System.Security.Principal.SecurityIdentifier;System.Security.AccessControl.AceQualifier;int;System.Security.AccessControl.AceFlags;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid):void">
				<signature>System.Security.AccessControl.CommonAcl.SetQualifiedAce(System.Security.Principal.SecurityIdentifier;System.Security.AccessControl.AceQualifier;int;System.Security.AccessControl.AceFlags;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ThrowIfNotCanonical" uniqueID="ThrowIfNotCanonical():void">
				<signature>System.Security.AccessControl.CommonAcl.ThrowIfNotCanonical():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_BinaryLength" uniqueID="get_BinaryLength():int">
				<signature>System.Security.AccessControl.CommonAcl.get_BinaryLength():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Security.AccessControl.CommonAcl.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsCanonical" uniqueID="get_IsCanonical():bool">
				<signature>System.Security.AccessControl.CommonAcl.get_IsCanonical():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsContainer" uniqueID="get_IsContainer():bool">
				<signature>System.Security.AccessControl.CommonAcl.get_IsContainer():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsDS" uniqueID="get_IsDS():bool">
				<signature>System.Security.AccessControl.CommonAcl.get_IsDS():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.Security.AccessControl.GenericAce">
				<signature>System.Security.AccessControl.CommonAcl.get_Item(int):System.Security.AccessControl.GenericAce</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_RawAcl" uniqueID="get_RawAcl():System.Security.AccessControl.RawAcl">
				<signature>System.Security.AccessControl.CommonAcl.get_RawAcl():System.Security.AccessControl.RawAcl</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Revision" uniqueID="get_Revision():byte">
				<signature>System.Security.AccessControl.CommonAcl.get_Revision():byte</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(int;System.Security.AccessControl.GenericAce):void">
				<signature>System.Security.AccessControl.CommonAcl.set_Item(int;System.Security.AccessControl.GenericAce):void</signature>
			</method>
		</class>
		<class name="ObjectAce" uniqueID="System.Security.AccessControl.ObjectAce">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Security.AccessControl.ObjectAce.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="MaxOpaqueLength" uniqueID="MaxOpaqueLength(bool):int">
				<signature>System.Security.AccessControl.ObjectAce.MaxOpaqueLength(bool):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ParseBinaryForm" uniqueID="ParseBinaryForm(byte[];int;System.Security.AccessControl.AceQualifier;int;System.Security.Principal.SecurityIdentifier;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid;bool;byte[]):bool">
				<signature>System.Security.AccessControl.ObjectAce.ParseBinaryForm(byte[];int;System.Security.AccessControl.AceQualifier;int;System.Security.Principal.SecurityIdentifier;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid;bool;byte[]):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="TypeFromQualifier" uniqueID="TypeFromQualifier(bool;System.Security.AccessControl.AceQualifier):System.Security.AccessControl.AceType">
				<signature>System.Security.AccessControl.ObjectAce.TypeFromQualifier(bool;System.Security.AccessControl.AceQualifier):System.Security.AccessControl.AceType</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetBinaryForm" uniqueID="GetBinaryForm(byte[];int):void">
				<signature>System.Security.AccessControl.ObjectAce.GetBinaryForm(byte[];int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InheritedObjectTypesMatch" uniqueID="InheritedObjectTypesMatch(System.Security.AccessControl.ObjectAceFlags;System.Guid):bool">
				<signature>System.Security.AccessControl.ObjectAce.InheritedObjectTypesMatch(System.Security.AccessControl.ObjectAceFlags;System.Guid):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ObjectAce" uniqueID="ObjectAce(System.Security.AccessControl.AceFlags;System.Security.AccessControl.AceQualifier;int;System.Security.Principal.SecurityIdentifier;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid;bool;byte[]):void">
				<signature>System.Security.AccessControl.ObjectAce.ObjectAce(System.Security.AccessControl.AceFlags;System.Security.AccessControl.AceQualifier;int;System.Security.Principal.SecurityIdentifier;System.Security.AccessControl.ObjectAceFlags;System.Guid;System.Guid;bool;byte[]):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ObjectTypesMatch" uniqueID="ObjectTypesMatch(System.Security.AccessControl.ObjectAceFlags;System.Guid):bool">
				<signature>System.Security.AccessControl.ObjectAce.ObjectTypesMatch(System.Security.AccessControl.ObjectAceFlags;System.Guid):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_BinaryLength" uniqueID="get_BinaryLength():int">
				<signature>System.Security.AccessControl.ObjectAce.get_BinaryLength():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_InheritedObjectAceType" uniqueID="get_InheritedObjectAceType():System.Guid">
				<signature>System.Security.AccessControl.ObjectAce.get_InheritedObjectAceType():System.Guid</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_MaxOpaqueLengthInternal" uniqueID="get_MaxOpaqueLengthInternal():int">
				<signature>System.Security.AccessControl.ObjectAce.get_MaxOpaqueLengthInternal():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ObjectAceFlags" uniqueID="get_ObjectAceFlags():System.Security.AccessControl.ObjectAceFlags">
				<signature>System.Security.AccessControl.ObjectAce.get_ObjectAceFlags():System.Security.AccessControl.ObjectAceFlags</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ObjectAceType" uniqueID="get_ObjectAceType():System.Guid">
				<signature>System.Security.AccessControl.ObjectAce.get_ObjectAceType():System.Guid</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_InheritedObjectAceType" uniqueID="set_InheritedObjectAceType(System.Guid):void">
				<signature>System.Security.AccessControl.ObjectAce.set_InheritedObjectAceType(System.Guid):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ObjectAceFlags" uniqueID="set_ObjectAceFlags(System.Security.AccessControl.ObjectAceFlags):void">
				<signature>System.Security.AccessControl.ObjectAce.set_ObjectAceFlags(System.Security.AccessControl.ObjectAceFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ObjectAceType" uniqueID="set_ObjectAceType(System.Guid):void">
				<signature>System.Security.AccessControl.ObjectAce.set_ObjectAceType(System.Guid):void</signature>
			</method>
		</class>
		<class name="GenericSecurityDescriptor" uniqueID="System.Security.AccessControl.GenericSecurityDescriptor">
			<method accessibility="Public" methodKind="Static" name="IsSddlConversionSupported" uniqueID="IsSddlConversionSupported():bool">
				<signature>System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="MarshalInt" uniqueID="MarshalInt(byte[];int;int):void">
				<signature>System.Security.AccessControl.GenericSecurityDescriptor.MarshalInt(byte[];int;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="UnmarshalInt" uniqueID="UnmarshalInt(byte[];int):int">
				<signature>System.Security.AccessControl.GenericSecurityDescriptor.UnmarshalInt(byte[];int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_Revision" uniqueID="get_Revision():byte">
				<signature>System.Security.AccessControl.GenericSecurityDescriptor.get_Revision():byte</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GenericSecurityDescriptor" uniqueID="GenericSecurityDescriptor():void">
				<signature>System.Security.AccessControl.GenericSecurityDescriptor.GenericSecurityDescriptor():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetBinaryForm" uniqueID="GetBinaryForm(byte[];int):void">
				<signature>System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(byte[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSddlForm" uniqueID="GetSddlForm(System.Security.AccessControl.AccessControlSections):string">
				<signature>System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_BinaryLength" uniqueID="get_BinaryLength():int">
				<signature>System.Security.AccessControl.GenericSecurityDescriptor.get_BinaryLength():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ControlFlags" uniqueID="get_ControlFlags():System.Security.AccessControl.ControlFlags">
				<signature>System.Security.AccessControl.GenericSecurityDescriptor.get_ControlFlags():System.Security.AccessControl.ControlFlags</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_GenericDacl" uniqueID="get_GenericDacl():System.Security.AccessControl.GenericAcl">
				<signature>System.Security.AccessControl.GenericSecurityDescriptor.get_GenericDacl():System.Security.AccessControl.GenericAcl</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_GenericSacl" uniqueID="get_GenericSacl():System.Security.AccessControl.GenericAcl">
				<signature>System.Security.AccessControl.GenericSecurityDescriptor.get_GenericSacl():System.Security.AccessControl.GenericAcl</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Group" uniqueID="get_Group():System.Security.Principal.SecurityIdentifier">
				<signature>System.Security.AccessControl.GenericSecurityDescriptor.get_Group():System.Security.Principal.SecurityIdentifier</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_IsCraftedAefaDacl" uniqueID="get_IsCraftedAefaDacl():bool">
				<signature>System.Security.AccessControl.GenericSecurityDescriptor.get_IsCraftedAefaDacl():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Owner" uniqueID="get_Owner():System.Security.Principal.SecurityIdentifier">
				<signature>System.Security.AccessControl.GenericSecurityDescriptor.get_Owner():System.Security.Principal.SecurityIdentifier</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Group" uniqueID="set_Group(System.Security.Principal.SecurityIdentifier):void">
				<signature>System.Security.AccessControl.GenericSecurityDescriptor.set_Group(System.Security.Principal.SecurityIdentifier):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Owner" uniqueID="set_Owner(System.Security.Principal.SecurityIdentifier):void">
				<signature>System.Security.AccessControl.GenericSecurityDescriptor.set_Owner(System.Security.Principal.SecurityIdentifier):void</signature>
			</method>
		</class>
		<class name="NativeObjectSecurity" uniqueID="System.Security.AccessControl.NativeObjectSecurity">
			<method accessibility="Private" methodKind="Static" name="CreateInternal" uniqueID="CreateInternal(System.Security.AccessControl.ResourceType;bool;string;System.Runtime.InteropServices.SafeHandle;System.Security.AccessControl.AccessControlSections;bool;System.Security.AccessControl.NativeObjectSecurity+ExceptionFromErrorCode;object):System.Security.AccessControl.CommonSecurityDescriptor">
				<signature>System.Security.AccessControl.NativeObjectSecurity.CreateInternal(System.Security.AccessControl.ResourceType;bool;string;System.Runtime.InteropServices.SafeHandle;System.Security.AccessControl.AccessControlSections;bool;System.Security.AccessControl.NativeObjectSecurity+ExceptionFromErrorCode;object):System.Security.AccessControl.CommonSecurityDescriptor</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="NativeObjectSecurity" uniqueID="NativeObjectSecurity(System.Security.AccessControl.ResourceType;System.Security.AccessControl.CommonSecurityDescriptor):void">
				<signature>System.Security.AccessControl.NativeObjectSecurity.NativeObjectSecurity(System.Security.AccessControl.ResourceType;System.Security.AccessControl.CommonSecurityDescriptor):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="NativeObjectSecurity" uniqueID="NativeObjectSecurity(System.Security.AccessControl.ResourceType;System.Security.AccessControl.CommonSecurityDescriptor;System.Security.AccessControl.NativeObjectSecurity+ExceptionFromErrorCode):void">
				<signature>System.Security.AccessControl.NativeObjectSecurity.NativeObjectSecurity(System.Security.AccessControl.ResourceType;System.Security.AccessControl.CommonSecurityDescriptor;System.Security.AccessControl.NativeObjectSecurity+ExceptionFromErrorCode):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="NativeObjectSecurity" uniqueID="NativeObjectSecurity(bool;System.Security.AccessControl.ResourceType):void">
				<signature>System.Security.AccessControl.NativeObjectSecurity.NativeObjectSecurity(bool;System.Security.AccessControl.ResourceType):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="NativeObjectSecurity" uniqueID="NativeObjectSecurity(bool;System.Security.AccessControl.ResourceType;System.Runtime.InteropServices.SafeHandle;System.Security.AccessControl.AccessControlSections):void">
				<signature>System.Security.AccessControl.NativeObjectSecurity.NativeObjectSecurity(bool;System.Security.AccessControl.ResourceType;System.Runtime.InteropServices.SafeHandle;System.Security.AccessControl.AccessControlSections):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="NativeObjectSecurity" uniqueID="NativeObjectSecurity(bool;System.Security.AccessControl.ResourceType;System.Runtime.InteropServices.SafeHandle;System.Security.AccessControl.AccessControlSections;System.Security.AccessControl.NativeObjectSecurity+ExceptionFromErrorCode;object):void">
				<signature>System.Security.AccessControl.NativeObjectSecurity.NativeObjectSecurity(bool;System.Security.AccessControl.ResourceType;System.Runtime.InteropServices.SafeHandle;System.Security.AccessControl.AccessControlSections;System.Security.AccessControl.NativeObjectSecurity+ExceptionFromErrorCode;object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="NativeObjectSecurity" uniqueID="NativeObjectSecurity(bool;System.Security.AccessControl.ResourceType;System.Security.AccessControl.NativeObjectSecurity+ExceptionFromErrorCode;object):void">
				<signature>System.Security.AccessControl.NativeObjectSecurity.NativeObjectSecurity(bool;System.Security.AccessControl.ResourceType;System.Security.AccessControl.NativeObjectSecurity+ExceptionFromErrorCode;object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="NativeObjectSecurity" uniqueID="NativeObjectSecurity(bool;System.Security.AccessControl.ResourceType;string;System.Security.AccessControl.AccessControlSections):void">
				<signature>System.Security.AccessControl.NativeObjectSecurity.NativeObjectSecurity(bool;System.Security.AccessControl.ResourceType;string;System.Security.AccessControl.AccessControlSections):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="NativeObjectSecurity" uniqueID="NativeObjectSecurity(bool;System.Security.AccessControl.ResourceType;string;System.Security.AccessControl.AccessControlSections;System.Security.AccessControl.NativeObjectSecurity+ExceptionFromErrorCode;object):void">
				<signature>System.Security.AccessControl.NativeObjectSecurity.NativeObjectSecurity(bool;System.Security.AccessControl.ResourceType;string;System.Security.AccessControl.AccessControlSections;System.Security.AccessControl.NativeObjectSecurity+ExceptionFromErrorCode;object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Persist" uniqueID="Persist(System.Runtime.InteropServices.SafeHandle;System.Security.AccessControl.AccessControlSections):void">
				<signature>System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle;System.Security.AccessControl.AccessControlSections):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Persist" uniqueID="Persist(System.Runtime.InteropServices.SafeHandle;System.Security.AccessControl.AccessControlSections;object):void">
				<signature>System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle;System.Security.AccessControl.AccessControlSections;object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Persist" uniqueID="Persist(string;System.Runtime.InteropServices.SafeHandle;System.Security.AccessControl.AccessControlSections;object):void">
				<signature>System.Security.AccessControl.NativeObjectSecurity.Persist(string;System.Runtime.InteropServices.SafeHandle;System.Security.AccessControl.AccessControlSections;object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Persist" uniqueID="Persist(string;System.Security.AccessControl.AccessControlSections):void">
				<signature>System.Security.AccessControl.NativeObjectSecurity.Persist(string;System.Security.AccessControl.AccessControlSections):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Persist" uniqueID="Persist(string;System.Security.AccessControl.AccessControlSections;object):void">
				<signature>System.Security.AccessControl.NativeObjectSecurity.Persist(string;System.Security.AccessControl.AccessControlSections;object):void</signature>
			</method>
		</class>
		<class name="NativeObjectSecurity+ExceptionFromErrorCode" uniqueID="System.Security.AccessControl.NativeObjectSecurity+ExceptionFromErrorCode">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(int;string;System.Runtime.InteropServices.SafeHandle;object;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Security.AccessControl.NativeObjectSecurity+ExceptionFromErrorCode.BeginInvoke(int;string;System.Runtime.InteropServices.SafeHandle;object;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):System.Exception">
				<signature>System.Security.AccessControl.NativeObjectSecurity+ExceptionFromErrorCode.EndInvoke(System.IAsyncResult):System.Exception</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(int;string;System.Runtime.InteropServices.SafeHandle;object):System.Exception">
				<signature>System.Security.AccessControl.NativeObjectSecurity+ExceptionFromErrorCode.Invoke(int;string;System.Runtime.InteropServices.SafeHandle;object):System.Exception</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="NativeObjectSecurity+ExceptionFromErrorCode" uniqueID="NativeObjectSecurity+ExceptionFromErrorCode(object;native signed int):void">
				<signature>System.Security.AccessControl.NativeObjectSecurity+ExceptionFromErrorCode.NativeObjectSecurity+ExceptionFromErrorCode(object;native signed int):void</signature>
			</method>
		</class>
		<class name="QualifiedAce" uniqueID="System.Security.AccessControl.QualifiedAce">
			<method accessibility="Public" methodKind="Member" name="GetOpaque" uniqueID="GetOpaque():byte[]">
				<signature>System.Security.AccessControl.QualifiedAce.GetOpaque():byte[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="QualifiedAce" uniqueID="QualifiedAce(System.Security.AccessControl.AceType;System.Security.AccessControl.AceFlags;int;System.Security.Principal.SecurityIdentifier;byte[]):void">
				<signature>System.Security.AccessControl.QualifiedAce.QualifiedAce(System.Security.AccessControl.AceType;System.Security.AccessControl.AceFlags;int;System.Security.Principal.SecurityIdentifier;byte[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="QualifierFromType" uniqueID="QualifierFromType(System.Security.AccessControl.AceType;bool):System.Security.AccessControl.AceQualifier">
				<signature>System.Security.AccessControl.QualifiedAce.QualifierFromType(System.Security.AccessControl.AceType;bool):System.Security.AccessControl.AceQualifier</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetOpaque" uniqueID="SetOpaque(byte[]):void">
				<signature>System.Security.AccessControl.QualifiedAce.SetOpaque(byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AceQualifier" uniqueID="get_AceQualifier():System.Security.AccessControl.AceQualifier">
				<signature>System.Security.AccessControl.QualifiedAce.get_AceQualifier():System.Security.AccessControl.AceQualifier</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsCallback" uniqueID="get_IsCallback():bool">
				<signature>System.Security.AccessControl.QualifiedAce.get_IsCallback():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_MaxOpaqueLengthInternal" uniqueID="get_MaxOpaqueLengthInternal():int">
				<signature>System.Security.AccessControl.QualifiedAce.get_MaxOpaqueLengthInternal():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_OpaqueLength" uniqueID="get_OpaqueLength():int">
				<signature>System.Security.AccessControl.QualifiedAce.get_OpaqueLength():int</signature>
			</method>
		</class>
		<class name="RawSecurityDescriptor" uniqueID="System.Security.AccessControl.RawSecurityDescriptor">
			<method accessibility="Private" methodKind="Static" name="BinaryFormFromSddlForm" uniqueID="BinaryFormFromSddlForm(string):byte[]">
				<signature>System.Security.AccessControl.RawSecurityDescriptor.BinaryFormFromSddlForm(string):byte[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CreateFromParts" uniqueID="CreateFromParts(System.Security.AccessControl.ControlFlags;System.Security.Principal.SecurityIdentifier;System.Security.Principal.SecurityIdentifier;System.Security.AccessControl.RawAcl;System.Security.AccessControl.RawAcl):void">
				<signature>System.Security.AccessControl.RawSecurityDescriptor.CreateFromParts(System.Security.AccessControl.ControlFlags;System.Security.Principal.SecurityIdentifier;System.Security.Principal.SecurityIdentifier;System.Security.AccessControl.RawAcl;System.Security.AccessControl.RawAcl):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RawSecurityDescriptor" uniqueID="RawSecurityDescriptor(System.Security.AccessControl.ControlFlags;System.Security.Principal.SecurityIdentifier;System.Security.Principal.SecurityIdentifier;System.Security.AccessControl.RawAcl;System.Security.AccessControl.RawAcl):void">
				<signature>System.Security.AccessControl.RawSecurityDescriptor.RawSecurityDescriptor(System.Security.AccessControl.ControlFlags;System.Security.Principal.SecurityIdentifier;System.Security.Principal.SecurityIdentifier;System.Security.AccessControl.RawAcl;System.Security.AccessControl.RawAcl):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RawSecurityDescriptor" uniqueID="RawSecurityDescriptor(byte[];int):void">
				<signature>System.Security.AccessControl.RawSecurityDescriptor.RawSecurityDescriptor(byte[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RawSecurityDescriptor" uniqueID="RawSecurityDescriptor(string):void">
				<signature>System.Security.AccessControl.RawSecurityDescriptor.RawSecurityDescriptor(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetFlags" uniqueID="SetFlags(System.Security.AccessControl.ControlFlags):void">
				<signature>System.Security.AccessControl.RawSecurityDescriptor.SetFlags(System.Security.AccessControl.ControlFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ControlFlags" uniqueID="get_ControlFlags():System.Security.AccessControl.ControlFlags">
				<signature>System.Security.AccessControl.RawSecurityDescriptor.get_ControlFlags():System.Security.AccessControl.ControlFlags</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DiscretionaryAcl" uniqueID="get_DiscretionaryAcl():System.Security.AccessControl.RawAcl">
				<signature>System.Security.AccessControl.RawSecurityDescriptor.get_DiscretionaryAcl():System.Security.AccessControl.RawAcl</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_GenericDacl" uniqueID="get_GenericDacl():System.Security.AccessControl.GenericAcl">
				<signature>System.Security.AccessControl.RawSecurityDescriptor.get_GenericDacl():System.Security.AccessControl.GenericAcl</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_GenericSacl" uniqueID="get_GenericSacl():System.Security.AccessControl.GenericAcl">
				<signature>System.Security.AccessControl.RawSecurityDescriptor.get_GenericSacl():System.Security.AccessControl.GenericAcl</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Group" uniqueID="get_Group():System.Security.Principal.SecurityIdentifier">
				<signature>System.Security.AccessControl.RawSecurityDescriptor.get_Group():System.Security.Principal.SecurityIdentifier</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Owner" uniqueID="get_Owner():System.Security.Principal.SecurityIdentifier">
				<signature>System.Security.AccessControl.RawSecurityDescriptor.get_Owner():System.Security.Principal.SecurityIdentifier</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ResourceManagerControl" uniqueID="get_ResourceManagerControl():byte">
				<signature>System.Security.AccessControl.RawSecurityDescriptor.get_ResourceManagerControl():byte</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SystemAcl" uniqueID="get_SystemAcl():System.Security.AccessControl.RawAcl">
				<signature>System.Security.AccessControl.RawSecurityDescriptor.get_SystemAcl():System.Security.AccessControl.RawAcl</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_DiscretionaryAcl" uniqueID="set_DiscretionaryAcl(System.Security.AccessControl.RawAcl):void">
				<signature>System.Security.AccessControl.RawSecurityDescriptor.set_DiscretionaryAcl(System.Security.AccessControl.RawAcl):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Group" uniqueID="set_Group(System.Security.Principal.SecurityIdentifier):void">
				<signature>System.Security.AccessControl.RawSecurityDescriptor.set_Group(System.Security.Principal.SecurityIdentifier):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Owner" uniqueID="set_Owner(System.Security.Principal.SecurityIdentifier):void">
				<signature>System.Security.AccessControl.RawSecurityDescriptor.set_Owner(System.Security.Principal.SecurityIdentifier):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ResourceManagerControl" uniqueID="set_ResourceManagerControl(byte):void">
				<signature>System.Security.AccessControl.RawSecurityDescriptor.set_ResourceManagerControl(byte):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_SystemAcl" uniqueID="set_SystemAcl(System.Security.AccessControl.RawAcl):void">
				<signature>System.Security.AccessControl.RawSecurityDescriptor.set_SystemAcl(System.Security.AccessControl.RawAcl):void</signature>
			</method>
		</class>
		<class name="AccessRule" uniqueID="System.Security.AccessControl.AccessRule">
			<method accessibility="Protected" methodKind="Member" name="AccessRule" uniqueID="AccessRule(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AccessControlType):void">
				<signature>System.Security.AccessControl.AccessRule.AccessRule(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AccessControlType):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AccessControlType" uniqueID="get_AccessControlType():System.Security.AccessControl.AccessControlType">
				<signature>System.Security.AccessControl.AccessRule.get_AccessControlType():System.Security.AccessControl.AccessControlType</signature>
			</method>
		</class>
		<class name="AuthorizationRuleCollection" uniqueID="System.Security.AccessControl.AuthorizationRuleCollection">
			<method accessibility="Protected" methodKind="Member" name="AddRule" uniqueID="AddRule(System.Security.AccessControl.AuthorizationRule):void">
				<signature>System.Security.AccessControl.AuthorizationRuleCollection.AddRule(System.Security.AccessControl.AuthorizationRule):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AuthorizationRuleCollection" uniqueID="AuthorizationRuleCollection():void">
				<signature>System.Security.AccessControl.AuthorizationRuleCollection.AuthorizationRuleCollection():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Security.AccessControl.AuthorizationRule[];int):void">
				<signature>System.Security.AccessControl.AuthorizationRuleCollection.CopyTo(System.Security.AccessControl.AuthorizationRule[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.Security.AccessControl.AuthorizationRule">
				<signature>System.Security.AccessControl.AuthorizationRuleCollection.get_Item(int):System.Security.AccessControl.AuthorizationRule</signature>
			</method>
		</class>
		<class name="EventWaitHandleAuditRule" uniqueID="System.Security.AccessControl.EventWaitHandleAuditRule">
			<method accessibility="Public" methodKind="Member" name="EventWaitHandleAuditRule" uniqueID="EventWaitHandleAuditRule(System.Security.Principal.IdentityReference;System.Security.AccessControl.EventWaitHandleRights;System.Security.AccessControl.AuditFlags):void">
				<signature>System.Security.AccessControl.EventWaitHandleAuditRule.EventWaitHandleAuditRule(System.Security.Principal.IdentityReference;System.Security.AccessControl.EventWaitHandleRights;System.Security.AccessControl.AuditFlags):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EventWaitHandleAuditRule" uniqueID="EventWaitHandleAuditRule(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AuditFlags):void">
				<signature>System.Security.AccessControl.EventWaitHandleAuditRule.EventWaitHandleAuditRule(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AuditFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_EventWaitHandleRights" uniqueID="get_EventWaitHandleRights():System.Security.AccessControl.EventWaitHandleRights">
				<signature>System.Security.AccessControl.EventWaitHandleAuditRule.get_EventWaitHandleRights():System.Security.AccessControl.EventWaitHandleRights</signature>
			</method>
		</class>
		<class name="FileSecurity" uniqueID="System.Security.AccessControl.FileSecurity">
			<method accessibility="Public" methodKind="Member" name="FileSecurity" uniqueID="FileSecurity():void">
				<signature>System.Security.AccessControl.FileSecurity.FileSecurity():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FileSecurity" uniqueID="FileSecurity(Microsoft.Win32.SafeHandles.SafeFileHandle;string;System.Security.AccessControl.AccessControlSections):void">
				<signature>System.Security.AccessControl.FileSecurity.FileSecurity(Microsoft.Win32.SafeHandles.SafeFileHandle;string;System.Security.AccessControl.AccessControlSections):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FileSecurity" uniqueID="FileSecurity(string;System.Security.AccessControl.AccessControlSections):void">
				<signature>System.Security.AccessControl.FileSecurity.FileSecurity(string;System.Security.AccessControl.AccessControlSections):void</signature>
			</method>
		</class>
		<class name="FileSystemSecurity" uniqueID="System.Security.AccessControl.FileSystemSecurity">
			<method accessibility="Private" methodKind="Static" name="_HandleErrorCode" uniqueID="_HandleErrorCode(int;string;System.Runtime.InteropServices.SafeHandle;object):System.Exception">
				<signature>System.Security.AccessControl.FileSystemSecurity._HandleErrorCode(int;string;System.Runtime.InteropServices.SafeHandle;object):System.Exception</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AccessRuleFactory" uniqueID="AccessRuleFactory(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AccessControlType):System.Security.AccessControl.AccessRule">
				<signature>System.Security.AccessControl.FileSystemSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AccessControlType):System.Security.AccessControl.AccessRule</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddAccessRule" uniqueID="AddAccessRule(System.Security.AccessControl.FileSystemAccessRule):void">
				<signature>System.Security.AccessControl.FileSystemSecurity.AddAccessRule(System.Security.AccessControl.FileSystemAccessRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddAuditRule" uniqueID="AddAuditRule(System.Security.AccessControl.FileSystemAuditRule):void">
				<signature>System.Security.AccessControl.FileSystemSecurity.AddAuditRule(System.Security.AccessControl.FileSystemAuditRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AuditRuleFactory" uniqueID="AuditRuleFactory(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AuditFlags):System.Security.AccessControl.AuditRule">
				<signature>System.Security.AccessControl.FileSystemSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference;int;bool;System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags;System.Security.AccessControl.AuditFlags):System.Security.AccessControl.AuditRule</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FileSystemSecurity" uniqueID="FileSystemSecurity(bool):void">
				<signature>System.Security.AccessControl.FileSystemSecurity.FileSystemSecurity(bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FileSystemSecurity" uniqueID="FileSystemSecurity(bool;Microsoft.Win32.SafeHandles.SafeFileHandle;System.Security.AccessControl.AccessControlSections;bool):void">
				<signature>System.Security.AccessControl.FileSystemSecurity.FileSystemSecurity(bool;Microsoft.Win32.SafeHandles.SafeFileHandle;System.Security.AccessControl.AccessControlSections;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FileSystemSecurity" uniqueID="FileSystemSecurity(bool;string;System.Security.AccessControl.AccessControlSections;bool):void">
				<signature>System.Security.AccessControl.FileSystemSecurity.FileSystemSecurity(bool;string;System.Security.AccessControl.AccessControlSections;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetAccessControlSectionsFromChanges" uniqueID="GetAccessControlSectionsFromChanges():System.Security.AccessControl.AccessControlSections">
				<signature>System.Security.AccessControl.FileSystemSecurity.GetAccessControlSectionsFromChanges():System.Security.AccessControl.AccessControlSections</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Persist" uniqueID="Persist(Microsoft.Win32.SafeHandles.SafeFileHandle;string):void">
				<signature>System.Security.AccessControl.FileSystemSecurity.Persist(Microsoft.Win32.SafeHandles.SafeFileHandle;string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Persist" uniqueID="Persist(string):void">
				<signature>System.Security.AccessControl.FileSystemSecurity.Persist(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAccessRule" uniqueID="RemoveAccessRule(System.Security.AccessControl.FileSystemAccessRule):bool">
				<signature>System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule(System.Security.AccessControl.FileSystemAccessRule):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAccessRuleAll" uniqueID="RemoveAccessRuleAll(System.Security.AccessControl.FileSystemAccessRule):void">
				<signature>System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleAll(System.Security.AccessControl.FileSystemAccessRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAccessRuleSpecific" uniqueID="RemoveAccessRuleSpecific(System.Security.AccessControl.FileSystemAccessRule):void">
				<signature>System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.FileSystemAccessRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAuditRule" uniqueID="RemoveAuditRule(System.Security.AccessControl.FileSystemAuditRule):bool">
				<signature>System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule(System.Security.AccessControl.FileSystemAuditRule):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAuditRuleAll" uniqueID="RemoveAuditRuleAll(System.Security.AccessControl.FileSystemAuditRule):void">
				<signature>System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleAll(System.Security.AccessControl.FileSystemAuditRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAuditRuleSpecific" uniqueID="RemoveAuditRuleSpecific(System.Security.AccessControl.FileSystemAuditRule):void">
				<signature>System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.FileSystemAuditRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ResetAccessRule" uniqueID="ResetAccessRule(System.Security.AccessControl.FileSystemAccessRule):void">
				<signature>System.Security.AccessControl.FileSystemSecurity.ResetAccessRule(System.Security.AccessControl.FileSystemAccessRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetAccessRule" uniqueID="SetAccessRule(System.Security.AccessControl.FileSystemAccessRule):void">
				<signature>System.Security.AccessControl.FileSystemSecurity.SetAccessRule(System.Security.AccessControl.FileSystemAccessRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetAuditRule" uniqueID="SetAuditRule(System.Security.AccessControl.FileSystemAuditRule):void">
				<signature>System.Security.AccessControl.FileSystemSecurity.SetAuditRule(System.Security.AccessControl.FileSystemAuditRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AccessRightType" uniqueID="get_AccessRightType():System.Type">
				<signature>System.Security.AccessControl.FileSystemSecurity.get_AccessRightType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AccessRuleType" uniqueID="get_AccessRuleType():System.Type">
				<signature>System.Security.AccessControl.FileSystemSecurity.get_AccessRuleType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AuditRuleType" uniqueID="get_AuditRuleType():System.Type">
				<signature>System.Security.AccessControl.FileSystemSecurity.get_AuditRuleType():System.Type</signature>
			</method>
		</class>
		<class name="GenericAce" uniqueID="System.Security.AccessControl.GenericAce">
			<method accessibility="Protected" methodKind="Static" name="AceFlagsFromAuditFlags" uniqueID="AceFlagsFromAuditFlags(System.Security.AccessControl.AuditFlags):System.Security.AccessControl.AceFlags">
				<signature>System.Security.AccessControl.GenericAce.AceFlagsFromAuditFlags(System.Security.AccessControl.AuditFlags):System.Security.AccessControl.AceFlags</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="AceFlagsFromInheritanceFlags" uniqueID="AceFlagsFromInheritanceFlags(System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags):System.Security.AccessControl.AceFlags">
				<signature>System.Security.AccessControl.GenericAce.AceFlagsFromInheritanceFlags(System.Security.AccessControl.InheritanceFlags;System.Security.AccessControl.PropagationFlags):System.Security.AccessControl.AceFlags</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CreateFromBinaryForm" uniqueID="CreateFromBinaryForm(byte[];int):System.Security.AccessControl.GenericAce">
				<signature>System.Security.AccessControl.GenericAce.CreateFromBinaryForm(byte[];int):System.Security.AccessControl.GenericAce</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="VerifyHeader" uniqueID="VerifyHeader(byte[];int):void">
				<signature>System.Security.AccessControl.GenericAce.VerifyHeader(byte[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.Security.AccessControl.GenericAce;System.Security.AccessControl.GenericAce):bool">
				<signature>System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce;System.Security.AccessControl.GenericAce):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.Security.AccessControl.GenericAce;System.Security.AccessControl.GenericAce):bool">
				<signature>System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce;System.Security.AccessControl.GenericAce):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Copy" uniqueID="Copy():System.Security.AccessControl.GenericAce">
				<signature>System.Security.AccessControl.GenericAce.Copy():System.Security.AccessControl.GenericAce</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Security.AccessControl.GenericAce.Equals(object):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GenericAce" uniqueID="GenericAce(System.Security.AccessControl.AceType;System.Security.AccessControl.AceFlags):void">
				<signature>System.Security.AccessControl.GenericAce.GenericAce(System.Security.AccessControl.AceType;System.Security.AccessControl.AceFlags):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetBinaryForm" uniqueID="GetBinaryForm(byte[];int):void">
				<signature>System.Security.AccessControl.GenericAce.GetBinaryForm(byte[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Security.AccessControl.GenericAce.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MarshalHeader" uniqueID="MarshalHeader(byte[];int):void">
				<signature>System.Security.AccessControl.GenericAce.MarshalHeader(byte[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AceFlags" uniqueID="get_AceFlags():System.Security.AccessControl.AceFlags">
				<signature>System.Security.AccessControl.GenericAce.get_AceFlags():System.Security.AccessControl.AceFlags</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AceType" uniqueID="get_AceType():System.Security.AccessControl.AceType">
				<signature>System.Security.AccessControl.GenericAce.get_AceType():System.Security.AccessControl.AceType</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AuditFlags" uniqueID="get_AuditFlags():System.Security.AccessControl.AuditFlags">
				<signature>System.Security.AccessControl.GenericAce.get_AuditFlags():System.Security.AccessControl.AuditFlags</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_BinaryLength" uniqueID="get_BinaryLength():int">
				<signature>System.Security.AccessControl.GenericAce.get_BinaryLength():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_InheritanceFlags" uniqueID="get_InheritanceFlags():System.Security.AccessControl.InheritanceFlags">
				<signature>System.Security.AccessControl.GenericAce.get_InheritanceFlags():System.Security.AccessControl.InheritanceFlags</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsInherited" uniqueID="get_IsInherited():bool">
				<signature>System.Security.AccessControl.GenericAce.get_IsInherited():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PropagationFlags" uniqueID="get_PropagationFlags():System.Security.AccessControl.PropagationFlags">
				<signature>System.Security.AccessControl.GenericAce.get_PropagationFlags():System.Security.AccessControl.PropagationFlags</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_AceFlags" uniqueID="set_AceFlags(System.Security.AccessControl.AceFlags):void">
				<signature>System.Security.AccessControl.GenericAce.set_AceFlags(System.Security.AccessControl.AceFlags):void</signature>
			</method>
		</class>
	</package>
	<package name="System.Security.Policy">
		<class name="Evidence" uniqueID="System.Security.Policy.Evidence">
			<method accessibility="Public" methodKind="Member" name="AddAssembly" uniqueID="AddAssembly(object):void">
				<signature>System.Security.Policy.Evidence.AddAssembly(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddHost" uniqueID="AddHost(object):void">
				<signature>System.Security.Policy.Evidence.AddHost(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Security.Policy.Evidence.Clear():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Copy" uniqueID="Copy():System.Security.Policy.Evidence">
				<signature>System.Security.Policy.Evidence.Copy():System.Security.Policy.Evidence</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Array;int):void">
				<signature>System.Security.Policy.Evidence.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Security.Policy.Evidence.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Evidence" uniqueID="Evidence():void">
				<signature>System.Security.Policy.Evidence.Evidence():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Evidence" uniqueID="Evidence(System.Security.Policy.Evidence):void">
				<signature>System.Security.Policy.Evidence.Evidence(System.Security.Policy.Evidence):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Evidence" uniqueID="Evidence(char[]):void">
				<signature>System.Security.Policy.Evidence.Evidence(char[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Evidence" uniqueID="Evidence(object[];object[]):void">
				<signature>System.Security.Policy.Evidence.Evidence(object[];object[]):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FindType" uniqueID="FindType(System.Type):object">
				<signature>System.Security.Policy.Evidence.FindType(System.Type):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAssemblyEnumerator" uniqueID="GetAssemblyEnumerator():System.Collections.IEnumerator">
				<signature>System.Security.Policy.Evidence.GetAssemblyEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Security.Policy.Evidence.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Security.Policy.Evidence.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHostEnumerator" uniqueID="GetHostEnumerator():System.Collections.IEnumerator">
				<signature>System.Security.Policy.Evidence.GetHostEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MarkAllEvidenceAsUsed" uniqueID="MarkAllEvidenceAsUsed():void">
				<signature>System.Security.Policy.Evidence.MarkAllEvidenceAsUsed():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Merge" uniqueID="Merge(System.Security.Policy.Evidence):void">
				<signature>System.Security.Policy.Evidence.Merge(System.Security.Policy.Evidence):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MergeWithNoDuplicates" uniqueID="MergeWithNoDuplicates(System.Security.Policy.Evidence):void">
				<signature>System.Security.Policy.Evidence.MergeWithNoDuplicates(System.Security.Policy.Evidence):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveType" uniqueID="RemoveType(System.Type):void">
				<signature>System.Security.Policy.Evidence.RemoveType(System.Type):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ShallowCopy" uniqueID="ShallowCopy():System.Security.Policy.Evidence">
				<signature>System.Security.Policy.Evidence.ShallowCopy():System.Security.Policy.Evidence</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="WasStrongNameEvidenceUsed" uniqueID="WasStrongNameEvidenceUsed():bool">
				<signature>System.Security.Policy.Evidence.WasStrongNameEvidenceUsed():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Security.Policy.Evidence.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsReadOnly" uniqueID="get_IsReadOnly():bool">
				<signature>System.Security.Policy.Evidence.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSynchronized" uniqueID="get_IsSynchronized():bool">
				<signature>System.Security.Policy.Evidence.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Locked" uniqueID="get_Locked():bool">
				<signature>System.Security.Policy.Evidence.get_Locked():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SyncRoot" uniqueID="get_SyncRoot():object">
				<signature>System.Security.Policy.Evidence.get_SyncRoot():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Locked" uniqueID="set_Locked(bool):void">
				<signature>System.Security.Policy.Evidence.set_Locked(bool):void</signature>
			</method>
		</class>
		<class name="IMembershipCondition" uniqueID="System.Security.Policy.IMembershipCondition">
			<method accessibility="Public" methodKind="Member" name="Check" uniqueID="Check(System.Security.Policy.Evidence):bool">
				<signature>System.Security.Policy.IMembershipCondition.Check(System.Security.Policy.Evidence):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Copy" uniqueID="Copy():System.Security.Policy.IMembershipCondition">
				<signature>System.Security.Policy.IMembershipCondition.Copy():System.Security.Policy.IMembershipCondition</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Security.Policy.IMembershipCondition.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Security.Policy.IMembershipCondition.ToString():string</signature>
			</method>
		</class>
		<class name="PolicyLevel" uniqueID="System.Security.Policy.PolicyLevel">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Security.Policy.PolicyLevel.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CreateAppDomainLevel" uniqueID="CreateAppDomainLevel():System.Security.Policy.PolicyLevel">
				<signature>System.Security.Policy.PolicyLevel.CreateAppDomainLevel():System.Security.Policy.PolicyLevel</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CreateCodeGroupElement" uniqueID="CreateCodeGroupElement(string;string;System.Security.SecurityElement):System.Security.SecurityElement">
				<signature>System.Security.Policy.PolicyLevel.CreateCodeGroupElement(string;string;System.Security.SecurityElement):System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CreateExecutionSet" uniqueID="CreateExecutionSet():System.Security.NamedPermissionSet">
				<signature>System.Security.Policy.PolicyLevel.CreateExecutionSet():System.Security.NamedPermissionSet</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CreateFullTrustSet" uniqueID="CreateFullTrustSet():System.Security.NamedPermissionSet">
				<signature>System.Security.Policy.PolicyLevel.CreateFullTrustSet():System.Security.NamedPermissionSet</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CreateInternetSet" uniqueID="CreateInternetSet():System.Security.NamedPermissionSet">
				<signature>System.Security.Policy.PolicyLevel.CreateInternetSet():System.Security.NamedPermissionSet</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CreateLocalIntranetSet" uniqueID="CreateLocalIntranetSet():System.Security.NamedPermissionSet">
				<signature>System.Security.Policy.PolicyLevel.CreateLocalIntranetSet():System.Security.NamedPermissionSet</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CreateNothingSet" uniqueID="CreateNothingSet():System.Security.NamedPermissionSet">
				<signature>System.Security.Policy.PolicyLevel.CreateNothingSet():System.Security.NamedPermissionSet</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CreateSkipVerificationSet" uniqueID="CreateSkipVerificationSet():System.Security.NamedPermissionSet">
				<signature>System.Security.Policy.PolicyLevel.CreateSkipVerificationSet():System.Security.NamedPermissionSet</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="DependentAssembliesContainPermission" uniqueID="DependentAssembliesContainPermission(System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceEntry[];System.Security.SecurityElement):bool">
				<signature>System.Security.Policy.PolicyLevel.DependentAssembliesContainPermission(System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceEntry[];System.Security.SecurityElement):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ExtendNamedPermissionSetsIfApplicable" uniqueID="ExtendNamedPermissionSetsIfApplicable(System.Security.Policy.PolicyStatement;System.Security.Policy.Evidence):void">
				<signature>System.Security.Policy.PolicyLevel.ExtendNamedPermissionSetsIfApplicable(System.Security.Policy.PolicyStatement;System.Security.Policy.Evidence):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GenerateFriendlyName" uniqueID="GenerateFriendlyName(string;System.Collections.Hashtable):string">
				<signature>System.Security.Policy.PolicyLevel.GenerateFriendlyName(string;System.Collections.Hashtable):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetBuiltInSet" uniqueID="GetBuiltInSet(string):System.Security.PermissionSet">
				<signature>System.Security.Policy.PolicyLevel.GetBuiltInSet(string):System.Security.PermissionSet</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetInternetElement" uniqueID="GetInternetElement():System.Security.SecurityElement">
				<signature>System.Security.Policy.PolicyLevel.GetInternetElement():System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetLocalIntranetElement" uniqueID="GetLocalIntranetElement():System.Security.SecurityElement">
				<signature>System.Security.Policy.PolicyLevel.GetLocalIntranetElement():System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetLocationFromType" uniqueID="GetLocationFromType(System.Security.PolicyLevelType):string">
				<signature>System.Security.Policy.PolicyLevel.GetLocationFromType(System.Security.PolicyLevelType):string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetNamedPermissionSetExtensions" uniqueID="GetNamedPermissionSetExtensions(System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceEntry[];string[]):System.Security.PermissionSet">
				<signature>System.Security.Policy.PolicyLevel.GetNamedPermissionSetExtensions(System.Deployment.Internal.Isolation.Manifest.IAssemblyReferenceEntry[];string[]):System.Security.PermissionSet</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IsFullTrustAssembly" uniqueID="IsFullTrustAssembly(System.Collections.ArrayList;System.Security.Policy.Evidence):bool">
				<signature>System.Security.Policy.PolicyLevel.IsFullTrustAssembly(System.Collections.ArrayList;System.Security.Policy.Evidence):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ReadFile" uniqueID="ReadFile(string):byte[]">
				<signature>System.Security.Policy.PolicyLevel.ReadFile(string):byte[]</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ReadNamedPermissionSetExtensionsFromRegistry" uniqueID="ReadNamedPermissionSetExtensionsFromRegistry():void">
				<signature>System.Security.Policy.PolicyLevel.ReadNamedPermissionSetExtensionsFromRegistry():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="get_InternalSyncObject" uniqueID="get_InternalSyncObject():object">
				<signature>System.Security.Policy.PolicyLevel.get_InternalSyncObject():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddFullTrustAssembly" uniqueID="AddFullTrustAssembly(System.Security.Policy.StrongName):void">
				<signature>System.Security.Policy.PolicyLevel.AddFullTrustAssembly(System.Security.Policy.StrongName):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddFullTrustAssembly" uniqueID="AddFullTrustAssembly(System.Security.Policy.StrongNameMembershipCondition):void">
				<signature>System.Security.Policy.PolicyLevel.AddFullTrustAssembly(System.Security.Policy.StrongNameMembershipCondition):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddNamedPermissionSet" uniqueID="AddNamedPermissionSet(System.Security.NamedPermissionSet):void">
				<signature>System.Security.Policy.PolicyLevel.AddNamedPermissionSet(System.Security.NamedPermissionSet):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Cache" uniqueID="Cache(int;char[];System.Security.Policy.PolicyStatement):void">
				<signature>System.Security.Policy.PolicyLevel.Cache(int;char[];System.Security.Policy.PolicyStatement):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ChangeNamedPermissionSet" uniqueID="ChangeNamedPermissionSet(string;System.Security.PermissionSet):System.Security.NamedPermissionSet">
				<signature>System.Security.Policy.PolicyLevel.ChangeNamedPermissionSet(string;System.Security.PermissionSet):System.Security.NamedPermissionSet</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CheckCache" uniqueID="CheckCache(int;char[]):System.Security.Policy.PolicyStatement">
				<signature>System.Security.Policy.PolicyLevel.CheckCache(int;char[]):System.Security.Policy.PolicyStatement</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CheckLoaded" uniqueID="CheckLoaded():void">
				<signature>System.Security.Policy.PolicyLevel.CheckLoaded():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CreateDefaultAllGroup" uniqueID="CreateDefaultAllGroup():System.Security.Policy.CodeGroup">
				<signature>System.Security.Policy.PolicyLevel.CreateDefaultAllGroup():System.Security.Policy.CodeGroup</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CreateDefaultMachinePolicy" uniqueID="CreateDefaultMachinePolicy():System.Security.Policy.CodeGroup">
				<signature>System.Security.Policy.PolicyLevel.CreateDefaultMachinePolicy():System.Security.Policy.CodeGroup</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DeriveLabelFromType" uniqueID="DeriveLabelFromType():string">
				<signature>System.Security.Policy.PolicyLevel.DeriveLabelFromType():string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DeriveTypeFromLabel" uniqueID="DeriveTypeFromLabel():void">
				<signature>System.Security.Policy.PolicyLevel.DeriveTypeFromLabel():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="FindElement" uniqueID="FindElement(System.Security.SecurityElement;string):System.Security.SecurityElement">
				<signature>System.Security.Policy.PolicyLevel.FindElement(System.Security.SecurityElement;string):System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="FindElement" uniqueID="FindElement(string):System.Security.SecurityElement">
				<signature>System.Security.Policy.PolicyLevel.FindElement(string):System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FromXml" uniqueID="FromXml(System.Security.SecurityElement):void">
				<signature>System.Security.Policy.PolicyLevel.FromXml(System.Security.SecurityElement):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GenericResolve" uniqueID="GenericResolve(System.Security.Policy.Evidence;bool):System.Collections.ArrayList">
				<signature>System.Security.Policy.PolicyLevel.GenericResolve(System.Security.Policy.Evidence;bool):System.Collections.ArrayList</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetNamedPermissionSet" uniqueID="GetNamedPermissionSet(string):System.Security.NamedPermissionSet">
				<signature>System.Security.Policy.PolicyLevel.GetNamedPermissionSet(string):System.Security.NamedPermissionSet</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetNamedPermissionSetInternal" uniqueID="GetNamedPermissionSetInternal(string):System.Security.NamedPermissionSet">
				<signature>System.Security.Policy.PolicyLevel.GetNamedPermissionSetInternal(string):System.Security.NamedPermissionSet</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="LoadAllPermissionSets" uniqueID="LoadAllPermissionSets():void">
				<signature>System.Security.Policy.PolicyLevel.LoadAllPermissionSets():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="LoadError" uniqueID="LoadError(string):System.Exception">
				<signature>System.Security.Policy.PolicyLevel.LoadError(string):System.Exception</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="LoadPolicyLevel" uniqueID="LoadPolicyLevel():void">
				<signature>System.Security.Policy.PolicyLevel.LoadPolicyLevel():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="NormalizeClass" uniqueID="NormalizeClass(System.Security.SecurityElement;System.Collections.Hashtable):System.Security.SecurityElement">
				<signature>System.Security.Policy.PolicyLevel.NormalizeClass(System.Security.SecurityElement;System.Collections.Hashtable):System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="NormalizeClassDeep" uniqueID="NormalizeClassDeep(System.Security.SecurityElement;System.Collections.Hashtable):System.Security.SecurityElement">
				<signature>System.Security.Policy.PolicyLevel.NormalizeClassDeep(System.Security.SecurityElement;System.Collections.Hashtable):System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnDeserialized" uniqueID="OnDeserialized(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Security.Policy.PolicyLevel.OnDeserialized(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="PolicyLevel" uniqueID="PolicyLevel():void">
				<signature>System.Security.Policy.PolicyLevel.PolicyLevel():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="PolicyLevel" uniqueID="PolicyLevel(System.Security.PolicyLevelType):void">
				<signature>System.Security.Policy.PolicyLevel.PolicyLevel(System.Security.PolicyLevelType):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="PolicyLevel" uniqueID="PolicyLevel(System.Security.PolicyLevelType;string):void">
				<signature>System.Security.Policy.PolicyLevel.PolicyLevel(System.Security.PolicyLevelType;string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="PolicyLevel" uniqueID="PolicyLevel(System.Security.PolicyLevelType;string;System.Security.Policy.ConfigId):void">
				<signature>System.Security.Policy.PolicyLevel.PolicyLevel(System.Security.PolicyLevelType;string;System.Security.Policy.ConfigId):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Recover" uniqueID="Recover():void">
				<signature>System.Security.Policy.PolicyLevel.Recover():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveFullTrustAssembly" uniqueID="RemoveFullTrustAssembly(System.Security.Policy.StrongName):void">
				<signature>System.Security.Policy.PolicyLevel.RemoveFullTrustAssembly(System.Security.Policy.StrongName):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveFullTrustAssembly" uniqueID="RemoveFullTrustAssembly(System.Security.Policy.StrongNameMembershipCondition):void">
				<signature>System.Security.Policy.PolicyLevel.RemoveFullTrustAssembly(System.Security.Policy.StrongNameMembershipCondition):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveNamedPermissionSet" uniqueID="RemoveNamedPermissionSet(System.Security.NamedPermissionSet):System.Security.NamedPermissionSet">
				<signature>System.Security.Policy.PolicyLevel.RemoveNamedPermissionSet(System.Security.NamedPermissionSet):System.Security.NamedPermissionSet</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveNamedPermissionSet" uniqueID="RemoveNamedPermissionSet(string):System.Security.NamedPermissionSet">
				<signature>System.Security.Policy.PolicyLevel.RemoveNamedPermissionSet(string):System.Security.NamedPermissionSet</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reset" uniqueID="Reset():void">
				<signature>System.Security.Policy.PolicyLevel.Reset():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Resolve" uniqueID="Resolve(System.Security.Policy.Evidence):System.Security.Policy.PolicyStatement">
				<signature>System.Security.Policy.PolicyLevel.Resolve(System.Security.Policy.Evidence):System.Security.Policy.PolicyStatement</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Resolve" uniqueID="Resolve(System.Security.Policy.Evidence;int;char[]):System.Security.Policy.PolicyStatement">
				<signature>System.Security.Policy.PolicyLevel.Resolve(System.Security.Policy.Evidence;int;char[]):System.Security.Policy.PolicyStatement</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ResolveMatchingCodeGroups" uniqueID="ResolveMatchingCodeGroups(System.Security.Policy.Evidence):System.Security.Policy.CodeGroup">
				<signature>System.Security.Policy.PolicyLevel.ResolveMatchingCodeGroups(System.Security.Policy.Evidence):System.Security.Policy.CodeGroup</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SetDefault" uniqueID="SetDefault():void">
				<signature>System.Security.Policy.PolicyLevel.SetDefault():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SetDefaultFullTrustAssemblies" uniqueID="SetDefaultFullTrustAssemblies():void">
				<signature>System.Security.Policy.PolicyLevel.SetDefaultFullTrustAssemblies():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SetFactoryPermissionSets" uniqueID="SetFactoryPermissionSets():void">
				<signature>System.Security.Policy.PolicyLevel.SetFactoryPermissionSets():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToXml" uniqueID="ToXml():System.Security.SecurityElement">
				<signature>System.Security.Policy.PolicyLevel.ToXml():System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="UnnormalizeClass" uniqueID="UnnormalizeClass(System.Security.SecurityElement;System.Collections.Hashtable):System.Security.SecurityElement">
				<signature>System.Security.Policy.PolicyLevel.UnnormalizeClass(System.Security.SecurityElement;System.Collections.Hashtable):System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="UnnormalizeClassDeep" uniqueID="UnnormalizeClassDeep(System.Security.SecurityElement;System.Collections.Hashtable):System.Security.SecurityElement">
				<signature>System.Security.Policy.PolicyLevel.UnnormalizeClassDeep(System.Security.SecurityElement;System.Collections.Hashtable):System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ConfigId" uniqueID="get_ConfigId():System.Security.Policy.ConfigId">
				<signature>System.Security.Policy.PolicyLevel.get_ConfigId():System.Security.Policy.ConfigId</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FullTrustAssemblies" uniqueID="get_FullTrustAssemblies():System.Collections.IList">
				<signature>System.Security.Policy.PolicyLevel.get_FullTrustAssemblies():System.Collections.IList</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Label" uniqueID="get_Label():string">
				<signature>System.Security.Policy.PolicyLevel.get_Label():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_NamedPermissionSets" uniqueID="get_NamedPermissionSets():System.Collections.IList">
				<signature>System.Security.Policy.PolicyLevel.get_NamedPermissionSets():System.Collections.IList</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Path" uniqueID="get_Path():string">
				<signature>System.Security.Policy.PolicyLevel.get_Path():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_RootCodeGroup" uniqueID="get_RootCodeGroup():System.Security.Policy.CodeGroup">
				<signature>System.Security.Policy.PolicyLevel.get_RootCodeGroup():System.Security.Policy.CodeGroup</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_StoreLocation" uniqueID="get_StoreLocation():string">
				<signature>System.Security.Policy.PolicyLevel.get_StoreLocation():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Type" uniqueID="get_Type():System.Security.PolicyLevelType">
				<signature>System.Security.Policy.PolicyLevel.get_Type():System.Security.PolicyLevelType</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_RootCodeGroup" uniqueID="set_RootCodeGroup(System.Security.Policy.CodeGroup):void">
				<signature>System.Security.Policy.PolicyLevel.set_RootCodeGroup(System.Security.Policy.CodeGroup):void</signature>
			</method>
		</class>
		<class name="PolicyStatement" uniqueID="System.Security.Policy.PolicyStatement">
			<method accessibility="Private" methodKind="Static" name="ValidProperties" uniqueID="ValidProperties(System.Security.Policy.PolicyStatementAttribute):bool">
				<signature>System.Security.Policy.PolicyStatement.ValidProperties(System.Security.Policy.PolicyStatementAttribute):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AddDependentEvidence" uniqueID="AddDependentEvidence(System.Security.Policy.IDelayEvaluatedEvidence):void">
				<signature>System.Security.Policy.PolicyStatement.AddDependentEvidence(System.Security.Policy.IDelayEvaluatedEvidence):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Copy" uniqueID="Copy():System.Security.Policy.PolicyStatement">
				<signature>System.Security.Policy.PolicyStatement.Copy():System.Security.Policy.PolicyStatement</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Security.Policy.PolicyStatement.Equals(object):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FromXml" uniqueID="FromXml(System.Security.SecurityDocument;int;System.Security.Policy.PolicyLevel;bool):void">
				<signature>System.Security.Policy.PolicyStatement.FromXml(System.Security.SecurityDocument;int;System.Security.Policy.PolicyLevel;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FromXml" uniqueID="FromXml(System.Security.SecurityElement):void">
				<signature>System.Security.Policy.PolicyStatement.FromXml(System.Security.SecurityElement):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FromXml" uniqueID="FromXml(System.Security.SecurityElement;System.Security.Policy.PolicyLevel):void">
				<signature>System.Security.Policy.PolicyStatement.FromXml(System.Security.SecurityElement;System.Security.Policy.PolicyLevel):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FromXml" uniqueID="FromXml(System.Security.SecurityElement;System.Security.Policy.PolicyLevel;bool):void">
				<signature>System.Security.Policy.PolicyStatement.FromXml(System.Security.SecurityElement;System.Security.Policy.PolicyLevel;bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetFlag" uniqueID="GetFlag(int):bool">
				<signature>System.Security.Policy.PolicyStatement.GetFlag(int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Security.Policy.PolicyStatement.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetPermissionSetNoCopy" uniqueID="GetPermissionSetNoCopy():System.Security.PermissionSet">
				<signature>System.Security.Policy.PolicyStatement.GetPermissionSetNoCopy():System.Security.PermissionSet</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InplaceUnion" uniqueID="InplaceUnion(System.Security.Policy.PolicyStatement):void">
				<signature>System.Security.Policy.PolicyStatement.InplaceUnion(System.Security.Policy.PolicyStatement):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="PolicyStatement" uniqueID="PolicyStatement():void">
				<signature>System.Security.Policy.PolicyStatement.PolicyStatement():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="PolicyStatement" uniqueID="PolicyStatement(System.Security.PermissionSet):void">
				<signature>System.Security.Policy.PolicyStatement.PolicyStatement(System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="PolicyStatement" uniqueID="PolicyStatement(System.Security.PermissionSet;System.Security.Policy.PolicyStatementAttribute):void">
				<signature>System.Security.Policy.PolicyStatement.PolicyStatement(System.Security.PermissionSet;System.Security.Policy.PolicyStatementAttribute):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="PolicyStatement" uniqueID="PolicyStatement(System.Security.PermissionSet;System.Security.Policy.PolicyStatementAttribute;bool):void">
				<signature>System.Security.Policy.PolicyStatement.PolicyStatement(System.Security.PermissionSet;System.Security.Policy.PolicyStatementAttribute;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetPermissionSetNoCopy" uniqueID="SetPermissionSetNoCopy(System.Security.PermissionSet):void">
				<signature>System.Security.Policy.PolicyStatement.SetPermissionSetNoCopy(System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToXml" uniqueID="ToXml():System.Security.SecurityElement">
				<signature>System.Security.Policy.PolicyStatement.ToXml():System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToXml" uniqueID="ToXml(System.Security.Policy.PolicyLevel):System.Security.SecurityElement">
				<signature>System.Security.Policy.PolicyStatement.ToXml(System.Security.Policy.PolicyLevel):System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ToXml" uniqueID="ToXml(System.Security.Policy.PolicyLevel;bool):System.Security.SecurityElement">
				<signature>System.Security.Policy.PolicyStatement.ToXml(System.Security.Policy.PolicyLevel;bool):System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AttributeString" uniqueID="get_AttributeString():string">
				<signature>System.Security.Policy.PolicyStatement.get_AttributeString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Attributes" uniqueID="get_Attributes():System.Security.Policy.PolicyStatementAttribute">
				<signature>System.Security.Policy.PolicyStatement.get_Attributes():System.Security.Policy.PolicyStatementAttribute</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_DependentEvidence" uniqueID="get_DependentEvidence():System.Collections.Generic.IEnumerable&lt;System.Security.Policy.IDelayEvaluatedEvidence&gt;">
				<signature>System.Security.Policy.PolicyStatement.get_DependentEvidence():System.Collections.Generic.IEnumerable&lt;System.Security.Policy.IDelayEvaluatedEvidence&gt;</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_HasDependentEvidence" uniqueID="get_HasDependentEvidence():bool">
				<signature>System.Security.Policy.PolicyStatement.get_HasDependentEvidence():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PermissionSet" uniqueID="get_PermissionSet():System.Security.PermissionSet">
				<signature>System.Security.Policy.PolicyStatement.get_PermissionSet():System.Security.PermissionSet</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Attributes" uniqueID="set_Attributes(System.Security.Policy.PolicyStatementAttribute):void">
				<signature>System.Security.Policy.PolicyStatement.set_Attributes(System.Security.Policy.PolicyStatementAttribute):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_PermissionSet" uniqueID="set_PermissionSet(System.Security.PermissionSet):void">
				<signature>System.Security.Policy.PolicyStatement.set_PermissionSet(System.Security.PermissionSet):void</signature>
			</method>
		</class>
		<class name="StrongName" uniqueID="System.Security.Policy.StrongName">
			<method accessibility="Protected" methodKind="Static" name="CompareNames" uniqueID="CompareNames(string;string):bool">
				<signature>System.Security.Policy.StrongName.CompareNames(string;string):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Copy" uniqueID="Copy():object">
				<signature>System.Security.Policy.StrongName.Copy():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateIdentityPermission" uniqueID="CreateIdentityPermission(System.Security.Policy.Evidence):System.Security.IPermission">
				<signature>System.Security.Policy.StrongName.CreateIdentityPermission(System.Security.Policy.Evidence):System.Security.IPermission</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Security.Policy.StrongName.Equals(object):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FromXml" uniqueID="FromXml(System.Security.SecurityElement):void">
				<signature>System.Security.Policy.StrongName.FromXml(System.Security.SecurityElement):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Security.Policy.StrongName.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Normalize" uniqueID="Normalize():object">
				<signature>System.Security.Policy.StrongName.Normalize():object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="StrongName" uniqueID="StrongName():void">
				<signature>System.Security.Policy.StrongName.StrongName():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StrongName" uniqueID="StrongName(System.Security.Permissions.StrongNamePublicKeyBlob;string;System.Version):void">
				<signature>System.Security.Policy.StrongName.StrongName(System.Security.Permissions.StrongNamePublicKeyBlob;string;System.Version):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="StrongName" uniqueID="StrongName(System.Security.Permissions.StrongNamePublicKeyBlob;string;System.Version;System.Reflection.Assembly):void">
				<signature>System.Security.Policy.StrongName.StrongName(System.Security.Permissions.StrongNamePublicKeyBlob;string;System.Version;System.Reflection.Assembly):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Security.Policy.IBuiltInEvidence.GetRequiredSize" uniqueID="System.Security.Policy.IBuiltInEvidence.GetRequiredSize(bool):int">
				<signature>System.Security.Policy.StrongName.System.Security.Policy.IBuiltInEvidence.GetRequiredSize(bool):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Security.Policy.IBuiltInEvidence.InitFromBuffer" uniqueID="System.Security.Policy.IBuiltInEvidence.InitFromBuffer(char[];int):int">
				<signature>System.Security.Policy.StrongName.System.Security.Policy.IBuiltInEvidence.InitFromBuffer(char[];int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Security.Policy.IBuiltInEvidence.OutputToBuffer" uniqueID="System.Security.Policy.IBuiltInEvidence.OutputToBuffer(char[];int;bool):int">
				<signature>System.Security.Policy.StrongName.System.Security.Policy.IBuiltInEvidence.OutputToBuffer(char[];int;bool):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Security.Policy.IDelayEvaluatedEvidence.MarkUsed" uniqueID="System.Security.Policy.IDelayEvaluatedEvidence.MarkUsed():void">
				<signature>System.Security.Policy.StrongName.System.Security.Policy.IDelayEvaluatedEvidence.MarkUsed():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Security.Policy.IDelayEvaluatedEvidence.get_IsVerified" uniqueID="System.Security.Policy.IDelayEvaluatedEvidence.get_IsVerified():bool">
				<signature>System.Security.Policy.StrongName.System.Security.Policy.IDelayEvaluatedEvidence.get_IsVerified():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Security.Policy.IDelayEvaluatedEvidence.get_WasUsed" uniqueID="System.Security.Policy.IDelayEvaluatedEvidence.get_WasUsed():bool">
				<signature>System.Security.Policy.StrongName.System.Security.Policy.IDelayEvaluatedEvidence.get_WasUsed():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Security.Policy.StrongName.ToString():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ToXml" uniqueID="ToXml():System.Security.SecurityElement">
				<signature>System.Security.Policy.StrongName.ToXml():System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Security.Policy.StrongName.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PublicKey" uniqueID="get_PublicKey():System.Security.Permissions.StrongNamePublicKeyBlob">
				<signature>System.Security.Policy.StrongName.get_PublicKey():System.Security.Permissions.StrongNamePublicKeyBlob</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Version" uniqueID="get_Version():System.Version">
				<signature>System.Security.Policy.StrongName.get_Version():System.Version</signature>
			</method>
		</class>
		<class name="TrustManagerContext" uniqueID="System.Security.Policy.TrustManagerContext">
			<method accessibility="Public" methodKind="Member" name="TrustManagerContext" uniqueID="TrustManagerContext():void">
				<signature>System.Security.Policy.TrustManagerContext.TrustManagerContext():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TrustManagerContext" uniqueID="TrustManagerContext(System.Security.Policy.TrustManagerUIContext):void">
				<signature>System.Security.Policy.TrustManagerContext.TrustManagerContext(System.Security.Policy.TrustManagerUIContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IgnorePersistedDecision" uniqueID="get_IgnorePersistedDecision():bool">
				<signature>System.Security.Policy.TrustManagerContext.get_IgnorePersistedDecision():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_KeepAlive" uniqueID="get_KeepAlive():bool">
				<signature>System.Security.Policy.TrustManagerContext.get_KeepAlive():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_NoPrompt" uniqueID="get_NoPrompt():bool">
				<signature>System.Security.Policy.TrustManagerContext.get_NoPrompt():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Persist" uniqueID="get_Persist():bool">
				<signature>System.Security.Policy.TrustManagerContext.get_Persist():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PreviousApplicationIdentity" uniqueID="get_PreviousApplicationIdentity():System.ApplicationIdentity">
				<signature>System.Security.Policy.TrustManagerContext.get_PreviousApplicationIdentity():System.ApplicationIdentity</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_UIContext" uniqueID="get_UIContext():System.Security.Policy.TrustManagerUIContext">
				<signature>System.Security.Policy.TrustManagerContext.get_UIContext():System.Security.Policy.TrustManagerUIContext</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_IgnorePersistedDecision" uniqueID="set_IgnorePersistedDecision(bool):void">
				<signature>System.Security.Policy.TrustManagerContext.set_IgnorePersistedDecision(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_KeepAlive" uniqueID="set_KeepAlive(bool):void">
				<signature>System.Security.Policy.TrustManagerContext.set_KeepAlive(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_NoPrompt" uniqueID="set_NoPrompt(bool):void">
				<signature>System.Security.Policy.TrustManagerContext.set_NoPrompt(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Persist" uniqueID="set_Persist(bool):void">
				<signature>System.Security.Policy.TrustManagerContext.set_Persist(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_PreviousApplicationIdentity" uniqueID="set_PreviousApplicationIdentity(System.ApplicationIdentity):void">
				<signature>System.Security.Policy.TrustManagerContext.set_PreviousApplicationIdentity(System.ApplicationIdentity):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_UIContext" uniqueID="set_UIContext(System.Security.Policy.TrustManagerUIContext):void">
				<signature>System.Security.Policy.TrustManagerContext.set_UIContext(System.Security.Policy.TrustManagerUIContext):void</signature>
			</method>
		</class>
		<class name="IReportMatchMembershipCondition" uniqueID="System.Security.Policy.IReportMatchMembershipCondition">
			<method accessibility="Public" methodKind="Member" name="Check" uniqueID="Check(System.Security.Policy.Evidence;object):bool">
				<signature>System.Security.Policy.IReportMatchMembershipCondition.Check(System.Security.Policy.Evidence;object):bool</signature>
			</method>
		</class>
		<class name="ApplicationTrust" uniqueID="System.Security.Policy.ApplicationTrust">
			<method accessibility="Private" methodKind="Static" name="ObjectFromXml" uniqueID="ObjectFromXml(System.Security.SecurityElement):object">
				<signature>System.Security.Policy.ApplicationTrust.ObjectFromXml(System.Security.SecurityElement):object</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ObjectToXml" uniqueID="ObjectToXml(string;object):System.Security.SecurityElement">
				<signature>System.Security.Policy.ApplicationTrust.ObjectToXml(string;object):System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ApplicationTrust" uniqueID="ApplicationTrust():void">
				<signature>System.Security.Policy.ApplicationTrust.ApplicationTrust():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ApplicationTrust" uniqueID="ApplicationTrust(System.ApplicationIdentity):void">
				<signature>System.Security.Policy.ApplicationTrust.ApplicationTrust(System.ApplicationIdentity):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ApplicationTrust" uniqueID="ApplicationTrust(System.Security.PermissionSet):void">
				<signature>System.Security.Policy.ApplicationTrust.ApplicationTrust(System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ApplicationTrust" uniqueID="ApplicationTrust(System.Security.PermissionSet;System.Security.Policy.StrongName[]):void">
				<signature>System.Security.Policy.ApplicationTrust.ApplicationTrust(System.Security.PermissionSet;System.Security.Policy.StrongName[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FromXml" uniqueID="FromXml(System.Security.SecurityElement):void">
				<signature>System.Security.Policy.ApplicationTrust.FromXml(System.Security.SecurityElement):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToXml" uniqueID="ToXml():System.Security.SecurityElement">
				<signature>System.Security.Policy.ApplicationTrust.ToXml():System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ApplicationIdentity" uniqueID="get_ApplicationIdentity():System.ApplicationIdentity">
				<signature>System.Security.Policy.ApplicationTrust.get_ApplicationIdentity():System.ApplicationIdentity</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DefaultGrantSet" uniqueID="get_DefaultGrantSet():System.Security.Policy.PolicyStatement">
				<signature>System.Security.Policy.ApplicationTrust.get_DefaultGrantSet():System.Security.Policy.PolicyStatement</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ExtraInfo" uniqueID="get_ExtraInfo():object">
				<signature>System.Security.Policy.ApplicationTrust.get_ExtraInfo():object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_FullTrustAssemblies" uniqueID="get_FullTrustAssemblies():System.Security.Policy.StrongName[]">
				<signature>System.Security.Policy.ApplicationTrust.get_FullTrustAssemblies():System.Security.Policy.StrongName[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsApplicationTrustedToRun" uniqueID="get_IsApplicationTrustedToRun():bool">
				<signature>System.Security.Policy.ApplicationTrust.get_IsApplicationTrustedToRun():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Persist" uniqueID="get_Persist():bool">
				<signature>System.Security.Policy.ApplicationTrust.get_Persist():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ApplicationIdentity" uniqueID="set_ApplicationIdentity(System.ApplicationIdentity):void">
				<signature>System.Security.Policy.ApplicationTrust.set_ApplicationIdentity(System.ApplicationIdentity):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_DefaultGrantSet" uniqueID="set_DefaultGrantSet(System.Security.Policy.PolicyStatement):void">
				<signature>System.Security.Policy.ApplicationTrust.set_DefaultGrantSet(System.Security.Policy.PolicyStatement):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ExtraInfo" uniqueID="set_ExtraInfo(object):void">
				<signature>System.Security.Policy.ApplicationTrust.set_ExtraInfo(object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_FullTrustAssemblies" uniqueID="set_FullTrustAssemblies(System.Security.Policy.StrongName[]):void">
				<signature>System.Security.Policy.ApplicationTrust.set_FullTrustAssemblies(System.Security.Policy.StrongName[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_IsApplicationTrustedToRun" uniqueID="set_IsApplicationTrustedToRun(bool):void">
				<signature>System.Security.Policy.ApplicationTrust.set_IsApplicationTrustedToRun(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Persist" uniqueID="set_Persist(bool):void">
				<signature>System.Security.Policy.ApplicationTrust.set_Persist(bool):void</signature>
			</method>
		</class>
		<class name="CodeGroup" uniqueID="System.Security.Policy.CodeGroup">
			<method accessibility="Public" methodKind="Member" name="AddChild" uniqueID="AddChild(System.Security.Policy.CodeGroup):void">
				<signature>System.Security.Policy.CodeGroup.AddChild(System.Security.Policy.CodeGroup):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AddChildInternal" uniqueID="AddChildInternal(System.Security.Policy.CodeGroup):void">
				<signature>System.Security.Policy.CodeGroup.AddChildInternal(System.Security.Policy.CodeGroup):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CodeGroup" uniqueID="CodeGroup():void">
				<signature>System.Security.Policy.CodeGroup.CodeGroup():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CodeGroup" uniqueID="CodeGroup(System.Security.Policy.IMembershipCondition;System.Security.PermissionSet):void">
				<signature>System.Security.Policy.CodeGroup.CodeGroup(System.Security.Policy.IMembershipCondition;System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CodeGroup" uniqueID="CodeGroup(System.Security.Policy.IMembershipCondition;System.Security.Policy.PolicyStatement):void">
				<signature>System.Security.Policy.CodeGroup.CodeGroup(System.Security.Policy.IMembershipCondition;System.Security.Policy.PolicyStatement):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Copy" uniqueID="Copy():System.Security.Policy.CodeGroup">
				<signature>System.Security.Policy.CodeGroup.Copy():System.Security.Policy.CodeGroup</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CreateXml" uniqueID="CreateXml(System.Security.SecurityElement;System.Security.Policy.PolicyLevel):void">
				<signature>System.Security.Policy.CodeGroup.CreateXml(System.Security.SecurityElement;System.Security.Policy.PolicyLevel):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.Security.Policy.CodeGroup;bool):bool">
				<signature>System.Security.Policy.CodeGroup.Equals(System.Security.Policy.CodeGroup;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Security.Policy.CodeGroup.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FromXml" uniqueID="FromXml(System.Security.SecurityElement):void">
				<signature>System.Security.Policy.CodeGroup.FromXml(System.Security.SecurityElement):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FromXml" uniqueID="FromXml(System.Security.SecurityElement;System.Security.Policy.PolicyLevel):void">
				<signature>System.Security.Policy.CodeGroup.FromXml(System.Security.SecurityElement;System.Security.Policy.PolicyLevel):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetChildrenInternal" uniqueID="GetChildrenInternal():System.Collections.IList">
				<signature>System.Security.Policy.CodeGroup.GetChildrenInternal():System.Collections.IList</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Security.Policy.CodeGroup.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetTypeName" uniqueID="GetTypeName():string">
				<signature>System.Security.Policy.CodeGroup.GetTypeName():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ParseChildren" uniqueID="ParseChildren():void">
				<signature>System.Security.Policy.CodeGroup.ParseChildren():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ParseMembershipCondition" uniqueID="ParseMembershipCondition():void">
				<signature>System.Security.Policy.CodeGroup.ParseMembershipCondition():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ParseMembershipCondition" uniqueID="ParseMembershipCondition(bool):bool">
				<signature>System.Security.Policy.CodeGroup.ParseMembershipCondition(bool):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ParsePolicy" uniqueID="ParsePolicy():void">
				<signature>System.Security.Policy.CodeGroup.ParsePolicy():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ParseXml" uniqueID="ParseXml(System.Security.SecurityElement;System.Security.Policy.PolicyLevel):void">
				<signature>System.Security.Policy.CodeGroup.ParseXml(System.Security.SecurityElement;System.Security.Policy.PolicyLevel):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveChild" uniqueID="RemoveChild(System.Security.Policy.CodeGroup):void">
				<signature>System.Security.Policy.CodeGroup.RemoveChild(System.Security.Policy.CodeGroup):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Resolve" uniqueID="Resolve(System.Security.Policy.Evidence):System.Security.Policy.PolicyStatement">
				<signature>System.Security.Policy.CodeGroup.Resolve(System.Security.Policy.Evidence):System.Security.Policy.PolicyStatement</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ResolveMatchingCodeGroups" uniqueID="ResolveMatchingCodeGroups(System.Security.Policy.Evidence):System.Security.Policy.CodeGroup">
				<signature>System.Security.Policy.CodeGroup.ResolveMatchingCodeGroups(System.Security.Policy.Evidence):System.Security.Policy.CodeGroup</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToXml" uniqueID="ToXml():System.Security.SecurityElement">
				<signature>System.Security.Policy.CodeGroup.ToXml():System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToXml" uniqueID="ToXml(System.Security.Policy.PolicyLevel):System.Security.SecurityElement">
				<signature>System.Security.Policy.CodeGroup.ToXml(System.Security.Policy.PolicyLevel):System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ToXml" uniqueID="ToXml(System.Security.Policy.PolicyLevel;string):System.Security.SecurityElement">
				<signature>System.Security.Policy.CodeGroup.ToXml(System.Security.Policy.PolicyLevel;string):System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AttributeString" uniqueID="get_AttributeString():string">
				<signature>System.Security.Policy.CodeGroup.get_AttributeString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Children" uniqueID="get_Children():System.Collections.IList">
				<signature>System.Security.Policy.CodeGroup.get_Children():System.Collections.IList</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Description" uniqueID="get_Description():string">
				<signature>System.Security.Policy.CodeGroup.get_Description():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MembershipCondition" uniqueID="get_MembershipCondition():System.Security.Policy.IMembershipCondition">
				<signature>System.Security.Policy.CodeGroup.get_MembershipCondition():System.Security.Policy.IMembershipCondition</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MergeLogic" uniqueID="get_MergeLogic():string">
				<signature>System.Security.Policy.CodeGroup.get_MergeLogic():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Security.Policy.CodeGroup.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PermissionSetName" uniqueID="get_PermissionSetName():string">
				<signature>System.Security.Policy.CodeGroup.get_PermissionSetName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PolicyStatement" uniqueID="get_PolicyStatement():System.Security.Policy.PolicyStatement">
				<signature>System.Security.Policy.CodeGroup.get_PolicyStatement():System.Security.Policy.PolicyStatement</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Children" uniqueID="set_Children(System.Collections.IList):void">
				<signature>System.Security.Policy.CodeGroup.set_Children(System.Collections.IList):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Description" uniqueID="set_Description(string):void">
				<signature>System.Security.Policy.CodeGroup.set_Description(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_MembershipCondition" uniqueID="set_MembershipCondition(System.Security.Policy.IMembershipCondition):void">
				<signature>System.Security.Policy.CodeGroup.set_MembershipCondition(System.Security.Policy.IMembershipCondition):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Name" uniqueID="set_Name(string):void">
				<signature>System.Security.Policy.CodeGroup.set_Name(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_PolicyStatement" uniqueID="set_PolicyStatement(System.Security.Policy.PolicyStatement):void">
				<signature>System.Security.Policy.CodeGroup.set_PolicyStatement(System.Security.Policy.PolicyStatement):void</signature>
			</method>
		</class>
		<class name="IIdentityPermissionFactory" uniqueID="System.Security.Policy.IIdentityPermissionFactory">
			<method accessibility="Public" methodKind="Member" name="CreateIdentityPermission" uniqueID="CreateIdentityPermission(System.Security.Policy.Evidence):System.Security.IPermission">
				<signature>System.Security.Policy.IIdentityPermissionFactory.CreateIdentityPermission(System.Security.Policy.Evidence):System.Security.IPermission</signature>
			</method>
		</class>
		<class name="IBuiltInEvidence" uniqueID="System.Security.Policy.IBuiltInEvidence">
			<method accessibility="Public" methodKind="Member" name="GetRequiredSize" uniqueID="GetRequiredSize(bool):int">
				<signature>System.Security.Policy.IBuiltInEvidence.GetRequiredSize(bool):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InitFromBuffer" uniqueID="InitFromBuffer(char[];int):int">
				<signature>System.Security.Policy.IBuiltInEvidence.InitFromBuffer(char[];int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="OutputToBuffer" uniqueID="OutputToBuffer(char[];int;bool):int">
				<signature>System.Security.Policy.IBuiltInEvidence.OutputToBuffer(char[];int;bool):int</signature>
			</method>
		</class>
		<class name="IDelayEvaluatedEvidence" uniqueID="System.Security.Policy.IDelayEvaluatedEvidence">
			<method accessibility="Public" methodKind="Member" name="MarkUsed" uniqueID="MarkUsed():void">
				<signature>System.Security.Policy.IDelayEvaluatedEvidence.MarkUsed():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsVerified" uniqueID="get_IsVerified():bool">
				<signature>System.Security.Policy.IDelayEvaluatedEvidence.get_IsVerified():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_WasUsed" uniqueID="get_WasUsed():bool">
				<signature>System.Security.Policy.IDelayEvaluatedEvidence.get_WasUsed():bool</signature>
			</method>
		</class>
		<class name="StrongNameMembershipCondition" uniqueID="System.Security.Policy.StrongNameMembershipCondition">
			<method accessibility="Public" methodKind="Member" name="Check" uniqueID="Check(System.Security.Policy.Evidence):bool">
				<signature>System.Security.Policy.StrongNameMembershipCondition.Check(System.Security.Policy.Evidence):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Copy" uniqueID="Copy():System.Security.Policy.IMembershipCondition">
				<signature>System.Security.Policy.StrongNameMembershipCondition.Copy():System.Security.Policy.IMembershipCondition</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Security.Policy.StrongNameMembershipCondition.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FromXml" uniqueID="FromXml(System.Security.SecurityElement):void">
				<signature>System.Security.Policy.StrongNameMembershipCondition.FromXml(System.Security.SecurityElement):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FromXml" uniqueID="FromXml(System.Security.SecurityElement;System.Security.Policy.PolicyLevel):void">
				<signature>System.Security.Policy.StrongNameMembershipCondition.FromXml(System.Security.SecurityElement;System.Security.Policy.PolicyLevel):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Security.Policy.StrongNameMembershipCondition.GetHashCode():int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ParseKeyBlob" uniqueID="ParseKeyBlob():void">
				<signature>System.Security.Policy.StrongNameMembershipCondition.ParseKeyBlob():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ParseName" uniqueID="ParseName():void">
				<signature>System.Security.Policy.StrongNameMembershipCondition.ParseName():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ParseVersion" uniqueID="ParseVersion():void">
				<signature>System.Security.Policy.StrongNameMembershipCondition.ParseVersion():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="StrongNameMembershipCondition" uniqueID="StrongNameMembershipCondition():void">
				<signature>System.Security.Policy.StrongNameMembershipCondition.StrongNameMembershipCondition():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StrongNameMembershipCondition" uniqueID="StrongNameMembershipCondition(System.Security.Permissions.StrongNamePublicKeyBlob;string;System.Version):void">
				<signature>System.Security.Policy.StrongNameMembershipCondition.StrongNameMembershipCondition(System.Security.Permissions.StrongNamePublicKeyBlob;string;System.Version):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Security.Policy.IReportMatchMembershipCondition.Check" uniqueID="System.Security.Policy.IReportMatchMembershipCondition.Check(System.Security.Policy.Evidence;object):bool">
				<signature>System.Security.Policy.StrongNameMembershipCondition.System.Security.Policy.IReportMatchMembershipCondition.Check(System.Security.Policy.Evidence;object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Security.Policy.StrongNameMembershipCondition.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToXml" uniqueID="ToXml():System.Security.SecurityElement">
				<signature>System.Security.Policy.StrongNameMembershipCondition.ToXml():System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToXml" uniqueID="ToXml(System.Security.Policy.PolicyLevel):System.Security.SecurityElement">
				<signature>System.Security.Policy.StrongNameMembershipCondition.ToXml(System.Security.Policy.PolicyLevel):System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Security.Policy.StrongNameMembershipCondition.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PublicKey" uniqueID="get_PublicKey():System.Security.Permissions.StrongNamePublicKeyBlob">
				<signature>System.Security.Policy.StrongNameMembershipCondition.get_PublicKey():System.Security.Permissions.StrongNamePublicKeyBlob</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Version" uniqueID="get_Version():System.Version">
				<signature>System.Security.Policy.StrongNameMembershipCondition.get_Version():System.Version</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Name" uniqueID="set_Name(string):void">
				<signature>System.Security.Policy.StrongNameMembershipCondition.set_Name(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_PublicKey" uniqueID="set_PublicKey(System.Security.Permissions.StrongNamePublicKeyBlob):void">
				<signature>System.Security.Policy.StrongNameMembershipCondition.set_PublicKey(System.Security.Permissions.StrongNamePublicKeyBlob):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Version" uniqueID="set_Version(System.Version):void">
				<signature>System.Security.Policy.StrongNameMembershipCondition.set_Version(System.Version):void</signature>
			</method>
		</class>
	</package>
	<package name="System.Security.Principal">
		<class name="IdentityReference" uniqueID="System.Security.Principal.IdentityReference">
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.Security.Principal.IdentityReference;System.Security.Principal.IdentityReference):bool">
				<signature>System.Security.Principal.IdentityReference.op_Equality(System.Security.Principal.IdentityReference;System.Security.Principal.IdentityReference):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.Security.Principal.IdentityReference;System.Security.Principal.IdentityReference):bool">
				<signature>System.Security.Principal.IdentityReference.op_Inequality(System.Security.Principal.IdentityReference;System.Security.Principal.IdentityReference):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Security.Principal.IdentityReference.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Security.Principal.IdentityReference.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IdentityReference" uniqueID="IdentityReference():void">
				<signature>System.Security.Principal.IdentityReference.IdentityReference():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsValidTargetType" uniqueID="IsValidTargetType(System.Type):bool">
				<signature>System.Security.Principal.IdentityReference.IsValidTargetType(System.Type):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Security.Principal.IdentityReference.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Translate" uniqueID="Translate(System.Type):System.Security.Principal.IdentityReference">
				<signature>System.Security.Principal.IdentityReference.Translate(System.Type):System.Security.Principal.IdentityReference</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Value" uniqueID="get_Value():string">
				<signature>System.Security.Principal.IdentityReference.get_Value():string</signature>
			</method>
		</class>
		<class name="IdentityReferenceCollection" uniqueID="System.Security.Principal.IdentityReferenceCollection">
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(System.Security.Principal.IdentityReference):void">
				<signature>System.Security.Principal.IdentityReferenceCollection.Add(System.Security.Principal.IdentityReference):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Security.Principal.IdentityReferenceCollection.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(System.Security.Principal.IdentityReference):bool">
				<signature>System.Security.Principal.IdentityReferenceCollection.Contains(System.Security.Principal.IdentityReference):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Security.Principal.IdentityReference[];int):void">
				<signature>System.Security.Principal.IdentityReferenceCollection.CopyTo(System.Security.Principal.IdentityReference[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Security.Principal.IdentityReference&gt;">
				<signature>System.Security.Principal.IdentityReferenceCollection.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Security.Principal.IdentityReference&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IdentityReferenceCollection" uniqueID="IdentityReferenceCollection():void">
				<signature>System.Security.Principal.IdentityReferenceCollection.IdentityReferenceCollection():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IdentityReferenceCollection" uniqueID="IdentityReferenceCollection(int):void">
				<signature>System.Security.Principal.IdentityReferenceCollection.IdentityReferenceCollection(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(System.Security.Principal.IdentityReference):bool">
				<signature>System.Security.Principal.IdentityReferenceCollection.Remove(System.Security.Principal.IdentityReference):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerable.GetEnumerator" uniqueID="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Security.Principal.IdentityReferenceCollection.System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Translate" uniqueID="Translate(System.Type):System.Security.Principal.IdentityReferenceCollection">
				<signature>System.Security.Principal.IdentityReferenceCollection.Translate(System.Type):System.Security.Principal.IdentityReferenceCollection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Translate" uniqueID="Translate(System.Type;bool):System.Security.Principal.IdentityReferenceCollection">
				<signature>System.Security.Principal.IdentityReferenceCollection.Translate(System.Type;bool):System.Security.Principal.IdentityReferenceCollection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Security.Principal.IdentityReferenceCollection.get_Count():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Identities" uniqueID="get_Identities():System.Collections.ArrayList">
				<signature>System.Security.Principal.IdentityReferenceCollection.get_Identities():System.Collections.ArrayList</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsReadOnly" uniqueID="get_IsReadOnly():bool">
				<signature>System.Security.Principal.IdentityReferenceCollection.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.Security.Principal.IdentityReference">
				<signature>System.Security.Principal.IdentityReferenceCollection.get_Item(int):System.Security.Principal.IdentityReference</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(int;System.Security.Principal.IdentityReference):void">
				<signature>System.Security.Principal.IdentityReferenceCollection.set_Item(int;System.Security.Principal.IdentityReference):void</signature>
			</method>
		</class>
		<class name="IIdentity" uniqueID="System.Security.Principal.IIdentity">
			<method accessibility="Public" methodKind="Member" name="get_AuthenticationType" uniqueID="get_AuthenticationType():string">
				<signature>System.Security.Principal.IIdentity.get_AuthenticationType():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsAuthenticated" uniqueID="get_IsAuthenticated():bool">
				<signature>System.Security.Principal.IIdentity.get_IsAuthenticated():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Security.Principal.IIdentity.get_Name():string</signature>
			</method>
		</class>
		<class name="IPrincipal" uniqueID="System.Security.Principal.IPrincipal">
			<method accessibility="Public" methodKind="Member" name="IsInRole" uniqueID="IsInRole(string):bool">
				<signature>System.Security.Principal.IPrincipal.IsInRole(string):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Identity" uniqueID="get_Identity():System.Security.Principal.IIdentity">
				<signature>System.Security.Principal.IPrincipal.get_Identity():System.Security.Principal.IIdentity</signature>
			</method>
		</class>
		<class name="SecurityIdentifier" uniqueID="System.Security.Principal.SecurityIdentifier">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Security.Principal.SecurityIdentifier.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="IsValidTargetTypeStatic" uniqueID="IsValidTargetTypeStatic(System.Type):bool">
				<signature>System.Security.Principal.SecurityIdentifier.IsValidTargetTypeStatic(System.Type):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="Translate" uniqueID="Translate(System.Security.Principal.IdentityReferenceCollection;System.Type;bool):System.Security.Principal.IdentityReferenceCollection">
				<signature>System.Security.Principal.SecurityIdentifier.Translate(System.Security.Principal.IdentityReferenceCollection;System.Type;bool):System.Security.Principal.IdentityReferenceCollection</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="TranslateToNTAccounts" uniqueID="TranslateToNTAccounts(System.Security.Principal.IdentityReferenceCollection;bool):System.Security.Principal.IdentityReferenceCollection">
				<signature>System.Security.Principal.SecurityIdentifier.TranslateToNTAccounts(System.Security.Principal.IdentityReferenceCollection;bool):System.Security.Principal.IdentityReferenceCollection</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_Revision" uniqueID="get_Revision():byte">
				<signature>System.Security.Principal.SecurityIdentifier.get_Revision():byte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.Security.Principal.SecurityIdentifier;System.Security.Principal.SecurityIdentifier):bool">
				<signature>System.Security.Principal.SecurityIdentifier.op_Equality(System.Security.Principal.SecurityIdentifier;System.Security.Principal.SecurityIdentifier):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.Security.Principal.SecurityIdentifier;System.Security.Principal.SecurityIdentifier):bool">
				<signature>System.Security.Principal.SecurityIdentifier.op_Inequality(System.Security.Principal.SecurityIdentifier;System.Security.Principal.SecurityIdentifier):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(System.Security.Principal.SecurityIdentifier):int">
				<signature>System.Security.Principal.SecurityIdentifier.CompareTo(System.Security.Principal.SecurityIdentifier):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CreateFromBinaryForm" uniqueID="CreateFromBinaryForm(byte[];int):void">
				<signature>System.Security.Principal.SecurityIdentifier.CreateFromBinaryForm(byte[];int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CreateFromParts" uniqueID="CreateFromParts(System.Security.Principal.IdentifierAuthority;int[]):void">
				<signature>System.Security.Principal.SecurityIdentifier.CreateFromParts(System.Security.Principal.IdentifierAuthority;int[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.Security.Principal.SecurityIdentifier):bool">
				<signature>System.Security.Principal.SecurityIdentifier.Equals(System.Security.Principal.SecurityIdentifier):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Security.Principal.SecurityIdentifier.Equals(object):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetAccountDomainSid" uniqueID="GetAccountDomainSid():System.Security.Principal.SecurityIdentifier">
				<signature>System.Security.Principal.SecurityIdentifier.GetAccountDomainSid():System.Security.Principal.SecurityIdentifier</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetBinaryForm" uniqueID="GetBinaryForm(byte[];int):void">
				<signature>System.Security.Principal.SecurityIdentifier.GetBinaryForm(byte[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Security.Principal.SecurityIdentifier.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetSubAuthority" uniqueID="GetSubAuthority(int):int">
				<signature>System.Security.Principal.SecurityIdentifier.GetSubAuthority(int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsAccountSid" uniqueID="IsAccountSid():bool">
				<signature>System.Security.Principal.SecurityIdentifier.IsAccountSid():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsEqualDomainSid" uniqueID="IsEqualDomainSid(System.Security.Principal.SecurityIdentifier):bool">
				<signature>System.Security.Principal.SecurityIdentifier.IsEqualDomainSid(System.Security.Principal.SecurityIdentifier):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsValidTargetType" uniqueID="IsValidTargetType(System.Type):bool">
				<signature>System.Security.Principal.SecurityIdentifier.IsValidTargetType(System.Type):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsWellKnown" uniqueID="IsWellKnown(System.Security.Principal.WellKnownSidType):bool">
				<signature>System.Security.Principal.SecurityIdentifier.IsWellKnown(System.Security.Principal.WellKnownSidType):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SecurityIdentifier" uniqueID="SecurityIdentifier(System.Security.Principal.IdentifierAuthority;int[]):void">
				<signature>System.Security.Principal.SecurityIdentifier.SecurityIdentifier(System.Security.Principal.IdentifierAuthority;int[]):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SecurityIdentifier" uniqueID="SecurityIdentifier(System.Security.Principal.SecurityIdentifier;unsigned int):void">
				<signature>System.Security.Principal.SecurityIdentifier.SecurityIdentifier(System.Security.Principal.SecurityIdentifier;unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SecurityIdentifier" uniqueID="SecurityIdentifier(System.Security.Principal.WellKnownSidType;System.Security.Principal.SecurityIdentifier):void">
				<signature>System.Security.Principal.SecurityIdentifier.SecurityIdentifier(System.Security.Principal.WellKnownSidType;System.Security.Principal.SecurityIdentifier):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SecurityIdentifier" uniqueID="SecurityIdentifier(byte[];int):void">
				<signature>System.Security.Principal.SecurityIdentifier.SecurityIdentifier(byte[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SecurityIdentifier" uniqueID="SecurityIdentifier(native signed int):void">
				<signature>System.Security.Principal.SecurityIdentifier.SecurityIdentifier(native signed int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SecurityIdentifier" uniqueID="SecurityIdentifier(native signed int;bool):void">
				<signature>System.Security.Principal.SecurityIdentifier.SecurityIdentifier(native signed int;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SecurityIdentifier" uniqueID="SecurityIdentifier(string):void">
				<signature>System.Security.Principal.SecurityIdentifier.SecurityIdentifier(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Security.Principal.SecurityIdentifier.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Translate" uniqueID="Translate(System.Type):System.Security.Principal.IdentityReference">
				<signature>System.Security.Principal.SecurityIdentifier.Translate(System.Type):System.Security.Principal.IdentityReference</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AccountDomainSid" uniqueID="get_AccountDomainSid():System.Security.Principal.SecurityIdentifier">
				<signature>System.Security.Principal.SecurityIdentifier.get_AccountDomainSid():System.Security.Principal.SecurityIdentifier</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_BinaryForm" uniqueID="get_BinaryForm():byte[]">
				<signature>System.Security.Principal.SecurityIdentifier.get_BinaryForm():byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_BinaryLength" uniqueID="get_BinaryLength():int">
				<signature>System.Security.Principal.SecurityIdentifier.get_BinaryLength():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IdentifierAuthority" uniqueID="get_IdentifierAuthority():System.Security.Principal.IdentifierAuthority">
				<signature>System.Security.Principal.SecurityIdentifier.get_IdentifierAuthority():System.Security.Principal.IdentifierAuthority</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SubAuthorityCount" uniqueID="get_SubAuthorityCount():int">
				<signature>System.Security.Principal.SecurityIdentifier.get_SubAuthorityCount():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Value" uniqueID="get_Value():string">
				<signature>System.Security.Principal.SecurityIdentifier.get_Value():string</signature>
			</method>
		</class>
	</package>
	<package name="System.Text">
		<class name="EncodingInfo" uniqueID="System.Text.EncodingInfo">
			<method accessibility="Protected" methodKind="Member" name="EncodingInfo" uniqueID="EncodingInfo(int;string;string):void">
				<signature>System.Text.EncodingInfo.EncodingInfo(int;string;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Text.EncodingInfo.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEncoding" uniqueID="GetEncoding():System.Text.Encoding">
				<signature>System.Text.EncodingInfo.GetEncoding():System.Text.Encoding</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Text.EncodingInfo.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CodePage" uniqueID="get_CodePage():int">
				<signature>System.Text.EncodingInfo.get_CodePage():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DisplayName" uniqueID="get_DisplayName():string">
				<signature>System.Text.EncodingInfo.get_DisplayName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Text.EncodingInfo.get_Name():string</signature>
			</method>
		</class>
		<class name="StringBuilder" uniqueID="System.Text.StringBuilder">
			<method accessibility="Private" methodKind="Static" name="FormatError" uniqueID="FormatError():void">
				<signature>System.Text.StringBuilder.FormatError():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Append" uniqueID="Append(System.Decimal):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Append(System.Decimal):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Append" uniqueID="Append(bool):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Append(bool):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Append" uniqueID="Append(byte):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Append(byte):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Append" uniqueID="Append(char):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Append(char):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Append" uniqueID="Append(char;int):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Append(char;int):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Append" uniqueID="Append(char[]):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Append(char[]):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Append" uniqueID="Append(char[];int;int):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Append(char[];int;int):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Append" uniqueID="Append(double):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Append(double):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Append" uniqueID="Append(float):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Append(float):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Append" uniqueID="Append(int):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Append(int):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Append" uniqueID="Append(long):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Append(long):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Append" uniqueID="Append(object):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Append(object):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Append" uniqueID="Append(sbyte):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Append(sbyte):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Append" uniqueID="Append(short):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Append(short):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Append" uniqueID="Append(string):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Append(string):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Append" uniqueID="Append(string;int;int):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Append(string;int;int):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Append" uniqueID="Append(unsigned int):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Append(unsigned int):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Append" uniqueID="Append(unsigned long):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Append(unsigned long):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Append" uniqueID="Append(unsigned short):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Append(unsigned short):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AppendFormat" uniqueID="AppendFormat(System.IFormatProvider;string;object[]):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.AppendFormat(System.IFormatProvider;string;object[]):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AppendFormat" uniqueID="AppendFormat(string;object):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.AppendFormat(string;object):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AppendFormat" uniqueID="AppendFormat(string;object;object):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.AppendFormat(string;object;object):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AppendFormat" uniqueID="AppendFormat(string;object;object;object):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.AppendFormat(string;object;object;object):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AppendFormat" uniqueID="AppendFormat(string;object[]):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.AppendFormat(string;object[]):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AppendLine" uniqueID="AppendLine():System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.AppendLine():System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AppendLine" uniqueID="AppendLine(string):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.AppendLine(string):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(int;char[];int;int):void">
				<signature>System.Text.StringBuilder.CopyTo(int;char[];int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EnsureCapacity" uniqueID="EnsureCapacity(int):int">
				<signature>System.Text.StringBuilder.EnsureCapacity(int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.Text.StringBuilder):bool">
				<signature>System.Text.StringBuilder.Equals(System.Text.StringBuilder):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetNewString" uniqueID="GetNewString(string;int):string">
				<signature>System.Text.StringBuilder.GetNewString(string;int):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetThreadSafeString" uniqueID="GetThreadSafeString(native signed int):string">
				<signature>System.Text.StringBuilder.GetThreadSafeString(native signed int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;System.Decimal):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Insert(int;System.Decimal):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;bool):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Insert(int;bool):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;byte):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Insert(int;byte):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;char):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Insert(int;char):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;char[]):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Insert(int;char[]):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;char[];int;int):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Insert(int;char[];int;int):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;double):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Insert(int;double):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;float):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Insert(int;float):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;int):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Insert(int;int):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;long):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Insert(int;long):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;object):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Insert(int;object):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;sbyte):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Insert(int;sbyte):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;short):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Insert(int;short):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;string):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Insert(int;string):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;string;int):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Insert(int;string;int):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;unsigned int):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Insert(int;unsigned int):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;unsigned long):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Insert(int;unsigned long):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;unsigned short):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Insert(int;unsigned short):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="NeedsAllocation" uniqueID="NeedsAllocation(string;int):bool">
				<signature>System.Text.StringBuilder.NeedsAllocation(string;int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(int;int):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Remove(int;int):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Replace" uniqueID="Replace(char;char):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Replace(char;char):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Replace" uniqueID="Replace(char;char;int;int):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Replace(char;char;int;int):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Replace" uniqueID="Replace(string;string):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Replace(string;string):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Replace" uniqueID="Replace(string;string;int;int):System.Text.StringBuilder">
				<signature>System.Text.StringBuilder.Replace(string;string;int;int):System.Text.StringBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ReplaceString" uniqueID="ReplaceString(native signed int;string):void">
				<signature>System.Text.StringBuilder.ReplaceString(native signed int;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StringBuilder" uniqueID="StringBuilder():void">
				<signature>System.Text.StringBuilder.StringBuilder():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="StringBuilder" uniqueID="StringBuilder(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Text.StringBuilder.StringBuilder(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StringBuilder" uniqueID="StringBuilder(int):void">
				<signature>System.Text.StringBuilder.StringBuilder(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StringBuilder" uniqueID="StringBuilder(int;int):void">
				<signature>System.Text.StringBuilder.StringBuilder(int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StringBuilder" uniqueID="StringBuilder(string):void">
				<signature>System.Text.StringBuilder.StringBuilder(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StringBuilder" uniqueID="StringBuilder(string;int):void">
				<signature>System.Text.StringBuilder.StringBuilder(string;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StringBuilder" uniqueID="StringBuilder(string;int;int;int):void">
				<signature>System.Text.StringBuilder.StringBuilder(string;int;int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.Serialization.ISerializable.GetObjectData" uniqueID="System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Text.StringBuilder.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Text.StringBuilder.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString(int;int):string">
				<signature>System.Text.StringBuilder.ToString(int;int):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="VerifyClassInvariant" uniqueID="VerifyClassInvariant():void">
				<signature>System.Text.StringBuilder.VerifyClassInvariant():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Capacity" uniqueID="get_Capacity():int">
				<signature>System.Text.StringBuilder.get_Capacity():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Chars" uniqueID="get_Chars(int):char">
				<signature>System.Text.StringBuilder.get_Chars(int):char</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Length" uniqueID="get_Length():int">
				<signature>System.Text.StringBuilder.get_Length():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MaxCapacity" uniqueID="get_MaxCapacity():int">
				<signature>System.Text.StringBuilder.get_MaxCapacity():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Capacity" uniqueID="set_Capacity(int):void">
				<signature>System.Text.StringBuilder.set_Capacity(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Chars" uniqueID="set_Chars(int;char):void">
				<signature>System.Text.StringBuilder.set_Chars(int;char):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Length" uniqueID="set_Length(int):void">
				<signature>System.Text.StringBuilder.set_Length(int):void</signature>
			</method>
		</class>
		<class name="DecoderFallback" uniqueID="System.Text.DecoderFallback">
			<method accessibility="Public" methodKind="Static" name="get_ExceptionFallback" uniqueID="get_ExceptionFallback():System.Text.DecoderFallback">
				<signature>System.Text.DecoderFallback.get_ExceptionFallback():System.Text.DecoderFallback</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="get_InternalSyncObject" uniqueID="get_InternalSyncObject():object">
				<signature>System.Text.DecoderFallback.get_InternalSyncObject():object</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_ReplacementFallback" uniqueID="get_ReplacementFallback():System.Text.DecoderFallback">
				<signature>System.Text.DecoderFallback.get_ReplacementFallback():System.Text.DecoderFallback</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateFallbackBuffer" uniqueID="CreateFallbackBuffer():System.Text.DecoderFallbackBuffer">
				<signature>System.Text.DecoderFallback.CreateFallbackBuffer():System.Text.DecoderFallbackBuffer</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="DecoderFallback" uniqueID="DecoderFallback():void">
				<signature>System.Text.DecoderFallback.DecoderFallback():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IsMicrosoftBestFitFallback" uniqueID="get_IsMicrosoftBestFitFallback():bool">
				<signature>System.Text.DecoderFallback.get_IsMicrosoftBestFitFallback():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MaxCharCount" uniqueID="get_MaxCharCount():int">
				<signature>System.Text.DecoderFallback.get_MaxCharCount():int</signature>
			</method>
		</class>
		<class name="DecoderFallbackBuffer" uniqueID="System.Text.DecoderFallbackBuffer">
			<method accessibility="Protected" methodKind="Member" name="DecoderFallbackBuffer" uniqueID="DecoderFallbackBuffer():void">
				<signature>System.Text.DecoderFallbackBuffer.DecoderFallbackBuffer():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Fallback" uniqueID="Fallback(byte[];int):bool">
				<signature>System.Text.DecoderFallbackBuffer.Fallback(byte[];int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetNextChar" uniqueID="GetNextChar():char">
				<signature>System.Text.DecoderFallbackBuffer.GetNextChar():char</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalFallback" uniqueID="InternalFallback(byte[];byte):int">
				<signature>System.Text.DecoderFallbackBuffer.InternalFallback(byte[];byte):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalFallback" uniqueID="InternalFallback(byte[];byte;char):bool">
				<signature>System.Text.DecoderFallbackBuffer.InternalFallback(byte[];byte;char):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalInitialize" uniqueID="InternalInitialize(byte;char):void">
				<signature>System.Text.DecoderFallbackBuffer.InternalInitialize(byte;char):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalReset" uniqueID="InternalReset():void">
				<signature>System.Text.DecoderFallbackBuffer.InternalReset():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MovePrevious" uniqueID="MovePrevious():bool">
				<signature>System.Text.DecoderFallbackBuffer.MovePrevious():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reset" uniqueID="Reset():void">
				<signature>System.Text.DecoderFallbackBuffer.Reset():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ThrowLastBytesRecursive" uniqueID="ThrowLastBytesRecursive(byte[]):void">
				<signature>System.Text.DecoderFallbackBuffer.ThrowLastBytesRecursive(byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Remaining" uniqueID="get_Remaining():int">
				<signature>System.Text.DecoderFallbackBuffer.get_Remaining():int</signature>
			</method>
		</class>
		<class name="Encoder" uniqueID="System.Text.Encoder">
			<method accessibility="Public" methodKind="Member" name="Convert" uniqueID="Convert(char;int;byte;int;bool;int;int;bool):void">
				<signature>System.Text.Encoder.Convert(char;int;byte;int;bool;int;int;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Convert" uniqueID="Convert(char[];int;int;byte[];int;int;bool;int;int;bool):void">
				<signature>System.Text.Encoder.Convert(char[];int;int;byte[];int;int;bool;int;int;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Encoder" uniqueID="Encoder():void">
				<signature>System.Text.Encoder.Encoder():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetByteCount" uniqueID="GetByteCount(char;int;bool):int">
				<signature>System.Text.Encoder.GetByteCount(char;int;bool):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetByteCount" uniqueID="GetByteCount(char[];int;int;bool):int">
				<signature>System.Text.Encoder.GetByteCount(char[];int;int;bool):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetBytes" uniqueID="GetBytes(char;int;byte;int;bool):int">
				<signature>System.Text.Encoder.GetBytes(char;int;byte;int;bool):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetBytes" uniqueID="GetBytes(char[];int;int;byte[];int;bool):int">
				<signature>System.Text.Encoder.GetBytes(char[];int;int;byte[];int;bool):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reset" uniqueID="Reset():void">
				<signature>System.Text.Encoder.Reset():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SerializeEncoder" uniqueID="SerializeEncoder(System.Runtime.Serialization.SerializationInfo):void">
				<signature>System.Text.Encoder.SerializeEncoder(System.Runtime.Serialization.SerializationInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Fallback" uniqueID="get_Fallback():System.Text.EncoderFallback">
				<signature>System.Text.Encoder.get_Fallback():System.Text.EncoderFallback</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FallbackBuffer" uniqueID="get_FallbackBuffer():System.Text.EncoderFallbackBuffer">
				<signature>System.Text.Encoder.get_FallbackBuffer():System.Text.EncoderFallbackBuffer</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_InternalHasFallbackBuffer" uniqueID="get_InternalHasFallbackBuffer():bool">
				<signature>System.Text.Encoder.get_InternalHasFallbackBuffer():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Fallback" uniqueID="set_Fallback(System.Text.EncoderFallback):void">
				<signature>System.Text.Encoder.set_Fallback(System.Text.EncoderFallback):void</signature>
			</method>
		</class>
		<class name="EncoderNLS" uniqueID="System.Text.EncoderNLS">
			<method accessibility="Protected" methodKind="Member" name="ClearMustFlush" uniqueID="ClearMustFlush():void">
				<signature>System.Text.EncoderNLS.ClearMustFlush():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Convert" uniqueID="Convert(char;int;byte;int;bool;int;int;bool):void">
				<signature>System.Text.EncoderNLS.Convert(char;int;byte;int;bool;int;int;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Convert" uniqueID="Convert(char[];int;int;byte[];int;int;bool;int;int;bool):void">
				<signature>System.Text.EncoderNLS.Convert(char[];int;int;byte[];int;int;bool;int;int;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EncoderNLS" uniqueID="EncoderNLS():void">
				<signature>System.Text.EncoderNLS.EncoderNLS():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EncoderNLS" uniqueID="EncoderNLS(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Text.EncoderNLS.EncoderNLS(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EncoderNLS" uniqueID="EncoderNLS(System.Text.Encoding):void">
				<signature>System.Text.EncoderNLS.EncoderNLS(System.Text.Encoding):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetByteCount" uniqueID="GetByteCount(char;int;bool):int">
				<signature>System.Text.EncoderNLS.GetByteCount(char;int;bool):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetByteCount" uniqueID="GetByteCount(char[];int;int;bool):int">
				<signature>System.Text.EncoderNLS.GetByteCount(char[];int;int;bool):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetBytes" uniqueID="GetBytes(char;int;byte;int;bool):int">
				<signature>System.Text.EncoderNLS.GetBytes(char;int;byte;int;bool):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetBytes" uniqueID="GetBytes(char[];int;int;byte[];int;bool):int">
				<signature>System.Text.EncoderNLS.GetBytes(char[];int;int;byte[];int;bool):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reset" uniqueID="Reset():void">
				<signature>System.Text.EncoderNLS.Reset():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.Serialization.ISerializable.GetObjectData" uniqueID="System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Text.EncoderNLS.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Encoding" uniqueID="get_Encoding():System.Text.Encoding">
				<signature>System.Text.EncoderNLS.get_Encoding():System.Text.Encoding</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_HasState" uniqueID="get_HasState():bool">
				<signature>System.Text.EncoderNLS.get_HasState():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MustFlush" uniqueID="get_MustFlush():bool">
				<signature>System.Text.EncoderNLS.get_MustFlush():bool</signature>
			</method>
		</class>
		<class name="Decoder" uniqueID="System.Text.Decoder">
			<method accessibility="Public" methodKind="Member" name="Convert" uniqueID="Convert(byte;int;char;int;bool;int;int;bool):void">
				<signature>System.Text.Decoder.Convert(byte;int;char;int;bool;int;int;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Convert" uniqueID="Convert(byte[];int;int;char[];int;int;bool;int;int;bool):void">
				<signature>System.Text.Decoder.Convert(byte[];int;int;char[];int;int;bool;int;int;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Decoder" uniqueID="Decoder():void">
				<signature>System.Text.Decoder.Decoder():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCharCount" uniqueID="GetCharCount(byte;int;bool):int">
				<signature>System.Text.Decoder.GetCharCount(byte;int;bool):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCharCount" uniqueID="GetCharCount(byte[];int;int):int">
				<signature>System.Text.Decoder.GetCharCount(byte[];int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCharCount" uniqueID="GetCharCount(byte[];int;int;bool):int">
				<signature>System.Text.Decoder.GetCharCount(byte[];int;int;bool):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetChars" uniqueID="GetChars(byte;int;char;int;bool):int">
				<signature>System.Text.Decoder.GetChars(byte;int;char;int;bool):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetChars" uniqueID="GetChars(byte[];int;int;char[];int):int">
				<signature>System.Text.Decoder.GetChars(byte[];int;int;char[];int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetChars" uniqueID="GetChars(byte[];int;int;char[];int;bool):int">
				<signature>System.Text.Decoder.GetChars(byte[];int;int;char[];int;bool):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reset" uniqueID="Reset():void">
				<signature>System.Text.Decoder.Reset():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SerializeDecoder" uniqueID="SerializeDecoder(System.Runtime.Serialization.SerializationInfo):void">
				<signature>System.Text.Decoder.SerializeDecoder(System.Runtime.Serialization.SerializationInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Fallback" uniqueID="get_Fallback():System.Text.DecoderFallback">
				<signature>System.Text.Decoder.get_Fallback():System.Text.DecoderFallback</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FallbackBuffer" uniqueID="get_FallbackBuffer():System.Text.DecoderFallbackBuffer">
				<signature>System.Text.Decoder.get_FallbackBuffer():System.Text.DecoderFallbackBuffer</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_InternalHasFallbackBuffer" uniqueID="get_InternalHasFallbackBuffer():bool">
				<signature>System.Text.Decoder.get_InternalHasFallbackBuffer():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Fallback" uniqueID="set_Fallback(System.Text.DecoderFallback):void">
				<signature>System.Text.Decoder.set_Fallback(System.Text.DecoderFallback):void</signature>
			</method>
		</class>
		<class name="DecoderNLS" uniqueID="System.Text.DecoderNLS">
			<method accessibility="Protected" methodKind="Member" name="ClearMustFlush" uniqueID="ClearMustFlush():void">
				<signature>System.Text.DecoderNLS.ClearMustFlush():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Convert" uniqueID="Convert(byte;int;char;int;bool;int;int;bool):void">
				<signature>System.Text.DecoderNLS.Convert(byte;int;char;int;bool;int;int;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Convert" uniqueID="Convert(byte[];int;int;char[];int;int;bool;int;int;bool):void">
				<signature>System.Text.DecoderNLS.Convert(byte[];int;int;char[];int;int;bool;int;int;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="DecoderNLS" uniqueID="DecoderNLS():void">
				<signature>System.Text.DecoderNLS.DecoderNLS():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="DecoderNLS" uniqueID="DecoderNLS(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Text.DecoderNLS.DecoderNLS(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="DecoderNLS" uniqueID="DecoderNLS(System.Text.Encoding):void">
				<signature>System.Text.DecoderNLS.DecoderNLS(System.Text.Encoding):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCharCount" uniqueID="GetCharCount(byte;int;bool):int">
				<signature>System.Text.DecoderNLS.GetCharCount(byte;int;bool):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCharCount" uniqueID="GetCharCount(byte[];int;int):int">
				<signature>System.Text.DecoderNLS.GetCharCount(byte[];int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCharCount" uniqueID="GetCharCount(byte[];int;int;bool):int">
				<signature>System.Text.DecoderNLS.GetCharCount(byte[];int;int;bool):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetChars" uniqueID="GetChars(byte;int;char;int;bool):int">
				<signature>System.Text.DecoderNLS.GetChars(byte;int;char;int;bool):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetChars" uniqueID="GetChars(byte[];int;int;char[];int):int">
				<signature>System.Text.DecoderNLS.GetChars(byte[];int;int;char[];int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetChars" uniqueID="GetChars(byte[];int;int;char[];int;bool):int">
				<signature>System.Text.DecoderNLS.GetChars(byte[];int;int;char[];int;bool):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reset" uniqueID="Reset():void">
				<signature>System.Text.DecoderNLS.Reset():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.Serialization.ISerializable.GetObjectData" uniqueID="System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Text.DecoderNLS.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_HasState" uniqueID="get_HasState():bool">
				<signature>System.Text.DecoderNLS.get_HasState():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MustFlush" uniqueID="get_MustFlush():bool">
				<signature>System.Text.DecoderNLS.get_MustFlush():bool</signature>
			</method>
		</class>
		<class name="EncoderFallback" uniqueID="System.Text.EncoderFallback">
			<method accessibility="Public" methodKind="Static" name="get_ExceptionFallback" uniqueID="get_ExceptionFallback():System.Text.EncoderFallback">
				<signature>System.Text.EncoderFallback.get_ExceptionFallback():System.Text.EncoderFallback</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="get_InternalSyncObject" uniqueID="get_InternalSyncObject():object">
				<signature>System.Text.EncoderFallback.get_InternalSyncObject():object</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_ReplacementFallback" uniqueID="get_ReplacementFallback():System.Text.EncoderFallback">
				<signature>System.Text.EncoderFallback.get_ReplacementFallback():System.Text.EncoderFallback</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateFallbackBuffer" uniqueID="CreateFallbackBuffer():System.Text.EncoderFallbackBuffer">
				<signature>System.Text.EncoderFallback.CreateFallbackBuffer():System.Text.EncoderFallbackBuffer</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EncoderFallback" uniqueID="EncoderFallback():void">
				<signature>System.Text.EncoderFallback.EncoderFallback():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MaxCharCount" uniqueID="get_MaxCharCount():int">
				<signature>System.Text.EncoderFallback.get_MaxCharCount():int</signature>
			</method>
		</class>
		<class name="EncoderFallbackBuffer" uniqueID="System.Text.EncoderFallbackBuffer">
			<method accessibility="Protected" methodKind="Member" name="EncoderFallbackBuffer" uniqueID="EncoderFallbackBuffer():void">
				<signature>System.Text.EncoderFallbackBuffer.EncoderFallbackBuffer():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Fallback" uniqueID="Fallback(char;char;int):bool">
				<signature>System.Text.EncoderFallbackBuffer.Fallback(char;char;int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Fallback" uniqueID="Fallback(char;int):bool">
				<signature>System.Text.EncoderFallbackBuffer.Fallback(char;int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetNextChar" uniqueID="GetNextChar():char">
				<signature>System.Text.EncoderFallbackBuffer.GetNextChar():char</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalFallback" uniqueID="InternalFallback(char;char):bool">
				<signature>System.Text.EncoderFallbackBuffer.InternalFallback(char;char):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalGetNextChar" uniqueID="InternalGetNextChar():char">
				<signature>System.Text.EncoderFallbackBuffer.InternalGetNextChar():char</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalInitialize" uniqueID="InternalInitialize(char;char;System.Text.EncoderNLS;bool):void">
				<signature>System.Text.EncoderFallbackBuffer.InternalInitialize(char;char;System.Text.EncoderNLS;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalReset" uniqueID="InternalReset():void">
				<signature>System.Text.EncoderFallbackBuffer.InternalReset():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MovePrevious" uniqueID="MovePrevious():bool">
				<signature>System.Text.EncoderFallbackBuffer.MovePrevious():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reset" uniqueID="Reset():void">
				<signature>System.Text.EncoderFallbackBuffer.Reset():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ThrowLastCharRecursive" uniqueID="ThrowLastCharRecursive(int):void">
				<signature>System.Text.EncoderFallbackBuffer.ThrowLastCharRecursive(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Remaining" uniqueID="get_Remaining():int">
				<signature>System.Text.EncoderFallbackBuffer.get_Remaining():int</signature>
			</method>
		</class>
		<class name="Encoding" uniqueID="System.Text.Encoding">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Text.Encoding.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Convert" uniqueID="Convert(System.Text.Encoding;System.Text.Encoding;byte[]):byte[]">
				<signature>System.Text.Encoding.Convert(System.Text.Encoding;System.Text.Encoding;byte[]):byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Convert" uniqueID="Convert(System.Text.Encoding;System.Text.Encoding;byte[];int;int):byte[]">
				<signature>System.Text.Encoding.Convert(System.Text.Encoding;System.Text.Encoding;byte[];int;int):byte[]</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CreateDefaultEncoding" uniqueID="CreateDefaultEncoding():System.Text.Encoding">
				<signature>System.Text.Encoding.CreateDefaultEncoding():System.Text.Encoding</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetEncoding" uniqueID="GetEncoding(int):System.Text.Encoding">
				<signature>System.Text.Encoding.GetEncoding(int):System.Text.Encoding</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetEncoding" uniqueID="GetEncoding(int;System.Text.EncoderFallback;System.Text.DecoderFallback):System.Text.Encoding">
				<signature>System.Text.Encoding.GetEncoding(int;System.Text.EncoderFallback;System.Text.DecoderFallback):System.Text.Encoding</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetEncoding" uniqueID="GetEncoding(string):System.Text.Encoding">
				<signature>System.Text.Encoding.GetEncoding(string):System.Text.Encoding</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetEncoding" uniqueID="GetEncoding(string;System.Text.EncoderFallback;System.Text.DecoderFallback):System.Text.Encoding">
				<signature>System.Text.Encoding.GetEncoding(string;System.Text.EncoderFallback;System.Text.DecoderFallback):System.Text.Encoding</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetEncodingCodePage" uniqueID="GetEncodingCodePage(int):System.Text.Encoding">
				<signature>System.Text.Encoding.GetEncodingCodePage(int):System.Text.Encoding</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetEncodingRare" uniqueID="GetEncodingRare(int):System.Text.Encoding">
				<signature>System.Text.Encoding.GetEncodingRare(int):System.Text.Encoding</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetEncodings" uniqueID="GetEncodings():System.Text.EncodingInfo[]">
				<signature>System.Text.Encoding.GetEncodings():System.Text.EncodingInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_ASCII" uniqueID="get_ASCII():System.Text.Encoding">
				<signature>System.Text.Encoding.get_ASCII():System.Text.Encoding</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_BigEndianUnicode" uniqueID="get_BigEndianUnicode():System.Text.Encoding">
				<signature>System.Text.Encoding.get_BigEndianUnicode():System.Text.Encoding</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_Default" uniqueID="get_Default():System.Text.Encoding">
				<signature>System.Text.Encoding.get_Default():System.Text.Encoding</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="get_InternalSyncObject" uniqueID="get_InternalSyncObject():object">
				<signature>System.Text.Encoding.get_InternalSyncObject():object</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="get_Latin1" uniqueID="get_Latin1():System.Text.Encoding">
				<signature>System.Text.Encoding.get_Latin1():System.Text.Encoding</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_UTF32" uniqueID="get_UTF32():System.Text.Encoding">
				<signature>System.Text.Encoding.get_UTF32():System.Text.Encoding</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_UTF7" uniqueID="get_UTF7():System.Text.Encoding">
				<signature>System.Text.Encoding.get_UTF7():System.Text.Encoding</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_UTF8" uniqueID="get_UTF8():System.Text.Encoding">
				<signature>System.Text.Encoding.get_UTF8():System.Text.Encoding</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_Unicode" uniqueID="get_Unicode():System.Text.Encoding">
				<signature>System.Text.Encoding.get_Unicode():System.Text.Encoding</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone():object">
				<signature>System.Text.Encoding.Clone():object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="DeserializeEncoding" uniqueID="DeserializeEncoding(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Text.Encoding.DeserializeEncoding(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Encoding" uniqueID="Encoding():void">
				<signature>System.Text.Encoding.Encoding():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Encoding" uniqueID="Encoding(int):void">
				<signature>System.Text.Encoding.Encoding(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Text.Encoding.Equals(object):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetBestFitBytesToUnicodeData" uniqueID="GetBestFitBytesToUnicodeData():char[]">
				<signature>System.Text.Encoding.GetBestFitBytesToUnicodeData():char[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetBestFitUnicodeToBytesData" uniqueID="GetBestFitUnicodeToBytesData():char[]">
				<signature>System.Text.Encoding.GetBestFitUnicodeToBytesData():char[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetByteCount" uniqueID="GetByteCount(char;int):int">
				<signature>System.Text.Encoding.GetByteCount(char;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetByteCount" uniqueID="GetByteCount(char;int;System.Text.EncoderNLS):int">
				<signature>System.Text.Encoding.GetByteCount(char;int;System.Text.EncoderNLS):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetByteCount" uniqueID="GetByteCount(char[]):int">
				<signature>System.Text.Encoding.GetByteCount(char[]):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetByteCount" uniqueID="GetByteCount(char[];int;int):int">
				<signature>System.Text.Encoding.GetByteCount(char[];int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetByteCount" uniqueID="GetByteCount(string):int">
				<signature>System.Text.Encoding.GetByteCount(string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetBytes" uniqueID="GetBytes(char;int;byte;int):int">
				<signature>System.Text.Encoding.GetBytes(char;int;byte;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetBytes" uniqueID="GetBytes(char;int;byte;int;System.Text.EncoderNLS):int">
				<signature>System.Text.Encoding.GetBytes(char;int;byte;int;System.Text.EncoderNLS):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetBytes" uniqueID="GetBytes(char[]):byte[]">
				<signature>System.Text.Encoding.GetBytes(char[]):byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetBytes" uniqueID="GetBytes(char[];int;int):byte[]">
				<signature>System.Text.Encoding.GetBytes(char[];int;int):byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetBytes" uniqueID="GetBytes(char[];int;int;byte[];int):int">
				<signature>System.Text.Encoding.GetBytes(char[];int;int;byte[];int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetBytes" uniqueID="GetBytes(string):byte[]">
				<signature>System.Text.Encoding.GetBytes(string):byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetBytes" uniqueID="GetBytes(string;int;int;byte[];int):int">
				<signature>System.Text.Encoding.GetBytes(string;int;int;byte[];int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCharCount" uniqueID="GetCharCount(byte;int):int">
				<signature>System.Text.Encoding.GetCharCount(byte;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetCharCount" uniqueID="GetCharCount(byte;int;System.Text.DecoderNLS):int">
				<signature>System.Text.Encoding.GetCharCount(byte;int;System.Text.DecoderNLS):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCharCount" uniqueID="GetCharCount(byte[]):int">
				<signature>System.Text.Encoding.GetCharCount(byte[]):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCharCount" uniqueID="GetCharCount(byte[];int;int):int">
				<signature>System.Text.Encoding.GetCharCount(byte[];int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetChars" uniqueID="GetChars(byte;int;char;int):int">
				<signature>System.Text.Encoding.GetChars(byte;int;char;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetChars" uniqueID="GetChars(byte;int;char;int;System.Text.DecoderNLS):int">
				<signature>System.Text.Encoding.GetChars(byte;int;char;int;System.Text.DecoderNLS):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetChars" uniqueID="GetChars(byte[]):char[]">
				<signature>System.Text.Encoding.GetChars(byte[]):char[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetChars" uniqueID="GetChars(byte[];int;int):char[]">
				<signature>System.Text.Encoding.GetChars(byte[];int;int):char[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetChars" uniqueID="GetChars(byte[];int;int;char[];int):int">
				<signature>System.Text.Encoding.GetChars(byte[];int;int;char[];int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetDataItem" uniqueID="GetDataItem():void">
				<signature>System.Text.Encoding.GetDataItem():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetDecoder" uniqueID="GetDecoder():System.Text.Decoder">
				<signature>System.Text.Encoding.GetDecoder():System.Text.Decoder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEncoder" uniqueID="GetEncoder():System.Text.Encoder">
				<signature>System.Text.Encoding.GetEncoder():System.Text.Encoder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Text.Encoding.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMaxByteCount" uniqueID="GetMaxByteCount(int):int">
				<signature>System.Text.Encoding.GetMaxByteCount(int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMaxCharCount" uniqueID="GetMaxCharCount(int):int">
				<signature>System.Text.Encoding.GetMaxCharCount(int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetPreamble" uniqueID="GetPreamble():byte[]">
				<signature>System.Text.Encoding.GetPreamble():byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetString" uniqueID="GetString(byte[]):string">
				<signature>System.Text.Encoding.GetString(byte[]):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetString" uniqueID="GetString(byte[];int;int):string">
				<signature>System.Text.Encoding.GetString(byte[];int;int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsAlwaysNormalized" uniqueID="IsAlwaysNormalized():bool">
				<signature>System.Text.Encoding.IsAlwaysNormalized():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsAlwaysNormalized" uniqueID="IsAlwaysNormalized(System.Text.NormalizationForm):bool">
				<signature>System.Text.Encoding.IsAlwaysNormalized(System.Text.NormalizationForm):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="OnDeserialized" uniqueID="OnDeserialized():void">
				<signature>System.Text.Encoding.OnDeserialized():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnDeserialized" uniqueID="OnDeserialized(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Text.Encoding.OnDeserialized(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="OnDeserializing" uniqueID="OnDeserializing():void">
				<signature>System.Text.Encoding.OnDeserializing():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnDeserializing" uniqueID="OnDeserializing(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Text.Encoding.OnDeserializing(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnSerializing" uniqueID="OnSerializing(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Text.Encoding.OnSerializing(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SerializeEncoding" uniqueID="SerializeEncoding(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Text.Encoding.SerializeEncoding(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetDefaultFallbacks" uniqueID="SetDefaultFallbacks():void">
				<signature>System.Text.Encoding.SetDefaultFallbacks():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ThrowBytesOverflow" uniqueID="ThrowBytesOverflow():void">
				<signature>System.Text.Encoding.ThrowBytesOverflow():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ThrowBytesOverflow" uniqueID="ThrowBytesOverflow(System.Text.EncoderNLS;bool):void">
				<signature>System.Text.Encoding.ThrowBytesOverflow(System.Text.EncoderNLS;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ThrowCharsOverflow" uniqueID="ThrowCharsOverflow():void">
				<signature>System.Text.Encoding.ThrowCharsOverflow():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ThrowCharsOverflow" uniqueID="ThrowCharsOverflow(System.Text.DecoderNLS;bool):void">
				<signature>System.Text.Encoding.ThrowCharsOverflow(System.Text.DecoderNLS;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_BodyName" uniqueID="get_BodyName():string">
				<signature>System.Text.Encoding.get_BodyName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CodePage" uniqueID="get_CodePage():int">
				<signature>System.Text.Encoding.get_CodePage():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DecoderFallback" uniqueID="get_DecoderFallback():System.Text.DecoderFallback">
				<signature>System.Text.Encoding.get_DecoderFallback():System.Text.DecoderFallback</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_EncoderFallback" uniqueID="get_EncoderFallback():System.Text.EncoderFallback">
				<signature>System.Text.Encoding.get_EncoderFallback():System.Text.EncoderFallback</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_EncodingName" uniqueID="get_EncodingName():string">
				<signature>System.Text.Encoding.get_EncodingName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_HeaderName" uniqueID="get_HeaderName():string">
				<signature>System.Text.Encoding.get_HeaderName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsBrowserDisplay" uniqueID="get_IsBrowserDisplay():bool">
				<signature>System.Text.Encoding.get_IsBrowserDisplay():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsBrowserSave" uniqueID="get_IsBrowserSave():bool">
				<signature>System.Text.Encoding.get_IsBrowserSave():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsMailNewsDisplay" uniqueID="get_IsMailNewsDisplay():bool">
				<signature>System.Text.Encoding.get_IsMailNewsDisplay():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsMailNewsSave" uniqueID="get_IsMailNewsSave():bool">
				<signature>System.Text.Encoding.get_IsMailNewsSave():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsReadOnly" uniqueID="get_IsReadOnly():bool">
				<signature>System.Text.Encoding.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSingleByte" uniqueID="get_IsSingleByte():bool">
				<signature>System.Text.Encoding.get_IsSingleByte():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_WebName" uniqueID="get_WebName():string">
				<signature>System.Text.Encoding.get_WebName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_WindowsCodePage" uniqueID="get_WindowsCodePage():int">
				<signature>System.Text.Encoding.get_WindowsCodePage():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_DecoderFallback" uniqueID="set_DecoderFallback(System.Text.DecoderFallback):void">
				<signature>System.Text.Encoding.set_DecoderFallback(System.Text.DecoderFallback):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_EncoderFallback" uniqueID="set_EncoderFallback(System.Text.EncoderFallback):void">
				<signature>System.Text.Encoding.set_EncoderFallback(System.Text.EncoderFallback):void</signature>
			</method>
		</class>
	</package>
	<package name="System">
		<class name="OperatingSystem" uniqueID="System.OperatingSystem">
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone():object">
				<signature>System.OperatingSystem.Clone():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetObjectData" uniqueID="GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.OperatingSystem.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OperatingSystem" uniqueID="OperatingSystem():void">
				<signature>System.OperatingSystem.OperatingSystem():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="OperatingSystem" uniqueID="OperatingSystem(System.PlatformID;System.Version):void">
				<signature>System.OperatingSystem.OperatingSystem(System.PlatformID;System.Version):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="OperatingSystem" uniqueID="OperatingSystem(System.PlatformID;System.Version;string):void">
				<signature>System.OperatingSystem.OperatingSystem(System.PlatformID;System.Version;string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OperatingSystem" uniqueID="OperatingSystem(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.OperatingSystem.OperatingSystem(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.OperatingSystem.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Platform" uniqueID="get_Platform():System.PlatformID">
				<signature>System.OperatingSystem.get_Platform():System.PlatformID</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ServicePack" uniqueID="get_ServicePack():string">
				<signature>System.OperatingSystem.get_ServicePack():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Version" uniqueID="get_Version():System.Version">
				<signature>System.OperatingSystem.get_Version():System.Version</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_VersionString" uniqueID="get_VersionString():string">
				<signature>System.OperatingSystem.get_VersionString():string</signature>
			</method>
		</class>
		<class name="Action&lt;System.Reflection.RuntimePropertyInfo&gt;" uniqueID="System.Action&lt;System.Reflection.RuntimePropertyInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="Action&lt;System.Reflection.RuntimePropertyInfo&gt;" uniqueID="Action&lt;System.Reflection.RuntimePropertyInfo&gt;(object;native signed int):void">
				<signature>System.Action&lt;System.Reflection.RuntimePropertyInfo&gt;.Action&lt;System.Reflection.RuntimePropertyInfo&gt;(object;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(System.Reflection.RuntimePropertyInfo;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Action&lt;System.Reflection.RuntimePropertyInfo&gt;.BeginInvoke(System.Reflection.RuntimePropertyInfo;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):void">
				<signature>System.Action&lt;System.Reflection.RuntimePropertyInfo&gt;.EndInvoke(System.IAsyncResult):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(System.Reflection.RuntimePropertyInfo):void">
				<signature>System.Action&lt;System.Reflection.RuntimePropertyInfo&gt;.Invoke(System.Reflection.RuntimePropertyInfo):void</signature>
			</method>
		</class>
		<class name="IComparable&lt;System.Version&gt;" uniqueID="System.IComparable&lt;System.Version&gt;">
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(System.Version):int">
				<signature>System.IComparable&lt;System.Version&gt;.CompareTo(System.Version):int</signature>
			</method>
		</class>
		<class name="IEquatable&lt;System.TimeSpan&gt;" uniqueID="System.IEquatable&lt;System.TimeSpan&gt;">
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.TimeSpan):bool">
				<signature>System.IEquatable&lt;System.TimeSpan&gt;.Equals(System.TimeSpan):bool</signature>
			</method>
		</class>
		<class name="IEquatable&lt;byte&gt;" uniqueID="System.IEquatable&lt;byte&gt;">
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(byte):bool">
				<signature>System.IEquatable&lt;byte&gt;.Equals(byte):bool</signature>
			</method>
		</class>
		<class name="LocalDataStoreMgr" uniqueID="System.LocalDataStoreMgr">
			<method accessibility="Public" methodKind="Member" name="AllocateDataSlot" uniqueID="AllocateDataSlot():System.LocalDataStoreSlot">
				<signature>System.LocalDataStoreMgr.AllocateDataSlot():System.LocalDataStoreSlot</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AllocateNamedDataSlot" uniqueID="AllocateNamedDataSlot(string):System.LocalDataStoreSlot">
				<signature>System.LocalDataStoreMgr.AllocateNamedDataSlot(string):System.LocalDataStoreSlot</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateLocalDataStore" uniqueID="CreateLocalDataStore():System.LocalDataStore">
				<signature>System.LocalDataStoreMgr.CreateLocalDataStore():System.LocalDataStore</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DeleteLocalDataStore" uniqueID="DeleteLocalDataStore(System.LocalDataStore):void">
				<signature>System.LocalDataStoreMgr.DeleteLocalDataStore(System.LocalDataStore):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FreeDataSlot" uniqueID="FreeDataSlot(int):void">
				<signature>System.LocalDataStoreMgr.FreeDataSlot(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FreeNamedDataSlot" uniqueID="FreeNamedDataSlot(string):void">
				<signature>System.LocalDataStoreMgr.FreeNamedDataSlot(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetNamedDataSlot" uniqueID="GetNamedDataSlot(string):System.LocalDataStoreSlot">
				<signature>System.LocalDataStoreMgr.GetNamedDataSlot(string):System.LocalDataStoreSlot</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetSlotTableLength" uniqueID="GetSlotTableLength():int">
				<signature>System.LocalDataStoreMgr.GetSlotTableLength():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LocalDataStoreMgr" uniqueID="LocalDataStoreMgr():void">
				<signature>System.LocalDataStoreMgr.LocalDataStoreMgr():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ValidateSlot" uniqueID="ValidateSlot(System.LocalDataStoreSlot):void">
				<signature>System.LocalDataStoreMgr.ValidateSlot(System.LocalDataStoreSlot):void</signature>
			</method>
		</class>
		<class name="RuntimeType+RuntimeTypeCache" uniqueID="System.RuntimeType+RuntimeTypeCache">
			<method accessibility="Protected" methodKind="Static" name="Prejitinit_HACK" uniqueID="Prejitinit_HACK():void">
				<signature>System.RuntimeType+RuntimeTypeCache.Prejitinit_HACK():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ConstructName" uniqueID="ConstructName(string;bool;bool;bool):string">
				<signature>System.RuntimeType+RuntimeTypeCache.ConstructName(string;bool;bool;bool):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetConstructor" uniqueID="GetConstructor(System.RuntimeTypeHandle;System.RuntimeMethodHandle):System.Reflection.MethodBase">
				<signature>System.RuntimeType+RuntimeTypeCache.GetConstructor(System.RuntimeTypeHandle;System.RuntimeMethodHandle):System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetConstructorList" uniqueID="GetConstructorList(System.Reflection.MemberListType;string):System.Reflection.CerArrayList&lt;System.Reflection.RuntimeConstructorInfo&gt;">
				<signature>System.RuntimeType+RuntimeTypeCache.GetConstructorList(System.Reflection.MemberListType;string):System.Reflection.CerArrayList&lt;System.Reflection.RuntimeConstructorInfo&gt;</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetEnclosingType" uniqueID="GetEnclosingType():System.RuntimeType">
				<signature>System.RuntimeType+RuntimeTypeCache.GetEnclosingType():System.RuntimeType</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetEventList" uniqueID="GetEventList(System.Reflection.MemberListType;string):System.Reflection.CerArrayList&lt;System.Reflection.RuntimeEventInfo&gt;">
				<signature>System.RuntimeType+RuntimeTypeCache.GetEventList(System.Reflection.MemberListType;string):System.Reflection.CerArrayList&lt;System.Reflection.RuntimeEventInfo&gt;</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetField" uniqueID="GetField(System.RuntimeFieldHandle):System.Reflection.FieldInfo">
				<signature>System.RuntimeType+RuntimeTypeCache.GetField(System.RuntimeFieldHandle):System.Reflection.FieldInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetFieldList" uniqueID="GetFieldList(System.Reflection.MemberListType;string):System.Reflection.CerArrayList&lt;System.Reflection.RuntimeFieldInfo&gt;">
				<signature>System.RuntimeType+RuntimeTypeCache.GetFieldList(System.Reflection.MemberListType;string):System.Reflection.CerArrayList&lt;System.Reflection.RuntimeFieldInfo&gt;</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetFullName" uniqueID="GetFullName():string">
				<signature>System.RuntimeType+RuntimeTypeCache.GetFullName():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetGenericMethodInfo" uniqueID="GetGenericMethodInfo(System.RuntimeMethodHandle):System.Reflection.MethodInfo">
				<signature>System.RuntimeType+RuntimeTypeCache.GetGenericMethodInfo(System.RuntimeMethodHandle):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetInterfaceList" uniqueID="GetInterfaceList(System.Reflection.MemberListType;string):System.Reflection.CerArrayList&lt;System.RuntimeType&gt;">
				<signature>System.RuntimeType+RuntimeTypeCache.GetInterfaceList(System.Reflection.MemberListType;string):System.Reflection.CerArrayList&lt;System.RuntimeType&gt;</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMethod" uniqueID="GetMethod(System.RuntimeTypeHandle;System.RuntimeMethodHandle):System.Reflection.MethodBase">
				<signature>System.RuntimeType+RuntimeTypeCache.GetMethod(System.RuntimeTypeHandle;System.RuntimeMethodHandle):System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMethodList" uniqueID="GetMethodList(System.Reflection.MemberListType;string):System.Reflection.CerArrayList&lt;System.Reflection.RuntimeMethodInfo&gt;">
				<signature>System.RuntimeType+RuntimeTypeCache.GetMethodList(System.Reflection.MemberListType;string):System.Reflection.CerArrayList&lt;System.Reflection.RuntimeMethodInfo&gt;</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetName" uniqueID="GetName():string">
				<signature>System.RuntimeType+RuntimeTypeCache.GetName():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetNameSpace" uniqueID="GetNameSpace():string">
				<signature>System.RuntimeType+RuntimeTypeCache.GetNameSpace():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetNestedTypeList" uniqueID="GetNestedTypeList(System.Reflection.MemberListType;string):System.Reflection.CerArrayList&lt;System.RuntimeType&gt;">
				<signature>System.RuntimeType+RuntimeTypeCache.GetNestedTypeList(System.Reflection.MemberListType;string):System.Reflection.CerArrayList&lt;System.RuntimeType&gt;</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetPropertyList" uniqueID="GetPropertyList(System.Reflection.MemberListType;string):System.Reflection.CerArrayList&lt;System.Reflection.RuntimePropertyInfo&gt;">
				<signature>System.RuntimeType+RuntimeTypeCache.GetPropertyList(System.Reflection.MemberListType;string):System.Reflection.CerArrayList&lt;System.Reflection.RuntimePropertyInfo&gt;</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetToString" uniqueID="GetToString():string">
				<signature>System.RuntimeType+RuntimeTypeCache.GetToString():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InvalidateCachedNestedType" uniqueID="InvalidateCachedNestedType():void">
				<signature>System.RuntimeType+RuntimeTypeCache.InvalidateCachedNestedType():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RuntimeType+RuntimeTypeCache" uniqueID="RuntimeType+RuntimeTypeCache(System.RuntimeType):void">
				<signature>System.RuntimeType+RuntimeTypeCache.RuntimeType+RuntimeTypeCache(System.RuntimeType):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_DomainInitialized" uniqueID="get_DomainInitialized():bool">
				<signature>System.RuntimeType+RuntimeTypeCache.get_DomainInitialized():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IsGlobal" uniqueID="get_IsGlobal():bool">
				<signature>System.RuntimeType+RuntimeTypeCache.get_IsGlobal():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_RuntimeType" uniqueID="get_RuntimeType():System.RuntimeType">
				<signature>System.RuntimeType+RuntimeTypeCache.get_RuntimeType():System.RuntimeType</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_RuntimeTypeHandle" uniqueID="get_RuntimeTypeHandle():System.RuntimeTypeHandle">
				<signature>System.RuntimeType+RuntimeTypeCache.get_RuntimeTypeHandle():System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_TypeCode" uniqueID="get_TypeCode():System.TypeCode">
				<signature>System.RuntimeType+RuntimeTypeCache.get_TypeCode():System.TypeCode</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_DomainInitialized" uniqueID="set_DomainInitialized(bool):void">
				<signature>System.RuntimeType+RuntimeTypeCache.set_DomainInitialized(bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_TypeCode" uniqueID="set_TypeCode(System.TypeCode):void">
				<signature>System.RuntimeType+RuntimeTypeCache.set_TypeCode(System.TypeCode):void</signature>
			</method>
		</class>
		<class name="RuntimeTypeHandle+IntroducedMethodEnumerator" uniqueID="System.RuntimeTypeHandle+IntroducedMethodEnumerator">
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.RuntimeTypeHandle+IntroducedMethodEnumerator">
				<signature>System.RuntimeTypeHandle+IntroducedMethodEnumerator.GetEnumerator():System.RuntimeTypeHandle+IntroducedMethodEnumerator</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MoveNext" uniqueID="MoveNext():bool">
				<signature>System.RuntimeTypeHandle+IntroducedMethodEnumerator.MoveNext():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RuntimeTypeHandle+IntroducedMethodEnumerator" uniqueID="RuntimeTypeHandle+IntroducedMethodEnumerator(System.RuntimeTypeHandle):void">
				<signature>System.RuntimeTypeHandle+IntroducedMethodEnumerator.RuntimeTypeHandle+IntroducedMethodEnumerator(System.RuntimeTypeHandle):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Current" uniqueID="get_Current():System.RuntimeMethodHandle">
				<signature>System.RuntimeTypeHandle+IntroducedMethodEnumerator.get_Current():System.RuntimeMethodHandle</signature>
			</method>
		</class>
		<class name="UnhandledExceptionEventHandler" uniqueID="System.UnhandledExceptionEventHandler">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(object;System.UnhandledExceptionEventArgs;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.UnhandledExceptionEventHandler.BeginInvoke(object;System.UnhandledExceptionEventArgs;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):void">
				<signature>System.UnhandledExceptionEventHandler.EndInvoke(System.IAsyncResult):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(object;System.UnhandledExceptionEventArgs):void">
				<signature>System.UnhandledExceptionEventHandler.Invoke(object;System.UnhandledExceptionEventArgs):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="UnhandledExceptionEventHandler" uniqueID="UnhandledExceptionEventHandler(object;native signed int):void">
				<signature>System.UnhandledExceptionEventHandler.UnhandledExceptionEventHandler(object;native signed int):void</signature>
			</method>
		</class>
		<class name="Action&lt;System.Reflection.RuntimeMethodInfo&gt;" uniqueID="System.Action&lt;System.Reflection.RuntimeMethodInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="Action&lt;System.Reflection.RuntimeMethodInfo&gt;" uniqueID="Action&lt;System.Reflection.RuntimeMethodInfo&gt;(object;native signed int):void">
				<signature>System.Action&lt;System.Reflection.RuntimeMethodInfo&gt;.Action&lt;System.Reflection.RuntimeMethodInfo&gt;(object;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(System.Reflection.RuntimeMethodInfo;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Action&lt;System.Reflection.RuntimeMethodInfo&gt;.BeginInvoke(System.Reflection.RuntimeMethodInfo;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):void">
				<signature>System.Action&lt;System.Reflection.RuntimeMethodInfo&gt;.EndInvoke(System.IAsyncResult):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(System.Reflection.RuntimeMethodInfo):void">
				<signature>System.Action&lt;System.Reflection.RuntimeMethodInfo&gt;.Invoke(System.Reflection.RuntimeMethodInfo):void</signature>
			</method>
		</class>
		<class name="IEquatable&lt;int&gt;" uniqueID="System.IEquatable&lt;int&gt;">
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(int):bool">
				<signature>System.IEquatable&lt;int&gt;.Equals(int):bool</signature>
			</method>
		</class>
		<class name="IComparable&lt;System.Decimal&gt;" uniqueID="System.IComparable&lt;System.Decimal&gt;">
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(System.Decimal):int">
				<signature>System.IComparable&lt;System.Decimal&gt;.CompareTo(System.Decimal):int</signature>
			</method>
		</class>
		<class name="IEquatable&lt;char&gt;" uniqueID="System.IEquatable&lt;char&gt;">
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(char):bool">
				<signature>System.IEquatable&lt;char&gt;.Equals(char):bool</signature>
			</method>
		</class>
		<class name="ActivationContext" uniqueID="System.ActivationContext">
			<method accessibility="Public" methodKind="Static" name="CreatePartialActivationContext" uniqueID="CreatePartialActivationContext(System.ApplicationIdentity):System.ActivationContext">
				<signature>System.ActivationContext.CreatePartialActivationContext(System.ApplicationIdentity):System.ActivationContext</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CreatePartialActivationContext" uniqueID="CreatePartialActivationContext(System.ApplicationIdentity;string[]):System.ActivationContext">
				<signature>System.ActivationContext.CreatePartialActivationContext(System.ApplicationIdentity;string[]):System.ActivationContext</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ReadBytesFromFile" uniqueID="ReadBytesFromFile(string):byte[]">
				<signature>System.ActivationContext.ReadBytesFromFile(string):byte[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ActivationContext" uniqueID="ActivationContext():void">
				<signature>System.ActivationContext.ActivationContext():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ActivationContext" uniqueID="ActivationContext(System.ApplicationIdentity):void">
				<signature>System.ActivationContext.ActivationContext(System.ApplicationIdentity):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ActivationContext" uniqueID="ActivationContext(System.ApplicationIdentity;string[]):void">
				<signature>System.ActivationContext.ActivationContext(System.ApplicationIdentity;string[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ActivationContext" uniqueID="ActivationContext(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.ActivationContext.ActivationContext(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CreateFromName" uniqueID="CreateFromName(System.ApplicationIdentity):void">
				<signature>System.ActivationContext.CreateFromName(System.ApplicationIdentity):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CreateFromNameAndManifests" uniqueID="CreateFromNameAndManifests(System.ApplicationIdentity;string[]):void">
				<signature>System.ActivationContext.CreateFromNameAndManifests(System.ApplicationIdentity;string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Dispose" uniqueID="Dispose():void">
				<signature>System.ActivationContext.Dispose():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Dispose" uniqueID="Dispose(bool):void">
				<signature>System.ActivationContext.Dispose(bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Finalize" uniqueID="Finalize():void">
				<signature>System.ActivationContext.Finalize():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetApplicationManifestBytes" uniqueID="GetApplicationManifestBytes():byte[]">
				<signature>System.ActivationContext.GetApplicationManifestBytes():byte[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetComponentManifest" uniqueID="GetComponentManifest(System.Deployment.Internal.Isolation.IDefinitionIdentity):System.Deployment.Internal.Isolation.Manifest.ICMS">
				<signature>System.ActivationContext.GetComponentManifest(System.Deployment.Internal.Isolation.IDefinitionIdentity):System.Deployment.Internal.Isolation.Manifest.ICMS</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetDeploymentManifestBytes" uniqueID="GetDeploymentManifestBytes():byte[]">
				<signature>System.ActivationContext.GetDeploymentManifestBytes():byte[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="PrepareForExecution" uniqueID="PrepareForExecution():void">
				<signature>System.ActivationContext.PrepareForExecution():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetApplicationState" uniqueID="SetApplicationState(System.ActivationContext+ApplicationState):System.ActivationContext+ApplicationStateDisposition">
				<signature>System.ActivationContext.SetApplicationState(System.ActivationContext+ApplicationState):System.ActivationContext+ApplicationStateDisposition</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.Serialization.ISerializable.GetObjectData" uniqueID="System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.ActivationContext.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ActivationContextData" uniqueID="get_ActivationContextData():System.Deployment.Internal.Isolation.Manifest.ICMS">
				<signature>System.ActivationContext.get_ActivationContextData():System.Deployment.Internal.Isolation.Manifest.ICMS</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ApplicationComponentManifest" uniqueID="get_ApplicationComponentManifest():System.Deployment.Internal.Isolation.Manifest.ICMS">
				<signature>System.ActivationContext.get_ApplicationComponentManifest():System.Deployment.Internal.Isolation.Manifest.ICMS</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ApplicationDirectory" uniqueID="get_ApplicationDirectory():string">
				<signature>System.ActivationContext.get_ApplicationDirectory():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ApplicationManifestBytes" uniqueID="get_ApplicationManifestBytes():byte[]">
				<signature>System.ActivationContext.get_ApplicationManifestBytes():byte[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_DataDirectory" uniqueID="get_DataDirectory():string">
				<signature>System.ActivationContext.get_DataDirectory():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_DeploymentComponentManifest" uniqueID="get_DeploymentComponentManifest():System.Deployment.Internal.Isolation.Manifest.ICMS">
				<signature>System.ActivationContext.get_DeploymentComponentManifest():System.Deployment.Internal.Isolation.Manifest.ICMS</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeploymentManifestBytes" uniqueID="get_DeploymentManifestBytes():byte[]">
				<signature>System.ActivationContext.get_DeploymentManifestBytes():byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Form" uniqueID="get_Form():System.ActivationContext+ContextForm">
				<signature>System.ActivationContext.get_Form():System.ActivationContext+ContextForm</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Identity" uniqueID="get_Identity():System.ApplicationIdentity">
				<signature>System.ActivationContext.get_Identity():System.ApplicationIdentity</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_LastApplicationStateResult" uniqueID="get_LastApplicationStateResult():System.ActivationContext+ApplicationStateDisposition">
				<signature>System.ActivationContext.get_LastApplicationStateResult():System.ActivationContext+ApplicationStateDisposition</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ManifestPaths" uniqueID="get_ManifestPaths():string[]">
				<signature>System.ActivationContext.get_ManifestPaths():string[]</signature>
			</method>
		</class>
		<class name="AppDomainInitializerInfo+ItemInfo" uniqueID="System.AppDomainInitializerInfo+ItemInfo">
			<method accessibility="Public" methodKind="Member" name="AppDomainInitializerInfo+ItemInfo" uniqueID="AppDomainInitializerInfo+ItemInfo():void">
				<signature>System.AppDomainInitializerInfo+ItemInfo.AppDomainInitializerInfo+ItemInfo():void</signature>
			</method>
		</class>
		<class name="Comparison&lt;string&gt;" uniqueID="System.Comparison&lt;string&gt;">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(string;string;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Comparison&lt;string&gt;.BeginInvoke(string;string;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Comparison&lt;string&gt;" uniqueID="Comparison&lt;string&gt;(object;native signed int):void">
				<signature>System.Comparison&lt;string&gt;.Comparison&lt;string&gt;(object;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):int">
				<signature>System.Comparison&lt;string&gt;.EndInvoke(System.IAsyncResult):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(string;string):int">
				<signature>System.Comparison&lt;string&gt;.Invoke(string;string):int</signature>
			</method>
		</class>
		<class name="IFormattable" uniqueID="System.IFormattable">
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString(string;System.IFormatProvider):string">
				<signature>System.IFormattable.ToString(string;System.IFormatProvider):string</signature>
			</method>
		</class>
		<class name="Comparison&lt;System.Reflection.RuntimeFieldInfo&gt;" uniqueID="System.Comparison&lt;System.Reflection.RuntimeFieldInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(System.Reflection.RuntimeFieldInfo;System.Reflection.RuntimeFieldInfo;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Comparison&lt;System.Reflection.RuntimeFieldInfo&gt;.BeginInvoke(System.Reflection.RuntimeFieldInfo;System.Reflection.RuntimeFieldInfo;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Comparison&lt;System.Reflection.RuntimeFieldInfo&gt;" uniqueID="Comparison&lt;System.Reflection.RuntimeFieldInfo&gt;(object;native signed int):void">
				<signature>System.Comparison&lt;System.Reflection.RuntimeFieldInfo&gt;.Comparison&lt;System.Reflection.RuntimeFieldInfo&gt;(object;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):int">
				<signature>System.Comparison&lt;System.Reflection.RuntimeFieldInfo&gt;.EndInvoke(System.IAsyncResult):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(System.Reflection.RuntimeFieldInfo;System.Reflection.RuntimeFieldInfo):int">
				<signature>System.Comparison&lt;System.Reflection.RuntimeFieldInfo&gt;.Invoke(System.Reflection.RuntimeFieldInfo;System.Reflection.RuntimeFieldInfo):int</signature>
			</method>
		</class>
		<class name="ContextBoundObject" uniqueID="System.ContextBoundObject">
			<method accessibility="Protected" methodKind="Member" name="ContextBoundObject" uniqueID="ContextBoundObject():void">
				<signature>System.ContextBoundObject.ContextBoundObject():void</signature>
			</method>
		</class>
		<class name="Enum" uniqueID="System.Enum">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Enum.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="BinarySearch" uniqueID="BinarySearch(unsigned long[];unsigned long):int">
				<signature>System.Enum.BinarySearch(unsigned long[];unsigned long):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Format" uniqueID="Format(System.Type;object;string):string">
				<signature>System.Enum.Format(System.Type;object;string):string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetHashEntry" uniqueID="GetHashEntry(System.Type):System.Enum+HashEntry">
				<signature>System.Enum.GetHashEntry(System.Type):System.Enum+HashEntry</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetName" uniqueID="GetName(System.Type;object):string">
				<signature>System.Enum.GetName(System.Type;object):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetNames" uniqueID="GetNames(System.Type):string[]">
				<signature>System.Enum.GetNames(System.Type):string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetUnderlyingType" uniqueID="GetUnderlyingType(System.Type):System.Type">
				<signature>System.Enum.GetUnderlyingType(System.Type):System.Type</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetValueField" uniqueID="GetValueField(System.Type):System.Reflection.FieldInfo">
				<signature>System.Enum.GetValueField(System.Type):System.Reflection.FieldInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetValues" uniqueID="GetValues(System.Type):System.Array">
				<signature>System.Enum.GetValues(System.Type):System.Array</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalBoxEnum" uniqueID="InternalBoxEnum(System.Type;long):object">
				<signature>System.Enum.InternalBoxEnum(System.Type;long):object</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalCompareTo" uniqueID="InternalCompareTo(object;object):int">
				<signature>System.Enum.InternalCompareTo(object;object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalFlagsFormat" uniqueID="InternalFlagsFormat(System.Type;object):string">
				<signature>System.Enum.InternalFlagsFormat(System.Type;object):string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalFormat" uniqueID="InternalFormat(System.Type;object):string">
				<signature>System.Enum.InternalFormat(System.Type;object):string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalFormattedHexString" uniqueID="InternalFormattedHexString(object):string">
				<signature>System.Enum.InternalFormattedHexString(object):string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalGetEnumValues" uniqueID="InternalGetEnumValues(System.Type;unsigned long[];string[]):void">
				<signature>System.Enum.InternalGetEnumValues(System.Type;unsigned long[];string[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalGetUnderlyingType" uniqueID="InternalGetUnderlyingType(System.Type):System.Type">
				<signature>System.Enum.InternalGetUnderlyingType(System.Type):System.Type</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalGetValueAsString" uniqueID="InternalGetValueAsString(System.Type;object):string">
				<signature>System.Enum.InternalGetValueAsString(System.Type;object):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsDefined" uniqueID="IsDefined(System.Type;object):bool">
				<signature>System.Enum.IsDefined(System.Type;object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Parse" uniqueID="Parse(System.Type;string):object">
				<signature>System.Enum.Parse(System.Type;string):object</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Parse" uniqueID="Parse(System.Type;string;bool):object">
				<signature>System.Enum.Parse(System.Type;string;bool):object</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToObject" uniqueID="ToObject(System.Type;byte):object">
				<signature>System.Enum.ToObject(System.Type;byte):object</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToObject" uniqueID="ToObject(System.Type;int):object">
				<signature>System.Enum.ToObject(System.Type;int):object</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToObject" uniqueID="ToObject(System.Type;long):object">
				<signature>System.Enum.ToObject(System.Type;long):object</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToObject" uniqueID="ToObject(System.Type;object):object">
				<signature>System.Enum.ToObject(System.Type;object):object</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToObject" uniqueID="ToObject(System.Type;sbyte):object">
				<signature>System.Enum.ToObject(System.Type;sbyte):object</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToObject" uniqueID="ToObject(System.Type;short):object">
				<signature>System.Enum.ToObject(System.Type;short):object</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToObject" uniqueID="ToObject(System.Type;unsigned int):object">
				<signature>System.Enum.ToObject(System.Type;unsigned int):object</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToObject" uniqueID="ToObject(System.Type;unsigned long):object">
				<signature>System.Enum.ToObject(System.Type;unsigned long):object</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToObject" uniqueID="ToObject(System.Type;unsigned short):object">
				<signature>System.Enum.ToObject(System.Type;unsigned short):object</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ToUInt64" uniqueID="ToUInt64(object):unsigned long">
				<signature>System.Enum.ToUInt64(object):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(object):int">
				<signature>System.Enum.CompareTo(object):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Enum" uniqueID="Enum():void">
				<signature>System.Enum.Enum():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Enum.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Enum.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeCode" uniqueID="GetTypeCode():System.TypeCode">
				<signature>System.Enum.GetTypeCode():System.TypeCode</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetValue" uniqueID="GetValue():object">
				<signature>System.Enum.GetValue():object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="InternalGetValue" uniqueID="InternalGetValue():object">
				<signature>System.Enum.InternalGetValue():object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToBoolean" uniqueID="System.IConvertible.ToBoolean(System.IFormatProvider):bool">
				<signature>System.Enum.System.IConvertible.ToBoolean(System.IFormatProvider):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToByte" uniqueID="System.IConvertible.ToByte(System.IFormatProvider):byte">
				<signature>System.Enum.System.IConvertible.ToByte(System.IFormatProvider):byte</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToChar" uniqueID="System.IConvertible.ToChar(System.IFormatProvider):char">
				<signature>System.Enum.System.IConvertible.ToChar(System.IFormatProvider):char</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToDateTime" uniqueID="System.IConvertible.ToDateTime(System.IFormatProvider):System.DateTime">
				<signature>System.Enum.System.IConvertible.ToDateTime(System.IFormatProvider):System.DateTime</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToDecimal" uniqueID="System.IConvertible.ToDecimal(System.IFormatProvider):System.Decimal">
				<signature>System.Enum.System.IConvertible.ToDecimal(System.IFormatProvider):System.Decimal</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToDouble" uniqueID="System.IConvertible.ToDouble(System.IFormatProvider):double">
				<signature>System.Enum.System.IConvertible.ToDouble(System.IFormatProvider):double</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToInt16" uniqueID="System.IConvertible.ToInt16(System.IFormatProvider):short">
				<signature>System.Enum.System.IConvertible.ToInt16(System.IFormatProvider):short</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToInt32" uniqueID="System.IConvertible.ToInt32(System.IFormatProvider):int">
				<signature>System.Enum.System.IConvertible.ToInt32(System.IFormatProvider):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToInt64" uniqueID="System.IConvertible.ToInt64(System.IFormatProvider):long">
				<signature>System.Enum.System.IConvertible.ToInt64(System.IFormatProvider):long</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToSByte" uniqueID="System.IConvertible.ToSByte(System.IFormatProvider):sbyte">
				<signature>System.Enum.System.IConvertible.ToSByte(System.IFormatProvider):sbyte</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToSingle" uniqueID="System.IConvertible.ToSingle(System.IFormatProvider):float">
				<signature>System.Enum.System.IConvertible.ToSingle(System.IFormatProvider):float</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToType" uniqueID="System.IConvertible.ToType(System.Type;System.IFormatProvider):object">
				<signature>System.Enum.System.IConvertible.ToType(System.Type;System.IFormatProvider):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToUInt16" uniqueID="System.IConvertible.ToUInt16(System.IFormatProvider):unsigned short">
				<signature>System.Enum.System.IConvertible.ToUInt16(System.IFormatProvider):unsigned short</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToUInt32" uniqueID="System.IConvertible.ToUInt32(System.IFormatProvider):unsigned int">
				<signature>System.Enum.System.IConvertible.ToUInt32(System.IFormatProvider):unsigned int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToUInt64" uniqueID="System.IConvertible.ToUInt64(System.IFormatProvider):unsigned long">
				<signature>System.Enum.System.IConvertible.ToUInt64(System.IFormatProvider):unsigned long</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ToHexString" uniqueID="ToHexString():string">
				<signature>System.Enum.ToHexString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Enum.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString(System.IFormatProvider):string">
				<signature>System.Enum.ToString(System.IFormatProvider):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString(string):string">
				<signature>System.Enum.ToString(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString(string;System.IFormatProvider):string">
				<signature>System.Enum.ToString(string;System.IFormatProvider):string</signature>
			</method>
		</class>
		<class name="AttributeUsageAttribute" uniqueID="System.AttributeUsageAttribute">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.AttributeUsageAttribute.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AttributeUsageAttribute" uniqueID="AttributeUsageAttribute(System.AttributeTargets):void">
				<signature>System.AttributeUsageAttribute.AttributeUsageAttribute(System.AttributeTargets):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AttributeUsageAttribute" uniqueID="AttributeUsageAttribute(System.AttributeTargets;bool;bool):void">
				<signature>System.AttributeUsageAttribute.AttributeUsageAttribute(System.AttributeTargets;bool;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AllowMultiple" uniqueID="get_AllowMultiple():bool">
				<signature>System.AttributeUsageAttribute.get_AllowMultiple():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Inherited" uniqueID="get_Inherited():bool">
				<signature>System.AttributeUsageAttribute.get_Inherited():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ValidOn" uniqueID="get_ValidOn():System.AttributeTargets">
				<signature>System.AttributeUsageAttribute.get_ValidOn():System.AttributeTargets</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_AllowMultiple" uniqueID="set_AllowMultiple(bool):void">
				<signature>System.AttributeUsageAttribute.set_AllowMultiple(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Inherited" uniqueID="set_Inherited(bool):void">
				<signature>System.AttributeUsageAttribute.set_Inherited(bool):void</signature>
			</method>
		</class>
		<class name="Comparison&lt;System.Reflection.RuntimeEventInfo&gt;" uniqueID="System.Comparison&lt;System.Reflection.RuntimeEventInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(System.Reflection.RuntimeEventInfo;System.Reflection.RuntimeEventInfo;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Comparison&lt;System.Reflection.RuntimeEventInfo&gt;.BeginInvoke(System.Reflection.RuntimeEventInfo;System.Reflection.RuntimeEventInfo;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Comparison&lt;System.Reflection.RuntimeEventInfo&gt;" uniqueID="Comparison&lt;System.Reflection.RuntimeEventInfo&gt;(object;native signed int):void">
				<signature>System.Comparison&lt;System.Reflection.RuntimeEventInfo&gt;.Comparison&lt;System.Reflection.RuntimeEventInfo&gt;(object;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):int">
				<signature>System.Comparison&lt;System.Reflection.RuntimeEventInfo&gt;.EndInvoke(System.IAsyncResult):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(System.Reflection.RuntimeEventInfo;System.Reflection.RuntimeEventInfo):int">
				<signature>System.Comparison&lt;System.Reflection.RuntimeEventInfo&gt;.Invoke(System.Reflection.RuntimeEventInfo;System.Reflection.RuntimeEventInfo):int</signature>
			</method>
		</class>
		<class name="IAppDomainSetup" uniqueID="System.IAppDomainSetup">
			<method accessibility="Public" methodKind="Member" name="get_ApplicationBase" uniqueID="get_ApplicationBase():string">
				<signature>System.IAppDomainSetup.get_ApplicationBase():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ApplicationName" uniqueID="get_ApplicationName():string">
				<signature>System.IAppDomainSetup.get_ApplicationName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CachePath" uniqueID="get_CachePath():string">
				<signature>System.IAppDomainSetup.get_CachePath():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ConfigurationFile" uniqueID="get_ConfigurationFile():string">
				<signature>System.IAppDomainSetup.get_ConfigurationFile():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DynamicBase" uniqueID="get_DynamicBase():string">
				<signature>System.IAppDomainSetup.get_DynamicBase():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_LicenseFile" uniqueID="get_LicenseFile():string">
				<signature>System.IAppDomainSetup.get_LicenseFile():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PrivateBinPath" uniqueID="get_PrivateBinPath():string">
				<signature>System.IAppDomainSetup.get_PrivateBinPath():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PrivateBinPathProbe" uniqueID="get_PrivateBinPathProbe():string">
				<signature>System.IAppDomainSetup.get_PrivateBinPathProbe():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ShadowCopyDirectories" uniqueID="get_ShadowCopyDirectories():string">
				<signature>System.IAppDomainSetup.get_ShadowCopyDirectories():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ShadowCopyFiles" uniqueID="get_ShadowCopyFiles():string">
				<signature>System.IAppDomainSetup.get_ShadowCopyFiles():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ApplicationBase" uniqueID="set_ApplicationBase(string):void">
				<signature>System.IAppDomainSetup.set_ApplicationBase(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ApplicationName" uniqueID="set_ApplicationName(string):void">
				<signature>System.IAppDomainSetup.set_ApplicationName(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_CachePath" uniqueID="set_CachePath(string):void">
				<signature>System.IAppDomainSetup.set_CachePath(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ConfigurationFile" uniqueID="set_ConfigurationFile(string):void">
				<signature>System.IAppDomainSetup.set_ConfigurationFile(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_DynamicBase" uniqueID="set_DynamicBase(string):void">
				<signature>System.IAppDomainSetup.set_DynamicBase(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_LicenseFile" uniqueID="set_LicenseFile(string):void">
				<signature>System.IAppDomainSetup.set_LicenseFile(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_PrivateBinPath" uniqueID="set_PrivateBinPath(string):void">
				<signature>System.IAppDomainSetup.set_PrivateBinPath(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_PrivateBinPathProbe" uniqueID="set_PrivateBinPathProbe(string):void">
				<signature>System.IAppDomainSetup.set_PrivateBinPathProbe(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ShadowCopyDirectories" uniqueID="set_ShadowCopyDirectories(string):void">
				<signature>System.IAppDomainSetup.set_ShadowCopyDirectories(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ShadowCopyFiles" uniqueID="set_ShadowCopyFiles(string):void">
				<signature>System.IAppDomainSetup.set_ShadowCopyFiles(string):void</signature>
			</method>
		</class>
		<class name="IComparable&lt;byte&gt;" uniqueID="System.IComparable&lt;byte&gt;">
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(byte):int">
				<signature>System.IComparable&lt;byte&gt;.CompareTo(byte):int</signature>
			</method>
		</class>
		<class name="IEquatable&lt;System.Guid&gt;" uniqueID="System.IEquatable&lt;System.Guid&gt;">
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.Guid):bool">
				<signature>System.IEquatable&lt;System.Guid&gt;.Equals(System.Guid):bool</signature>
			</method>
		</class>
		<class name="InvalidOperationException" uniqueID="System.InvalidOperationException">
			<method accessibility="Public" methodKind="Member" name="InvalidOperationException" uniqueID="InvalidOperationException():void">
				<signature>System.InvalidOperationException.InvalidOperationException():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InvalidOperationException" uniqueID="InvalidOperationException(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.InvalidOperationException.InvalidOperationException(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InvalidOperationException" uniqueID="InvalidOperationException(string):void">
				<signature>System.InvalidOperationException.InvalidOperationException(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InvalidOperationException" uniqueID="InvalidOperationException(string;System.Exception):void">
				<signature>System.InvalidOperationException.InvalidOperationException(string;System.Exception):void</signature>
			</method>
		</class>
		<class name="MulticastDelegate" uniqueID="System.MulticastDelegate">
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.MulticastDelegate;System.MulticastDelegate):bool">
				<signature>System.MulticastDelegate.op_Equality(System.MulticastDelegate;System.MulticastDelegate):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.MulticastDelegate;System.MulticastDelegate):bool">
				<signature>System.MulticastDelegate.op_Inequality(System.MulticastDelegate;System.MulticastDelegate):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CombineImpl" uniqueID="CombineImpl(System.Delegate):System.Delegate">
				<signature>System.MulticastDelegate.CombineImpl(System.Delegate):System.Delegate</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CtorClosed" uniqueID="CtorClosed(object;native signed int):void">
				<signature>System.MulticastDelegate.CtorClosed(object;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CtorClosedStatic" uniqueID="CtorClosedStatic(object;native signed int):void">
				<signature>System.MulticastDelegate.CtorClosedStatic(object;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CtorOpened" uniqueID="CtorOpened(object;native signed int;native signed int):void">
				<signature>System.MulticastDelegate.CtorOpened(object;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CtorRTClosed" uniqueID="CtorRTClosed(object;native signed int):void">
				<signature>System.MulticastDelegate.CtorRTClosed(object;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CtorSecureClosed" uniqueID="CtorSecureClosed(object;native signed int;native signed int;native signed int):void">
				<signature>System.MulticastDelegate.CtorSecureClosed(object;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CtorSecureClosedStatic" uniqueID="CtorSecureClosedStatic(object;native signed int;native signed int;native signed int):void">
				<signature>System.MulticastDelegate.CtorSecureClosedStatic(object;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CtorSecureOpened" uniqueID="CtorSecureOpened(object;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.MulticastDelegate.CtorSecureOpened(object;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CtorSecureRTClosed" uniqueID="CtorSecureRTClosed(object;native signed int;native signed int;native signed int):void">
				<signature>System.MulticastDelegate.CtorSecureRTClosed(object;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CtorSecureVirtualDispatch" uniqueID="CtorSecureVirtualDispatch(object;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.MulticastDelegate.CtorSecureVirtualDispatch(object;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CtorVirtualDispatch" uniqueID="CtorVirtualDispatch(object;native signed int;native signed int):void">
				<signature>System.MulticastDelegate.CtorVirtualDispatch(object;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DeleteFromInvocationList" uniqueID="DeleteFromInvocationList(object[];int;int;int):object[]">
				<signature>System.MulticastDelegate.DeleteFromInvocationList(object[];int;int;int):object[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="EqualInvocationLists" uniqueID="EqualInvocationLists(object[];object[];int;int):bool">
				<signature>System.MulticastDelegate.EqualInvocationLists(object[];object[];int;int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.MulticastDelegate.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.MulticastDelegate.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetInvocationList" uniqueID="GetInvocationList():System.Delegate[]">
				<signature>System.MulticastDelegate.GetInvocationList():System.Delegate[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMethodImpl" uniqueID="GetMethodImpl():System.Reflection.MethodInfo">
				<signature>System.MulticastDelegate.GetMethodImpl():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetObjectData" uniqueID="GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.MulticastDelegate.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetTarget" uniqueID="GetTarget():object">
				<signature>System.MulticastDelegate.GetTarget():object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="InvocationListEquals" uniqueID="InvocationListEquals(System.MulticastDelegate):bool">
				<signature>System.MulticastDelegate.InvocationListEquals(System.MulticastDelegate):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsUnmanagedFunctionPtr" uniqueID="IsUnmanagedFunctionPtr():bool">
				<signature>System.MulticastDelegate.IsUnmanagedFunctionPtr():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MulticastDelegate" uniqueID="MulticastDelegate(System.Type;string):void">
				<signature>System.MulticastDelegate.MulticastDelegate(System.Type;string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MulticastDelegate" uniqueID="MulticastDelegate(object;string):void">
				<signature>System.MulticastDelegate.MulticastDelegate(object;string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="NewMulticastDelegate" uniqueID="NewMulticastDelegate(object[];int):System.MulticastDelegate">
				<signature>System.MulticastDelegate.NewMulticastDelegate(object[];int):System.MulticastDelegate</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="NewMulticastDelegate" uniqueID="NewMulticastDelegate(object[];int;bool):System.MulticastDelegate">
				<signature>System.MulticastDelegate.NewMulticastDelegate(object[];int;bool):System.MulticastDelegate</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RemoveImpl" uniqueID="RemoveImpl(System.Delegate):System.Delegate">
				<signature>System.MulticastDelegate.RemoveImpl(System.Delegate):System.Delegate</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="StoreDynamicMethod" uniqueID="StoreDynamicMethod(System.Reflection.MethodInfo):void">
				<signature>System.MulticastDelegate.StoreDynamicMethod(System.Reflection.MethodInfo):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ThrowNullThisInDelegateToInstance" uniqueID="ThrowNullThisInDelegateToInstance():void">
				<signature>System.MulticastDelegate.ThrowNullThisInDelegateToInstance():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="TrySetSlot" uniqueID="TrySetSlot(object[];int;object):bool">
				<signature>System.MulticastDelegate.TrySetSlot(object[];int;object):bool</signature>
			</method>
		</class>
		<class name="Comparison&lt;System.Reflection.RuntimeMethodInfo&gt;" uniqueID="System.Comparison&lt;System.Reflection.RuntimeMethodInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(System.Reflection.RuntimeMethodInfo;System.Reflection.RuntimeMethodInfo;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Comparison&lt;System.Reflection.RuntimeMethodInfo&gt;.BeginInvoke(System.Reflection.RuntimeMethodInfo;System.Reflection.RuntimeMethodInfo;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Comparison&lt;System.Reflection.RuntimeMethodInfo&gt;" uniqueID="Comparison&lt;System.Reflection.RuntimeMethodInfo&gt;(object;native signed int):void">
				<signature>System.Comparison&lt;System.Reflection.RuntimeMethodInfo&gt;.Comparison&lt;System.Reflection.RuntimeMethodInfo&gt;(object;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):int">
				<signature>System.Comparison&lt;System.Reflection.RuntimeMethodInfo&gt;.EndInvoke(System.IAsyncResult):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(System.Reflection.RuntimeMethodInfo;System.Reflection.RuntimeMethodInfo):int">
				<signature>System.Comparison&lt;System.Reflection.RuntimeMethodInfo&gt;.Invoke(System.Reflection.RuntimeMethodInfo;System.Reflection.RuntimeMethodInfo):int</signature>
			</method>
		</class>
		<class name="Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;" uniqueID="System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(System.Reflection.RuntimeFieldInfo;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;.BeginInvoke(System.Reflection.RuntimeFieldInfo;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):bool">
				<signature>System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;.EndInvoke(System.IAsyncResult):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(System.Reflection.RuntimeFieldInfo):bool">
				<signature>System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;.Invoke(System.Reflection.RuntimeFieldInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;" uniqueID="Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;(object;native signed int):void">
				<signature>System.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;.Predicate&lt;System.Reflection.RuntimeFieldInfo&gt;(object;native signed int):void</signature>
			</method>
		</class>
		<class name="ResolveEventHandler" uniqueID="System.ResolveEventHandler">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(object;System.ResolveEventArgs;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.ResolveEventHandler.BeginInvoke(object;System.ResolveEventArgs;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):System.Reflection.Assembly">
				<signature>System.ResolveEventHandler.EndInvoke(System.IAsyncResult):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(object;System.ResolveEventArgs):System.Reflection.Assembly">
				<signature>System.ResolveEventHandler.Invoke(object;System.ResolveEventArgs):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ResolveEventHandler" uniqueID="ResolveEventHandler(object;native signed int):void">
				<signature>System.ResolveEventHandler.ResolveEventHandler(object;native signed int):void</signature>
			</method>
		</class>
		<class name="Type" uniqueID="System.Type">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Type.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CreateBinder" uniqueID="CreateBinder():void">
				<signature>System.Type.CreateBinder():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetType" uniqueID="GetType(string):System.Type">
				<signature>System.Type.GetType(string):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetType" uniqueID="GetType(string;bool):System.Type">
				<signature>System.Type.GetType(string;bool):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetType" uniqueID="GetType(string;bool;bool):System.Type">
				<signature>System.Type.GetType(string;bool;bool):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetTypeArray" uniqueID="GetTypeArray(object[]):System.Type[]">
				<signature>System.Type.GetTypeArray(object[]):System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetTypeCode" uniqueID="GetTypeCode(System.Type):System.TypeCode">
				<signature>System.Type.GetTypeCode(System.Type):System.TypeCode</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetTypeFromCLSID" uniqueID="GetTypeFromCLSID(System.Guid):System.Type">
				<signature>System.Type.GetTypeFromCLSID(System.Guid):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetTypeFromCLSID" uniqueID="GetTypeFromCLSID(System.Guid;bool):System.Type">
				<signature>System.Type.GetTypeFromCLSID(System.Guid;bool):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetTypeFromCLSID" uniqueID="GetTypeFromCLSID(System.Guid;string):System.Type">
				<signature>System.Type.GetTypeFromCLSID(System.Guid;string):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetTypeFromCLSID" uniqueID="GetTypeFromCLSID(System.Guid;string;bool):System.Type">
				<signature>System.Type.GetTypeFromCLSID(System.Guid;string;bool):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetTypeFromHandle" uniqueID="GetTypeFromHandle(System.RuntimeTypeHandle):System.Type">
				<signature>System.Type.GetTypeFromHandle(System.RuntimeTypeHandle):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetTypeFromProgID" uniqueID="GetTypeFromProgID(string):System.Type">
				<signature>System.Type.GetTypeFromProgID(string):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetTypeFromProgID" uniqueID="GetTypeFromProgID(string;bool):System.Type">
				<signature>System.Type.GetTypeFromProgID(string;bool):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetTypeFromProgID" uniqueID="GetTypeFromProgID(string;string):System.Type">
				<signature>System.Type.GetTypeFromProgID(string;string):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetTypeFromProgID" uniqueID="GetTypeFromProgID(string;string;bool):System.Type">
				<signature>System.Type.GetTypeFromProgID(string;string;bool):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetTypeHandle" uniqueID="GetTypeHandle(object):System.RuntimeTypeHandle">
				<signature>System.Type.GetTypeHandle(object):System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ReflectionOnlyGetType" uniqueID="ReflectionOnlyGetType(string;bool;bool):System.Type">
				<signature>System.Type.ReflectionOnlyGetType(string;bool;bool):System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ResolveTypeRelativeTo" uniqueID="ResolveTypeRelativeTo(string;int;int;System.Type):System.Type">
				<signature>System.Type.ResolveTypeRelativeTo(string;int;int;System.Type):System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ResolveTypeRelativeToBaseTypes" uniqueID="ResolveTypeRelativeToBaseTypes(string;int;int;System.Type):System.Type">
				<signature>System.Type.ResolveTypeRelativeToBaseTypes(string;int;int;System.Type):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_DefaultBinder" uniqueID="get_DefaultBinder():System.Reflection.Binder">
				<signature>System.Type.get_DefaultBinder():System.Reflection.Binder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.Type):bool">
				<signature>System.Type.Equals(System.Type):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Type.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindInterfaces" uniqueID="FindInterfaces(System.Reflection.TypeFilter;object):System.Type[]">
				<signature>System.Type.FindInterfaces(System.Reflection.TypeFilter;object):System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FindMembers" uniqueID="FindMembers(System.Reflection.MemberTypes;System.Reflection.BindingFlags;System.Reflection.MemberFilter;object):System.Reflection.MemberInfo[]">
				<signature>System.Type.FindMembers(System.Reflection.MemberTypes;System.Reflection.BindingFlags;System.Reflection.MemberFilter;object):System.Reflection.MemberInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetArrayRank" uniqueID="GetArrayRank():int">
				<signature>System.Type.GetArrayRank():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetAttributeFlagsImpl" uniqueID="GetAttributeFlagsImpl():System.Reflection.TypeAttributes">
				<signature>System.Type.GetAttributeFlagsImpl():System.Reflection.TypeAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetConstructor" uniqueID="GetConstructor(System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.ConstructorInfo">
				<signature>System.Type.GetConstructor(System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.ConstructorInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetConstructor" uniqueID="GetConstructor(System.Reflection.BindingFlags;System.Reflection.Binder;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.ConstructorInfo">
				<signature>System.Type.GetConstructor(System.Reflection.BindingFlags;System.Reflection.Binder;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.ConstructorInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetConstructor" uniqueID="GetConstructor(System.Type[]):System.Reflection.ConstructorInfo">
				<signature>System.Type.GetConstructor(System.Type[]):System.Reflection.ConstructorInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetConstructorImpl" uniqueID="GetConstructorImpl(System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.ConstructorInfo">
				<signature>System.Type.GetConstructorImpl(System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.ConstructorInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetConstructors" uniqueID="GetConstructors():System.Reflection.ConstructorInfo[]">
				<signature>System.Type.GetConstructors():System.Reflection.ConstructorInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetConstructors" uniqueID="GetConstructors(System.Reflection.BindingFlags):System.Reflection.ConstructorInfo[]">
				<signature>System.Type.GetConstructors(System.Reflection.BindingFlags):System.Reflection.ConstructorInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetDefaultMemberName" uniqueID="GetDefaultMemberName():string">
				<signature>System.Type.GetDefaultMemberName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetDefaultMembers" uniqueID="GetDefaultMembers():System.Reflection.MemberInfo[]">
				<signature>System.Type.GetDefaultMembers():System.Reflection.MemberInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetElementType" uniqueID="GetElementType():System.Type">
				<signature>System.Type.GetElementType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEvent" uniqueID="GetEvent(string):System.Reflection.EventInfo">
				<signature>System.Type.GetEvent(string):System.Reflection.EventInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEvent" uniqueID="GetEvent(string;System.Reflection.BindingFlags):System.Reflection.EventInfo">
				<signature>System.Type.GetEvent(string;System.Reflection.BindingFlags):System.Reflection.EventInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEvents" uniqueID="GetEvents():System.Reflection.EventInfo[]">
				<signature>System.Type.GetEvents():System.Reflection.EventInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEvents" uniqueID="GetEvents(System.Reflection.BindingFlags):System.Reflection.EventInfo[]">
				<signature>System.Type.GetEvents(System.Reflection.BindingFlags):System.Reflection.EventInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetField" uniqueID="GetField(string):System.Reflection.FieldInfo">
				<signature>System.Type.GetField(string):System.Reflection.FieldInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetField" uniqueID="GetField(string;System.Reflection.BindingFlags):System.Reflection.FieldInfo">
				<signature>System.Type.GetField(string;System.Reflection.BindingFlags):System.Reflection.FieldInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFields" uniqueID="GetFields():System.Reflection.FieldInfo[]">
				<signature>System.Type.GetFields():System.Reflection.FieldInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFields" uniqueID="GetFields(System.Reflection.BindingFlags):System.Reflection.FieldInfo[]">
				<signature>System.Type.GetFields(System.Reflection.BindingFlags):System.Reflection.FieldInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetGenericArguments" uniqueID="GetGenericArguments():System.Type[]">
				<signature>System.Type.GetGenericArguments():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetGenericParameterConstraints" uniqueID="GetGenericParameterConstraints():System.Type[]">
				<signature>System.Type.GetGenericParameterConstraints():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetGenericTypeDefinition" uniqueID="GetGenericTypeDefinition():System.Type">
				<signature>System.Type.GetGenericTypeDefinition():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Type.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetInterface" uniqueID="GetInterface(string):System.Type">
				<signature>System.Type.GetInterface(string):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetInterface" uniqueID="GetInterface(string;bool):System.Type">
				<signature>System.Type.GetInterface(string;bool):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetInterfaceMap" uniqueID="GetInterfaceMap(System.Type):System.Reflection.InterfaceMapping">
				<signature>System.Type.GetInterfaceMap(System.Type):System.Reflection.InterfaceMapping</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetInterfaces" uniqueID="GetInterfaces():System.Type[]">
				<signature>System.Type.GetInterfaces():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMember" uniqueID="GetMember(string):System.Reflection.MemberInfo[]">
				<signature>System.Type.GetMember(string):System.Reflection.MemberInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMember" uniqueID="GetMember(string;System.Reflection.BindingFlags):System.Reflection.MemberInfo[]">
				<signature>System.Type.GetMember(string;System.Reflection.BindingFlags):System.Reflection.MemberInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMember" uniqueID="GetMember(string;System.Reflection.MemberTypes;System.Reflection.BindingFlags):System.Reflection.MemberInfo[]">
				<signature>System.Type.GetMember(string;System.Reflection.MemberTypes;System.Reflection.BindingFlags):System.Reflection.MemberInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMembers" uniqueID="GetMembers():System.Reflection.MemberInfo[]">
				<signature>System.Type.GetMembers():System.Reflection.MemberInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMembers" uniqueID="GetMembers(System.Reflection.BindingFlags):System.Reflection.MemberInfo[]">
				<signature>System.Type.GetMembers(System.Reflection.BindingFlags):System.Reflection.MemberInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethod" uniqueID="GetMethod(string):System.Reflection.MethodInfo">
				<signature>System.Type.GetMethod(string):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethod" uniqueID="GetMethod(string;System.Reflection.BindingFlags):System.Reflection.MethodInfo">
				<signature>System.Type.GetMethod(string;System.Reflection.BindingFlags):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethod" uniqueID="GetMethod(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo">
				<signature>System.Type.GetMethod(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethod" uniqueID="GetMethod(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo">
				<signature>System.Type.GetMethod(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethod" uniqueID="GetMethod(string;System.Type[]):System.Reflection.MethodInfo">
				<signature>System.Type.GetMethod(string;System.Type[]):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethod" uniqueID="GetMethod(string;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo">
				<signature>System.Type.GetMethod(string;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMethodImpl" uniqueID="GetMethodImpl(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo">
				<signature>System.Type.GetMethodImpl(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethods" uniqueID="GetMethods():System.Reflection.MethodInfo[]">
				<signature>System.Type.GetMethods():System.Reflection.MethodInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethods" uniqueID="GetMethods(System.Reflection.BindingFlags):System.Reflection.MethodInfo[]">
				<signature>System.Type.GetMethods(System.Reflection.BindingFlags):System.Reflection.MethodInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetNestedType" uniqueID="GetNestedType(string):System.Type">
				<signature>System.Type.GetNestedType(string):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetNestedType" uniqueID="GetNestedType(string;System.Reflection.BindingFlags):System.Type">
				<signature>System.Type.GetNestedType(string;System.Reflection.BindingFlags):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetNestedTypes" uniqueID="GetNestedTypes():System.Type[]">
				<signature>System.Type.GetNestedTypes():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetNestedTypes" uniqueID="GetNestedTypes(System.Reflection.BindingFlags):System.Type[]">
				<signature>System.Type.GetNestedTypes(System.Reflection.BindingFlags):System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetProperties" uniqueID="GetProperties():System.Reflection.PropertyInfo[]">
				<signature>System.Type.GetProperties():System.Reflection.PropertyInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetProperties" uniqueID="GetProperties(System.Reflection.BindingFlags):System.Reflection.PropertyInfo[]">
				<signature>System.Type.GetProperties(System.Reflection.BindingFlags):System.Reflection.PropertyInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetProperty" uniqueID="GetProperty(string):System.Reflection.PropertyInfo">
				<signature>System.Type.GetProperty(string):System.Reflection.PropertyInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetProperty" uniqueID="GetProperty(string;System.Reflection.BindingFlags):System.Reflection.PropertyInfo">
				<signature>System.Type.GetProperty(string;System.Reflection.BindingFlags):System.Reflection.PropertyInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetProperty" uniqueID="GetProperty(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Type;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.PropertyInfo">
				<signature>System.Type.GetProperty(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Type;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.PropertyInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetProperty" uniqueID="GetProperty(string;System.Type):System.Reflection.PropertyInfo">
				<signature>System.Type.GetProperty(string;System.Type):System.Reflection.PropertyInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetProperty" uniqueID="GetProperty(string;System.Type;System.Type[]):System.Reflection.PropertyInfo">
				<signature>System.Type.GetProperty(string;System.Type;System.Type[]):System.Reflection.PropertyInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetProperty" uniqueID="GetProperty(string;System.Type;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.PropertyInfo">
				<signature>System.Type.GetProperty(string;System.Type;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.PropertyInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetProperty" uniqueID="GetProperty(string;System.Type[]):System.Reflection.PropertyInfo">
				<signature>System.Type.GetProperty(string;System.Type[]):System.Reflection.PropertyInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetPropertyImpl" uniqueID="GetPropertyImpl(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Type;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.PropertyInfo">
				<signature>System.Type.GetPropertyImpl(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Type;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.PropertyInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetRootElementType" uniqueID="GetRootElementType():System.Type">
				<signature>System.Type.GetRootElementType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType():System.Type">
				<signature>System.Type.GetType():System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetTypeCodeInternal" uniqueID="GetTypeCodeInternal():System.TypeCode">
				<signature>System.Type.GetTypeCodeInternal():System.TypeCode</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetTypeHandleInternal" uniqueID="GetTypeHandleInternal():System.RuntimeTypeHandle">
				<signature>System.Type.GetTypeHandleInternal():System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="HasElementTypeImpl" uniqueID="HasElementTypeImpl():bool">
				<signature>System.Type.HasElementTypeImpl():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="HasProxyAttributeImpl" uniqueID="HasProxyAttributeImpl():bool">
				<signature>System.Type.HasProxyAttributeImpl():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InvokeMember" uniqueID="InvokeMember(string;System.Reflection.BindingFlags;System.Reflection.Binder;object;object[]):object">
				<signature>System.Type.InvokeMember(string;System.Reflection.BindingFlags;System.Reflection.Binder;object;object[]):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InvokeMember" uniqueID="InvokeMember(string;System.Reflection.BindingFlags;System.Reflection.Binder;object;object[];System.Globalization.CultureInfo):object">
				<signature>System.Type.InvokeMember(string;System.Reflection.BindingFlags;System.Reflection.Binder;object;object[];System.Globalization.CultureInfo):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InvokeMember" uniqueID="InvokeMember(string;System.Reflection.BindingFlags;System.Reflection.Binder;object;object[];System.Reflection.ParameterModifier[];System.Globalization.CultureInfo;string[]):object">
				<signature>System.Type.InvokeMember(string;System.Reflection.BindingFlags;System.Reflection.Binder;object;object[];System.Reflection.ParameterModifier[];System.Globalization.CultureInfo;string[]):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsArrayImpl" uniqueID="IsArrayImpl():bool">
				<signature>System.Type.IsArrayImpl():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsAssignableFrom" uniqueID="IsAssignableFrom(System.Type):bool">
				<signature>System.Type.IsAssignableFrom(System.Type):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsByRefImpl" uniqueID="IsByRefImpl():bool">
				<signature>System.Type.IsByRefImpl():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsCOMObjectImpl" uniqueID="IsCOMObjectImpl():bool">
				<signature>System.Type.IsCOMObjectImpl():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsContextfulImpl" uniqueID="IsContextfulImpl():bool">
				<signature>System.Type.IsContextfulImpl():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsInstanceOfType" uniqueID="IsInstanceOfType(object):bool">
				<signature>System.Type.IsInstanceOfType(object):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsMarshalByRefImpl" uniqueID="IsMarshalByRefImpl():bool">
				<signature>System.Type.IsMarshalByRefImpl():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsPointerImpl" uniqueID="IsPointerImpl():bool">
				<signature>System.Type.IsPointerImpl():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsPrimitiveImpl" uniqueID="IsPrimitiveImpl():bool">
				<signature>System.Type.IsPrimitiveImpl():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsSubclassOf" uniqueID="IsSubclassOf(System.Type):bool">
				<signature>System.Type.IsSubclassOf(System.Type):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsValueTypeImpl" uniqueID="IsValueTypeImpl():bool">
				<signature>System.Type.IsValueTypeImpl():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakeArrayType" uniqueID="MakeArrayType():System.Type">
				<signature>System.Type.MakeArrayType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakeArrayType" uniqueID="MakeArrayType(int):System.Type">
				<signature>System.Type.MakeArrayType(int):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakeByRefType" uniqueID="MakeByRefType():System.Type">
				<signature>System.Type.MakeByRefType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakeGenericType" uniqueID="MakeGenericType(System.Type[]):System.Type">
				<signature>System.Type.MakeGenericType(System.Type[]):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakePointerType" uniqueID="MakePointerType():System.Type">
				<signature>System.Type.MakePointerType():System.Type</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="QuickSerializationCastCheck" uniqueID="QuickSerializationCastCheck():bool">
				<signature>System.Type.QuickSerializationCastCheck():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SigToString" uniqueID="SigToString():string">
				<signature>System.Type.SigToString():string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._Type.GetIDsOfNames" uniqueID="System.Runtime.InteropServices._Type.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Type.System.Runtime.InteropServices._Type.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._Type.GetTypeInfo" uniqueID="System.Runtime.InteropServices._Type.GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Type.System.Runtime.InteropServices._Type.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._Type.GetTypeInfoCount" uniqueID="System.Runtime.InteropServices._Type.GetTypeInfoCount(unsigned int):void">
				<signature>System.Type.System.Runtime.InteropServices._Type.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._Type.Invoke" uniqueID="System.Runtime.InteropServices._Type.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Type.System.Runtime.InteropServices._Type.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Type.ToString():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Type" uniqueID="Type():void">
				<signature>System.Type.Type():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Assembly" uniqueID="get_Assembly():System.Reflection.Assembly">
				<signature>System.Type.get_Assembly():System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AssemblyQualifiedName" uniqueID="get_AssemblyQualifiedName():string">
				<signature>System.Type.get_AssemblyQualifiedName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Attributes" uniqueID="get_Attributes():System.Reflection.TypeAttributes">
				<signature>System.Type.get_Attributes():System.Reflection.TypeAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_BaseType" uniqueID="get_BaseType():System.Type">
				<signature>System.Type.get_BaseType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ContainsGenericParameters" uniqueID="get_ContainsGenericParameters():bool">
				<signature>System.Type.get_ContainsGenericParameters():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringMethod" uniqueID="get_DeclaringMethod():System.Reflection.MethodBase">
				<signature>System.Type.get_DeclaringMethod():System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringType" uniqueID="get_DeclaringType():System.Type">
				<signature>System.Type.get_DeclaringType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FullName" uniqueID="get_FullName():string">
				<signature>System.Type.get_FullName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_GUID" uniqueID="get_GUID():System.Guid">
				<signature>System.Type.get_GUID():System.Guid</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_GenericParameterAttributes" uniqueID="get_GenericParameterAttributes():System.Reflection.GenericParameterAttributes">
				<signature>System.Type.get_GenericParameterAttributes():System.Reflection.GenericParameterAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_GenericParameterPosition" uniqueID="get_GenericParameterPosition():int">
				<signature>System.Type.get_GenericParameterPosition():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_HasElementType" uniqueID="get_HasElementType():bool">
				<signature>System.Type.get_HasElementType():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_HasProxyAttribute" uniqueID="get_HasProxyAttribute():bool">
				<signature>System.Type.get_HasProxyAttribute():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsAbstract" uniqueID="get_IsAbstract():bool">
				<signature>System.Type.get_IsAbstract():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsAnsiClass" uniqueID="get_IsAnsiClass():bool">
				<signature>System.Type.get_IsAnsiClass():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsArray" uniqueID="get_IsArray():bool">
				<signature>System.Type.get_IsArray():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsAutoClass" uniqueID="get_IsAutoClass():bool">
				<signature>System.Type.get_IsAutoClass():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsAutoLayout" uniqueID="get_IsAutoLayout():bool">
				<signature>System.Type.get_IsAutoLayout():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsByRef" uniqueID="get_IsByRef():bool">
				<signature>System.Type.get_IsByRef():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsCOMObject" uniqueID="get_IsCOMObject():bool">
				<signature>System.Type.get_IsCOMObject():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsClass" uniqueID="get_IsClass():bool">
				<signature>System.Type.get_IsClass():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsContextful" uniqueID="get_IsContextful():bool">
				<signature>System.Type.get_IsContextful():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsEnum" uniqueID="get_IsEnum():bool">
				<signature>System.Type.get_IsEnum():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsExplicitLayout" uniqueID="get_IsExplicitLayout():bool">
				<signature>System.Type.get_IsExplicitLayout():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsGenericParameter" uniqueID="get_IsGenericParameter():bool">
				<signature>System.Type.get_IsGenericParameter():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsGenericType" uniqueID="get_IsGenericType():bool">
				<signature>System.Type.get_IsGenericType():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsGenericTypeDefinition" uniqueID="get_IsGenericTypeDefinition():bool">
				<signature>System.Type.get_IsGenericTypeDefinition():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsImport" uniqueID="get_IsImport():bool">
				<signature>System.Type.get_IsImport():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsInterface" uniqueID="get_IsInterface():bool">
				<signature>System.Type.get_IsInterface():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsLayoutSequential" uniqueID="get_IsLayoutSequential():bool">
				<signature>System.Type.get_IsLayoutSequential():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsMarshalByRef" uniqueID="get_IsMarshalByRef():bool">
				<signature>System.Type.get_IsMarshalByRef():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsNested" uniqueID="get_IsNested():bool">
				<signature>System.Type.get_IsNested():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsNestedAssembly" uniqueID="get_IsNestedAssembly():bool">
				<signature>System.Type.get_IsNestedAssembly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsNestedFamANDAssem" uniqueID="get_IsNestedFamANDAssem():bool">
				<signature>System.Type.get_IsNestedFamANDAssem():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsNestedFamORAssem" uniqueID="get_IsNestedFamORAssem():bool">
				<signature>System.Type.get_IsNestedFamORAssem():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsNestedFamily" uniqueID="get_IsNestedFamily():bool">
				<signature>System.Type.get_IsNestedFamily():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsNestedPrivate" uniqueID="get_IsNestedPrivate():bool">
				<signature>System.Type.get_IsNestedPrivate():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsNestedPublic" uniqueID="get_IsNestedPublic():bool">
				<signature>System.Type.get_IsNestedPublic():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsNotPublic" uniqueID="get_IsNotPublic():bool">
				<signature>System.Type.get_IsNotPublic():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsPointer" uniqueID="get_IsPointer():bool">
				<signature>System.Type.get_IsPointer():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsPrimitive" uniqueID="get_IsPrimitive():bool">
				<signature>System.Type.get_IsPrimitive():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsPublic" uniqueID="get_IsPublic():bool">
				<signature>System.Type.get_IsPublic():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSealed" uniqueID="get_IsSealed():bool">
				<signature>System.Type.get_IsSealed():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSerializable" uniqueID="get_IsSerializable():bool">
				<signature>System.Type.get_IsSerializable():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSpecialName" uniqueID="get_IsSpecialName():bool">
				<signature>System.Type.get_IsSpecialName():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IsSzArray" uniqueID="get_IsSzArray():bool">
				<signature>System.Type.get_IsSzArray():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsUnicodeClass" uniqueID="get_IsUnicodeClass():bool">
				<signature>System.Type.get_IsUnicodeClass():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsValueType" uniqueID="get_IsValueType():bool">
				<signature>System.Type.get_IsValueType():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsVisible" uniqueID="get_IsVisible():bool">
				<signature>System.Type.get_IsVisible():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MemberType" uniqueID="get_MemberType():System.Reflection.MemberTypes">
				<signature>System.Type.get_MemberType():System.Reflection.MemberTypes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Module" uniqueID="get_Module():System.Reflection.Module">
				<signature>System.Type.get_Module():System.Reflection.Module</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Namespace" uniqueID="get_Namespace():string">
				<signature>System.Type.get_Namespace():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReflectedType" uniqueID="get_ReflectedType():System.Type">
				<signature>System.Type.get_ReflectedType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_StructLayoutAttribute" uniqueID="get_StructLayoutAttribute():System.Runtime.InteropServices.StructLayoutAttribute">
				<signature>System.Type.get_StructLayoutAttribute():System.Runtime.InteropServices.StructLayoutAttribute</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TypeHandle" uniqueID="get_TypeHandle():System.RuntimeTypeHandle">
				<signature>System.Type.get_TypeHandle():System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TypeInitializer" uniqueID="get_TypeInitializer():System.Reflection.ConstructorInfo">
				<signature>System.Type.get_TypeInitializer():System.Reflection.ConstructorInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_UnderlyingSystemType" uniqueID="get_UnderlyingSystemType():System.Type">
				<signature>System.Type.get_UnderlyingSystemType():System.Type</signature>
			</method>
		</class>
		<class name="DBNull" uniqueID="System.DBNull">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.DBNull.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DBNull" uniqueID="DBNull():void">
				<signature>System.DBNull.DBNull():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DBNull" uniqueID="DBNull(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.DBNull.DBNull(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetObjectData" uniqueID="GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.DBNull.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeCode" uniqueID="GetTypeCode():System.TypeCode">
				<signature>System.DBNull.GetTypeCode():System.TypeCode</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToBoolean" uniqueID="System.IConvertible.ToBoolean(System.IFormatProvider):bool">
				<signature>System.DBNull.System.IConvertible.ToBoolean(System.IFormatProvider):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToByte" uniqueID="System.IConvertible.ToByte(System.IFormatProvider):byte">
				<signature>System.DBNull.System.IConvertible.ToByte(System.IFormatProvider):byte</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToChar" uniqueID="System.IConvertible.ToChar(System.IFormatProvider):char">
				<signature>System.DBNull.System.IConvertible.ToChar(System.IFormatProvider):char</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToDateTime" uniqueID="System.IConvertible.ToDateTime(System.IFormatProvider):System.DateTime">
				<signature>System.DBNull.System.IConvertible.ToDateTime(System.IFormatProvider):System.DateTime</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToDecimal" uniqueID="System.IConvertible.ToDecimal(System.IFormatProvider):System.Decimal">
				<signature>System.DBNull.System.IConvertible.ToDecimal(System.IFormatProvider):System.Decimal</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToDouble" uniqueID="System.IConvertible.ToDouble(System.IFormatProvider):double">
				<signature>System.DBNull.System.IConvertible.ToDouble(System.IFormatProvider):double</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToInt16" uniqueID="System.IConvertible.ToInt16(System.IFormatProvider):short">
				<signature>System.DBNull.System.IConvertible.ToInt16(System.IFormatProvider):short</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToInt32" uniqueID="System.IConvertible.ToInt32(System.IFormatProvider):int">
				<signature>System.DBNull.System.IConvertible.ToInt32(System.IFormatProvider):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToInt64" uniqueID="System.IConvertible.ToInt64(System.IFormatProvider):long">
				<signature>System.DBNull.System.IConvertible.ToInt64(System.IFormatProvider):long</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToSByte" uniqueID="System.IConvertible.ToSByte(System.IFormatProvider):sbyte">
				<signature>System.DBNull.System.IConvertible.ToSByte(System.IFormatProvider):sbyte</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToSingle" uniqueID="System.IConvertible.ToSingle(System.IFormatProvider):float">
				<signature>System.DBNull.System.IConvertible.ToSingle(System.IFormatProvider):float</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToType" uniqueID="System.IConvertible.ToType(System.Type;System.IFormatProvider):object">
				<signature>System.DBNull.System.IConvertible.ToType(System.Type;System.IFormatProvider):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToUInt16" uniqueID="System.IConvertible.ToUInt16(System.IFormatProvider):unsigned short">
				<signature>System.DBNull.System.IConvertible.ToUInt16(System.IFormatProvider):unsigned short</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToUInt32" uniqueID="System.IConvertible.ToUInt32(System.IFormatProvider):unsigned int">
				<signature>System.DBNull.System.IConvertible.ToUInt32(System.IFormatProvider):unsigned int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToUInt64" uniqueID="System.IConvertible.ToUInt64(System.IFormatProvider):unsigned long">
				<signature>System.DBNull.System.IConvertible.ToUInt64(System.IFormatProvider):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.DBNull.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString(System.IFormatProvider):string">
				<signature>System.DBNull.ToString(System.IFormatProvider):string</signature>
			</method>
		</class>
		<class name="EventHandler" uniqueID="System.EventHandler">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(object;System.EventArgs;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.EventHandler.BeginInvoke(object;System.EventArgs;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):void">
				<signature>System.EventHandler.EndInvoke(System.IAsyncResult):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EventHandler" uniqueID="EventHandler(object;native signed int):void">
				<signature>System.EventHandler.EventHandler(object;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(object;System.EventArgs):void">
				<signature>System.EventHandler.Invoke(object;System.EventArgs):void</signature>
			</method>
		</class>
		<class name="IEquatable&lt;System.DateTime&gt;" uniqueID="System.IEquatable&lt;System.DateTime&gt;">
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.DateTime):bool">
				<signature>System.IEquatable&lt;System.DateTime&gt;.Equals(System.DateTime):bool</signature>
			</method>
		</class>
		<class name="Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;" uniqueID="System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(System.Reflection.RuntimeConstructorInfo;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;.BeginInvoke(System.Reflection.RuntimeConstructorInfo;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):bool">
				<signature>System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;.EndInvoke(System.IAsyncResult):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(System.Reflection.RuntimeConstructorInfo):bool">
				<signature>System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;.Invoke(System.Reflection.RuntimeConstructorInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;" uniqueID="Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;(object;native signed int):void">
				<signature>System.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;.Predicate&lt;System.Reflection.RuntimeConstructorInfo&gt;(object;native signed int):void</signature>
			</method>
		</class>
		<class name="ResolveEventArgs" uniqueID="System.ResolveEventArgs">
			<method accessibility="Public" methodKind="Member" name="ResolveEventArgs" uniqueID="ResolveEventArgs(string):void">
				<signature>System.ResolveEventArgs.ResolveEventArgs(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.ResolveEventArgs.get_Name():string</signature>
			</method>
		</class>
		<class name="TimeSpan" uniqueID="System.TimeSpan">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.TimeSpan.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Compare" uniqueID="Compare(System.TimeSpan;System.TimeSpan):int">
				<signature>System.TimeSpan.Compare(System.TimeSpan;System.TimeSpan):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Equals" uniqueID="Equals(System.TimeSpan;System.TimeSpan):bool">
				<signature>System.TimeSpan.Equals(System.TimeSpan;System.TimeSpan):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="FromDays" uniqueID="FromDays(double):System.TimeSpan">
				<signature>System.TimeSpan.FromDays(double):System.TimeSpan</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="FromHours" uniqueID="FromHours(double):System.TimeSpan">
				<signature>System.TimeSpan.FromHours(double):System.TimeSpan</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="FromMilliseconds" uniqueID="FromMilliseconds(double):System.TimeSpan">
				<signature>System.TimeSpan.FromMilliseconds(double):System.TimeSpan</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="FromMinutes" uniqueID="FromMinutes(double):System.TimeSpan">
				<signature>System.TimeSpan.FromMinutes(double):System.TimeSpan</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="FromSeconds" uniqueID="FromSeconds(double):System.TimeSpan">
				<signature>System.TimeSpan.FromSeconds(double):System.TimeSpan</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="FromTicks" uniqueID="FromTicks(long):System.TimeSpan">
				<signature>System.TimeSpan.FromTicks(long):System.TimeSpan</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="Interval" uniqueID="Interval(double;int):System.TimeSpan">
				<signature>System.TimeSpan.Interval(double;int):System.TimeSpan</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Parse" uniqueID="Parse(string):System.TimeSpan">
				<signature>System.TimeSpan.Parse(string):System.TimeSpan</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="TimeToTicks" uniqueID="TimeToTicks(int;int;int):long">
				<signature>System.TimeSpan.TimeToTicks(int;int;int):long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="TryParse" uniqueID="TryParse(string;System.TimeSpan):bool">
				<signature>System.TimeSpan.TryParse(string;System.TimeSpan):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Addition" uniqueID="op_Addition(System.TimeSpan;System.TimeSpan):System.TimeSpan">
				<signature>System.TimeSpan.op_Addition(System.TimeSpan;System.TimeSpan):System.TimeSpan</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.TimeSpan;System.TimeSpan):bool">
				<signature>System.TimeSpan.op_Equality(System.TimeSpan;System.TimeSpan):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_GreaterThan" uniqueID="op_GreaterThan(System.TimeSpan;System.TimeSpan):bool">
				<signature>System.TimeSpan.op_GreaterThan(System.TimeSpan;System.TimeSpan):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_GreaterThanOrEqual" uniqueID="op_GreaterThanOrEqual(System.TimeSpan;System.TimeSpan):bool">
				<signature>System.TimeSpan.op_GreaterThanOrEqual(System.TimeSpan;System.TimeSpan):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.TimeSpan;System.TimeSpan):bool">
				<signature>System.TimeSpan.op_Inequality(System.TimeSpan;System.TimeSpan):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_LessThan" uniqueID="op_LessThan(System.TimeSpan;System.TimeSpan):bool">
				<signature>System.TimeSpan.op_LessThan(System.TimeSpan;System.TimeSpan):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_LessThanOrEqual" uniqueID="op_LessThanOrEqual(System.TimeSpan;System.TimeSpan):bool">
				<signature>System.TimeSpan.op_LessThanOrEqual(System.TimeSpan;System.TimeSpan):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Subtraction" uniqueID="op_Subtraction(System.TimeSpan;System.TimeSpan):System.TimeSpan">
				<signature>System.TimeSpan.op_Subtraction(System.TimeSpan;System.TimeSpan):System.TimeSpan</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_UnaryNegation" uniqueID="op_UnaryNegation(System.TimeSpan):System.TimeSpan">
				<signature>System.TimeSpan.op_UnaryNegation(System.TimeSpan):System.TimeSpan</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_UnaryPlus" uniqueID="op_UnaryPlus(System.TimeSpan):System.TimeSpan">
				<signature>System.TimeSpan.op_UnaryPlus(System.TimeSpan):System.TimeSpan</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(System.TimeSpan):System.TimeSpan">
				<signature>System.TimeSpan.Add(System.TimeSpan):System.TimeSpan</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(System.TimeSpan):int">
				<signature>System.TimeSpan.CompareTo(System.TimeSpan):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(object):int">
				<signature>System.TimeSpan.CompareTo(object):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Duration" uniqueID="Duration():System.TimeSpan">
				<signature>System.TimeSpan.Duration():System.TimeSpan</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.TimeSpan):bool">
				<signature>System.TimeSpan.Equals(System.TimeSpan):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.TimeSpan.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.TimeSpan.GetHashCode():int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="IntToString" uniqueID="IntToString(int;int):string">
				<signature>System.TimeSpan.IntToString(int;int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Negate" uniqueID="Negate():System.TimeSpan">
				<signature>System.TimeSpan.Negate():System.TimeSpan</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Subtract" uniqueID="Subtract(System.TimeSpan):System.TimeSpan">
				<signature>System.TimeSpan.Subtract(System.TimeSpan):System.TimeSpan</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TimeSpan" uniqueID="TimeSpan(int;int;int):void">
				<signature>System.TimeSpan.TimeSpan(int;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TimeSpan" uniqueID="TimeSpan(int;int;int;int):void">
				<signature>System.TimeSpan.TimeSpan(int;int;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TimeSpan" uniqueID="TimeSpan(int;int;int;int;int):void">
				<signature>System.TimeSpan.TimeSpan(int;int;int;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TimeSpan" uniqueID="TimeSpan(long):void">
				<signature>System.TimeSpan.TimeSpan(long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.TimeSpan.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Days" uniqueID="get_Days():int">
				<signature>System.TimeSpan.get_Days():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Hours" uniqueID="get_Hours():int">
				<signature>System.TimeSpan.get_Hours():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Milliseconds" uniqueID="get_Milliseconds():int">
				<signature>System.TimeSpan.get_Milliseconds():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Minutes" uniqueID="get_Minutes():int">
				<signature>System.TimeSpan.get_Minutes():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Seconds" uniqueID="get_Seconds():int">
				<signature>System.TimeSpan.get_Seconds():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Ticks" uniqueID="get_Ticks():long">
				<signature>System.TimeSpan.get_Ticks():long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TotalDays" uniqueID="get_TotalDays():double">
				<signature>System.TimeSpan.get_TotalDays():double</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TotalHours" uniqueID="get_TotalHours():double">
				<signature>System.TimeSpan.get_TotalHours():double</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TotalMilliseconds" uniqueID="get_TotalMilliseconds():double">
				<signature>System.TimeSpan.get_TotalMilliseconds():double</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TotalMinutes" uniqueID="get_TotalMinutes():double">
				<signature>System.TimeSpan.get_TotalMinutes():double</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TotalSeconds" uniqueID="get_TotalSeconds():double">
				<signature>System.TimeSpan.get_TotalSeconds():double</signature>
			</method>
		</class>
		<class name="AppDomainInitializer" uniqueID="System.AppDomainInitializer">
			<method accessibility="Public" methodKind="Member" name="AppDomainInitializer" uniqueID="AppDomainInitializer(object;native signed int):void">
				<signature>System.AppDomainInitializer.AppDomainInitializer(object;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(string[];System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.AppDomainInitializer.BeginInvoke(string[];System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):void">
				<signature>System.AppDomainInitializer.EndInvoke(System.IAsyncResult):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(string[]):void">
				<signature>System.AppDomainInitializer.Invoke(string[]):void</signature>
			</method>
		</class>
		<class name="AppDomainInitializerInfo" uniqueID="System.AppDomainInitializerInfo">
			<method accessibility="Protected" methodKind="Member" name="AppDomainInitializerInfo" uniqueID="AppDomainInitializerInfo(System.AppDomainInitializer):void">
				<signature>System.AppDomainInitializerInfo.AppDomainInitializerInfo(System.AppDomainInitializer):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Unwrap" uniqueID="Unwrap():System.AppDomainInitializer">
				<signature>System.AppDomainInitializerInfo.Unwrap():System.AppDomainInitializer</signature>
			</method>
		</class>
		<class name="AssemblyHandle" uniqueID="System.AssemblyHandle">
			<method accessibility="Protected" methodKind="Member" name="AptcaCheck" uniqueID="AptcaCheck(System.AssemblyHandle):bool">
				<signature>System.AssemblyHandle.AptcaCheck(System.AssemblyHandle):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AssemblyHandle" uniqueID="AssemblyHandle(void):void">
				<signature>System.AssemblyHandle.AssemblyHandle(void):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.AssemblyHandle):bool">
				<signature>System.AssemblyHandle.Equals(System.AssemblyHandle):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.AssemblyHandle.Equals(object):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetAssembly" uniqueID="GetAssembly():System.Reflection.Assembly">
				<signature>System.AssemblyHandle.GetAssembly():System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.AssemblyHandle.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetManifestModule" uniqueID="GetManifestModule():System.ModuleHandle">
				<signature>System.AssemblyHandle.GetManifestModule():System.ModuleHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetToken" uniqueID="GetToken():int">
				<signature>System.AssemblyHandle.GetToken():int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_AptcaCheck" uniqueID="_AptcaCheck(native signed int):bool">
				<signature>System.AssemblyHandle._AptcaCheck(native signed int):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_GetManifestModule" uniqueID="_GetManifestModule():void">
				<signature>System.AssemblyHandle._GetManifestModule():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Value" uniqueID="get_Value():void">
				<signature>System.AssemblyHandle.get_Value():void</signature>
			</method>
		</class>
		<class name="IDisposable" uniqueID="System.IDisposable">
			<method accessibility="Public" methodKind="Member" name="Dispose" uniqueID="Dispose():void">
				<signature>System.IDisposable.Dispose():void</signature>
			</method>
		</class>
		<class name="IEquatable&lt;System.Version&gt;" uniqueID="System.IEquatable&lt;System.Version&gt;">
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.Version):bool">
				<signature>System.IEquatable&lt;System.Version&gt;.Equals(System.Version):bool</signature>
			</method>
		</class>
		<class name="MarshalByRefObject" uniqueID="System.MarshalByRefObject">
			<method accessibility="Protected" methodKind="Static" name="CanCastToXmlTypeHelper" uniqueID="CanCastToXmlTypeHelper(System.Type;System.MarshalByRefObject):bool">
				<signature>System.MarshalByRefObject.CanCastToXmlTypeHelper(System.Type;System.MarshalByRefObject):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetComIUnknown" uniqueID="GetComIUnknown(System.MarshalByRefObject):native signed int">
				<signature>System.MarshalByRefObject.GetComIUnknown(System.MarshalByRefObject):native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetIdentity" uniqueID="GetIdentity(System.MarshalByRefObject):System.Runtime.Remoting.Identity">
				<signature>System.MarshalByRefObject.GetIdentity(System.MarshalByRefObject):System.Runtime.Remoting.Identity</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetIdentity" uniqueID="GetIdentity(System.MarshalByRefObject;bool):System.Runtime.Remoting.Identity">
				<signature>System.MarshalByRefObject.GetIdentity(System.MarshalByRefObject;bool):System.Runtime.Remoting.Identity</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CanCastToXmlType" uniqueID="CanCastToXmlType(string;string):bool">
				<signature>System.MarshalByRefObject.CanCastToXmlType(string;string):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateObjRef" uniqueID="CreateObjRef(System.Type):System.Runtime.Remoting.ObjRef">
				<signature>System.MarshalByRefObject.CreateObjRef(System.Type):System.Runtime.Remoting.ObjRef</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetComIUnknown" uniqueID="GetComIUnknown(bool):native signed int">
				<signature>System.MarshalByRefObject.GetComIUnknown(bool):native signed int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetLifetimeService" uniqueID="GetLifetimeService():object">
				<signature>System.MarshalByRefObject.GetLifetimeService():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InitializeLifetimeService" uniqueID="InitializeLifetimeService():object">
				<signature>System.MarshalByRefObject.InitializeLifetimeService():object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InvokeMember" uniqueID="InvokeMember(string;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Reflection.ParameterModifier[];System.Globalization.CultureInfo;string[]):object">
				<signature>System.MarshalByRefObject.InvokeMember(string;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Reflection.ParameterModifier[];System.Globalization.CultureInfo;string[]):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsInstanceOfType" uniqueID="IsInstanceOfType(System.Type):bool">
				<signature>System.MarshalByRefObject.IsInstanceOfType(System.Type):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MarshalByRefObject" uniqueID="MarshalByRefObject():void">
				<signature>System.MarshalByRefObject.MarshalByRefObject():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MemberwiseClone" uniqueID="MemberwiseClone(bool):System.MarshalByRefObject">
				<signature>System.MarshalByRefObject.MemberwiseClone(bool):System.MarshalByRefObject</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="__RaceSetServerIdentity" uniqueID="__RaceSetServerIdentity(System.Runtime.Remoting.ServerIdentity):System.Runtime.Remoting.ServerIdentity">
				<signature>System.MarshalByRefObject.__RaceSetServerIdentity(System.Runtime.Remoting.ServerIdentity):System.Runtime.Remoting.ServerIdentity</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="__ResetServerIdentity" uniqueID="__ResetServerIdentity():void">
				<signature>System.MarshalByRefObject.__ResetServerIdentity():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_Identity" uniqueID="get_Identity():object">
				<signature>System.MarshalByRefObject.get_Identity():object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="set_Identity" uniqueID="set_Identity(object):void">
				<signature>System.MarshalByRefObject.set_Identity(object):void</signature>
			</method>
		</class>
		<class name="ValueType" uniqueID="System.ValueType">
			<method accessibility="Private" methodKind="Static" name="CanCompareBits" uniqueID="CanCompareBits(object):bool">
				<signature>System.ValueType.CanCompareBits(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="FastEqualsCheck" uniqueID="FastEqualsCheck(object;object):bool">
				<signature>System.ValueType.FastEqualsCheck(object;object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.ValueType.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.ValueType.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.ValueType.ToString():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ValueType" uniqueID="ValueType():void">
				<signature>System.ValueType.ValueType():void</signature>
			</method>
		</class>
		<class name="Action&lt;System.Reflection.RuntimeEventInfo&gt;" uniqueID="System.Action&lt;System.Reflection.RuntimeEventInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="Action&lt;System.Reflection.RuntimeEventInfo&gt;" uniqueID="Action&lt;System.Reflection.RuntimeEventInfo&gt;(object;native signed int):void">
				<signature>System.Action&lt;System.Reflection.RuntimeEventInfo&gt;.Action&lt;System.Reflection.RuntimeEventInfo&gt;(object;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(System.Reflection.RuntimeEventInfo;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Action&lt;System.Reflection.RuntimeEventInfo&gt;.BeginInvoke(System.Reflection.RuntimeEventInfo;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):void">
				<signature>System.Action&lt;System.Reflection.RuntimeEventInfo&gt;.EndInvoke(System.IAsyncResult):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(System.Reflection.RuntimeEventInfo):void">
				<signature>System.Action&lt;System.Reflection.RuntimeEventInfo&gt;.Invoke(System.Reflection.RuntimeEventInfo):void</signature>
			</method>
		</class>
		<class name="Action&lt;string&gt;" uniqueID="System.Action&lt;string&gt;">
			<method accessibility="Public" methodKind="Member" name="Action&lt;string&gt;" uniqueID="Action&lt;string&gt;(object;native signed int):void">
				<signature>System.Action&lt;string&gt;.Action&lt;string&gt;(object;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(string;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Action&lt;string&gt;.BeginInvoke(string;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):void">
				<signature>System.Action&lt;string&gt;.EndInvoke(System.IAsyncResult):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(string):void">
				<signature>System.Action&lt;string&gt;.Invoke(string):void</signature>
			</method>
		</class>
		<class name="AssemblyLoadEventHandler" uniqueID="System.AssemblyLoadEventHandler">
			<method accessibility="Public" methodKind="Member" name="AssemblyLoadEventHandler" uniqueID="AssemblyLoadEventHandler(object;native signed int):void">
				<signature>System.AssemblyLoadEventHandler.AssemblyLoadEventHandler(object;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(object;System.AssemblyLoadEventArgs;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.AssemblyLoadEventHandler.BeginInvoke(object;System.AssemblyLoadEventArgs;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):void">
				<signature>System.AssemblyLoadEventHandler.EndInvoke(System.IAsyncResult):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(object;System.AssemblyLoadEventArgs):void">
				<signature>System.AssemblyLoadEventHandler.Invoke(object;System.AssemblyLoadEventArgs):void</signature>
			</method>
		</class>
		<class name="Currency" uniqueID="System.Currency">
			<method accessibility="Private" methodKind="Static" name="FCallToDecimal" uniqueID="FCallToDecimal(System.Decimal;System.Currency):void">
				<signature>System.Currency.FCallToDecimal(System.Decimal;System.Currency):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="FromOACurrency" uniqueID="FromOACurrency(long):System.Currency">
				<signature>System.Currency.FromOACurrency(long):System.Currency</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDecimal" uniqueID="ToDecimal(System.Currency):System.Decimal">
				<signature>System.Currency.ToDecimal(System.Currency):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Currency" uniqueID="Currency(System.Decimal):void">
				<signature>System.Currency.Currency(System.Decimal):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Currency" uniqueID="Currency(long;int):void">
				<signature>System.Currency.Currency(long;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToOACurrency" uniqueID="ToOACurrency():long">
				<signature>System.Currency.ToOACurrency():long</signature>
			</method>
		</class>
		<class name="IComparable&lt;System.Security.Principal.SecurityIdentifier&gt;" uniqueID="System.IComparable&lt;System.Security.Principal.SecurityIdentifier&gt;">
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(System.Security.Principal.SecurityIdentifier):int">
				<signature>System.IComparable&lt;System.Security.Principal.SecurityIdentifier&gt;.CompareTo(System.Security.Principal.SecurityIdentifier):int</signature>
			</method>
		</class>
		<class name="String" uniqueID="System.String">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.String.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Compare" uniqueID="Compare(string;int;string;int;int):int">
				<signature>System.String.Compare(string;int;string;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Compare" uniqueID="Compare(string;int;string;int;int;System.Globalization.CultureInfo;System.Globalization.CompareOptions):int">
				<signature>System.String.Compare(string;int;string;int;int;System.Globalization.CultureInfo;System.Globalization.CompareOptions):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Compare" uniqueID="Compare(string;int;string;int;int;System.StringComparison):int">
				<signature>System.String.Compare(string;int;string;int;int;System.StringComparison):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Compare" uniqueID="Compare(string;int;string;int;int;bool):int">
				<signature>System.String.Compare(string;int;string;int;int;bool):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Compare" uniqueID="Compare(string;int;string;int;int;bool;System.Globalization.CultureInfo):int">
				<signature>System.String.Compare(string;int;string;int;int;bool;System.Globalization.CultureInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Compare" uniqueID="Compare(string;string):int">
				<signature>System.String.Compare(string;string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Compare" uniqueID="Compare(string;string;System.Globalization.CultureInfo;System.Globalization.CompareOptions):int">
				<signature>System.String.Compare(string;string;System.Globalization.CultureInfo;System.Globalization.CompareOptions):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Compare" uniqueID="Compare(string;string;System.StringComparison):int">
				<signature>System.String.Compare(string;string;System.StringComparison):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Compare" uniqueID="Compare(string;string;bool):int">
				<signature>System.String.Compare(string;string;bool):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Compare" uniqueID="Compare(string;string;bool;System.Globalization.CultureInfo):int">
				<signature>System.String.Compare(string;string;bool;System.Globalization.CultureInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CompareOrdinal" uniqueID="CompareOrdinal(string;int;string;int;int):int">
				<signature>System.String.CompareOrdinal(string;int;string;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CompareOrdinal" uniqueID="CompareOrdinal(string;string):int">
				<signature>System.String.CompareOrdinal(string;string):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CompareOrdinalHelper" uniqueID="CompareOrdinalHelper(string;string):int">
				<signature>System.String.CompareOrdinalHelper(string;string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Concat" uniqueID="Concat(object):string">
				<signature>System.String.Concat(object):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Concat" uniqueID="Concat(object;object):string">
				<signature>System.String.Concat(object;object):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Concat" uniqueID="Concat(object;object;object):string">
				<signature>System.String.Concat(object;object;object):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Concat" uniqueID="Concat(object[]):string">
				<signature>System.String.Concat(object[]):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Concat" uniqueID="Concat(string;string):string">
				<signature>System.String.Concat(string;string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Concat" uniqueID="Concat(string;string;string):string">
				<signature>System.String.Concat(string;string;string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Concat" uniqueID="Concat(string;string;string;string):string">
				<signature>System.String.Concat(string;string;string;string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Concat" uniqueID="Concat(string[]):string">
				<signature>System.String.Concat(string[]):string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ConcatArray" uniqueID="ConcatArray(string[];int):string">
				<signature>System.String.ConcatArray(string[];int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Copy" uniqueID="Copy(string):string">
				<signature>System.String.Copy(string):string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CreateString" uniqueID="CreateString(sbyte;int;int;System.Text.Encoding):string">
				<signature>System.String.CreateString(sbyte;int;int;System.Text.Encoding):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CreateStringFromEncoding" uniqueID="CreateStringFromEncoding(byte;int;System.Text.Encoding):string">
				<signature>System.String.CreateStringFromEncoding(byte;int;System.Text.Encoding):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Equals" uniqueID="Equals(string;string):bool">
				<signature>System.String.Equals(string;string):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Equals" uniqueID="Equals(string;string;System.StringComparison):bool">
				<signature>System.String.Equals(string;string;System.StringComparison):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="EqualsHelper" uniqueID="EqualsHelper(string;string):bool">
				<signature>System.String.EqualsHelper(string;string):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="FastAllocateString" uniqueID="FastAllocateString(int):string">
				<signature>System.String.FastAllocateString(int):string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="FillStringChecked" uniqueID="FillStringChecked(string;int;string):void">
				<signature>System.String.FillStringChecked(string;int;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Format" uniqueID="Format(System.IFormatProvider;string;object[]):string">
				<signature>System.String.Format(System.IFormatProvider;string;object[]):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Format" uniqueID="Format(string;object):string">
				<signature>System.String.Format(string;object):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Format" uniqueID="Format(string;object;object):string">
				<signature>System.String.Format(string;object;object):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Format" uniqueID="Format(string;object;object;object):string">
				<signature>System.String.Format(string;object;object;object):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Format" uniqueID="Format(string;object[]):string">
				<signature>System.String.Format(string;object[]):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetStringForStringBuilder" uniqueID="GetStringForStringBuilder(string;int):string">
				<signature>System.String.GetStringForStringBuilder(string;int):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetStringForStringBuilder" uniqueID="GetStringForStringBuilder(string;int;int;int):string">
				<signature>System.String.GetStringForStringBuilder(string;int;int;int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Intern" uniqueID="Intern(string):string">
				<signature>System.String.Intern(string):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalCopy" uniqueID="InternalCopy(string):string">
				<signature>System.String.InternalCopy(string):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalCopy" uniqueID="InternalCopy(string;native signed int;int):void">
				<signature>System.String.InternalCopy(string;native signed int;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalMemCpy" uniqueID="InternalMemCpy(string;int;string;int;int):void">
				<signature>System.String.InternalMemCpy(string;int;string;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsInterned" uniqueID="IsInterned(string):string">
				<signature>System.String.IsInterned(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsNullOrEmpty" uniqueID="IsNullOrEmpty(string):bool">
				<signature>System.String.IsNullOrEmpty(string):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Join" uniqueID="Join(string;string[]):string">
				<signature>System.String.Join(string;string[]):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Join" uniqueID="Join(string;string[];int;int):string">
				<signature>System.String.Join(string;string[];int;int):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SmallCharToUpper" uniqueID="SmallCharToUpper(string):string">
				<signature>System.String.SmallCharToUpper(string):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeCompareOrdinal" uniqueID="nativeCompareOrdinal(string;string;bool):int">
				<signature>System.String.nativeCompareOrdinal(string;string;bool):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeCompareOrdinalEx" uniqueID="nativeCompareOrdinalEx(string;int;string;int;int):int">
				<signature>System.String.nativeCompareOrdinalEx(string;int;string;int;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeCompareOrdinalWC" uniqueID="nativeCompareOrdinalWC(string;char;bool;bool):int">
				<signature>System.String.nativeCompareOrdinalWC(string;char;bool;bool):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(string;string):bool">
				<signature>System.String.op_Equality(string;string):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(string;string):bool">
				<signature>System.String.op_Inequality(string;string):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="revmemcpyimpl" uniqueID="revmemcpyimpl(byte;byte;int):void">
				<signature>System.String.revmemcpyimpl(byte;byte;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="wcslen" uniqueID="wcslen(char):int">
				<signature>System.String.wcslen(char):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="wstrcpy" uniqueID="wstrcpy(char;char;int):void">
				<signature>System.String.wstrcpy(char;char;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="wstrcpyPtrAligned" uniqueID="wstrcpyPtrAligned(char;char;int):void">
				<signature>System.String.wstrcpyPtrAligned(char;char;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AppendInPlace" uniqueID="AppendInPlace(char;int):void">
				<signature>System.String.AppendInPlace(char;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AppendInPlace" uniqueID="AppendInPlace(char;int;int):void">
				<signature>System.String.AppendInPlace(char;int;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AppendInPlace" uniqueID="AppendInPlace(char[];int;int;int):void">
				<signature>System.String.AppendInPlace(char[];int;int;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AppendInPlace" uniqueID="AppendInPlace(string;int):void">
				<signature>System.String.AppendInPlace(string;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AppendInPlace" uniqueID="AppendInPlace(string;int;int;int):void">
				<signature>System.String.AppendInPlace(string;int;int;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ClearPostNullChar" uniqueID="ClearPostNullChar():void">
				<signature>System.String.ClearPostNullChar():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone():object">
				<signature>System.String.Clone():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(object):int">
				<signature>System.String.CompareTo(object):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(string):int">
				<signature>System.String.CompareTo(string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(string):bool">
				<signature>System.String.Contains(string):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ConvertToAnsi_BestFit_Throw" uniqueID="ConvertToAnsi_BestFit_Throw(int):byte[]">
				<signature>System.String.ConvertToAnsi_BestFit_Throw(int):byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(int;char[];int;int):void">
				<signature>System.String.CopyTo(int;char[];int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CtorCharArray" uniqueID="CtorCharArray(char[]):string">
				<signature>System.String.CtorCharArray(char[]):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CtorCharArrayStartLength" uniqueID="CtorCharArrayStartLength(char[];int;int):string">
				<signature>System.String.CtorCharArrayStartLength(char[];int;int):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CtorCharCount" uniqueID="CtorCharCount(char;int):string">
				<signature>System.String.CtorCharCount(char;int):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CtorCharPtr" uniqueID="CtorCharPtr(char):string">
				<signature>System.String.CtorCharPtr(char):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CtorCharPtrStartLength" uniqueID="CtorCharPtrStartLength(char;int;int):string">
				<signature>System.String.CtorCharPtrStartLength(char;int;int):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EndsWith" uniqueID="EndsWith(char):bool">
				<signature>System.String.EndsWith(char):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndsWith" uniqueID="EndsWith(string):bool">
				<signature>System.String.EndsWith(string):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndsWith" uniqueID="EndsWith(string;System.StringComparison):bool">
				<signature>System.String.EndsWith(string;System.StringComparison):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndsWith" uniqueID="EndsWith(string;bool;System.Globalization.CultureInfo):bool">
				<signature>System.String.EndsWith(string;bool;System.Globalization.CultureInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.String.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(string):bool">
				<signature>System.String.Equals(string):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(string;System.StringComparison):bool">
				<signature>System.String.Equals(string;System.StringComparison):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.CharEnumerator">
				<signature>System.String.GetEnumerator():System.CharEnumerator</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.String.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeCode" uniqueID="GetTypeCode():System.TypeCode">
				<signature>System.String.GetTypeCode():System.TypeCode</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(char):int">
				<signature>System.String.IndexOf(char):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(char;int):int">
				<signature>System.String.IndexOf(char;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(char;int;int):int">
				<signature>System.String.IndexOf(char;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(string):int">
				<signature>System.String.IndexOf(string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(string;System.StringComparison):int">
				<signature>System.String.IndexOf(string;System.StringComparison):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(string;int):int">
				<signature>System.String.IndexOf(string;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(string;int;System.StringComparison):int">
				<signature>System.String.IndexOf(string;int;System.StringComparison):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(string;int;int):int">
				<signature>System.String.IndexOf(string;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(string;int;int;System.StringComparison):int">
				<signature>System.String.IndexOf(string;int;int;System.StringComparison):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOfAny" uniqueID="IndexOfAny(char[]):int">
				<signature>System.String.IndexOfAny(char[]):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOfAny" uniqueID="IndexOfAny(char[];int):int">
				<signature>System.String.IndexOfAny(char[];int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOfAny" uniqueID="IndexOfAny(char[];int;int):int">
				<signature>System.String.IndexOfAny(char[];int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;string):string">
				<signature>System.String.Insert(int;string):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InsertInPlace" uniqueID="InsertInPlace(int;char[];int;int;int;int):void">
				<signature>System.String.InsertInPlace(int;char[];int;int;int;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InsertInPlace" uniqueID="InsertInPlace(int;string;int;int;int):void">
				<signature>System.String.InsertInPlace(int;string;int;int;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalSetCharNoBoundsCheck" uniqueID="InternalSetCharNoBoundsCheck(int;char):void">
				<signature>System.String.InternalSetCharNoBoundsCheck(int;char):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="InternalSplitKeepEmptyEntries" uniqueID="InternalSplitKeepEmptyEntries(int[];int[];int;int):string[]">
				<signature>System.String.InternalSplitKeepEmptyEntries(int[];int[];int;int):string[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="InternalSplitOmitEmptyEntries" uniqueID="InternalSplitOmitEmptyEntries(int[];int[];int;int):string[]">
				<signature>System.String.InternalSplitOmitEmptyEntries(int[];int[];int;int):string[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="InternalSubString" uniqueID="InternalSubString(int;int;bool):string">
				<signature>System.String.InternalSubString(int;int;bool):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalSubStringWithChecks" uniqueID="InternalSubStringWithChecks(int;int;bool):string">
				<signature>System.String.InternalSubStringWithChecks(int;int;bool):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsAscii" uniqueID="IsAscii():bool">
				<signature>System.String.IsAscii():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsFastSort" uniqueID="IsFastSort():bool">
				<signature>System.String.IsFastSort():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsNormalized" uniqueID="IsNormalized():bool">
				<signature>System.String.IsNormalized():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsNormalized" uniqueID="IsNormalized(System.Text.NormalizationForm):bool">
				<signature>System.String.IsNormalized(System.Text.NormalizationForm):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(char):int">
				<signature>System.String.LastIndexOf(char):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(char;int):int">
				<signature>System.String.LastIndexOf(char;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(char;int;int):int">
				<signature>System.String.LastIndexOf(char;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(string):int">
				<signature>System.String.LastIndexOf(string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(string;System.StringComparison):int">
				<signature>System.String.LastIndexOf(string;System.StringComparison):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(string;int):int">
				<signature>System.String.LastIndexOf(string;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(string;int;System.StringComparison):int">
				<signature>System.String.LastIndexOf(string;int;System.StringComparison):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(string;int;int):int">
				<signature>System.String.LastIndexOf(string;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(string;int;int;System.StringComparison):int">
				<signature>System.String.LastIndexOf(string;int;int;System.StringComparison):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOfAny" uniqueID="LastIndexOfAny(char[]):int">
				<signature>System.String.LastIndexOfAny(char[]):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOfAny" uniqueID="LastIndexOfAny(char[];int):int">
				<signature>System.String.LastIndexOfAny(char[];int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOfAny" uniqueID="LastIndexOfAny(char[];int;int):int">
				<signature>System.String.LastIndexOfAny(char[];int;int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="MakeSeparatorList" uniqueID="MakeSeparatorList(char[];int[]):int">
				<signature>System.String.MakeSeparatorList(char[];int[]):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="MakeSeparatorList" uniqueID="MakeSeparatorList(string[];int[];int[]):int">
				<signature>System.String.MakeSeparatorList(string[];int[];int[]):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Normalize" uniqueID="Normalize():string">
				<signature>System.String.Normalize():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Normalize" uniqueID="Normalize(System.Text.NormalizationForm):string">
				<signature>System.String.Normalize(System.Text.NormalizationForm):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="NullTerminate" uniqueID="NullTerminate():void">
				<signature>System.String.NullTerminate():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="PadHelper" uniqueID="PadHelper(int;char;bool):string">
				<signature>System.String.PadHelper(int;char;bool):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="PadLeft" uniqueID="PadLeft(int):string">
				<signature>System.String.PadLeft(int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="PadLeft" uniqueID="PadLeft(int;char):string">
				<signature>System.String.PadLeft(int;char):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="PadRight" uniqueID="PadRight(int):string">
				<signature>System.String.PadRight(int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="PadRight" uniqueID="PadRight(int;char):string">
				<signature>System.String.PadRight(int;char):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(int):string">
				<signature>System.String.Remove(int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(int;int):string">
				<signature>System.String.Remove(int;int):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RemoveInPlace" uniqueID="RemoveInPlace(int;int;int):void">
				<signature>System.String.RemoveInPlace(int;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Replace" uniqueID="Replace(char;char):string">
				<signature>System.String.Replace(char;char):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Replace" uniqueID="Replace(string;string):string">
				<signature>System.String.Replace(string;string):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ReplaceCharInPlace" uniqueID="ReplaceCharInPlace(char;char;int;int;int):void">
				<signature>System.String.ReplaceCharInPlace(char;char;int;int;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetChar" uniqueID="SetChar(int;char):void">
				<signature>System.String.SetChar(int;char):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetLength" uniqueID="SetLength(int):void">
				<signature>System.String.SetLength(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Split" uniqueID="Split(char[]):string[]">
				<signature>System.String.Split(char[]):string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Split" uniqueID="Split(char[];System.StringSplitOptions):string[]">
				<signature>System.String.Split(char[];System.StringSplitOptions):string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Split" uniqueID="Split(char[];int):string[]">
				<signature>System.String.Split(char[];int):string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Split" uniqueID="Split(char[];int;System.StringSplitOptions):string[]">
				<signature>System.String.Split(char[];int;System.StringSplitOptions):string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Split" uniqueID="Split(string[];System.StringSplitOptions):string[]">
				<signature>System.String.Split(string[];System.StringSplitOptions):string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Split" uniqueID="Split(string[];int;System.StringSplitOptions):string[]">
				<signature>System.String.Split(string[];int;System.StringSplitOptions):string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StartsWith" uniqueID="StartsWith(string):bool">
				<signature>System.String.StartsWith(string):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StartsWith" uniqueID="StartsWith(string;System.StringComparison):bool">
				<signature>System.String.StartsWith(string;System.StringComparison):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StartsWith" uniqueID="StartsWith(string;bool;System.Globalization.CultureInfo):bool">
				<signature>System.String.StartsWith(string;bool;System.Globalization.CultureInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="String" uniqueID="String(char):void">
				<signature>System.String.String(char):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="String" uniqueID="String(char;int):void">
				<signature>System.String.String(char;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="String" uniqueID="String(char;int;int):void">
				<signature>System.String.String(char;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="String" uniqueID="String(char[]):void">
				<signature>System.String.String(char[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="String" uniqueID="String(char[];int;int):void">
				<signature>System.String.String(char[];int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="String" uniqueID="String(sbyte):void">
				<signature>System.String.String(sbyte):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="String" uniqueID="String(sbyte;int;int):void">
				<signature>System.String.String(sbyte;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="String" uniqueID="String(sbyte;int;int;System.Text.Encoding):void">
				<signature>System.String.String(sbyte;int;int;System.Text.Encoding):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Substring" uniqueID="Substring(int):string">
				<signature>System.String.Substring(int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Substring" uniqueID="Substring(int;int):string">
				<signature>System.String.Substring(int;int):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IEnumerable&lt;System.Char&gt;.GetEnumerator" uniqueID="System.Collections.Generic.IEnumerable&lt;System.Char&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;char&gt;">
				<signature>System.String.System.Collections.Generic.IEnumerable&lt;System.Char&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;char&gt;</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerable.GetEnumerator" uniqueID="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator">
				<signature>System.String.System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToBoolean" uniqueID="System.IConvertible.ToBoolean(System.IFormatProvider):bool">
				<signature>System.String.System.IConvertible.ToBoolean(System.IFormatProvider):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToByte" uniqueID="System.IConvertible.ToByte(System.IFormatProvider):byte">
				<signature>System.String.System.IConvertible.ToByte(System.IFormatProvider):byte</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToChar" uniqueID="System.IConvertible.ToChar(System.IFormatProvider):char">
				<signature>System.String.System.IConvertible.ToChar(System.IFormatProvider):char</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToDateTime" uniqueID="System.IConvertible.ToDateTime(System.IFormatProvider):System.DateTime">
				<signature>System.String.System.IConvertible.ToDateTime(System.IFormatProvider):System.DateTime</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToDecimal" uniqueID="System.IConvertible.ToDecimal(System.IFormatProvider):System.Decimal">
				<signature>System.String.System.IConvertible.ToDecimal(System.IFormatProvider):System.Decimal</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToDouble" uniqueID="System.IConvertible.ToDouble(System.IFormatProvider):double">
				<signature>System.String.System.IConvertible.ToDouble(System.IFormatProvider):double</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToInt16" uniqueID="System.IConvertible.ToInt16(System.IFormatProvider):short">
				<signature>System.String.System.IConvertible.ToInt16(System.IFormatProvider):short</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToInt32" uniqueID="System.IConvertible.ToInt32(System.IFormatProvider):int">
				<signature>System.String.System.IConvertible.ToInt32(System.IFormatProvider):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToInt64" uniqueID="System.IConvertible.ToInt64(System.IFormatProvider):long">
				<signature>System.String.System.IConvertible.ToInt64(System.IFormatProvider):long</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToSByte" uniqueID="System.IConvertible.ToSByte(System.IFormatProvider):sbyte">
				<signature>System.String.System.IConvertible.ToSByte(System.IFormatProvider):sbyte</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToSingle" uniqueID="System.IConvertible.ToSingle(System.IFormatProvider):float">
				<signature>System.String.System.IConvertible.ToSingle(System.IFormatProvider):float</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToType" uniqueID="System.IConvertible.ToType(System.Type;System.IFormatProvider):object">
				<signature>System.String.System.IConvertible.ToType(System.Type;System.IFormatProvider):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToUInt16" uniqueID="System.IConvertible.ToUInt16(System.IFormatProvider):unsigned short">
				<signature>System.String.System.IConvertible.ToUInt16(System.IFormatProvider):unsigned short</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToUInt32" uniqueID="System.IConvertible.ToUInt32(System.IFormatProvider):unsigned int">
				<signature>System.String.System.IConvertible.ToUInt32(System.IFormatProvider):unsigned int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToUInt64" uniqueID="System.IConvertible.ToUInt64(System.IFormatProvider):unsigned long">
				<signature>System.String.System.IConvertible.ToUInt64(System.IFormatProvider):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToCharArray" uniqueID="ToCharArray():char[]">
				<signature>System.String.ToCharArray():char[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToCharArray" uniqueID="ToCharArray(int;int):char[]">
				<signature>System.String.ToCharArray(int;int):char[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToLower" uniqueID="ToLower():string">
				<signature>System.String.ToLower():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToLower" uniqueID="ToLower(System.Globalization.CultureInfo):string">
				<signature>System.String.ToLower(System.Globalization.CultureInfo):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToLowerInvariant" uniqueID="ToLowerInvariant():string">
				<signature>System.String.ToLowerInvariant():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.String.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString(System.IFormatProvider):string">
				<signature>System.String.ToString(System.IFormatProvider):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToUpper" uniqueID="ToUpper():string">
				<signature>System.String.ToUpper():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToUpper" uniqueID="ToUpper(System.Globalization.CultureInfo):string">
				<signature>System.String.ToUpper(System.Globalization.CultureInfo):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToUpperInvariant" uniqueID="ToUpperInvariant():string">
				<signature>System.String.ToUpperInvariant():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Trim" uniqueID="Trim():string">
				<signature>System.String.Trim():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Trim" uniqueID="Trim(char[]):string">
				<signature>System.String.Trim(char[]):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TrimEnd" uniqueID="TrimEnd(char[]):string">
				<signature>System.String.TrimEnd(char[]):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="TrimHelper" uniqueID="TrimHelper(char[];int):string">
				<signature>System.String.TrimHelper(char[];int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TrimStart" uniqueID="TrimStart(char[]):string">
				<signature>System.String.TrimStart(char[]):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ArrayLength" uniqueID="get_ArrayLength():int">
				<signature>System.String.get_ArrayLength():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Capacity" uniqueID="get_Capacity():int">
				<signature>System.String.get_Capacity():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Chars" uniqueID="get_Chars(int):char">
				<signature>System.String.get_Chars(int):char</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_FirstChar" uniqueID="get_FirstChar():char">
				<signature>System.String.get_FirstChar():char</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Length" uniqueID="get_Length():int">
				<signature>System.String.get_Length():int</signature>
			</method>
		</class>
		<class name="IComparable&lt;int&gt;" uniqueID="System.IComparable&lt;int&gt;">
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(int):int">
				<signature>System.IComparable&lt;int&gt;.CompareTo(int):int</signature>
			</method>
		</class>
		<class name="IEquatable&lt;string&gt;" uniqueID="System.IEquatable&lt;string&gt;">
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(string):bool">
				<signature>System.IEquatable&lt;string&gt;.Equals(string):bool</signature>
			</method>
		</class>
		<class name="IServiceProvider" uniqueID="System.IServiceProvider">
			<method accessibility="Public" methodKind="Member" name="GetService" uniqueID="GetService(System.Type):object">
				<signature>System.IServiceProvider.GetService(System.Type):object</signature>
			</method>
		</class>
		<class name="_AppDomain" uniqueID="System._AppDomain">
			<method accessibility="Public" methodKind="Member" name="AppendPrivatePath" uniqueID="AppendPrivatePath(string):void">
				<signature>System._AppDomain.AppendPrivatePath(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ClearPrivatePath" uniqueID="ClearPrivatePath():void">
				<signature>System._AppDomain.ClearPrivatePath():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ClearShadowCopyPath" uniqueID="ClearShadowCopyPath():void">
				<signature>System._AppDomain.ClearShadowCopyPath():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateInstance" uniqueID="CreateInstance(string;string):System.Runtime.Remoting.ObjectHandle">
				<signature>System._AppDomain.CreateInstance(string;string):System.Runtime.Remoting.ObjectHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateInstance" uniqueID="CreateInstance(string;string;bool;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo;object[];System.Security.Policy.Evidence):System.Runtime.Remoting.ObjectHandle">
				<signature>System._AppDomain.CreateInstance(string;string;bool;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo;object[];System.Security.Policy.Evidence):System.Runtime.Remoting.ObjectHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateInstance" uniqueID="CreateInstance(string;string;object[]):System.Runtime.Remoting.ObjectHandle">
				<signature>System._AppDomain.CreateInstance(string;string;object[]):System.Runtime.Remoting.ObjectHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateInstanceFrom" uniqueID="CreateInstanceFrom(string;string):System.Runtime.Remoting.ObjectHandle">
				<signature>System._AppDomain.CreateInstanceFrom(string;string):System.Runtime.Remoting.ObjectHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateInstanceFrom" uniqueID="CreateInstanceFrom(string;string;bool;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo;object[];System.Security.Policy.Evidence):System.Runtime.Remoting.ObjectHandle">
				<signature>System._AppDomain.CreateInstanceFrom(string;string;bool;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo;object[];System.Security.Policy.Evidence):System.Runtime.Remoting.ObjectHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateInstanceFrom" uniqueID="CreateInstanceFrom(string;string;object[]):System.Runtime.Remoting.ObjectHandle">
				<signature>System._AppDomain.CreateInstanceFrom(string;string;object[]):System.Runtime.Remoting.ObjectHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineDynamicAssembly" uniqueID="DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess):System.Reflection.Emit.AssemblyBuilder">
				<signature>System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess):System.Reflection.Emit.AssemblyBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineDynamicAssembly" uniqueID="DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet):System.Reflection.Emit.AssemblyBuilder">
				<signature>System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet):System.Reflection.Emit.AssemblyBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineDynamicAssembly" uniqueID="DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;System.Security.Policy.Evidence):System.Reflection.Emit.AssemblyBuilder">
				<signature>System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;System.Security.Policy.Evidence):System.Reflection.Emit.AssemblyBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineDynamicAssembly" uniqueID="DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;System.Security.Policy.Evidence;System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet):System.Reflection.Emit.AssemblyBuilder">
				<signature>System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;System.Security.Policy.Evidence;System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet):System.Reflection.Emit.AssemblyBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineDynamicAssembly" uniqueID="DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;string):System.Reflection.Emit.AssemblyBuilder">
				<signature>System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;string):System.Reflection.Emit.AssemblyBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineDynamicAssembly" uniqueID="DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;string;System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet):System.Reflection.Emit.AssemblyBuilder">
				<signature>System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;string;System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet):System.Reflection.Emit.AssemblyBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineDynamicAssembly" uniqueID="DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;string;System.Security.Policy.Evidence):System.Reflection.Emit.AssemblyBuilder">
				<signature>System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;string;System.Security.Policy.Evidence):System.Reflection.Emit.AssemblyBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineDynamicAssembly" uniqueID="DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;string;System.Security.Policy.Evidence;System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet):System.Reflection.Emit.AssemblyBuilder">
				<signature>System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;string;System.Security.Policy.Evidence;System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet):System.Reflection.Emit.AssemblyBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineDynamicAssembly" uniqueID="DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;string;System.Security.Policy.Evidence;System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet;bool):System.Reflection.Emit.AssemblyBuilder">
				<signature>System._AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;string;System.Security.Policy.Evidence;System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet;bool):System.Reflection.Emit.AssemblyBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DoCallBack" uniqueID="DoCallBack(System.CrossAppDomainDelegate):void">
				<signature>System._AppDomain.DoCallBack(System.CrossAppDomainDelegate):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System._AppDomain.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ExecuteAssembly" uniqueID="ExecuteAssembly(string):int">
				<signature>System._AppDomain.ExecuteAssembly(string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ExecuteAssembly" uniqueID="ExecuteAssembly(string;System.Security.Policy.Evidence):int">
				<signature>System._AppDomain.ExecuteAssembly(string;System.Security.Policy.Evidence):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ExecuteAssembly" uniqueID="ExecuteAssembly(string;System.Security.Policy.Evidence;string[]):int">
				<signature>System._AppDomain.ExecuteAssembly(string;System.Security.Policy.Evidence;string[]):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAssemblies" uniqueID="GetAssemblies():System.Reflection.Assembly[]">
				<signature>System._AppDomain.GetAssemblies():System.Reflection.Assembly[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetData" uniqueID="GetData(string):object">
				<signature>System._AppDomain.GetData(string):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System._AppDomain.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetIDsOfNames" uniqueID="GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System._AppDomain.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetLifetimeService" uniqueID="GetLifetimeService():object">
				<signature>System._AppDomain.GetLifetimeService():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType():System.Type">
				<signature>System._AppDomain.GetType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfo" uniqueID="GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System._AppDomain.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeInfoCount" uniqueID="GetTypeInfoCount(unsigned int):void">
				<signature>System._AppDomain.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InitializeLifetimeService" uniqueID="InitializeLifetimeService():object">
				<signature>System._AppDomain.InitializeLifetimeService():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System._AppDomain.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Load" uniqueID="Load(System.Reflection.AssemblyName):System.Reflection.Assembly">
				<signature>System._AppDomain.Load(System.Reflection.AssemblyName):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Load" uniqueID="Load(System.Reflection.AssemblyName;System.Security.Policy.Evidence):System.Reflection.Assembly">
				<signature>System._AppDomain.Load(System.Reflection.AssemblyName;System.Security.Policy.Evidence):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Load" uniqueID="Load(byte[]):System.Reflection.Assembly">
				<signature>System._AppDomain.Load(byte[]):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Load" uniqueID="Load(byte[];byte[]):System.Reflection.Assembly">
				<signature>System._AppDomain.Load(byte[];byte[]):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Load" uniqueID="Load(byte[];byte[];System.Security.Policy.Evidence):System.Reflection.Assembly">
				<signature>System._AppDomain.Load(byte[];byte[];System.Security.Policy.Evidence):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Load" uniqueID="Load(string):System.Reflection.Assembly">
				<signature>System._AppDomain.Load(string):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Load" uniqueID="Load(string;System.Security.Policy.Evidence):System.Reflection.Assembly">
				<signature>System._AppDomain.Load(string;System.Security.Policy.Evidence):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetAppDomainPolicy" uniqueID="SetAppDomainPolicy(System.Security.Policy.PolicyLevel):void">
				<signature>System._AppDomain.SetAppDomainPolicy(System.Security.Policy.PolicyLevel):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetCachePath" uniqueID="SetCachePath(string):void">
				<signature>System._AppDomain.SetCachePath(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetData" uniqueID="SetData(string;object):void">
				<signature>System._AppDomain.SetData(string;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetPrincipalPolicy" uniqueID="SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy):void">
				<signature>System._AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetShadowCopyPath" uniqueID="SetShadowCopyPath(string):void">
				<signature>System._AppDomain.SetShadowCopyPath(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetThreadPrincipal" uniqueID="SetThreadPrincipal(System.Security.Principal.IPrincipal):void">
				<signature>System._AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System._AppDomain.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="add_AssemblyLoad" uniqueID="add_AssemblyLoad(System.AssemblyLoadEventHandler):void">
				<signature>System._AppDomain.add_AssemblyLoad(System.AssemblyLoadEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="add_AssemblyResolve" uniqueID="add_AssemblyResolve(System.ResolveEventHandler):void">
				<signature>System._AppDomain.add_AssemblyResolve(System.ResolveEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="add_DomainUnload" uniqueID="add_DomainUnload(System.EventHandler):void">
				<signature>System._AppDomain.add_DomainUnload(System.EventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="add_ProcessExit" uniqueID="add_ProcessExit(System.EventHandler):void">
				<signature>System._AppDomain.add_ProcessExit(System.EventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="add_ResourceResolve" uniqueID="add_ResourceResolve(System.ResolveEventHandler):void">
				<signature>System._AppDomain.add_ResourceResolve(System.ResolveEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="add_TypeResolve" uniqueID="add_TypeResolve(System.ResolveEventHandler):void">
				<signature>System._AppDomain.add_TypeResolve(System.ResolveEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="add_UnhandledException" uniqueID="add_UnhandledException(System.UnhandledExceptionEventHandler):void">
				<signature>System._AppDomain.add_UnhandledException(System.UnhandledExceptionEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_BaseDirectory" uniqueID="get_BaseDirectory():string">
				<signature>System._AppDomain.get_BaseDirectory():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DynamicDirectory" uniqueID="get_DynamicDirectory():string">
				<signature>System._AppDomain.get_DynamicDirectory():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Evidence" uniqueID="get_Evidence():System.Security.Policy.Evidence">
				<signature>System._AppDomain.get_Evidence():System.Security.Policy.Evidence</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FriendlyName" uniqueID="get_FriendlyName():string">
				<signature>System._AppDomain.get_FriendlyName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_RelativeSearchPath" uniqueID="get_RelativeSearchPath():string">
				<signature>System._AppDomain.get_RelativeSearchPath():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ShadowCopyFiles" uniqueID="get_ShadowCopyFiles():bool">
				<signature>System._AppDomain.get_ShadowCopyFiles():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="remove_AssemblyLoad" uniqueID="remove_AssemblyLoad(System.AssemblyLoadEventHandler):void">
				<signature>System._AppDomain.remove_AssemblyLoad(System.AssemblyLoadEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="remove_AssemblyResolve" uniqueID="remove_AssemblyResolve(System.ResolveEventHandler):void">
				<signature>System._AppDomain.remove_AssemblyResolve(System.ResolveEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="remove_DomainUnload" uniqueID="remove_DomainUnload(System.EventHandler):void">
				<signature>System._AppDomain.remove_DomainUnload(System.EventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="remove_ProcessExit" uniqueID="remove_ProcessExit(System.EventHandler):void">
				<signature>System._AppDomain.remove_ProcessExit(System.EventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="remove_ResourceResolve" uniqueID="remove_ResourceResolve(System.ResolveEventHandler):void">
				<signature>System._AppDomain.remove_ResourceResolve(System.ResolveEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="remove_TypeResolve" uniqueID="remove_TypeResolve(System.ResolveEventHandler):void">
				<signature>System._AppDomain.remove_TypeResolve(System.ResolveEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="remove_UnhandledException" uniqueID="remove_UnhandledException(System.UnhandledExceptionEventHandler):void">
				<signature>System._AppDomain.remove_UnhandledException(System.UnhandledExceptionEventHandler):void</signature>
			</method>
		</class>
		<class name="Action&lt;System.Reflection.RuntimeFieldInfo&gt;" uniqueID="System.Action&lt;System.Reflection.RuntimeFieldInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="Action&lt;System.Reflection.RuntimeFieldInfo&gt;" uniqueID="Action&lt;System.Reflection.RuntimeFieldInfo&gt;(object;native signed int):void">
				<signature>System.Action&lt;System.Reflection.RuntimeFieldInfo&gt;.Action&lt;System.Reflection.RuntimeFieldInfo&gt;(object;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(System.Reflection.RuntimeFieldInfo;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Action&lt;System.Reflection.RuntimeFieldInfo&gt;.BeginInvoke(System.Reflection.RuntimeFieldInfo;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):void">
				<signature>System.Action&lt;System.Reflection.RuntimeFieldInfo&gt;.EndInvoke(System.IAsyncResult):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(System.Reflection.RuntimeFieldInfo):void">
				<signature>System.Action&lt;System.Reflection.RuntimeFieldInfo&gt;.Invoke(System.Reflection.RuntimeFieldInfo):void</signature>
			</method>
		</class>
		<class name="AppDomain" uniqueID="System.AppDomain">
			<method accessibility="Public" methodKind="Static" name="CreateDomain" uniqueID="CreateDomain(string):System.AppDomain">
				<signature>System.AppDomain.CreateDomain(string):System.AppDomain</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CreateDomain" uniqueID="CreateDomain(string;System.Security.Policy.Evidence):System.AppDomain">
				<signature>System.AppDomain.CreateDomain(string;System.Security.Policy.Evidence):System.AppDomain</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CreateDomain" uniqueID="CreateDomain(string;System.Security.Policy.Evidence;System.AppDomainSetup):System.AppDomain">
				<signature>System.AppDomain.CreateDomain(string;System.Security.Policy.Evidence;System.AppDomainSetup):System.AppDomain</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CreateDomain" uniqueID="CreateDomain(string;System.Security.Policy.Evidence;System.AppDomainSetup;System.Security.PermissionSet;System.Security.Policy.StrongName[]):System.AppDomain">
				<signature>System.AppDomain.CreateDomain(string;System.Security.Policy.Evidence;System.AppDomainSetup;System.Security.PermissionSet;System.Security.Policy.StrongName[]):System.AppDomain</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CreateDomain" uniqueID="CreateDomain(string;System.Security.Policy.Evidence;string;string;bool):System.AppDomain">
				<signature>System.AppDomain.CreateDomain(string;System.Security.Policy.Evidence;string;string;bool):System.AppDomain</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CreateDomain" uniqueID="CreateDomain(string;System.Security.Policy.Evidence;string;string;bool;System.AppDomainInitializer;string[]):System.AppDomain">
				<signature>System.AppDomain.CreateDomain(string;System.Security.Policy.Evidence;string;string;bool;System.AppDomainInitializer;string[]):System.AppDomain</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="Deserialize" uniqueID="Deserialize(byte[]):object">
				<signature>System.AppDomain.Deserialize(byte[]):object</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCurrentThreadId" uniqueID="GetCurrentThreadId():int">
				<signature>System.AppDomain.GetCurrentThreadId():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetDefaultDomain" uniqueID="GetDefaultDomain():System.AppDomain">
				<signature>System.AppDomain.GetDefaultDomain():System.AppDomain</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetIdForUnload" uniqueID="GetIdForUnload(System.AppDomain):int">
				<signature>System.AppDomain.GetIdForUnload(System.AppDomain):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalCreateDomain" uniqueID="InternalCreateDomain(string):System.AppDomain">
				<signature>System.AppDomain.InternalCreateDomain(string):System.AppDomain</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalCreateDomainSetup" uniqueID="InternalCreateDomainSetup(string):System.AppDomainSetup">
				<signature>System.AppDomain.InternalCreateDomainSetup(string):System.AppDomainSetup</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalRemotelySetupRemoteDomain" uniqueID="InternalRemotelySetupRemoteDomain(native signed int;int;string;System.AppDomainSetup;native signed int;char[];char[];byte[];System.AppDomainInitializerInfo):object">
				<signature>System.AppDomain.InternalRemotelySetupRemoteDomain(native signed int;int;string;System.AppDomainSetup;native signed int;char[];char[];byte[];System.AppDomainInitializerInfo):object</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalRemotelySetupRemoteDomainHelper" uniqueID="InternalRemotelySetupRemoteDomainHelper(object[]):object">
				<signature>System.AppDomain.InternalRemotelySetupRemoteDomainHelper(object[]):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="IsDomainIdValid" uniqueID="IsDomainIdValid(int):bool">
				<signature>System.AppDomain.IsDomainIdValid(int):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="MarshalObject" uniqueID="MarshalObject(object):byte[]">
				<signature>System.AppDomain.MarshalObject(object):byte[]</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="MarshalObjects" uniqueID="MarshalObjects(object;object;byte[]):byte[]">
				<signature>System.AppDomain.MarshalObjects(object;object;byte[]):byte[]</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="RemotelySetupRemoteDomain" uniqueID="RemotelySetupRemoteDomain(System.AppDomain;string;System.AppDomainSetup;System.Security.Policy.Evidence;System.Security.Policy.Evidence;native signed int):object">
				<signature>System.AppDomain.RemotelySetupRemoteDomain(System.AppDomain;string;System.AppDomainSetup;System.Security.Policy.Evidence;System.Security.Policy.Evidence;native signed int):object</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="RunInitializer" uniqueID="RunInitializer(System.AppDomainSetup):void">
				<signature>System.AppDomain.RunInitializer(System.AppDomainSetup):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="Serialize" uniqueID="Serialize(object):byte[]">
				<signature>System.AppDomain.Serialize(object):byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Unload" uniqueID="Unload(System.AppDomain):void">
				<signature>System.AppDomain.Unload(System.AppDomain):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="UnmarshalObject" uniqueID="UnmarshalObject(byte[]):object">
				<signature>System.AppDomain.UnmarshalObject(byte[]):object</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="UnmarshalObjects" uniqueID="UnmarshalObjects(byte[];byte[];object):object">
				<signature>System.AppDomain.UnmarshalObjects(byte[];byte[];object):object</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_CurrentDomain" uniqueID="get_CurrentDomain():System.AppDomain">
				<signature>System.AppDomain.get_CurrentDomain():System.AppDomain</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nCreateDomain" uniqueID="nCreateDomain(string;System.AppDomainSetup;System.Security.Policy.Evidence;System.Security.Policy.Evidence;native signed int):System.AppDomain">
				<signature>System.AppDomain.nCreateDomain(string;System.AppDomainSetup;System.Security.Policy.Evidence;System.Security.Policy.Evidence;native signed int):System.AppDomain</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nCreateInstance" uniqueID="nCreateInstance(string;System.AppDomainSetup;System.Security.Policy.Evidence;System.Security.Policy.Evidence;native signed int):System.Runtime.Remoting.ObjRef">
				<signature>System.AppDomain.nCreateInstance(string;System.AppDomainSetup;System.Security.Policy.Evidence;System.Security.Policy.Evidence;native signed int):System.Runtime.Remoting.ObjRef</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="nGetDomainManagerAsm" uniqueID="nGetDomainManagerAsm():string">
				<signature>System.AppDomain.nGetDomainManagerAsm():string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="nGetDomainManagerType" uniqueID="nGetDomainManagerType():string">
				<signature>System.AppDomain.nGetDomainManagerType():string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="nSetHostSecurityManagerFlags" uniqueID="nSetHostSecurityManagerFlags(System.Security.HostSecurityManagerOptions):void">
				<signature>System.AppDomain.nSetHostSecurityManagerFlags(System.Security.HostSecurityManagerOptions):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="nSetSecurityHomogeneousFlag" uniqueID="nSetSecurityHomogeneousFlag():void">
				<signature>System.AppDomain.nSetSecurityHomogeneousFlag():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nUnload" uniqueID="nUnload(int):void">
				<signature>System.AppDomain.nUnload(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ActivateApplication" uniqueID="ActivateApplication():int">
				<signature>System.AppDomain.ActivateApplication():int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="AppDomain" uniqueID="AppDomain():void">
				<signature>System.AppDomain.AppDomain():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AppendPrivatePath" uniqueID="AppendPrivatePath(string):void">
				<signature>System.AppDomain.AppendPrivatePath(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ApplyPolicy" uniqueID="ApplyPolicy(string):string">
				<signature>System.AppDomain.ApplyPolicy(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ClearPrivatePath" uniqueID="ClearPrivatePath():void">
				<signature>System.AppDomain.ClearPrivatePath():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ClearShadowCopyPath" uniqueID="ClearShadowCopyPath():void">
				<signature>System.AppDomain.ClearShadowCopyPath():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateComInstanceFrom" uniqueID="CreateComInstanceFrom(string;string):System.Runtime.Remoting.ObjectHandle">
				<signature>System.AppDomain.CreateComInstanceFrom(string;string):System.Runtime.Remoting.ObjectHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateComInstanceFrom" uniqueID="CreateComInstanceFrom(string;string;byte[];System.Configuration.Assemblies.AssemblyHashAlgorithm):System.Runtime.Remoting.ObjectHandle">
				<signature>System.AppDomain.CreateComInstanceFrom(string;string;byte[];System.Configuration.Assemblies.AssemblyHashAlgorithm):System.Runtime.Remoting.ObjectHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CreateDefaultContext" uniqueID="CreateDefaultContext():void">
				<signature>System.AppDomain.CreateDefaultContext():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CreateDomainManager" uniqueID="CreateDomainManager(string;string):System.AppDomainManager">
				<signature>System.AppDomain.CreateDomainManager(string;string):System.AppDomainManager</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateInstance" uniqueID="CreateInstance(string;string):System.Runtime.Remoting.ObjectHandle">
				<signature>System.AppDomain.CreateInstance(string;string):System.Runtime.Remoting.ObjectHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateInstance" uniqueID="CreateInstance(string;string;bool;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo;object[];System.Security.Policy.Evidence):System.Runtime.Remoting.ObjectHandle">
				<signature>System.AppDomain.CreateInstance(string;string;bool;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo;object[];System.Security.Policy.Evidence):System.Runtime.Remoting.ObjectHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateInstance" uniqueID="CreateInstance(string;string;object[]):System.Runtime.Remoting.ObjectHandle">
				<signature>System.AppDomain.CreateInstance(string;string;object[]):System.Runtime.Remoting.ObjectHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateInstanceAndUnwrap" uniqueID="CreateInstanceAndUnwrap(string;string):object">
				<signature>System.AppDomain.CreateInstanceAndUnwrap(string;string):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateInstanceAndUnwrap" uniqueID="CreateInstanceAndUnwrap(string;string;bool;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo;object[];System.Security.Policy.Evidence):object">
				<signature>System.AppDomain.CreateInstanceAndUnwrap(string;string;bool;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo;object[];System.Security.Policy.Evidence):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateInstanceAndUnwrap" uniqueID="CreateInstanceAndUnwrap(string;string;object[]):object">
				<signature>System.AppDomain.CreateInstanceAndUnwrap(string;string;object[]):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateInstanceFrom" uniqueID="CreateInstanceFrom(string;string):System.Runtime.Remoting.ObjectHandle">
				<signature>System.AppDomain.CreateInstanceFrom(string;string):System.Runtime.Remoting.ObjectHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateInstanceFrom" uniqueID="CreateInstanceFrom(string;string;bool;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo;object[];System.Security.Policy.Evidence):System.Runtime.Remoting.ObjectHandle">
				<signature>System.AppDomain.CreateInstanceFrom(string;string;bool;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo;object[];System.Security.Policy.Evidence):System.Runtime.Remoting.ObjectHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateInstanceFrom" uniqueID="CreateInstanceFrom(string;string;object[]):System.Runtime.Remoting.ObjectHandle">
				<signature>System.AppDomain.CreateInstanceFrom(string;string;object[]):System.Runtime.Remoting.ObjectHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateInstanceFromAndUnwrap" uniqueID="CreateInstanceFromAndUnwrap(string;string):object">
				<signature>System.AppDomain.CreateInstanceFromAndUnwrap(string;string):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateInstanceFromAndUnwrap" uniqueID="CreateInstanceFromAndUnwrap(string;string;bool;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo;object[];System.Security.Policy.Evidence):object">
				<signature>System.AppDomain.CreateInstanceFromAndUnwrap(string;string;bool;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo;object[];System.Security.Policy.Evidence):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateInstanceFromAndUnwrap" uniqueID="CreateInstanceFromAndUnwrap(string;string;object[]):object">
				<signature>System.AppDomain.CreateInstanceFromAndUnwrap(string;string;object[]):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CreateRemotingData" uniqueID="CreateRemotingData():void">
				<signature>System.AppDomain.CreateRemotingData():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineDynamicAssembly" uniqueID="DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess):System.Reflection.Emit.AssemblyBuilder">
				<signature>System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess):System.Reflection.Emit.AssemblyBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineDynamicAssembly" uniqueID="DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;):System.Reflection.Emit.AssemblyBuilder">
				<signature>System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;):System.Reflection.Emit.AssemblyBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineDynamicAssembly" uniqueID="DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet):System.Reflection.Emit.AssemblyBuilder">
				<signature>System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet):System.Reflection.Emit.AssemblyBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineDynamicAssembly" uniqueID="DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;System.Security.Policy.Evidence):System.Reflection.Emit.AssemblyBuilder">
				<signature>System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;System.Security.Policy.Evidence):System.Reflection.Emit.AssemblyBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineDynamicAssembly" uniqueID="DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;System.Security.Policy.Evidence;System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet):System.Reflection.Emit.AssemblyBuilder">
				<signature>System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;System.Security.Policy.Evidence;System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet):System.Reflection.Emit.AssemblyBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineDynamicAssembly" uniqueID="DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;string):System.Reflection.Emit.AssemblyBuilder">
				<signature>System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;string):System.Reflection.Emit.AssemblyBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineDynamicAssembly" uniqueID="DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;string;System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet):System.Reflection.Emit.AssemblyBuilder">
				<signature>System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;string;System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet):System.Reflection.Emit.AssemblyBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineDynamicAssembly" uniqueID="DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;string;System.Security.Policy.Evidence):System.Reflection.Emit.AssemblyBuilder">
				<signature>System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;string;System.Security.Policy.Evidence):System.Reflection.Emit.AssemblyBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineDynamicAssembly" uniqueID="DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;string;System.Security.Policy.Evidence;System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet):System.Reflection.Emit.AssemblyBuilder">
				<signature>System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;string;System.Security.Policy.Evidence;System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet):System.Reflection.Emit.AssemblyBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineDynamicAssembly" uniqueID="DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;string;System.Security.Policy.Evidence;System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet;bool):System.Reflection.Emit.AssemblyBuilder">
				<signature>System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;string;System.Security.Policy.Evidence;System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet;bool):System.Reflection.Emit.AssemblyBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineDynamicAssembly" uniqueID="DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;string;System.Security.Policy.Evidence;System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet;bool;System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;):System.Reflection.Emit.AssemblyBuilder">
				<signature>System.AppDomain.DefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;string;System.Security.Policy.Evidence;System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet;bool;System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;):System.Reflection.Emit.AssemblyBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DoCallBack" uniqueID="DoCallBack(System.CrossAppDomainDelegate):void">
				<signature>System.AppDomain.DoCallBack(System.CrossAppDomainDelegate):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="EnableResolveAssembliesForIntrospection" uniqueID="EnableResolveAssembliesForIntrospection():void">
				<signature>System.AppDomain.EnableResolveAssembliesForIntrospection():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ExecuteAssembly" uniqueID="ExecuteAssembly(string):int">
				<signature>System.AppDomain.ExecuteAssembly(string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ExecuteAssembly" uniqueID="ExecuteAssembly(string;System.Security.Policy.Evidence):int">
				<signature>System.AppDomain.ExecuteAssembly(string;System.Security.Policy.Evidence):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ExecuteAssembly" uniqueID="ExecuteAssembly(string;System.Security.Policy.Evidence;string[]):int">
				<signature>System.AppDomain.ExecuteAssembly(string;System.Security.Policy.Evidence;string[]):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ExecuteAssembly" uniqueID="ExecuteAssembly(string;System.Security.Policy.Evidence;string[];byte[];System.Configuration.Assemblies.AssemblyHashAlgorithm):int">
				<signature>System.AppDomain.ExecuteAssembly(string;System.Security.Policy.Evidence;string[];byte[];System.Configuration.Assemblies.AssemblyHashAlgorithm):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ExecuteAssemblyByName" uniqueID="ExecuteAssemblyByName(System.Reflection.AssemblyName;System.Security.Policy.Evidence;string[]):int">
				<signature>System.AppDomain.ExecuteAssemblyByName(System.Reflection.AssemblyName;System.Security.Policy.Evidence;string[]):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ExecuteAssemblyByName" uniqueID="ExecuteAssemblyByName(string):int">
				<signature>System.AppDomain.ExecuteAssemblyByName(string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ExecuteAssemblyByName" uniqueID="ExecuteAssemblyByName(string;System.Security.Policy.Evidence):int">
				<signature>System.AppDomain.ExecuteAssemblyByName(string;System.Security.Policy.Evidence):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ExecuteAssemblyByName" uniqueID="ExecuteAssemblyByName(string;System.Security.Policy.Evidence;string[]):int">
				<signature>System.AppDomain.ExecuteAssemblyByName(string;System.Security.Policy.Evidence;string[]):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetAppDomainId" uniqueID="GetAppDomainId():unsigned int">
				<signature>System.AppDomain.GetAppDomainId():unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAssemblies" uniqueID="GetAssemblies():System.Reflection.Assembly[]">
				<signature>System.AppDomain.GetAssemblies():System.Reflection.Assembly[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetData" uniqueID="GetData(string):object">
				<signature>System.AppDomain.GetData(string):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetDefaultContext" uniqueID="GetDefaultContext():System.Runtime.Remoting.Contexts.Context">
				<signature>System.AppDomain.GetDefaultContext():System.Runtime.Remoting.Contexts.Context</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetDynamicDir" uniqueID="GetDynamicDir():string">
				<signature>System.AppDomain.GetDynamicDir():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetFusionContext" uniqueID="GetFusionContext():native signed int">
				<signature>System.AppDomain.GetFusionContext():native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetId" uniqueID="GetId():int">
				<signature>System.AppDomain.GetId():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetOrInternString" uniqueID="GetOrInternString(string):string">
				<signature>System.AppDomain.GetOrInternString(string):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetSecurityDescriptor" uniqueID="GetSecurityDescriptor():native signed int">
				<signature>System.AppDomain.GetSecurityDescriptor():native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetThreadPrincipal" uniqueID="GetThreadPrincipal():System.Security.Principal.IPrincipal">
				<signature>System.AppDomain.GetThreadPrincipal():System.Security.Principal.IPrincipal</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType():System.Type">
				<signature>System.AppDomain.GetType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InitializeLifetimeService" uniqueID="InitializeLifetimeService():object">
				<signature>System.AppDomain.InitializeLifetimeService():object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalCreateInstanceFromWithNoSecurity" uniqueID="InternalCreateInstanceFromWithNoSecurity(string;string):System.Runtime.Remoting.ObjectHandle">
				<signature>System.AppDomain.InternalCreateInstanceFromWithNoSecurity(string;string):System.Runtime.Remoting.ObjectHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalCreateInstanceFromWithNoSecurity" uniqueID="InternalCreateInstanceFromWithNoSecurity(string;string;bool;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo;object[];System.Security.Policy.Evidence):System.Runtime.Remoting.ObjectHandle">
				<signature>System.AppDomain.InternalCreateInstanceFromWithNoSecurity(string;string;bool;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo;object[];System.Security.Policy.Evidence):System.Runtime.Remoting.ObjectHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalCreateInstanceWithNoSecurity" uniqueID="InternalCreateInstanceWithNoSecurity(string;string):System.Runtime.Remoting.ObjectHandle">
				<signature>System.AppDomain.InternalCreateInstanceWithNoSecurity(string;string):System.Runtime.Remoting.ObjectHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalCreateInstanceWithNoSecurity" uniqueID="InternalCreateInstanceWithNoSecurity(string;string;bool;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo;object[];System.Security.Policy.Evidence):System.Runtime.Remoting.ObjectHandle">
				<signature>System.AppDomain.InternalCreateInstanceWithNoSecurity(string;string;bool;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo;object[];System.Security.Policy.Evidence):System.Runtime.Remoting.ObjectHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalDefineDynamicAssembly" uniqueID="InternalDefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;string;System.Security.Policy.Evidence;System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet;System.Threading.StackCrawlMark;System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;):System.Reflection.Emit.AssemblyBuilder">
				<signature>System.AppDomain.InternalDefineDynamicAssembly(System.Reflection.AssemblyName;System.Reflection.Emit.AssemblyBuilderAccess;string;System.Security.Policy.Evidence;System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet;System.Threading.StackCrawlMark;System.Collections.Generic.IEnumerable&lt;System.Reflection.Emit.CustomAttributeBuilder&gt;):System.Reflection.Emit.AssemblyBuilder</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalSetCachePath" uniqueID="InternalSetCachePath(string):void">
				<signature>System.AppDomain.InternalSetCachePath(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="InternalSetDomainContext" uniqueID="InternalSetDomainContext(string):void">
				<signature>System.AppDomain.InternalSetDomainContext(string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalSetDynamicBase" uniqueID="InternalSetDynamicBase(string):void">
				<signature>System.AppDomain.InternalSetDynamicBase(string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalSetPrivateBinPath" uniqueID="InternalSetPrivateBinPath(string):void">
				<signature>System.AppDomain.InternalSetPrivateBinPath(string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalSetShadowCopyFiles" uniqueID="InternalSetShadowCopyFiles():void">
				<signature>System.AppDomain.InternalSetShadowCopyFiles():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalSetShadowCopyPath" uniqueID="InternalSetShadowCopyPath(string):void">
				<signature>System.AppDomain.InternalSetShadowCopyPath(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefaultAppDomain" uniqueID="IsDefaultAppDomain():bool">
				<signature>System.AppDomain.IsDefaultAppDomain():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsFinalizingForUnload" uniqueID="IsFinalizingForUnload():bool">
				<signature>System.AppDomain.IsFinalizingForUnload():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsStringInterned" uniqueID="IsStringInterned(string):string">
				<signature>System.AppDomain.IsStringInterned(string):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsUnloadingForcedFinalize" uniqueID="IsUnloadingForcedFinalize():bool">
				<signature>System.AppDomain.IsUnloadingForcedFinalize():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Load" uniqueID="Load(System.Reflection.AssemblyName):System.Reflection.Assembly">
				<signature>System.AppDomain.Load(System.Reflection.AssemblyName):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Load" uniqueID="Load(System.Reflection.AssemblyName;System.Security.Policy.Evidence):System.Reflection.Assembly">
				<signature>System.AppDomain.Load(System.Reflection.AssemblyName;System.Security.Policy.Evidence):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Load" uniqueID="Load(byte[]):System.Reflection.Assembly">
				<signature>System.AppDomain.Load(byte[]):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Load" uniqueID="Load(byte[];byte[]):System.Reflection.Assembly">
				<signature>System.AppDomain.Load(byte[];byte[]):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Load" uniqueID="Load(byte[];byte[];System.Security.Policy.Evidence):System.Reflection.Assembly">
				<signature>System.AppDomain.Load(byte[];byte[];System.Security.Policy.Evidence):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Load" uniqueID="Load(string):System.Reflection.Assembly">
				<signature>System.AppDomain.Load(string):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Load" uniqueID="Load(string;System.Security.Policy.Evidence):System.Reflection.Assembly">
				<signature>System.AppDomain.Load(string;System.Security.Policy.Evidence):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnAssemblyLoadEvent" uniqueID="OnAssemblyLoadEvent(System.Reflection.Assembly):void">
				<signature>System.AppDomain.OnAssemblyLoadEvent(System.Reflection.Assembly):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnAssemblyResolveEvent" uniqueID="OnAssemblyResolveEvent(string):System.Reflection.Assembly">
				<signature>System.AppDomain.OnAssemblyResolveEvent(string):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnReflectionOnlyAssemblyResolveEvent" uniqueID="OnReflectionOnlyAssemblyResolveEvent(string):System.Reflection.Assembly">
				<signature>System.AppDomain.OnReflectionOnlyAssemblyResolveEvent(string):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnResourceResolveEvent" uniqueID="OnResourceResolveEvent(string):System.Reflection.Assembly">
				<signature>System.AppDomain.OnResourceResolveEvent(string):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnTypeResolveEvent" uniqueID="OnTypeResolveEvent(string):System.Reflection.Assembly">
				<signature>System.AppDomain.OnTypeResolveEvent(string):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="PublishAnonymouslyHostedDynamicMethodsAssembly" uniqueID="PublishAnonymouslyHostedDynamicMethodsAssembly(System.Reflection.Assembly):void">
				<signature>System.AppDomain.PublishAnonymouslyHostedDynamicMethodsAssembly(System.Reflection.Assembly):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ReflectionOnlyGetAssemblies" uniqueID="ReflectionOnlyGetAssemblies():System.Reflection.Assembly[]">
				<signature>System.AppDomain.ReflectionOnlyGetAssemblies():System.Reflection.Assembly[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ResolveAssemblyForIntrospection" uniqueID="ResolveAssemblyForIntrospection(object;System.ResolveEventArgs):System.Reflection.Assembly">
				<signature>System.AppDomain.ResolveAssemblyForIntrospection(object;System.ResolveEventArgs):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="RunDomainManagerPostInitialization" uniqueID="RunDomainManagerPostInitialization(System.AppDomainManager):void">
				<signature>System.AppDomain.RunDomainManagerPostInitialization(System.AppDomainManager):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetAppDomainPolicy" uniqueID="SetAppDomainPolicy(System.Security.Policy.PolicyLevel):void">
				<signature>System.AppDomain.SetAppDomainPolicy(System.Security.Policy.PolicyLevel):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetCachePath" uniqueID="SetCachePath(string):void">
				<signature>System.AppDomain.SetCachePath(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetData" uniqueID="SetData(string;object):void">
				<signature>System.AppDomain.SetData(string;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetData" uniqueID="SetData(string;object;System.Security.IPermission):void">
				<signature>System.AppDomain.SetData(string;object;System.Security.IPermission):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SetDataHelper" uniqueID="SetDataHelper(string;object;System.Security.IPermission):void">
				<signature>System.AppDomain.SetDataHelper(string;object;System.Security.IPermission):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SetDefaultDomainManager" uniqueID="SetDefaultDomainManager(string;string[];string[]):void">
				<signature>System.AppDomain.SetDefaultDomainManager(string;string[];string[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SetDomainManager" uniqueID="SetDomainManager(System.Security.Policy.Evidence;System.Security.Policy.Evidence;native signed int;bool):void">
				<signature>System.AppDomain.SetDomainManager(System.Security.Policy.Evidence;System.Security.Policy.Evidence;native signed int;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetDynamicBase" uniqueID="SetDynamicBase(string):void">
				<signature>System.AppDomain.SetDynamicBase(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetPrincipalPolicy" uniqueID="SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy):void">
				<signature>System.AppDomain.SetPrincipalPolicy(System.Security.Principal.PrincipalPolicy):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetShadowCopyFiles" uniqueID="SetShadowCopyFiles():void">
				<signature>System.AppDomain.SetShadowCopyFiles():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetShadowCopyPath" uniqueID="SetShadowCopyPath(string):void">
				<signature>System.AppDomain.SetShadowCopyPath(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetThreadPrincipal" uniqueID="SetThreadPrincipal(System.Security.Principal.IPrincipal):void">
				<signature>System.AppDomain.SetThreadPrincipal(System.Security.Principal.IPrincipal):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SetupApplicationHelper" uniqueID="SetupApplicationHelper(System.Security.Policy.Evidence;System.Security.Policy.Evidence;System.ApplicationIdentity;System.ActivationContext;string[]):void">
				<signature>System.AppDomain.SetupApplicationHelper(System.Security.Policy.Evidence;System.Security.Policy.Evidence;System.ApplicationIdentity;System.ActivationContext;string[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SetupDomain" uniqueID="SetupDomain(bool;string;string):void">
				<signature>System.AppDomain.SetupDomain(bool;string;string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SetupDomainForApplication" uniqueID="SetupDomainForApplication(System.ActivationContext;string[]):void">
				<signature>System.AppDomain.SetupDomainForApplication(System.ActivationContext;string[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SetupDomainSecurityForApplication" uniqueID="SetupDomainSecurityForApplication(System.ApplicationIdentity;System.Security.Policy.ApplicationTrust):void">
				<signature>System.AppDomain.SetupDomainSecurityForApplication(System.ApplicationIdentity;System.Security.Policy.ApplicationTrust):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SetupFusionStore" uniqueID="SetupFusionStore(System.AppDomainSetup):void">
				<signature>System.AppDomain.SetupFusionStore(System.AppDomainSetup):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SetupLoaderOptimization" uniqueID="SetupLoaderOptimization(System.LoaderOptimization):void">
				<signature>System.AppDomain.SetupLoaderOptimization(System.LoaderOptimization):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System._AppDomain.GetIDsOfNames" uniqueID="System._AppDomain.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.AppDomain.System._AppDomain.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System._AppDomain.GetTypeInfo" uniqueID="System._AppDomain.GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.AppDomain.System._AppDomain.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System._AppDomain.GetTypeInfoCount" uniqueID="System._AppDomain.GetTypeInfoCount(unsigned int):void">
				<signature>System.AppDomain.System._AppDomain.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System._AppDomain.Invoke" uniqueID="System._AppDomain.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.AppDomain.System._AppDomain.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.AppDomain.ToString():string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="TurnOnBindingRedirects" uniqueID="TurnOnBindingRedirects():void">
				<signature>System.AppDomain.TurnOnBindingRedirects():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="UpdateLoaderOptimization" uniqueID="UpdateLoaderOptimization(int):void">
				<signature>System.AppDomain.UpdateLoaderOptimization(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_nExecuteAssembly" uniqueID="_nExecuteAssembly(System.Reflection.Assembly;string[]):int">
				<signature>System.AppDomain._nExecuteAssembly(System.Reflection.Assembly;string[]):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="add_AssemblyLoad" uniqueID="add_AssemblyLoad(System.AssemblyLoadEventHandler):void">
				<signature>System.AppDomain.add_AssemblyLoad(System.AssemblyLoadEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="add_AssemblyResolve" uniqueID="add_AssemblyResolve(System.ResolveEventHandler):void">
				<signature>System.AppDomain.add_AssemblyResolve(System.ResolveEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="add_DomainUnload" uniqueID="add_DomainUnload(System.EventHandler):void">
				<signature>System.AppDomain.add_DomainUnload(System.EventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="add_ProcessExit" uniqueID="add_ProcessExit(System.EventHandler):void">
				<signature>System.AppDomain.add_ProcessExit(System.EventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="add_ReflectionOnlyAssemblyResolve" uniqueID="add_ReflectionOnlyAssemblyResolve(System.ResolveEventHandler):void">
				<signature>System.AppDomain.add_ReflectionOnlyAssemblyResolve(System.ResolveEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="add_ResourceResolve" uniqueID="add_ResourceResolve(System.ResolveEventHandler):void">
				<signature>System.AppDomain.add_ResourceResolve(System.ResolveEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="add_TypeResolve" uniqueID="add_TypeResolve(System.ResolveEventHandler):void">
				<signature>System.AppDomain.add_TypeResolve(System.ResolveEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="add_UnhandledException" uniqueID="add_UnhandledException(System.UnhandledExceptionEventHandler):void">
				<signature>System.AppDomain.add_UnhandledException(System.UnhandledExceptionEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ActivationContext" uniqueID="get_ActivationContext():System.ActivationContext">
				<signature>System.AppDomain.get_ActivationContext():System.ActivationContext</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ApplicationIdentity" uniqueID="get_ApplicationIdentity():System.ApplicationIdentity">
				<signature>System.AppDomain.get_ApplicationIdentity():System.ApplicationIdentity</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ApplicationTrust" uniqueID="get_ApplicationTrust():System.Security.Policy.ApplicationTrust">
				<signature>System.AppDomain.get_ApplicationTrust():System.Security.Policy.ApplicationTrust</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_BaseDirectory" uniqueID="get_BaseDirectory():string">
				<signature>System.AppDomain.get_BaseDirectory():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DomainManager" uniqueID="get_DomainManager():System.AppDomainManager">
				<signature>System.AppDomain.get_DomainManager():System.AppDomainManager</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DynamicDirectory" uniqueID="get_DynamicDirectory():string">
				<signature>System.AppDomain.get_DynamicDirectory():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Evidence" uniqueID="get_Evidence():System.Security.Policy.Evidence">
				<signature>System.AppDomain.get_Evidence():System.Security.Policy.Evidence</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FriendlyName" uniqueID="get_FriendlyName():string">
				<signature>System.AppDomain.get_FriendlyName():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_FusionStore" uniqueID="get_FusionStore():System.AppDomainSetup">
				<signature>System.AppDomain.get_FusionStore():System.AppDomainSetup</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_HostSecurityManager" uniqueID="get_HostSecurityManager():System.Security.HostSecurityManager">
				<signature>System.AppDomain.get_HostSecurityManager():System.Security.HostSecurityManager</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Id" uniqueID="get_Id():int">
				<signature>System.AppDomain.get_Id():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_InternalEvidence" uniqueID="get_InternalEvidence():System.Security.Policy.Evidence">
				<signature>System.AppDomain.get_InternalEvidence():System.Security.Policy.Evidence</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_LocalStore" uniqueID="get_LocalStore():System.Collections.Hashtable">
				<signature>System.AppDomain.get_LocalStore():System.Collections.Hashtable</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_RelativeSearchPath" uniqueID="get_RelativeSearchPath():string">
				<signature>System.AppDomain.get_RelativeSearchPath():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_RemotingData" uniqueID="get_RemotingData():System.Runtime.Remoting.DomainSpecificRemotingData">
				<signature>System.AppDomain.get_RemotingData():System.Runtime.Remoting.DomainSpecificRemotingData</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SetupInformation" uniqueID="get_SetupInformation():System.AppDomainSetup">
				<signature>System.AppDomain.get_SetupInformation():System.AppDomainSetup</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ShadowCopyFiles" uniqueID="get_ShadowCopyFiles():bool">
				<signature>System.AppDomain.get_ShadowCopyFiles():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="nApplyPolicy" uniqueID="nApplyPolicy(System.Reflection.AssemblyName):string">
				<signature>System.AppDomain.nApplyPolicy(System.Reflection.AssemblyName):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="nChangeSecurityPolicy" uniqueID="nChangeSecurityPolicy():void">
				<signature>System.AppDomain.nChangeSecurityPolicy():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="nCreateDynamicAssembly" uniqueID="nCreateDynamicAssembly(System.Reflection.AssemblyName;System.Security.Policy.Evidence;System.Threading.StackCrawlMark;System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet;System.Reflection.Emit.AssemblyBuilderAccess;System.Reflection.Emit.DynamicAssemblyFlags):System.Reflection.Assembly">
				<signature>System.AppDomain.nCreateDynamicAssembly(System.Reflection.AssemblyName;System.Security.Policy.Evidence;System.Threading.StackCrawlMark;System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet;System.Reflection.Emit.AssemblyBuilderAccess;System.Reflection.Emit.DynamicAssemblyFlags):System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nExecuteAssembly" uniqueID="nExecuteAssembly(System.Reflection.Assembly;string[]):int">
				<signature>System.AppDomain.nExecuteAssembly(System.Reflection.Assembly;string[]):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="nGetAssemblies" uniqueID="nGetAssemblies(bool):System.Reflection.Assembly[]">
				<signature>System.AppDomain.nGetAssemblies(bool):System.Reflection.Assembly[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="nGetFriendlyName" uniqueID="nGetFriendlyName():string">
				<signature>System.AppDomain.nGetFriendlyName():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nGetGrantSet" uniqueID="nGetGrantSet(System.Security.PermissionSet;System.Security.PermissionSet):void">
				<signature>System.AppDomain.nGetGrantSet(System.Security.PermissionSet;System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="nIsDefaultAppDomainForSecurity" uniqueID="nIsDefaultAppDomainForSecurity():bool">
				<signature>System.AppDomain.nIsDefaultAppDomainForSecurity():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="nSetDisableInterfaceCache" uniqueID="nSetDisableInterfaceCache():void">
				<signature>System.AppDomain.nSetDisableInterfaceCache():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="nSetupDomainSecurity" uniqueID="nSetupDomainSecurity(System.Security.Policy.Evidence;native signed int;bool):void">
				<signature>System.AppDomain.nSetupDomainSecurity(System.Security.Policy.Evidence;native signed int;bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="nSetupFriendlyName" uniqueID="nSetupFriendlyName(string):void">
				<signature>System.AppDomain.nSetupFriendlyName(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="remove_AssemblyLoad" uniqueID="remove_AssemblyLoad(System.AssemblyLoadEventHandler):void">
				<signature>System.AppDomain.remove_AssemblyLoad(System.AssemblyLoadEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="remove_AssemblyResolve" uniqueID="remove_AssemblyResolve(System.ResolveEventHandler):void">
				<signature>System.AppDomain.remove_AssemblyResolve(System.ResolveEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="remove_DomainUnload" uniqueID="remove_DomainUnload(System.EventHandler):void">
				<signature>System.AppDomain.remove_DomainUnload(System.EventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="remove_ProcessExit" uniqueID="remove_ProcessExit(System.EventHandler):void">
				<signature>System.AppDomain.remove_ProcessExit(System.EventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="remove_ReflectionOnlyAssemblyResolve" uniqueID="remove_ReflectionOnlyAssemblyResolve(System.ResolveEventHandler):void">
				<signature>System.AppDomain.remove_ReflectionOnlyAssemblyResolve(System.ResolveEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="remove_ResourceResolve" uniqueID="remove_ResourceResolve(System.ResolveEventHandler):void">
				<signature>System.AppDomain.remove_ResourceResolve(System.ResolveEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="remove_TypeResolve" uniqueID="remove_TypeResolve(System.ResolveEventHandler):void">
				<signature>System.AppDomain.remove_TypeResolve(System.ResolveEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="remove_UnhandledException" uniqueID="remove_UnhandledException(System.UnhandledExceptionEventHandler):void">
				<signature>System.AppDomain.remove_UnhandledException(System.UnhandledExceptionEventHandler):void</signature>
			</method>
		</class>
		<class name="Console" uniqueID="System.Console">
			<method accessibility="Public" methodKind="Static" name="Beep" uniqueID="Beep():void">
				<signature>System.Console.Beep():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Beep" uniqueID="Beep(int;int):void">
				<signature>System.Console.Beep(int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="BreakEvent" uniqueID="BreakEvent(int):bool">
				<signature>System.Console.BreakEvent(int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Clear" uniqueID="Clear():void">
				<signature>System.Console.Clear():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ColorAttributeToConsoleColor" uniqueID="ColorAttributeToConsoleColor(Microsoft.Win32.Win32Native+Color):System.ConsoleColor">
				<signature>System.Console.ColorAttributeToConsoleColor(Microsoft.Win32.Win32Native+Color):System.ConsoleColor</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ConsoleColorToColorAttribute" uniqueID="ConsoleColorToColorAttribute(System.ConsoleColor;bool):Microsoft.Win32.Win32Native+Color">
				<signature>System.Console.ConsoleColorToColorAttribute(System.ConsoleColor;bool):Microsoft.Win32.Win32Native+Color</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ConsoleHandleIsValid" uniqueID="ConsoleHandleIsValid(Microsoft.Win32.SafeHandles.SafeFileHandle):bool">
				<signature>System.Console.ConsoleHandleIsValid(Microsoft.Win32.SafeHandles.SafeFileHandle):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ControlCDelegate" uniqueID="ControlCDelegate(object):void">
				<signature>System.Console.ControlCDelegate(object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetBufferInfo" uniqueID="GetBufferInfo():Microsoft.Win32.Win32Native+CONSOLE_SCREEN_BUFFER_INFO">
				<signature>System.Console.GetBufferInfo():Microsoft.Win32.Win32Native+CONSOLE_SCREEN_BUFFER_INFO</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetBufferInfo" uniqueID="GetBufferInfo(bool;bool):Microsoft.Win32.Win32Native+CONSOLE_SCREEN_BUFFER_INFO">
				<signature>System.Console.GetBufferInfo(bool;bool):Microsoft.Win32.Win32Native+CONSOLE_SCREEN_BUFFER_INFO</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetStandardFile" uniqueID="GetStandardFile(int;System.IO.FileAccess;int):System.IO.Stream">
				<signature>System.Console.GetStandardFile(int;System.IO.FileAccess;int):System.IO.Stream</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InitializeStdOutError" uniqueID="InitializeStdOutError(bool):void">
				<signature>System.Console.InitializeStdOutError(bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IsKeyDownEvent" uniqueID="IsKeyDownEvent(Microsoft.Win32.Win32Native+InputRecord):bool">
				<signature>System.Console.IsKeyDownEvent(Microsoft.Win32.Win32Native+InputRecord):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IsModKey" uniqueID="IsModKey(short):bool">
				<signature>System.Console.IsModKey(short):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="MoveBufferArea" uniqueID="MoveBufferArea(int;int;int;int;int;int):void">
				<signature>System.Console.MoveBufferArea(int;int;int;int;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="MoveBufferArea" uniqueID="MoveBufferArea(int;int;int;int;int;int;char;System.ConsoleColor;System.ConsoleColor):void">
				<signature>System.Console.MoveBufferArea(int;int;int;int;int;int;char;System.ConsoleColor;System.ConsoleColor):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="OpenStandardError" uniqueID="OpenStandardError():System.IO.Stream">
				<signature>System.Console.OpenStandardError():System.IO.Stream</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="OpenStandardError" uniqueID="OpenStandardError(int):System.IO.Stream">
				<signature>System.Console.OpenStandardError(int):System.IO.Stream</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="OpenStandardInput" uniqueID="OpenStandardInput():System.IO.Stream">
				<signature>System.Console.OpenStandardInput():System.IO.Stream</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="OpenStandardInput" uniqueID="OpenStandardInput(int):System.IO.Stream">
				<signature>System.Console.OpenStandardInput(int):System.IO.Stream</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="OpenStandardOutput" uniqueID="OpenStandardOutput():System.IO.Stream">
				<signature>System.Console.OpenStandardOutput():System.IO.Stream</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="OpenStandardOutput" uniqueID="OpenStandardOutput(int):System.IO.Stream">
				<signature>System.Console.OpenStandardOutput(int):System.IO.Stream</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Read" uniqueID="Read():int">
				<signature>System.Console.Read():int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ReadKey" uniqueID="ReadKey():System.ConsoleKeyInfo">
				<signature>System.Console.ReadKey():System.ConsoleKeyInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ReadKey" uniqueID="ReadKey(bool):System.ConsoleKeyInfo">
				<signature>System.Console.ReadKey(bool):System.ConsoleKeyInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ReadLine" uniqueID="ReadLine():string">
				<signature>System.Console.ReadLine():string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ResetColor" uniqueID="ResetColor():void">
				<signature>System.Console.ResetColor():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="SetBufferSize" uniqueID="SetBufferSize(int;int):void">
				<signature>System.Console.SetBufferSize(int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="SetCursorPosition" uniqueID="SetCursorPosition(int;int):void">
				<signature>System.Console.SetCursorPosition(int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="SetError" uniqueID="SetError(System.IO.TextWriter):void">
				<signature>System.Console.SetError(System.IO.TextWriter):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="SetIn" uniqueID="SetIn(System.IO.TextReader):void">
				<signature>System.Console.SetIn(System.IO.TextReader):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="SetOut" uniqueID="SetOut(System.IO.TextWriter):void">
				<signature>System.Console.SetOut(System.IO.TextWriter):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="SetWindowPosition" uniqueID="SetWindowPosition(int;int):void">
				<signature>System.Console.SetWindowPosition(int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="SetWindowSize" uniqueID="SetWindowSize(int;int):void">
				<signature>System.Console.SetWindowSize(int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Write" uniqueID="Write(System.Decimal):void">
				<signature>System.Console.Write(System.Decimal):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Write" uniqueID="Write(bool):void">
				<signature>System.Console.Write(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Write" uniqueID="Write(char):void">
				<signature>System.Console.Write(char):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Write" uniqueID="Write(char[]):void">
				<signature>System.Console.Write(char[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Write" uniqueID="Write(char[];int;int):void">
				<signature>System.Console.Write(char[];int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Write" uniqueID="Write(double):void">
				<signature>System.Console.Write(double):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Write" uniqueID="Write(float):void">
				<signature>System.Console.Write(float):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Write" uniqueID="Write(int):void">
				<signature>System.Console.Write(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Write" uniqueID="Write(long):void">
				<signature>System.Console.Write(long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Write" uniqueID="Write(object):void">
				<signature>System.Console.Write(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Write" uniqueID="Write(string):void">
				<signature>System.Console.Write(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Write" uniqueID="Write(string;object):void">
				<signature>System.Console.Write(string;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Write" uniqueID="Write(string;object;object):void">
				<signature>System.Console.Write(string;object;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Write" uniqueID="Write(string;object;object;object):void">
				<signature>System.Console.Write(string;object;object;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Write" uniqueID="Write(string;object[]):void">
				<signature>System.Console.Write(string;object[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Write" uniqueID="Write(unsigned int):void">
				<signature>System.Console.Write(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Write" uniqueID="Write(unsigned long):void">
				<signature>System.Console.Write(unsigned long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WriteLine" uniqueID="WriteLine():void">
				<signature>System.Console.WriteLine():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WriteLine" uniqueID="WriteLine(System.Decimal):void">
				<signature>System.Console.WriteLine(System.Decimal):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WriteLine" uniqueID="WriteLine(bool):void">
				<signature>System.Console.WriteLine(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WriteLine" uniqueID="WriteLine(char):void">
				<signature>System.Console.WriteLine(char):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WriteLine" uniqueID="WriteLine(char[]):void">
				<signature>System.Console.WriteLine(char[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WriteLine" uniqueID="WriteLine(char[];int;int):void">
				<signature>System.Console.WriteLine(char[];int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WriteLine" uniqueID="WriteLine(double):void">
				<signature>System.Console.WriteLine(double):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WriteLine" uniqueID="WriteLine(float):void">
				<signature>System.Console.WriteLine(float):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WriteLine" uniqueID="WriteLine(int):void">
				<signature>System.Console.WriteLine(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WriteLine" uniqueID="WriteLine(long):void">
				<signature>System.Console.WriteLine(long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WriteLine" uniqueID="WriteLine(object):void">
				<signature>System.Console.WriteLine(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WriteLine" uniqueID="WriteLine(string):void">
				<signature>System.Console.WriteLine(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WriteLine" uniqueID="WriteLine(string;object):void">
				<signature>System.Console.WriteLine(string;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WriteLine" uniqueID="WriteLine(string;object;object):void">
				<signature>System.Console.WriteLine(string;object;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WriteLine" uniqueID="WriteLine(string;object;object;object):void">
				<signature>System.Console.WriteLine(string;object;object;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WriteLine" uniqueID="WriteLine(string;object[]):void">
				<signature>System.Console.WriteLine(string;object[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WriteLine" uniqueID="WriteLine(unsigned int):void">
				<signature>System.Console.WriteLine(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="WriteLine" uniqueID="WriteLine(unsigned long):void">
				<signature>System.Console.WriteLine(unsigned long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="add_CancelKeyPress" uniqueID="add_CancelKeyPress(System.ConsoleCancelEventHandler):void">
				<signature>System.Console.add_CancelKeyPress(System.ConsoleCancelEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_BackgroundColor" uniqueID="get_BackgroundColor():System.ConsoleColor">
				<signature>System.Console.get_BackgroundColor():System.ConsoleColor</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_BufferHeight" uniqueID="get_BufferHeight():int">
				<signature>System.Console.get_BufferHeight():int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_BufferWidth" uniqueID="get_BufferWidth():int">
				<signature>System.Console.get_BufferWidth():int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_CapsLock" uniqueID="get_CapsLock():bool">
				<signature>System.Console.get_CapsLock():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="get_ConsoleInputHandle" uniqueID="get_ConsoleInputHandle():native signed int">
				<signature>System.Console.get_ConsoleInputHandle():native signed int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="get_ConsoleOutputHandle" uniqueID="get_ConsoleOutputHandle():native signed int">
				<signature>System.Console.get_ConsoleOutputHandle():native signed int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_CursorLeft" uniqueID="get_CursorLeft():int">
				<signature>System.Console.get_CursorLeft():int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_CursorSize" uniqueID="get_CursorSize():int">
				<signature>System.Console.get_CursorSize():int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_CursorTop" uniqueID="get_CursorTop():int">
				<signature>System.Console.get_CursorTop():int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_CursorVisible" uniqueID="get_CursorVisible():bool">
				<signature>System.Console.get_CursorVisible():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_Error" uniqueID="get_Error():System.IO.TextWriter">
				<signature>System.Console.get_Error():System.IO.TextWriter</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_ForegroundColor" uniqueID="get_ForegroundColor():System.ConsoleColor">
				<signature>System.Console.get_ForegroundColor():System.ConsoleColor</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_In" uniqueID="get_In():System.IO.TextReader">
				<signature>System.Console.get_In():System.IO.TextReader</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_InputEncoding" uniqueID="get_InputEncoding():System.Text.Encoding">
				<signature>System.Console.get_InputEncoding():System.Text.Encoding</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="get_InternalSyncObject" uniqueID="get_InternalSyncObject():object">
				<signature>System.Console.get_InternalSyncObject():object</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_KeyAvailable" uniqueID="get_KeyAvailable():bool">
				<signature>System.Console.get_KeyAvailable():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_LargestWindowHeight" uniqueID="get_LargestWindowHeight():int">
				<signature>System.Console.get_LargestWindowHeight():int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_LargestWindowWidth" uniqueID="get_LargestWindowWidth():int">
				<signature>System.Console.get_LargestWindowWidth():int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_NumberLock" uniqueID="get_NumberLock():bool">
				<signature>System.Console.get_NumberLock():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_Out" uniqueID="get_Out():System.IO.TextWriter">
				<signature>System.Console.get_Out():System.IO.TextWriter</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_OutputEncoding" uniqueID="get_OutputEncoding():System.Text.Encoding">
				<signature>System.Console.get_OutputEncoding():System.Text.Encoding</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_Title" uniqueID="get_Title():string">
				<signature>System.Console.get_Title():string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_TreatControlCAsInput" uniqueID="get_TreatControlCAsInput():bool">
				<signature>System.Console.get_TreatControlCAsInput():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_WindowHeight" uniqueID="get_WindowHeight():int">
				<signature>System.Console.get_WindowHeight():int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_WindowLeft" uniqueID="get_WindowLeft():int">
				<signature>System.Console.get_WindowLeft():int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_WindowTop" uniqueID="get_WindowTop():int">
				<signature>System.Console.get_WindowTop():int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_WindowWidth" uniqueID="get_WindowWidth():int">
				<signature>System.Console.get_WindowWidth():int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="remove_CancelKeyPress" uniqueID="remove_CancelKeyPress(System.ConsoleCancelEventHandler):void">
				<signature>System.Console.remove_CancelKeyPress(System.ConsoleCancelEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="set_BackgroundColor" uniqueID="set_BackgroundColor(System.ConsoleColor):void">
				<signature>System.Console.set_BackgroundColor(System.ConsoleColor):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="set_BufferHeight" uniqueID="set_BufferHeight(int):void">
				<signature>System.Console.set_BufferHeight(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="set_BufferWidth" uniqueID="set_BufferWidth(int):void">
				<signature>System.Console.set_BufferWidth(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="set_CursorLeft" uniqueID="set_CursorLeft(int):void">
				<signature>System.Console.set_CursorLeft(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="set_CursorSize" uniqueID="set_CursorSize(int):void">
				<signature>System.Console.set_CursorSize(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="set_CursorTop" uniqueID="set_CursorTop(int):void">
				<signature>System.Console.set_CursorTop(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="set_CursorVisible" uniqueID="set_CursorVisible(bool):void">
				<signature>System.Console.set_CursorVisible(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="set_ForegroundColor" uniqueID="set_ForegroundColor(System.ConsoleColor):void">
				<signature>System.Console.set_ForegroundColor(System.ConsoleColor):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="set_InputEncoding" uniqueID="set_InputEncoding(System.Text.Encoding):void">
				<signature>System.Console.set_InputEncoding(System.Text.Encoding):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="set_OutputEncoding" uniqueID="set_OutputEncoding(System.Text.Encoding):void">
				<signature>System.Console.set_OutputEncoding(System.Text.Encoding):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="set_Title" uniqueID="set_Title(string):void">
				<signature>System.Console.set_Title(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="set_TreatControlCAsInput" uniqueID="set_TreatControlCAsInput(bool):void">
				<signature>System.Console.set_TreatControlCAsInput(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="set_WindowHeight" uniqueID="set_WindowHeight(int):void">
				<signature>System.Console.set_WindowHeight(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="set_WindowLeft" uniqueID="set_WindowLeft(int):void">
				<signature>System.Console.set_WindowLeft(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="set_WindowTop" uniqueID="set_WindowTop(int):void">
				<signature>System.Console.set_WindowTop(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="set_WindowWidth" uniqueID="set_WindowWidth(int):void">
				<signature>System.Console.set_WindowWidth(int):void</signature>
			</method>
		</class>
		<class name="DefaultBinder" uniqueID="System.DefaultBinder">
			<method accessibility="Private" methodKind="Static" name="CanConvertPrimitive" uniqueID="CanConvertPrimitive(System.RuntimeType;System.RuntimeType):bool">
				<signature>System.DefaultBinder.CanConvertPrimitive(System.RuntimeType;System.RuntimeType):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CanConvertPrimitiveObjectToType" uniqueID="CanConvertPrimitiveObjectToType(object;System.RuntimeType):bool">
				<signature>System.DefaultBinder.CanConvertPrimitiveObjectToType(object;System.RuntimeType):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CompareMethodSigAndName" uniqueID="CompareMethodSigAndName(System.Reflection.MethodBase;System.Reflection.MethodBase):bool">
				<signature>System.DefaultBinder.CompareMethodSigAndName(System.Reflection.MethodBase;System.Reflection.MethodBase):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CreateParamOrder" uniqueID="CreateParamOrder(int[];System.Reflection.ParameterInfo[];string[]):bool">
				<signature>System.DefaultBinder.CreateParamOrder(int[];System.Reflection.ParameterInfo[];string[]):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ExactBinding" uniqueID="ExactBinding(System.Reflection.MethodBase[];System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodBase">
				<signature>System.DefaultBinder.ExactBinding(System.Reflection.MethodBase[];System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ExactPropertyBinding" uniqueID="ExactPropertyBinding(System.Reflection.PropertyInfo[];System.Type;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.PropertyInfo">
				<signature>System.DefaultBinder.ExactPropertyBinding(System.Reflection.PropertyInfo[];System.Type;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.PropertyInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="FindMostDerivedNewSlotMeth" uniqueID="FindMostDerivedNewSlotMeth(System.Reflection.MethodBase[];int):System.Reflection.MethodBase">
				<signature>System.DefaultBinder.FindMostDerivedNewSlotMeth(System.Reflection.MethodBase[];int):System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="FindMostSpecific" uniqueID="FindMostSpecific(System.Reflection.ParameterInfo[];int[];System.Type;System.Reflection.ParameterInfo[];int[];System.Type;System.Type[];object[]):int">
				<signature>System.DefaultBinder.FindMostSpecific(System.Reflection.ParameterInfo[];int[];System.Type;System.Reflection.ParameterInfo[];int[];System.Type;System.Type[];object[]):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="FindMostSpecificField" uniqueID="FindMostSpecificField(System.Reflection.FieldInfo;System.Reflection.FieldInfo):int">
				<signature>System.DefaultBinder.FindMostSpecificField(System.Reflection.FieldInfo;System.Reflection.FieldInfo):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="FindMostSpecificMethod" uniqueID="FindMostSpecificMethod(System.Reflection.MethodBase;int[];System.Type;System.Reflection.MethodBase;int[];System.Type;System.Type[];object[]):int">
				<signature>System.DefaultBinder.FindMostSpecificMethod(System.Reflection.MethodBase;int[];System.Type;System.Reflection.MethodBase;int[];System.Type;System.Type[];object[]):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="FindMostSpecificProperty" uniqueID="FindMostSpecificProperty(System.Reflection.PropertyInfo;System.Reflection.PropertyInfo):int">
				<signature>System.DefaultBinder.FindMostSpecificProperty(System.Reflection.PropertyInfo;System.Reflection.PropertyInfo):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="FindMostSpecificType" uniqueID="FindMostSpecificType(System.Type;System.Type;System.Type):int">
				<signature>System.DefaultBinder.FindMostSpecificType(System.Type;System.Type;System.Type):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetHierarchyDepth" uniqueID="GetHierarchyDepth(System.Type):int">
				<signature>System.DefaultBinder.GetHierarchyDepth(System.Type):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ReorderParams" uniqueID="ReorderParams(int[];object[]):void">
				<signature>System.DefaultBinder.ReorderParams(int[];object[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BindToField" uniqueID="BindToField(System.Reflection.BindingFlags;System.Reflection.FieldInfo[];object;System.Globalization.CultureInfo):System.Reflection.FieldInfo">
				<signature>System.DefaultBinder.BindToField(System.Reflection.BindingFlags;System.Reflection.FieldInfo[];object;System.Globalization.CultureInfo):System.Reflection.FieldInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BindToMethod" uniqueID="BindToMethod(System.Reflection.BindingFlags;System.Reflection.MethodBase[];object[];System.Reflection.ParameterModifier[];System.Globalization.CultureInfo;string[];object):System.Reflection.MethodBase">
				<signature>System.DefaultBinder.BindToMethod(System.Reflection.BindingFlags;System.Reflection.MethodBase[];object[];System.Reflection.ParameterModifier[];System.Globalization.CultureInfo;string[];object):System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ChangeType" uniqueID="ChangeType(object;System.Type;System.Globalization.CultureInfo):object">
				<signature>System.DefaultBinder.ChangeType(object;System.Type;System.Globalization.CultureInfo):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefaultBinder" uniqueID="DefaultBinder():void">
				<signature>System.DefaultBinder.DefaultBinder():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ReorderArgumentArray" uniqueID="ReorderArgumentArray(object[];object):void">
				<signature>System.DefaultBinder.ReorderArgumentArray(object[];object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SelectMethod" uniqueID="SelectMethod(System.Reflection.BindingFlags;System.Reflection.MethodBase[];System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodBase">
				<signature>System.DefaultBinder.SelectMethod(System.Reflection.BindingFlags;System.Reflection.MethodBase[];System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SelectProperty" uniqueID="SelectProperty(System.Reflection.BindingFlags;System.Reflection.PropertyInfo[];System.Type;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.PropertyInfo">
				<signature>System.DefaultBinder.SelectProperty(System.Reflection.BindingFlags;System.Reflection.PropertyInfo[];System.Type;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.PropertyInfo</signature>
			</method>
		</class>
		<class name="IFormatProvider" uniqueID="System.IFormatProvider">
			<method accessibility="Public" methodKind="Member" name="GetFormat" uniqueID="GetFormat(System.Type):object">
				<signature>System.IFormatProvider.GetFormat(System.Type):object</signature>
			</method>
		</class>
		<class name="Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;" uniqueID="System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(System.Reflection.RuntimeMethodInfo;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;.BeginInvoke(System.Reflection.RuntimeMethodInfo;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):bool">
				<signature>System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;.EndInvoke(System.IAsyncResult):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(System.Reflection.RuntimeMethodInfo):bool">
				<signature>System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;.Invoke(System.Reflection.RuntimeMethodInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;" uniqueID="Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;(object;native signed int):void">
				<signature>System.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;.Predicate&lt;System.Reflection.RuntimeMethodInfo&gt;(object;native signed int):void</signature>
			</method>
		</class>
		<class name="RuntimeFieldHandle" uniqueID="System.RuntimeFieldHandle">
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.RuntimeFieldHandle;System.RuntimeFieldHandle):bool">
				<signature>System.RuntimeFieldHandle.op_Equality(System.RuntimeFieldHandle;System.RuntimeFieldHandle):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.RuntimeFieldHandle;System.RuntimeFieldHandle):bool">
				<signature>System.RuntimeFieldHandle.op_Inequality(System.RuntimeFieldHandle;System.RuntimeFieldHandle):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AcquiresContextFromThis" uniqueID="AcquiresContextFromThis():bool">
				<signature>System.RuntimeFieldHandle.AcquiresContextFromThis():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.RuntimeFieldHandle):bool">
				<signature>System.RuntimeFieldHandle.Equals(System.RuntimeFieldHandle):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.RuntimeFieldHandle.Equals(object):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetApproxDeclaringType" uniqueID="GetApproxDeclaringType():System.RuntimeTypeHandle">
				<signature>System.RuntimeFieldHandle.GetApproxDeclaringType():System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetAttributes" uniqueID="GetAttributes():System.Reflection.FieldAttributes">
				<signature>System.RuntimeFieldHandle.GetAttributes():System.Reflection.FieldAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.RuntimeFieldHandle.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetName" uniqueID="GetName():string">
				<signature>System.RuntimeFieldHandle.GetName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetObjectData" uniqueID="GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.RuntimeFieldHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetStaticFieldForGenericType" uniqueID="GetStaticFieldForGenericType(System.RuntimeTypeHandle):System.RuntimeFieldHandle">
				<signature>System.RuntimeFieldHandle.GetStaticFieldForGenericType(System.RuntimeTypeHandle):System.RuntimeFieldHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetToken" uniqueID="GetToken():int">
				<signature>System.RuntimeFieldHandle.GetToken():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetUtf8Name" uniqueID="GetUtf8Name():System.Utf8String">
				<signature>System.RuntimeFieldHandle.GetUtf8Name():System.Utf8String</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetValue" uniqueID="GetValue(object;System.RuntimeTypeHandle;System.RuntimeTypeHandle;bool):object">
				<signature>System.RuntimeFieldHandle.GetValue(object;System.RuntimeTypeHandle;System.RuntimeTypeHandle;bool):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetValueDirect" uniqueID="GetValueDirect(System.RuntimeTypeHandle;System.TypedReference;System.RuntimeTypeHandle):object">
				<signature>System.RuntimeFieldHandle.GetValueDirect(System.RuntimeTypeHandle;System.TypedReference;System.RuntimeTypeHandle):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsNullHandle" uniqueID="IsNullHandle():bool">
				<signature>System.RuntimeFieldHandle.IsNullHandle():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="RuntimeFieldHandle" uniqueID="RuntimeFieldHandle(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.RuntimeFieldHandle.RuntimeFieldHandle(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RuntimeFieldHandle" uniqueID="RuntimeFieldHandle(void):void">
				<signature>System.RuntimeFieldHandle.RuntimeFieldHandle(void):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetValue" uniqueID="SetValue(object;object;System.RuntimeTypeHandle;System.Reflection.FieldAttributes;System.RuntimeTypeHandle;bool):void">
				<signature>System.RuntimeFieldHandle.SetValue(object;object;System.RuntimeTypeHandle;System.Reflection.FieldAttributes;System.RuntimeTypeHandle;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetValueDirect" uniqueID="SetValueDirect(System.RuntimeTypeHandle;System.TypedReference;object;System.RuntimeTypeHandle):void">
				<signature>System.RuntimeFieldHandle.SetValueDirect(System.RuntimeTypeHandle;System.TypedReference;object;System.RuntimeTypeHandle):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_GetUtf8Name" uniqueID="_GetUtf8Name():void">
				<signature>System.RuntimeFieldHandle._GetUtf8Name():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Value" uniqueID="get_Value():native signed int">
				<signature>System.RuntimeFieldHandle.get_Value():native signed int</signature>
			</method>
		</class>
		<class name="Signature" uniqueID="System.Signature">
			<method accessibility="Private" methodKind="Static" name="CompareSig" uniqueID="CompareSig(System.SignatureStruct;System.SignatureStruct):bool">
				<signature>System.Signature.CompareSig(System.SignatureStruct;System.SignatureStruct):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetCustomModifiers" uniqueID="GetCustomModifiers(System.SignatureStruct;int;System.RuntimeTypeHandle[];System.RuntimeTypeHandle[]):void">
				<signature>System.Signature.GetCustomModifiers(System.SignatureStruct;int;System.RuntimeTypeHandle[];System.RuntimeTypeHandle[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetSignature" uniqueID="GetSignature(System.SignatureStruct;void;int;System.RuntimeFieldHandle;System.RuntimeMethodHandle;System.RuntimeTypeHandle):void">
				<signature>System.Signature.GetSignature(System.SignatureStruct;void;int;System.RuntimeFieldHandle;System.RuntimeMethodHandle;System.RuntimeTypeHandle):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetSignatureForDynamicMethod" uniqueID="GetSignatureForDynamicMethod(System.SignatureStruct;System.RuntimeMethodHandle):void">
				<signature>System.Signature.GetSignatureForDynamicMethod(System.SignatureStruct;System.RuntimeMethodHandle):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_GetSignature" uniqueID="_GetSignature(System.SignatureStruct;void;int;native signed int;native signed int;native signed int):void">
				<signature>System.Signature._GetSignature(System.SignatureStruct;void;int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Implicit" uniqueID="op_Implicit(System.Signature):System.SignatureStruct">
				<signature>System.Signature.op_Implicit(System.Signature):System.SignatureStruct</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="DiffSigs" uniqueID="DiffSigs(object):bool">
				<signature>System.Signature.DiffSigs(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomModifiers" uniqueID="GetCustomModifiers(int;bool):System.Type[]">
				<signature>System.Signature.GetCustomModifiers(int;bool):System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Signature" uniqueID="Signature(System.RuntimeFieldHandle;System.RuntimeTypeHandle):void">
				<signature>System.Signature.Signature(System.RuntimeFieldHandle;System.RuntimeTypeHandle):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Signature" uniqueID="Signature(System.RuntimeMethodHandle;System.RuntimeTypeHandle):void">
				<signature>System.Signature.Signature(System.RuntimeMethodHandle;System.RuntimeTypeHandle):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Signature" uniqueID="Signature(System.RuntimeMethodHandle;System.RuntimeTypeHandle[];System.RuntimeTypeHandle;System.Reflection.CallingConventions):void">
				<signature>System.Signature.Signature(System.RuntimeMethodHandle;System.RuntimeTypeHandle[];System.RuntimeTypeHandle;System.Reflection.CallingConventions):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Signature" uniqueID="Signature(void;int;System.RuntimeTypeHandle):void">
				<signature>System.Signature.Signature(void;int;System.RuntimeTypeHandle):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Arguments" uniqueID="get_Arguments():System.RuntimeTypeHandle[]">
				<signature>System.Signature.get_Arguments():System.RuntimeTypeHandle[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_CallingConvention" uniqueID="get_CallingConvention():System.Reflection.CallingConventions">
				<signature>System.Signature.get_CallingConvention():System.Reflection.CallingConventions</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_FieldTypeHandle" uniqueID="get_FieldTypeHandle():System.RuntimeTypeHandle">
				<signature>System.Signature.get_FieldTypeHandle():System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ReturnTypeHandle" uniqueID="get_ReturnTypeHandle():System.RuntimeTypeHandle">
				<signature>System.Signature.get_ReturnTypeHandle():System.RuntimeTypeHandle</signature>
			</method>
		</class>
		<class name="SignatureStruct" uniqueID="System.SignatureStruct">
			<method accessibility="Public" methodKind="Member" name="SignatureStruct" uniqueID="SignatureStruct(System.RuntimeMethodHandle;System.RuntimeTypeHandle[];System.RuntimeTypeHandle;System.Reflection.CallingConventions):void">
				<signature>System.SignatureStruct.SignatureStruct(System.RuntimeMethodHandle;System.RuntimeTypeHandle[];System.RuntimeTypeHandle;System.Reflection.CallingConventions):void</signature>
			</method>
		</class>
		<class name="AssemblyLoadEventArgs" uniqueID="System.AssemblyLoadEventArgs">
			<method accessibility="Public" methodKind="Member" name="AssemblyLoadEventArgs" uniqueID="AssemblyLoadEventArgs(System.Reflection.Assembly):void">
				<signature>System.AssemblyLoadEventArgs.AssemblyLoadEventArgs(System.Reflection.Assembly):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_LoadedAssembly" uniqueID="get_LoadedAssembly():System.Reflection.Assembly">
				<signature>System.AssemblyLoadEventArgs.get_LoadedAssembly():System.Reflection.Assembly</signature>
			</method>
		</class>
		<class name="Byte" uniqueID="System.Byte">
			<method accessibility="Public" methodKind="Static" name="Parse" uniqueID="Parse(string):byte">
				<signature>System.Byte.Parse(string):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Parse" uniqueID="Parse(string;System.Globalization.NumberStyles):byte">
				<signature>System.Byte.Parse(string;System.Globalization.NumberStyles):byte</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="Parse" uniqueID="Parse(string;System.Globalization.NumberStyles;System.Globalization.NumberFormatInfo):byte">
				<signature>System.Byte.Parse(string;System.Globalization.NumberStyles;System.Globalization.NumberFormatInfo):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Parse" uniqueID="Parse(string;System.Globalization.NumberStyles;System.IFormatProvider):byte">
				<signature>System.Byte.Parse(string;System.Globalization.NumberStyles;System.IFormatProvider):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Parse" uniqueID="Parse(string;System.IFormatProvider):byte">
				<signature>System.Byte.Parse(string;System.IFormatProvider):byte</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="TryParse" uniqueID="TryParse(string;System.Globalization.NumberStyles;System.Globalization.NumberFormatInfo;byte):bool">
				<signature>System.Byte.TryParse(string;System.Globalization.NumberStyles;System.Globalization.NumberFormatInfo;byte):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="TryParse" uniqueID="TryParse(string;System.Globalization.NumberStyles;System.IFormatProvider;byte):bool">
				<signature>System.Byte.TryParse(string;System.Globalization.NumberStyles;System.IFormatProvider;byte):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="TryParse" uniqueID="TryParse(string;byte):bool">
				<signature>System.Byte.TryParse(string;byte):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(byte):int">
				<signature>System.Byte.CompareTo(byte):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(object):int">
				<signature>System.Byte.CompareTo(object):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(byte):bool">
				<signature>System.Byte.Equals(byte):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Byte.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Byte.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeCode" uniqueID="GetTypeCode():System.TypeCode">
				<signature>System.Byte.GetTypeCode():System.TypeCode</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToBoolean" uniqueID="System.IConvertible.ToBoolean(System.IFormatProvider):bool">
				<signature>System.Byte.System.IConvertible.ToBoolean(System.IFormatProvider):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToByte" uniqueID="System.IConvertible.ToByte(System.IFormatProvider):byte">
				<signature>System.Byte.System.IConvertible.ToByte(System.IFormatProvider):byte</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToChar" uniqueID="System.IConvertible.ToChar(System.IFormatProvider):char">
				<signature>System.Byte.System.IConvertible.ToChar(System.IFormatProvider):char</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToDateTime" uniqueID="System.IConvertible.ToDateTime(System.IFormatProvider):System.DateTime">
				<signature>System.Byte.System.IConvertible.ToDateTime(System.IFormatProvider):System.DateTime</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToDecimal" uniqueID="System.IConvertible.ToDecimal(System.IFormatProvider):System.Decimal">
				<signature>System.Byte.System.IConvertible.ToDecimal(System.IFormatProvider):System.Decimal</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToDouble" uniqueID="System.IConvertible.ToDouble(System.IFormatProvider):double">
				<signature>System.Byte.System.IConvertible.ToDouble(System.IFormatProvider):double</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToInt16" uniqueID="System.IConvertible.ToInt16(System.IFormatProvider):short">
				<signature>System.Byte.System.IConvertible.ToInt16(System.IFormatProvider):short</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToInt32" uniqueID="System.IConvertible.ToInt32(System.IFormatProvider):int">
				<signature>System.Byte.System.IConvertible.ToInt32(System.IFormatProvider):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToInt64" uniqueID="System.IConvertible.ToInt64(System.IFormatProvider):long">
				<signature>System.Byte.System.IConvertible.ToInt64(System.IFormatProvider):long</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToSByte" uniqueID="System.IConvertible.ToSByte(System.IFormatProvider):sbyte">
				<signature>System.Byte.System.IConvertible.ToSByte(System.IFormatProvider):sbyte</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToSingle" uniqueID="System.IConvertible.ToSingle(System.IFormatProvider):float">
				<signature>System.Byte.System.IConvertible.ToSingle(System.IFormatProvider):float</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToType" uniqueID="System.IConvertible.ToType(System.Type;System.IFormatProvider):object">
				<signature>System.Byte.System.IConvertible.ToType(System.Type;System.IFormatProvider):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToUInt16" uniqueID="System.IConvertible.ToUInt16(System.IFormatProvider):unsigned short">
				<signature>System.Byte.System.IConvertible.ToUInt16(System.IFormatProvider):unsigned short</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToUInt32" uniqueID="System.IConvertible.ToUInt32(System.IFormatProvider):unsigned int">
				<signature>System.Byte.System.IConvertible.ToUInt32(System.IFormatProvider):unsigned int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToUInt64" uniqueID="System.IConvertible.ToUInt64(System.IFormatProvider):unsigned long">
				<signature>System.Byte.System.IConvertible.ToUInt64(System.IFormatProvider):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Byte.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString(System.IFormatProvider):string">
				<signature>System.Byte.ToString(System.IFormatProvider):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString(string):string">
				<signature>System.Byte.ToString(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString(string;System.IFormatProvider):string">
				<signature>System.Byte.ToString(string;System.IFormatProvider):string</signature>
			</method>
		</class>
		<class name="IConvertible" uniqueID="System.IConvertible">
			<method accessibility="Public" methodKind="Member" name="GetTypeCode" uniqueID="GetTypeCode():System.TypeCode">
				<signature>System.IConvertible.GetTypeCode():System.TypeCode</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToBoolean" uniqueID="ToBoolean(System.IFormatProvider):bool">
				<signature>System.IConvertible.ToBoolean(System.IFormatProvider):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToByte" uniqueID="ToByte(System.IFormatProvider):byte">
				<signature>System.IConvertible.ToByte(System.IFormatProvider):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToChar" uniqueID="ToChar(System.IFormatProvider):char">
				<signature>System.IConvertible.ToChar(System.IFormatProvider):char</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToDateTime" uniqueID="ToDateTime(System.IFormatProvider):System.DateTime">
				<signature>System.IConvertible.ToDateTime(System.IFormatProvider):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToDecimal" uniqueID="ToDecimal(System.IFormatProvider):System.Decimal">
				<signature>System.IConvertible.ToDecimal(System.IFormatProvider):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToDouble" uniqueID="ToDouble(System.IFormatProvider):double">
				<signature>System.IConvertible.ToDouble(System.IFormatProvider):double</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToInt16" uniqueID="ToInt16(System.IFormatProvider):short">
				<signature>System.IConvertible.ToInt16(System.IFormatProvider):short</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToInt32" uniqueID="ToInt32(System.IFormatProvider):int">
				<signature>System.IConvertible.ToInt32(System.IFormatProvider):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToInt64" uniqueID="ToInt64(System.IFormatProvider):long">
				<signature>System.IConvertible.ToInt64(System.IFormatProvider):long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToSByte" uniqueID="ToSByte(System.IFormatProvider):sbyte">
				<signature>System.IConvertible.ToSByte(System.IFormatProvider):sbyte</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToSingle" uniqueID="ToSingle(System.IFormatProvider):float">
				<signature>System.IConvertible.ToSingle(System.IFormatProvider):float</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString(System.IFormatProvider):string">
				<signature>System.IConvertible.ToString(System.IFormatProvider):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToType" uniqueID="ToType(System.Type;System.IFormatProvider):object">
				<signature>System.IConvertible.ToType(System.Type;System.IFormatProvider):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToUInt16" uniqueID="ToUInt16(System.IFormatProvider):unsigned short">
				<signature>System.IConvertible.ToUInt16(System.IFormatProvider):unsigned short</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToUInt32" uniqueID="ToUInt32(System.IFormatProvider):unsigned int">
				<signature>System.IConvertible.ToUInt32(System.IFormatProvider):unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToUInt64" uniqueID="ToUInt64(System.IFormatProvider):unsigned long">
				<signature>System.IConvertible.ToUInt64(System.IFormatProvider):unsigned long</signature>
			</method>
		</class>
		<class name="RuntimeTypeHandle" uniqueID="System.RuntimeTypeHandle">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.RuntimeTypeHandle.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CreateInstance" uniqueID="CreateInstance(System.RuntimeType;bool;bool;bool;System.RuntimeMethodHandle;bool):object">
				<signature>System.RuntimeTypeHandle.CreateInstance(System.RuntimeType;bool;bool;bool;System.RuntimeMethodHandle;bool):object</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetFirstIntroducedMethod" uniqueID="GetFirstIntroducedMethod(System.RuntimeTypeHandle):System.RuntimeMethodHandle">
				<signature>System.RuntimeTypeHandle.GetFirstIntroducedMethod(System.RuntimeTypeHandle):System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetNextIntroducedMethod" uniqueID="GetNextIntroducedMethod(System.RuntimeMethodHandle):System.RuntimeMethodHandle">
				<signature>System.RuntimeTypeHandle.GetNextIntroducedMethod(System.RuntimeMethodHandle):System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetTypeByName" uniqueID="GetTypeByName(string;bool;bool;bool;System.Threading.StackCrawlMark):System.RuntimeTypeHandle">
				<signature>System.RuntimeTypeHandle.GetTypeByName(string;bool;bool;bool;System.Threading.StackCrawlMark):System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetTypeByNameUsingCARules" uniqueID="GetTypeByNameUsingCARules(string;System.Reflection.Module):System.Type">
				<signature>System.RuntimeTypeHandle.GetTypeByNameUsingCARules(string;System.Reflection.Module):System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetTypeHelper" uniqueID="GetTypeHelper(native signed int;native signed int;int;native signed int;int):native signed int">
				<signature>System.RuntimeTypeHandle.GetTypeHelper(native signed int;native signed int;int;native signed int;int):native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="_GetTypeByName" uniqueID="_GetTypeByName(string;bool;bool;bool;System.Threading.StackCrawlMark;bool):void">
				<signature>System.RuntimeTypeHandle._GetTypeByName(string;bool;bool;bool;System.Threading.StackCrawlMark;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="_GetTypeByNameUsingCARules" uniqueID="_GetTypeByNameUsingCARules(string;native signed int):void">
				<signature>System.RuntimeTypeHandle._GetTypeByNameUsingCARules(string;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.RuntimeTypeHandle;object):bool">
				<signature>System.RuntimeTypeHandle.op_Equality(System.RuntimeTypeHandle;object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(object;System.RuntimeTypeHandle):bool">
				<signature>System.RuntimeTypeHandle.op_Equality(object;System.RuntimeTypeHandle):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.RuntimeTypeHandle;object):bool">
				<signature>System.RuntimeTypeHandle.op_Inequality(System.RuntimeTypeHandle;object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(object;System.RuntimeTypeHandle):bool">
				<signature>System.RuntimeTypeHandle.op_Inequality(object;System.RuntimeTypeHandle):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Allocate" uniqueID="Allocate():object">
				<signature>System.RuntimeTypeHandle.Allocate():object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CanCastTo" uniqueID="CanCastTo(System.RuntimeTypeHandle):bool">
				<signature>System.RuntimeTypeHandle.CanCastTo(System.RuntimeTypeHandle):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CanCastTo" uniqueID="CanCastTo(native signed int):bool">
				<signature>System.RuntimeTypeHandle.CanCastTo(native signed int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ConstructName" uniqueID="ConstructName(bool;bool;bool):string">
				<signature>System.RuntimeTypeHandle.ConstructName(bool;bool;bool):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ContainsGenericVariables" uniqueID="ContainsGenericVariables():bool">
				<signature>System.RuntimeTypeHandle.ContainsGenericVariables():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CreateCaInstance" uniqueID="CreateCaInstance(System.RuntimeMethodHandle):object">
				<signature>System.RuntimeTypeHandle.CreateCaInstance(System.RuntimeMethodHandle):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CreateInstanceForAnotherGenericParameter" uniqueID="CreateInstanceForAnotherGenericParameter(System.Type):object">
				<signature>System.RuntimeTypeHandle.CreateInstanceForAnotherGenericParameter(System.Type):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.RuntimeTypeHandle):bool">
				<signature>System.RuntimeTypeHandle.Equals(System.RuntimeTypeHandle):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.RuntimeTypeHandle.Equals(object):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FreeGCHandle" uniqueID="FreeGCHandle(native signed int):void">
				<signature>System.RuntimeTypeHandle.FreeGCHandle(native signed int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetArrayRank" uniqueID="GetArrayRank():int">
				<signature>System.RuntimeTypeHandle.GetArrayRank():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetAssemblyHandle" uniqueID="GetAssemblyHandle():System.AssemblyHandle">
				<signature>System.RuntimeTypeHandle.GetAssemblyHandle():System.AssemblyHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetAttributes" uniqueID="GetAttributes():System.Reflection.TypeAttributes">
				<signature>System.RuntimeTypeHandle.GetAttributes():System.Reflection.TypeAttributes</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetBaseTypeHandle" uniqueID="GetBaseTypeHandle():System.RuntimeTypeHandle">
				<signature>System.RuntimeTypeHandle.GetBaseTypeHandle():System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetCanonicalHandle" uniqueID="GetCanonicalHandle():System.RuntimeTypeHandle">
				<signature>System.RuntimeTypeHandle.GetCanonicalHandle():System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetConstraints" uniqueID="GetConstraints():System.RuntimeTypeHandle[]">
				<signature>System.RuntimeTypeHandle.GetConstraints():System.RuntimeTypeHandle[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetCorElementType" uniqueID="GetCorElementType():System.Reflection.CorElementType">
				<signature>System.RuntimeTypeHandle.GetCorElementType():System.Reflection.CorElementType</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetDeclaringMethod" uniqueID="GetDeclaringMethod():System.RuntimeMethodHandle">
				<signature>System.RuntimeTypeHandle.GetDeclaringMethod():System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetDeclaringType" uniqueID="GetDeclaringType():System.RuntimeTypeHandle">
				<signature>System.RuntimeTypeHandle.GetDeclaringType():System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetDefaultConstructor" uniqueID="GetDefaultConstructor():System.RuntimeMethodHandle">
				<signature>System.RuntimeTypeHandle.GetDefaultConstructor():System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetElementType" uniqueID="GetElementType():System.RuntimeTypeHandle">
				<signature>System.RuntimeTypeHandle.GetElementType():System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetFields" uniqueID="GetFields(int;int):bool">
				<signature>System.RuntimeTypeHandle.GetFields(int;int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetFirstSlotForInterface" uniqueID="GetFirstSlotForInterface(System.RuntimeTypeHandle):int">
				<signature>System.RuntimeTypeHandle.GetFirstSlotForInterface(System.RuntimeTypeHandle):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetFirstSlotForInterface" uniqueID="GetFirstSlotForInterface(native signed int):int">
				<signature>System.RuntimeTypeHandle.GetFirstSlotForInterface(native signed int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetGCHandle" uniqueID="GetGCHandle(System.Runtime.InteropServices.GCHandleType):native signed int">
				<signature>System.RuntimeTypeHandle.GetGCHandle(System.Runtime.InteropServices.GCHandleType):native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetGenericTypeDefinition" uniqueID="GetGenericTypeDefinition():System.RuntimeTypeHandle">
				<signature>System.RuntimeTypeHandle.GetGenericTypeDefinition():System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetGenericVariableIndex" uniqueID="GetGenericVariableIndex():int">
				<signature>System.RuntimeTypeHandle.GetGenericVariableIndex():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.RuntimeTypeHandle.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetInstantiation" uniqueID="GetInstantiation():System.RuntimeTypeHandle[]">
				<signature>System.RuntimeTypeHandle.GetInstantiation():System.RuntimeTypeHandle[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetInterfaceMethodImplementationSlot" uniqueID="GetInterfaceMethodImplementationSlot(System.RuntimeTypeHandle;System.RuntimeMethodHandle):int">
				<signature>System.RuntimeTypeHandle.GetInterfaceMethodImplementationSlot(System.RuntimeTypeHandle;System.RuntimeMethodHandle):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetInterfaceMethodImplementationSlot" uniqueID="GetInterfaceMethodImplementationSlot(native signed int;native signed int):int">
				<signature>System.RuntimeTypeHandle.GetInterfaceMethodImplementationSlot(native signed int;native signed int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetInterfaceMethodSlots" uniqueID="GetInterfaceMethodSlots():int">
				<signature>System.RuntimeTypeHandle.GetInterfaceMethodSlots():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetInterfaces" uniqueID="GetInterfaces():System.RuntimeTypeHandle[]">
				<signature>System.RuntimeTypeHandle.GetInterfaces():System.RuntimeTypeHandle[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMethodAt" uniqueID="GetMethodAt(int):System.RuntimeMethodHandle">
				<signature>System.RuntimeTypeHandle.GetMethodAt(int):System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMethodFromToken" uniqueID="GetMethodFromToken(int):System.RuntimeMethodHandle">
				<signature>System.RuntimeTypeHandle.GetMethodFromToken(int):System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetModuleHandle" uniqueID="GetModuleHandle():System.ModuleHandle">
				<signature>System.RuntimeTypeHandle.GetModuleHandle():System.ModuleHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetNumVirtuals" uniqueID="GetNumVirtuals():int">
				<signature>System.RuntimeTypeHandle.GetNumVirtuals():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetObjectData" uniqueID="GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.RuntimeTypeHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetRuntimeType" uniqueID="GetRuntimeType():System.RuntimeType">
				<signature>System.RuntimeTypeHandle.GetRuntimeType():System.RuntimeType</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetToken" uniqueID="GetToken():int">
				<signature>System.RuntimeTypeHandle.GetToken():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetUtf8Name" uniqueID="GetUtf8Name():System.Utf8String">
				<signature>System.RuntimeTypeHandle.GetUtf8Name():System.Utf8String</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="HasInstantiation" uniqueID="HasInstantiation():bool">
				<signature>System.RuntimeTypeHandle.HasInstantiation():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="HasProxyAttribute" uniqueID="HasProxyAttribute():bool">
				<signature>System.RuntimeTypeHandle.HasProxyAttribute():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Instantiate" uniqueID="Instantiate(System.RuntimeTypeHandle[]):System.RuntimeTypeHandle">
				<signature>System.RuntimeTypeHandle.Instantiate(System.RuntimeTypeHandle[]):System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsComObject" uniqueID="IsComObject(bool):bool">
				<signature>System.RuntimeTypeHandle.IsComObject(bool):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsContextful" uniqueID="IsContextful():bool">
				<signature>System.RuntimeTypeHandle.IsContextful():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsGenericTypeDefinition" uniqueID="IsGenericTypeDefinition():bool">
				<signature>System.RuntimeTypeHandle.IsGenericTypeDefinition():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsGenericVariable" uniqueID="IsGenericVariable():bool">
				<signature>System.RuntimeTypeHandle.IsGenericVariable():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsInstanceOfType" uniqueID="IsInstanceOfType(object):bool">
				<signature>System.RuntimeTypeHandle.IsInstanceOfType(object):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsInterface" uniqueID="IsInterface():bool">
				<signature>System.RuntimeTypeHandle.IsInterface():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsNullHandle" uniqueID="IsNullHandle():bool">
				<signature>System.RuntimeTypeHandle.IsNullHandle():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsVisible" uniqueID="IsVisible():bool">
				<signature>System.RuntimeTypeHandle.IsVisible():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsVisibleFromModule" uniqueID="IsVisibleFromModule(System.ModuleHandle):bool">
				<signature>System.RuntimeTypeHandle.IsVisibleFromModule(System.ModuleHandle):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MakeArray" uniqueID="MakeArray(int):System.RuntimeTypeHandle">
				<signature>System.RuntimeTypeHandle.MakeArray(int):System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MakeByRef" uniqueID="MakeByRef():System.RuntimeTypeHandle">
				<signature>System.RuntimeTypeHandle.MakeByRef():System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MakePointer" uniqueID="MakePointer():System.RuntimeTypeHandle">
				<signature>System.RuntimeTypeHandle.MakePointer():System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MakeSZArray" uniqueID="MakeSZArray():System.RuntimeTypeHandle">
				<signature>System.RuntimeTypeHandle.MakeSZArray():System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="RuntimeTypeHandle" uniqueID="RuntimeTypeHandle(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.RuntimeTypeHandle.RuntimeTypeHandle(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RuntimeTypeHandle" uniqueID="RuntimeTypeHandle(void):void">
				<signature>System.RuntimeTypeHandle.RuntimeTypeHandle(void):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SatisfiesConstraints" uniqueID="SatisfiesConstraints(System.RuntimeTypeHandle[];System.RuntimeTypeHandle[];System.RuntimeTypeHandle):bool">
				<signature>System.RuntimeTypeHandle.SatisfiesConstraints(System.RuntimeTypeHandle[];System.RuntimeTypeHandle[];System.RuntimeTypeHandle):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SupportsInterface" uniqueID="SupportsInterface(object):bool">
				<signature>System.RuntimeTypeHandle.SupportsInterface(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_GetAssemblyHandle" uniqueID="_GetAssemblyHandle():void">
				<signature>System.RuntimeTypeHandle._GetAssemblyHandle():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_GetBaseTypeHandle" uniqueID="_GetBaseTypeHandle():void">
				<signature>System.RuntimeTypeHandle._GetBaseTypeHandle():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_GetDeclaringMethod" uniqueID="_GetDeclaringMethod():void">
				<signature>System.RuntimeTypeHandle._GetDeclaringMethod():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_GetDefaultConstructor" uniqueID="_GetDefaultConstructor():void">
				<signature>System.RuntimeTypeHandle._GetDefaultConstructor():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_GetElementType" uniqueID="_GetElementType():void">
				<signature>System.RuntimeTypeHandle._GetElementType():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_GetGenericTypeDefinition" uniqueID="_GetGenericTypeDefinition():void">
				<signature>System.RuntimeTypeHandle._GetGenericTypeDefinition():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_GetMethodAt" uniqueID="_GetMethodAt(int):void">
				<signature>System.RuntimeTypeHandle._GetMethodAt(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_GetMethodFromToken" uniqueID="_GetMethodFromToken(int):void">
				<signature>System.RuntimeTypeHandle._GetMethodFromToken(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_GetModuleHandle" uniqueID="_GetModuleHandle():void">
				<signature>System.RuntimeTypeHandle._GetModuleHandle():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_GetUtf8Name" uniqueID="_GetUtf8Name():void">
				<signature>System.RuntimeTypeHandle._GetUtf8Name():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_Instantiate" uniqueID="_Instantiate(System.RuntimeTypeHandle[]):void">
				<signature>System.RuntimeTypeHandle._Instantiate(System.RuntimeTypeHandle[]):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="_IsVisibleFromModule" uniqueID="_IsVisibleFromModule(native signed int):bool">
				<signature>System.RuntimeTypeHandle._IsVisibleFromModule(native signed int):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_MakeArray" uniqueID="_MakeArray(int):void">
				<signature>System.RuntimeTypeHandle._MakeArray(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_MakeByRef" uniqueID="_MakeByRef():void">
				<signature>System.RuntimeTypeHandle._MakeByRef():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_MakePointer" uniqueID="_MakePointer():void">
				<signature>System.RuntimeTypeHandle._MakePointer():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_MakeSZArray" uniqueID="_MakeSZArray():void">
				<signature>System.RuntimeTypeHandle._MakeSZArray():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IntroducedMethods" uniqueID="get_IntroducedMethods():System.RuntimeTypeHandle+IntroducedMethodEnumerator">
				<signature>System.RuntimeTypeHandle.get_IntroducedMethods():System.RuntimeTypeHandle+IntroducedMethodEnumerator</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Value" uniqueID="get_Value():native signed int">
				<signature>System.RuntimeTypeHandle.get_Value():native signed int</signature>
			</method>
		</class>
		<class name="Variant" uniqueID="System.Variant">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Variant.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InitVariant" uniqueID="InitVariant():void">
				<signature>System.Variant.InitVariant():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="MarshalHelperCastVariant" uniqueID="MarshalHelperCastVariant(object;int;System.Variant):void">
				<signature>System.Variant.MarshalHelperCastVariant(object;int;System.Variant):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="MarshalHelperConvertObjectToVariant" uniqueID="MarshalHelperConvertObjectToVariant(object;System.Variant):void">
				<signature>System.Variant.MarshalHelperConvertObjectToVariant(object;System.Variant):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="MarshalHelperConvertVariantToObject" uniqueID="MarshalHelperConvertVariantToObject(System.Variant):object">
				<signature>System.Variant.MarshalHelperConvertVariantToObject(System.Variant):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="BoxEnum" uniqueID="BoxEnum():object">
				<signature>System.Variant.BoxEnum():object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetI8FromVar" uniqueID="GetI8FromVar():long">
				<signature>System.Variant.GetI8FromVar():long</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetR4FromVar" uniqueID="GetR4FromVar():float">
				<signature>System.Variant.GetR4FromVar():float</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetR8FromVar" uniqueID="GetR8FromVar():double">
				<signature>System.Variant.GetR8FromVar():double</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetFieldsObject" uniqueID="SetFieldsObject(object):void">
				<signature>System.Variant.SetFieldsObject(object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetFieldsR4" uniqueID="SetFieldsR4(float):void">
				<signature>System.Variant.SetFieldsR4(float):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetFieldsR8" uniqueID="SetFieldsR8(double):void">
				<signature>System.Variant.SetFieldsR8(double):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToObject" uniqueID="ToObject():object">
				<signature>System.Variant.ToObject():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Variant" uniqueID="Variant(System.DateTime):void">
				<signature>System.Variant.Variant(System.DateTime):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Variant" uniqueID="Variant(System.Decimal):void">
				<signature>System.Variant.Variant(System.Decimal):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Variant" uniqueID="Variant(bool):void">
				<signature>System.Variant.Variant(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Variant" uniqueID="Variant(byte):void">
				<signature>System.Variant.Variant(byte):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Variant" uniqueID="Variant(char):void">
				<signature>System.Variant.Variant(char):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Variant" uniqueID="Variant(double):void">
				<signature>System.Variant.Variant(double):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Variant" uniqueID="Variant(float):void">
				<signature>System.Variant.Variant(float):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Variant" uniqueID="Variant(int):void">
				<signature>System.Variant.Variant(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Variant" uniqueID="Variant(int;object;int;int):void">
				<signature>System.Variant.Variant(int;object;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Variant" uniqueID="Variant(long):void">
				<signature>System.Variant.Variant(long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Variant" uniqueID="Variant(object):void">
				<signature>System.Variant.Variant(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Variant" uniqueID="Variant(sbyte):void">
				<signature>System.Variant.Variant(sbyte):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Variant" uniqueID="Variant(short):void">
				<signature>System.Variant.Variant(short):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Variant" uniqueID="Variant(unsigned int):void">
				<signature>System.Variant.Variant(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Variant" uniqueID="Variant(unsigned long):void">
				<signature>System.Variant.Variant(unsigned long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Variant" uniqueID="Variant(unsigned short):void">
				<signature>System.Variant.Variant(unsigned short):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Variant" uniqueID="Variant(void;System.Type):void">
				<signature>System.Variant.Variant(void;System.Type):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_CVType" uniqueID="get_CVType():int">
				<signature>System.Variant.get_CVType():int</signature>
			</method>
		</class>
		<class name="Action&lt;System.RuntimeType&gt;" uniqueID="System.Action&lt;System.RuntimeType&gt;">
			<method accessibility="Public" methodKind="Member" name="Action&lt;System.RuntimeType&gt;" uniqueID="Action&lt;System.RuntimeType&gt;(object;native signed int):void">
				<signature>System.Action&lt;System.RuntimeType&gt;.Action&lt;System.RuntimeType&gt;(object;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(System.RuntimeType;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Action&lt;System.RuntimeType&gt;.BeginInvoke(System.RuntimeType;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):void">
				<signature>System.Action&lt;System.RuntimeType&gt;.EndInvoke(System.IAsyncResult):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(System.RuntimeType):void">
				<signature>System.Action&lt;System.RuntimeType&gt;.Invoke(System.RuntimeType):void</signature>
			</method>
		</class>
		<class name="Array" uniqueID="System.Array">
			<method accessibility="Public" methodKind="Static" name="BinarySearch" uniqueID="BinarySearch(System.Array;int;int;object):int">
				<signature>System.Array.BinarySearch(System.Array;int;int;object):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="BinarySearch" uniqueID="BinarySearch(System.Array;int;int;object;System.Collections.IComparer):int">
				<signature>System.Array.BinarySearch(System.Array;int;int;object;System.Collections.IComparer):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="BinarySearch" uniqueID="BinarySearch(System.Array;object):int">
				<signature>System.Array.BinarySearch(System.Array;object):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="BinarySearch" uniqueID="BinarySearch(System.Array;object;System.Collections.IComparer):int">
				<signature>System.Array.BinarySearch(System.Array;object;System.Collections.IComparer):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Clear" uniqueID="Clear(System.Array;int;int):void">
				<signature>System.Array.Clear(System.Array;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ConstrainedCopy" uniqueID="ConstrainedCopy(System.Array;int;System.Array;int;int):void">
				<signature>System.Array.ConstrainedCopy(System.Array;int;System.Array;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Copy" uniqueID="Copy(System.Array;System.Array;int):void">
				<signature>System.Array.Copy(System.Array;System.Array;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Copy" uniqueID="Copy(System.Array;System.Array;long):void">
				<signature>System.Array.Copy(System.Array;System.Array;long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Copy" uniqueID="Copy(System.Array;int;System.Array;int;int):void">
				<signature>System.Array.Copy(System.Array;int;System.Array;int;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="Copy" uniqueID="Copy(System.Array;int;System.Array;int;int;bool):void">
				<signature>System.Array.Copy(System.Array;int;System.Array;int;int;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Copy" uniqueID="Copy(System.Array;long;System.Array;long;long):void">
				<signature>System.Array.Copy(System.Array;long;System.Array;long;long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CreateInstance" uniqueID="CreateInstance(System.Type;int):System.Array">
				<signature>System.Array.CreateInstance(System.Type;int):System.Array</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CreateInstance" uniqueID="CreateInstance(System.Type;int;int):System.Array">
				<signature>System.Array.CreateInstance(System.Type;int;int):System.Array</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CreateInstance" uniqueID="CreateInstance(System.Type;int;int;int):System.Array">
				<signature>System.Array.CreateInstance(System.Type;int;int;int):System.Array</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CreateInstance" uniqueID="CreateInstance(System.Type;int[]):System.Array">
				<signature>System.Array.CreateInstance(System.Type;int[]):System.Array</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CreateInstance" uniqueID="CreateInstance(System.Type;int[];int[]):System.Array">
				<signature>System.Array.CreateInstance(System.Type;int[];int[]):System.Array</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CreateInstance" uniqueID="CreateInstance(System.Type;long[]):System.Array">
				<signature>System.Array.CreateInstance(System.Type;long[]):System.Array</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetMedian" uniqueID="GetMedian(int;int):int">
				<signature>System.Array.GetMedian(int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IndexOf" uniqueID="IndexOf(System.Array;object):int">
				<signature>System.Array.IndexOf(System.Array;object):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IndexOf" uniqueID="IndexOf(System.Array;object;int):int">
				<signature>System.Array.IndexOf(System.Array;object;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IndexOf" uniqueID="IndexOf(System.Array;object;int;int):int">
				<signature>System.Array.IndexOf(System.Array;object;int;int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalCreate" uniqueID="InternalCreate(void;int;int;int):System.Array">
				<signature>System.Array.InternalCreate(void;int;int;int):System.Array</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalSetValue" uniqueID="InternalSetValue(void;object):void">
				<signature>System.Array.InternalSetValue(void;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="LastIndexOf" uniqueID="LastIndexOf(System.Array;object):int">
				<signature>System.Array.LastIndexOf(System.Array;object):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="LastIndexOf" uniqueID="LastIndexOf(System.Array;object;int):int">
				<signature>System.Array.LastIndexOf(System.Array;object;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="LastIndexOf" uniqueID="LastIndexOf(System.Array;object;int;int):int">
				<signature>System.Array.LastIndexOf(System.Array;object;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Reverse" uniqueID="Reverse(System.Array):void">
				<signature>System.Array.Reverse(System.Array):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Reverse" uniqueID="Reverse(System.Array;int;int):void">
				<signature>System.Array.Reverse(System.Array;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Sort" uniqueID="Sort(System.Array):void">
				<signature>System.Array.Sort(System.Array):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Sort" uniqueID="Sort(System.Array;System.Array):void">
				<signature>System.Array.Sort(System.Array;System.Array):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Sort" uniqueID="Sort(System.Array;System.Array;System.Collections.IComparer):void">
				<signature>System.Array.Sort(System.Array;System.Array;System.Collections.IComparer):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Sort" uniqueID="Sort(System.Array;System.Array;int;int):void">
				<signature>System.Array.Sort(System.Array;System.Array;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Sort" uniqueID="Sort(System.Array;System.Array;int;int;System.Collections.IComparer):void">
				<signature>System.Array.Sort(System.Array;System.Array;int;int;System.Collections.IComparer):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Sort" uniqueID="Sort(System.Array;System.Collections.IComparer):void">
				<signature>System.Array.Sort(System.Array;System.Collections.IComparer):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Sort" uniqueID="Sort(System.Array;int;int):void">
				<signature>System.Array.Sort(System.Array;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Sort" uniqueID="Sort(System.Array;int;int;System.Collections.IComparer):void">
				<signature>System.Array.Sort(System.Array;int;int;System.Collections.IComparer):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="TrySZBinarySearch" uniqueID="TrySZBinarySearch(System.Array;int;int;object;int):bool">
				<signature>System.Array.TrySZBinarySearch(System.Array;int;int;object;int):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="TrySZIndexOf" uniqueID="TrySZIndexOf(System.Array;int;int;object;int):bool">
				<signature>System.Array.TrySZIndexOf(System.Array;int;int;object;int):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="TrySZLastIndexOf" uniqueID="TrySZLastIndexOf(System.Array;int;int;object;int):bool">
				<signature>System.Array.TrySZLastIndexOf(System.Array;int;int;object;int):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="TrySZReverse" uniqueID="TrySZReverse(System.Array;int;int):bool">
				<signature>System.Array.TrySZReverse(System.Array;int;int):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="TrySZSort" uniqueID="TrySZSort(System.Array;System.Array;int;int):bool">
				<signature>System.Array.TrySZSort(System.Array;System.Array;int;int):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Array" uniqueID="Array():void">
				<signature>System.Array.Array():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone():object">
				<signature>System.Array.Clone():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Array;int):void">
				<signature>System.Array.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Array;long):void">
				<signature>System.Array.CopyTo(System.Array;long):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetDataPtrOffsetInternal" uniqueID="GetDataPtrOffsetInternal():int">
				<signature>System.Array.GetDataPtrOffsetInternal():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Array.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetLength" uniqueID="GetLength(int):int">
				<signature>System.Array.GetLength(int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetLongLength" uniqueID="GetLongLength(int):long">
				<signature>System.Array.GetLongLength(int):long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetLowerBound" uniqueID="GetLowerBound(int):int">
				<signature>System.Array.GetLowerBound(int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetUpperBound" uniqueID="GetUpperBound(int):int">
				<signature>System.Array.GetUpperBound(int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValue" uniqueID="GetValue(int):object">
				<signature>System.Array.GetValue(int):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValue" uniqueID="GetValue(int;int):object">
				<signature>System.Array.GetValue(int;int):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValue" uniqueID="GetValue(int;int;int):object">
				<signature>System.Array.GetValue(int;int;int):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValue" uniqueID="GetValue(int[]):object">
				<signature>System.Array.GetValue(int[]):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValue" uniqueID="GetValue(long):object">
				<signature>System.Array.GetValue(long):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValue" uniqueID="GetValue(long;long):object">
				<signature>System.Array.GetValue(long;long):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValue" uniqueID="GetValue(long;long;long):object">
				<signature>System.Array.GetValue(long;long;long):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValue" uniqueID="GetValue(long[]):object">
				<signature>System.Array.GetValue(long[]):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Initialize" uniqueID="Initialize():void">
				<signature>System.Array.Initialize():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="InternalGetReference" uniqueID="InternalGetReference(void;int;int):void">
				<signature>System.Array.InternalGetReference(void;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetValue" uniqueID="SetValue(object;int):void">
				<signature>System.Array.SetValue(object;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetValue" uniqueID="SetValue(object;int;int):void">
				<signature>System.Array.SetValue(object;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetValue" uniqueID="SetValue(object;int;int;int):void">
				<signature>System.Array.SetValue(object;int;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetValue" uniqueID="SetValue(object;int[]):void">
				<signature>System.Array.SetValue(object;int[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetValue" uniqueID="SetValue(object;long):void">
				<signature>System.Array.SetValue(object;long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetValue" uniqueID="SetValue(object;long;long):void">
				<signature>System.Array.SetValue(object;long;long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetValue" uniqueID="SetValue(object;long;long;long):void">
				<signature>System.Array.SetValue(object;long;long;long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetValue" uniqueID="SetValue(object;long[]):void">
				<signature>System.Array.SetValue(object;long[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_Count" uniqueID="System.Collections.ICollection.get_Count():int">
				<signature>System.Array.System.Collections.ICollection.get_Count():int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Add" uniqueID="System.Collections.IList.Add(object):int">
				<signature>System.Array.System.Collections.IList.Add(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Clear" uniqueID="System.Collections.IList.Clear():void">
				<signature>System.Array.System.Collections.IList.Clear():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Contains" uniqueID="System.Collections.IList.Contains(object):bool">
				<signature>System.Array.System.Collections.IList.Contains(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.IndexOf" uniqueID="System.Collections.IList.IndexOf(object):int">
				<signature>System.Array.System.Collections.IList.IndexOf(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Insert" uniqueID="System.Collections.IList.Insert(int;object):void">
				<signature>System.Array.System.Collections.IList.Insert(int;object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Remove" uniqueID="System.Collections.IList.Remove(object):void">
				<signature>System.Array.System.Collections.IList.Remove(object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.RemoveAt" uniqueID="System.Collections.IList.RemoveAt(int):void">
				<signature>System.Array.System.Collections.IList.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_Item" uniqueID="System.Collections.IList.get_Item(int):object">
				<signature>System.Array.System.Collections.IList.get_Item(int):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.set_Item" uniqueID="System.Collections.IList.set_Item(int;object):void">
				<signature>System.Array.System.Collections.IList.set_Item(int;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFixedSize" uniqueID="get_IsFixedSize():bool">
				<signature>System.Array.get_IsFixedSize():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsReadOnly" uniqueID="get_IsReadOnly():bool">
				<signature>System.Array.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSynchronized" uniqueID="get_IsSynchronized():bool">
				<signature>System.Array.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Length" uniqueID="get_Length():int">
				<signature>System.Array.get_Length():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_LongLength" uniqueID="get_LongLength():long">
				<signature>System.Array.get_LongLength():long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Rank" uniqueID="get_Rank():int">
				<signature>System.Array.get_Rank():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SyncRoot" uniqueID="get_SyncRoot():object">
				<signature>System.Array.get_SyncRoot():object</signature>
			</method>
		</class>
		<class name="RuntimeMethodHandle" uniqueID="System.RuntimeMethodHandle">
			<method accessibility="Protected" methodKind="Static" name="GetCurrentMethod" uniqueID="GetCurrentMethod(System.Threading.StackCrawlMark):System.RuntimeMethodHandle">
				<signature>System.RuntimeMethodHandle.GetCurrentMethod(System.Threading.StackCrawlMark):System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_GetCurrentMethod" uniqueID="_GetCurrentMethod(System.Threading.StackCrawlMark):void">
				<signature>System.RuntimeMethodHandle._GetCurrentMethod(System.Threading.StackCrawlMark):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_EmptyHandle" uniqueID="get_EmptyHandle():System.RuntimeMethodHandle">
				<signature>System.RuntimeMethodHandle.get_EmptyHandle():System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.RuntimeMethodHandle;System.RuntimeMethodHandle):bool">
				<signature>System.RuntimeMethodHandle.op_Equality(System.RuntimeMethodHandle;System.RuntimeMethodHandle):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.RuntimeMethodHandle;System.RuntimeMethodHandle):bool">
				<signature>System.RuntimeMethodHandle.op_Inequality(System.RuntimeMethodHandle;System.RuntimeMethodHandle):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckLinktimeDemands" uniqueID="CheckLinktimeDemands(System.Reflection.Module;int):void">
				<signature>System.RuntimeMethodHandle.CheckLinktimeDemands(System.Reflection.Module;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ConstructInstantiation" uniqueID="ConstructInstantiation():string">
				<signature>System.RuntimeMethodHandle.ConstructInstantiation():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Destroy" uniqueID="Destroy():void">
				<signature>System.RuntimeMethodHandle.Destroy():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.RuntimeMethodHandle):bool">
				<signature>System.RuntimeMethodHandle.Equals(System.RuntimeMethodHandle):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.RuntimeMethodHandle.Equals(object):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetAttributes" uniqueID="GetAttributes():System.Reflection.MethodAttributes">
				<signature>System.RuntimeMethodHandle.GetAttributes():System.Reflection.MethodAttributes</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetDeclaringType" uniqueID="GetDeclaringType():System.RuntimeTypeHandle">
				<signature>System.RuntimeMethodHandle.GetDeclaringType():System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFunctionPointer" uniqueID="GetFunctionPointer():native signed int">
				<signature>System.RuntimeMethodHandle.GetFunctionPointer():native signed int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.RuntimeMethodHandle.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetImplAttributes" uniqueID="GetImplAttributes():System.Reflection.MethodImplAttributes">
				<signature>System.RuntimeMethodHandle.GetImplAttributes():System.Reflection.MethodImplAttributes</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetInstantiatingStub" uniqueID="GetInstantiatingStub(System.RuntimeTypeHandle;System.RuntimeTypeHandle[]):System.RuntimeMethodHandle">
				<signature>System.RuntimeMethodHandle.GetInstantiatingStub(System.RuntimeTypeHandle;System.RuntimeTypeHandle[]):System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetInstantiatingStubIfNeeded" uniqueID="GetInstantiatingStubIfNeeded(System.RuntimeTypeHandle):System.RuntimeMethodHandle">
				<signature>System.RuntimeMethodHandle.GetInstantiatingStubIfNeeded(System.RuntimeTypeHandle):System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMethodBody" uniqueID="GetMethodBody(System.RuntimeTypeHandle):System.Reflection.MethodBody">
				<signature>System.RuntimeMethodHandle.GetMethodBody(System.RuntimeTypeHandle):System.Reflection.MethodBody</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMethodDef" uniqueID="GetMethodDef():int">
				<signature>System.RuntimeMethodHandle.GetMethodDef():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMethodFromCanonical" uniqueID="GetMethodFromCanonical(System.RuntimeTypeHandle):System.RuntimeMethodHandle">
				<signature>System.RuntimeMethodHandle.GetMethodFromCanonical(System.RuntimeTypeHandle):System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMethodInstantiation" uniqueID="GetMethodInstantiation():System.RuntimeTypeHandle[]">
				<signature>System.RuntimeMethodHandle.GetMethodInstantiation():System.RuntimeTypeHandle[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetName" uniqueID="GetName():string">
				<signature>System.RuntimeMethodHandle.GetName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetObjectData" uniqueID="GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.RuntimeMethodHandle.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetResolver" uniqueID="GetResolver():System.Resolver">
				<signature>System.RuntimeMethodHandle.GetResolver():System.Resolver</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetSlot" uniqueID="GetSlot():int">
				<signature>System.RuntimeMethodHandle.GetSlot():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetTypicalMethodDefinition" uniqueID="GetTypicalMethodDefinition():System.RuntimeMethodHandle">
				<signature>System.RuntimeMethodHandle.GetTypicalMethodDefinition():System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetUnboxingStub" uniqueID="GetUnboxingStub():System.RuntimeMethodHandle">
				<signature>System.RuntimeMethodHandle.GetUnboxingStub():System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetUtf8Name" uniqueID="GetUtf8Name():System.Utf8String">
				<signature>System.RuntimeMethodHandle.GetUtf8Name():System.Utf8String</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="HasMethodInstantiation" uniqueID="HasMethodInstantiation():bool">
				<signature>System.RuntimeMethodHandle.HasMethodInstantiation():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InvokeConstructor" uniqueID="InvokeConstructor(object[];System.SignatureStruct;System.RuntimeTypeHandle):object">
				<signature>System.RuntimeMethodHandle.InvokeConstructor(object[];System.SignatureStruct;System.RuntimeTypeHandle):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InvokeMethodFast" uniqueID="InvokeMethodFast(object;object[];System.Signature;System.Reflection.MethodAttributes;System.RuntimeTypeHandle):object">
				<signature>System.RuntimeMethodHandle.InvokeMethodFast(object;object[];System.Signature;System.Reflection.MethodAttributes;System.RuntimeTypeHandle):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsConstructor" uniqueID="IsConstructor():bool">
				<signature>System.RuntimeMethodHandle.IsConstructor():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsDynamicMethod" uniqueID="IsDynamicMethod():bool">
				<signature>System.RuntimeMethodHandle.IsDynamicMethod():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsGenericMethodDefinition" uniqueID="IsGenericMethodDefinition():bool">
				<signature>System.RuntimeMethodHandle.IsGenericMethodDefinition():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsILStub" uniqueID="IsILStub():bool">
				<signature>System.RuntimeMethodHandle.IsILStub():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsNullHandle" uniqueID="IsNullHandle():bool">
				<signature>System.RuntimeMethodHandle.IsNullHandle():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsVisibleFromModule" uniqueID="IsVisibleFromModule(System.Reflection.Module):bool">
				<signature>System.RuntimeMethodHandle.IsVisibleFromModule(System.Reflection.Module):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsVisibleFromType" uniqueID="IsVisibleFromType(System.RuntimeTypeHandle):bool">
				<signature>System.RuntimeMethodHandle.IsVisibleFromType(System.RuntimeTypeHandle):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="RuntimeMethodHandle" uniqueID="RuntimeMethodHandle(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.RuntimeMethodHandle.RuntimeMethodHandle(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RuntimeMethodHandle" uniqueID="RuntimeMethodHandle(native signed int):void">
				<signature>System.RuntimeMethodHandle.RuntimeMethodHandle(native signed int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RuntimeMethodHandle" uniqueID="RuntimeMethodHandle(void):void">
				<signature>System.RuntimeMethodHandle.RuntimeMethodHandle(void):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SerializationInvoke" uniqueID="SerializationInvoke(object;System.SignatureStruct;System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.RuntimeMethodHandle.SerializationInvoke(object;System.SignatureStruct;System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="StripMethodInstantiation" uniqueID="StripMethodInstantiation():System.RuntimeMethodHandle">
				<signature>System.RuntimeMethodHandle.StripMethodInstantiation():System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_CheckLinktimeDemands" uniqueID="_CheckLinktimeDemands(void;int):void">
				<signature>System.RuntimeMethodHandle._CheckLinktimeDemands(void;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="_GetMethodBody" uniqueID="_GetMethodBody(native signed int):System.Reflection.MethodBody">
				<signature>System.RuntimeMethodHandle._GetMethodBody(native signed int):System.Reflection.MethodBody</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_GetTypicalMethodDefinition" uniqueID="_GetTypicalMethodDefinition():void">
				<signature>System.RuntimeMethodHandle._GetTypicalMethodDefinition():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_GetUtf8Name" uniqueID="_GetUtf8Name():void">
				<signature>System.RuntimeMethodHandle._GetUtf8Name():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_InvokeConstructor" uniqueID="_InvokeConstructor(object[];System.SignatureStruct;native signed int):object">
				<signature>System.RuntimeMethodHandle._InvokeConstructor(object[];System.SignatureStruct;native signed int):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_InvokeMethodFast" uniqueID="_InvokeMethodFast(object;object[];System.SignatureStruct;System.Reflection.MethodAttributes;System.RuntimeTypeHandle):object">
				<signature>System.RuntimeMethodHandle._InvokeMethodFast(object;object[];System.SignatureStruct;System.Reflection.MethodAttributes;System.RuntimeTypeHandle):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_IsVisibleFromModule" uniqueID="_IsVisibleFromModule(void):bool">
				<signature>System.RuntimeMethodHandle._IsVisibleFromModule(void):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_IsVisibleFromType" uniqueID="_IsVisibleFromType(native signed int):bool">
				<signature>System.RuntimeMethodHandle._IsVisibleFromType(native signed int):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_SerializationInvoke" uniqueID="_SerializationInvoke(object;System.SignatureStruct;System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.RuntimeMethodHandle._SerializationInvoke(object;System.SignatureStruct;System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_StripMethodInstantiation" uniqueID="_StripMethodInstantiation():void">
				<signature>System.RuntimeMethodHandle._StripMethodInstantiation():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Value" uniqueID="get_Value():native signed int">
				<signature>System.RuntimeMethodHandle.get_Value():native signed int</signature>
			</method>
		</class>
		<class name="RuntimeType" uniqueID="System.RuntimeType">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.RuntimeType.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="AllocateObjectForByRef" uniqueID="AllocateObjectForByRef(System.RuntimeTypeHandle;object):object">
				<signature>System.RuntimeType.AllocateObjectForByRef(System.RuntimeTypeHandle;object):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CanCastTo" uniqueID="CanCastTo(System.RuntimeType;System.RuntimeType):bool">
				<signature>System.RuntimeType.CanCastTo(System.RuntimeType;System.RuntimeType):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CanValueSpecialCast" uniqueID="CanValueSpecialCast(native signed int;native signed int):bool">
				<signature>System.RuntimeType.CanValueSpecialCast(native signed int;native signed int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CreateEnum" uniqueID="CreateEnum(System.RuntimeTypeHandle;long):object">
				<signature>System.RuntimeType.CreateEnum(System.RuntimeTypeHandle;long):object</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="FilterApplyBase" uniqueID="FilterApplyBase(System.Reflection.MemberInfo;System.Reflection.BindingFlags;bool;bool;bool;string;bool):bool">
				<signature>System.RuntimeType.FilterApplyBase(System.Reflection.MemberInfo;System.Reflection.BindingFlags;bool;bool;bool;string;bool):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="FilterApplyMethodBaseInfo" uniqueID="FilterApplyMethodBaseInfo(System.Reflection.MethodBase;System.Reflection.BindingFlags;System.Reflection.CallingConventions;System.Type[]):bool">
				<signature>System.RuntimeType.FilterApplyMethodBaseInfo(System.Reflection.MethodBase;System.Reflection.BindingFlags;System.Reflection.CallingConventions;System.Type[]):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="FilterApplyMethodBaseInfo" uniqueID="FilterApplyMethodBaseInfo(System.Reflection.MethodBase;System.Reflection.BindingFlags;string;System.Reflection.CallingConventions;System.Type[];bool):bool">
				<signature>System.RuntimeType.FilterApplyMethodBaseInfo(System.Reflection.MethodBase;System.Reflection.BindingFlags;string;System.Reflection.CallingConventions;System.Type[];bool):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="FilterApplyPrefixLookup" uniqueID="FilterApplyPrefixLookup(System.Reflection.MemberInfo;string;bool):bool">
				<signature>System.RuntimeType.FilterApplyPrefixLookup(System.Reflection.MemberInfo;string;bool):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="FilterApplyType" uniqueID="FilterApplyType(System.Type;System.Reflection.BindingFlags;string;bool;string):bool">
				<signature>System.RuntimeType.FilterApplyType(System.Type;System.Reflection.BindingFlags;string;bool;string):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="FilterHelper" uniqueID="FilterHelper(System.Reflection.BindingFlags;string;bool;System.Reflection.MemberListType):void">
				<signature>System.RuntimeType.FilterHelper(System.Reflection.BindingFlags;string;bool;System.Reflection.MemberListType):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="FilterHelper" uniqueID="FilterHelper(System.Reflection.BindingFlags;string;bool;bool;bool;System.Reflection.MemberListType):void">
				<signature>System.RuntimeType.FilterHelper(System.Reflection.BindingFlags;string;bool;bool;bool;System.Reflection.MemberListType):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="FilterPreCalculate" uniqueID="FilterPreCalculate(bool;bool;bool):System.Reflection.BindingFlags">
				<signature>System.RuntimeType.FilterPreCalculate(bool;bool;bool):System.Reflection.BindingFlags</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetFieldInfo" uniqueID="GetFieldInfo(System.RuntimeFieldHandle):System.Reflection.FieldInfo">
				<signature>System.RuntimeType.GetFieldInfo(System.RuntimeFieldHandle):System.Reflection.FieldInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetFieldInfo" uniqueID="GetFieldInfo(System.RuntimeTypeHandle;System.RuntimeFieldHandle):System.Reflection.FieldInfo">
				<signature>System.RuntimeType.GetFieldInfo(System.RuntimeTypeHandle;System.RuntimeFieldHandle):System.Reflection.FieldInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetMethodBase" uniqueID="GetMethodBase(System.ModuleHandle;int):System.Reflection.MethodBase">
				<signature>System.RuntimeType.GetMethodBase(System.ModuleHandle;int):System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetMethodBase" uniqueID="GetMethodBase(System.Reflection.Module;int):System.Reflection.MethodBase">
				<signature>System.RuntimeType.GetMethodBase(System.Reflection.Module;int):System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetMethodBase" uniqueID="GetMethodBase(System.RuntimeMethodHandle):System.Reflection.MethodBase">
				<signature>System.RuntimeType.GetMethodBase(System.RuntimeMethodHandle):System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetMethodBase" uniqueID="GetMethodBase(System.RuntimeTypeHandle;System.RuntimeMethodHandle):System.Reflection.MethodBase">
				<signature>System.RuntimeType.GetMethodBase(System.RuntimeTypeHandle;System.RuntimeMethodHandle):System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetPropertyInfo" uniqueID="GetPropertyInfo(System.RuntimeTypeHandle;int):System.Reflection.PropertyInfo">
				<signature>System.RuntimeType.GetPropertyInfo(System.RuntimeTypeHandle;int):System.Reflection.PropertyInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetTypeFromCLSIDImpl" uniqueID="GetTypeFromCLSIDImpl(System.Guid;string;bool):System.Type">
				<signature>System.RuntimeType.GetTypeFromCLSIDImpl(System.Guid;string;bool):System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetTypeFromProgIDImpl" uniqueID="GetTypeFromProgIDImpl(string;string;bool):System.Type">
				<signature>System.RuntimeType.GetTypeFromProgIDImpl(string;string;bool):System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="PrepareMemberInfoCache" uniqueID="PrepareMemberInfoCache(System.RuntimeTypeHandle):void">
				<signature>System.RuntimeType.PrepareMemberInfoCache(System.RuntimeTypeHandle):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="PrivateGetType" uniqueID="PrivateGetType(string;bool;bool;System.Threading.StackCrawlMark):System.Type">
				<signature>System.RuntimeType.PrivateGetType(string;bool;bool;System.Threading.StackCrawlMark):System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="PrivateGetType" uniqueID="PrivateGetType(string;bool;bool;bool;System.Threading.StackCrawlMark):System.Type">
				<signature>System.RuntimeType.PrivateGetType(string;bool;bool;bool;System.Threading.StackCrawlMark):System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SanityCheckGenericArguments" uniqueID="SanityCheckGenericArguments(System.Type[];System.Type[]):void">
				<signature>System.RuntimeType.SanityCheckGenericArguments(System.Type[];System.Type[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="SplitName" uniqueID="SplitName(string;string;string):void">
				<signature>System.RuntimeType.SplitName(string;string;string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ThrowIfTypeNeverValidGenericArgument" uniqueID="ThrowIfTypeNeverValidGenericArgument(System.Type):void">
				<signature>System.RuntimeType.ThrowIfTypeNeverValidGenericArgument(System.Type):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ValidateGenericArguments" uniqueID="ValidateGenericArguments(System.Reflection.MemberInfo;System.Type[];System.Exception):void">
				<signature>System.RuntimeType.ValidateGenericArguments(System.Reflection.MemberInfo;System.Type[];System.Exception):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_CreateEnum" uniqueID="_CreateEnum(native signed int;long):object">
				<signature>System.RuntimeType._CreateEnum(native signed int;long):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CacheEquals" uniqueID="CacheEquals(object):bool">
				<signature>System.RuntimeType.CacheEquals(object):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckValue" uniqueID="CheckValue(object;System.Reflection.Binder;System.Globalization.CultureInfo;System.Reflection.BindingFlags):object">
				<signature>System.RuntimeType.CheckValue(object;System.Reflection.Binder;System.Globalization.CultureInfo;System.Reflection.BindingFlags):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone():object">
				<signature>System.RuntimeType.Clone():object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CreateInstanceCheckThis" uniqueID="CreateInstanceCheckThis():void">
				<signature>System.RuntimeType.CreateInstanceCheckThis():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CreateInstanceImpl" uniqueID="CreateInstanceImpl(System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo;object[]):object">
				<signature>System.RuntimeType.CreateInstanceImpl(System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo;object[]):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CreateInstanceImpl" uniqueID="CreateInstanceImpl(bool):object">
				<signature>System.RuntimeType.CreateInstanceImpl(bool):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CreateInstanceImpl" uniqueID="CreateInstanceImpl(bool;bool;bool):object">
				<signature>System.RuntimeType.CreateInstanceImpl(bool;bool;bool):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CreateInstanceSlow" uniqueID="CreateInstanceSlow(bool;bool):object">
				<signature>System.RuntimeType.CreateInstanceSlow(bool;bool):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.RuntimeType.Equals(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ForwardCallToInvokeMember" uniqueID="ForwardCallToInvokeMember(string;System.Reflection.BindingFlags;object;int[];System.Runtime.Remoting.Proxies.MessageData):object">
				<signature>System.RuntimeType.ForwardCallToInvokeMember(string;System.Reflection.BindingFlags;object;int[];System.Runtime.Remoting.Proxies.MessageData):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetArrayRank" uniqueID="GetArrayRank():int">
				<signature>System.RuntimeType.GetArrayRank():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetAttributeFlagsImpl" uniqueID="GetAttributeFlagsImpl():System.Reflection.TypeAttributes">
				<signature>System.RuntimeType.GetAttributeFlagsImpl():System.Reflection.TypeAttributes</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetConstructorCandidates" uniqueID="GetConstructorCandidates(string;System.Reflection.BindingFlags;System.Reflection.CallingConventions;System.Type[];bool):System.Reflection.ConstructorInfo[]">
				<signature>System.RuntimeType.GetConstructorCandidates(string;System.Reflection.BindingFlags;System.Reflection.CallingConventions;System.Type[];bool):System.Reflection.ConstructorInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetConstructorImpl" uniqueID="GetConstructorImpl(System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.ConstructorInfo">
				<signature>System.RuntimeType.GetConstructorImpl(System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.ConstructorInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetConstructors" uniqueID="GetConstructors(System.Reflection.BindingFlags):System.Reflection.ConstructorInfo[]">
				<signature>System.RuntimeType.GetConstructors(System.Reflection.BindingFlags):System.Reflection.ConstructorInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.RuntimeType.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.RuntimeType.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetElementType" uniqueID="GetElementType():System.Type">
				<signature>System.RuntimeType.GetElementType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEvent" uniqueID="GetEvent(string;System.Reflection.BindingFlags):System.Reflection.EventInfo">
				<signature>System.RuntimeType.GetEvent(string;System.Reflection.BindingFlags):System.Reflection.EventInfo</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetEventCandidates" uniqueID="GetEventCandidates(string;System.Reflection.BindingFlags;bool):System.Reflection.EventInfo[]">
				<signature>System.RuntimeType.GetEventCandidates(string;System.Reflection.BindingFlags;bool):System.Reflection.EventInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEvents" uniqueID="GetEvents(System.Reflection.BindingFlags):System.Reflection.EventInfo[]">
				<signature>System.RuntimeType.GetEvents(System.Reflection.BindingFlags):System.Reflection.EventInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetField" uniqueID="GetField(string;System.Reflection.BindingFlags):System.Reflection.FieldInfo">
				<signature>System.RuntimeType.GetField(string;System.Reflection.BindingFlags):System.Reflection.FieldInfo</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetFieldCandidates" uniqueID="GetFieldCandidates(string;System.Reflection.BindingFlags;bool):System.Reflection.FieldInfo[]">
				<signature>System.RuntimeType.GetFieldCandidates(string;System.Reflection.BindingFlags;bool):System.Reflection.FieldInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFields" uniqueID="GetFields(System.Reflection.BindingFlags):System.Reflection.FieldInfo[]">
				<signature>System.RuntimeType.GetFields(System.Reflection.BindingFlags):System.Reflection.FieldInfo[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetGUID" uniqueID="GetGUID(System.Guid):void">
				<signature>System.RuntimeType.GetGUID(System.Guid):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetGenericArguments" uniqueID="GetGenericArguments():System.Type[]">
				<signature>System.RuntimeType.GetGenericArguments():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetGenericParameterConstraints" uniqueID="GetGenericParameterConstraints():System.Type[]">
				<signature>System.RuntimeType.GetGenericParameterConstraints():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetGenericTypeDefinition" uniqueID="GetGenericTypeDefinition():System.Type">
				<signature>System.RuntimeType.GetGenericTypeDefinition():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.RuntimeType.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetInterface" uniqueID="GetInterface(string;bool):System.Type">
				<signature>System.RuntimeType.GetInterface(string;bool):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetInterfaceMap" uniqueID="GetInterfaceMap(System.Type):System.Reflection.InterfaceMapping">
				<signature>System.RuntimeType.GetInterfaceMap(System.Type):System.Reflection.InterfaceMapping</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetInterfaces" uniqueID="GetInterfaces():System.Type[]">
				<signature>System.RuntimeType.GetInterfaces():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMember" uniqueID="GetMember(string;System.Reflection.MemberTypes;System.Reflection.BindingFlags):System.Reflection.MemberInfo[]">
				<signature>System.RuntimeType.GetMember(string;System.Reflection.MemberTypes;System.Reflection.BindingFlags):System.Reflection.MemberInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMembers" uniqueID="GetMembers(System.Reflection.BindingFlags):System.Reflection.MemberInfo[]">
				<signature>System.RuntimeType.GetMembers(System.Reflection.BindingFlags):System.Reflection.MemberInfo[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetMethodCandidates" uniqueID="GetMethodCandidates(string;System.Reflection.BindingFlags;System.Reflection.CallingConventions;System.Type[];bool):System.Reflection.MethodInfo[]">
				<signature>System.RuntimeType.GetMethodCandidates(string;System.Reflection.BindingFlags;System.Reflection.CallingConventions;System.Type[];bool):System.Reflection.MethodInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMethodImpl" uniqueID="GetMethodImpl(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo">
				<signature>System.RuntimeType.GetMethodImpl(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethods" uniqueID="GetMethods(System.Reflection.BindingFlags):System.Reflection.MethodInfo[]">
				<signature>System.RuntimeType.GetMethods(System.Reflection.BindingFlags):System.Reflection.MethodInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetNestedType" uniqueID="GetNestedType(string;System.Reflection.BindingFlags):System.Type">
				<signature>System.RuntimeType.GetNestedType(string;System.Reflection.BindingFlags):System.Type</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetNestedTypeCandidates" uniqueID="GetNestedTypeCandidates(string;System.Reflection.BindingFlags;bool):System.Type[]">
				<signature>System.RuntimeType.GetNestedTypeCandidates(string;System.Reflection.BindingFlags;bool):System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetNestedTypes" uniqueID="GetNestedTypes(System.Reflection.BindingFlags):System.Type[]">
				<signature>System.RuntimeType.GetNestedTypes(System.Reflection.BindingFlags):System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetObjectData" uniqueID="GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.RuntimeType.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetProperties" uniqueID="GetProperties(System.Reflection.BindingFlags):System.Reflection.PropertyInfo[]">
				<signature>System.RuntimeType.GetProperties(System.Reflection.BindingFlags):System.Reflection.PropertyInfo[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetPropertyCandidates" uniqueID="GetPropertyCandidates(string;System.Reflection.BindingFlags;System.Type[];bool):System.Reflection.PropertyInfo[]">
				<signature>System.RuntimeType.GetPropertyCandidates(string;System.Reflection.BindingFlags;System.Type[];bool):System.Reflection.PropertyInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetPropertyImpl" uniqueID="GetPropertyImpl(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Type;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.PropertyInfo">
				<signature>System.RuntimeType.GetPropertyImpl(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Type;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.PropertyInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetTypeCodeInternal" uniqueID="GetTypeCodeInternal():System.TypeCode">
				<signature>System.RuntimeType.GetTypeCodeInternal():System.TypeCode</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetTypeHandleInternal" uniqueID="GetTypeHandleInternal():System.RuntimeTypeHandle">
				<signature>System.RuntimeType.GetTypeHandleInternal():System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="HasElementTypeImpl" uniqueID="HasElementTypeImpl():bool">
				<signature>System.RuntimeType.HasElementTypeImpl():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="HasProxyAttributeImpl" uniqueID="HasProxyAttributeImpl():bool">
				<signature>System.RuntimeType.HasProxyAttributeImpl():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InvalidateCachedNestedType" uniqueID="InvalidateCachedNestedType():void">
				<signature>System.RuntimeType.InvalidateCachedNestedType():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="InvokeDispMethod" uniqueID="InvokeDispMethod(string;System.Reflection.BindingFlags;object;object[];bool[];int;string[]):object">
				<signature>System.RuntimeType.InvokeDispMethod(string;System.Reflection.BindingFlags;object;object[];bool[];int;string[]):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InvokeMember" uniqueID="InvokeMember(string;System.Reflection.BindingFlags;System.Reflection.Binder;object;object[];System.Reflection.ParameterModifier[];System.Globalization.CultureInfo;string[]):object">
				<signature>System.RuntimeType.InvokeMember(string;System.Reflection.BindingFlags;System.Reflection.Binder;object;object[];System.Reflection.ParameterModifier[];System.Globalization.CultureInfo;string[]):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsArrayImpl" uniqueID="IsArrayImpl():bool">
				<signature>System.RuntimeType.IsArrayImpl():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsByRefImpl" uniqueID="IsByRefImpl():bool">
				<signature>System.RuntimeType.IsByRefImpl():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsCOMObjectImpl" uniqueID="IsCOMObjectImpl():bool">
				<signature>System.RuntimeType.IsCOMObjectImpl():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsContextfulImpl" uniqueID="IsContextfulImpl():bool">
				<signature>System.RuntimeType.IsContextfulImpl():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.RuntimeType.IsDefined(System.Type;bool):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsGenericCOMObjectImpl" uniqueID="IsGenericCOMObjectImpl():bool">
				<signature>System.RuntimeType.IsGenericCOMObjectImpl():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsInstanceOfType" uniqueID="IsInstanceOfType(object):bool">
				<signature>System.RuntimeType.IsInstanceOfType(object):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsPointerImpl" uniqueID="IsPointerImpl():bool">
				<signature>System.RuntimeType.IsPointerImpl():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsPrimitiveImpl" uniqueID="IsPrimitiveImpl():bool">
				<signature>System.RuntimeType.IsPrimitiveImpl():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsSubclassOf" uniqueID="IsSubclassOf(System.Type):bool">
				<signature>System.RuntimeType.IsSubclassOf(System.Type):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakeArrayType" uniqueID="MakeArrayType():System.Type">
				<signature>System.RuntimeType.MakeArrayType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakeArrayType" uniqueID="MakeArrayType(int):System.Type">
				<signature>System.RuntimeType.MakeArrayType(int):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakeByRefType" uniqueID="MakeByRefType():System.Type">
				<signature>System.RuntimeType.MakeByRefType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakeGenericType" uniqueID="MakeGenericType(System.Type[]):System.Type">
				<signature>System.RuntimeType.MakeGenericType(System.Type[]):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakePointerType" uniqueID="MakePointerType():System.Type">
				<signature>System.RuntimeType.MakePointerType():System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RuntimeType" uniqueID="RuntimeType():void">
				<signature>System.RuntimeType.RuntimeType():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="RuntimeType" uniqueID="RuntimeType(System.RuntimeTypeHandle):void">
				<signature>System.RuntimeType.RuntimeType(System.RuntimeTypeHandle):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SupportsInterface" uniqueID="SupportsInterface(object):bool">
				<signature>System.RuntimeType.SupportsInterface(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.RuntimeType.ToString():string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="WrapArgsForInvokeCall" uniqueID="WrapArgsForInvokeCall(object[];int[]):void">
				<signature>System.RuntimeType.WrapArgsForInvokeCall(object[];int[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Assembly" uniqueID="get_Assembly():System.Reflection.Assembly">
				<signature>System.RuntimeType.get_Assembly():System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AssemblyQualifiedName" uniqueID="get_AssemblyQualifiedName():string">
				<signature>System.RuntimeType.get_AssemblyQualifiedName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_BaseType" uniqueID="get_BaseType():System.Type">
				<signature>System.RuntimeType.get_BaseType():System.Type</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_Cache" uniqueID="get_Cache():System.RuntimeType+RuntimeTypeCache">
				<signature>System.RuntimeType.get_Cache():System.RuntimeType+RuntimeTypeCache</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ContainsGenericParameters" uniqueID="get_ContainsGenericParameters():bool">
				<signature>System.RuntimeType.get_ContainsGenericParameters():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringMethod" uniqueID="get_DeclaringMethod():System.Reflection.MethodBase">
				<signature>System.RuntimeType.get_DeclaringMethod():System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringType" uniqueID="get_DeclaringType():System.Type">
				<signature>System.RuntimeType.get_DeclaringType():System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_DomainInitialized" uniqueID="get_DomainInitialized():bool">
				<signature>System.RuntimeType.get_DomainInitialized():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_ForwardCallBinder" uniqueID="get_ForwardCallBinder():System.OleAutBinder">
				<signature>System.RuntimeType.get_ForwardCallBinder():System.OleAutBinder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FullName" uniqueID="get_FullName():string">
				<signature>System.RuntimeType.get_FullName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_GUID" uniqueID="get_GUID():System.Guid">
				<signature>System.RuntimeType.get_GUID():System.Guid</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_GenericParameterAttributes" uniqueID="get_GenericParameterAttributes():System.Reflection.GenericParameterAttributes">
				<signature>System.RuntimeType.get_GenericParameterAttributes():System.Reflection.GenericParameterAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_GenericParameterPosition" uniqueID="get_GenericParameterPosition():int">
				<signature>System.RuntimeType.get_GenericParameterPosition():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsGenericParameter" uniqueID="get_IsGenericParameter():bool">
				<signature>System.RuntimeType.get_IsGenericParameter():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsGenericType" uniqueID="get_IsGenericType():bool">
				<signature>System.RuntimeType.get_IsGenericType():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsGenericTypeDefinition" uniqueID="get_IsGenericTypeDefinition():bool">
				<signature>System.RuntimeType.get_IsGenericTypeDefinition():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IsSzArray" uniqueID="get_IsSzArray():bool">
				<signature>System.RuntimeType.get_IsSzArray():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MemberType" uniqueID="get_MemberType():System.Reflection.MemberTypes">
				<signature>System.RuntimeType.get_MemberType():System.Reflection.MemberTypes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MetadataToken" uniqueID="get_MetadataToken():int">
				<signature>System.RuntimeType.get_MetadataToken():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Module" uniqueID="get_Module():System.Reflection.Module">
				<signature>System.RuntimeType.get_Module():System.Reflection.Module</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.RuntimeType.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Namespace" uniqueID="get_Namespace():string">
				<signature>System.RuntimeType.get_Namespace():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReflectedType" uniqueID="get_ReflectedType():System.Type">
				<signature>System.RuntimeType.get_ReflectedType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_StructLayoutAttribute" uniqueID="get_StructLayoutAttribute():System.Runtime.InteropServices.StructLayoutAttribute">
				<signature>System.RuntimeType.get_StructLayoutAttribute():System.Runtime.InteropServices.StructLayoutAttribute</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TypeHandle" uniqueID="get_TypeHandle():System.RuntimeTypeHandle">
				<signature>System.RuntimeType.get_TypeHandle():System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_UnderlyingSystemType" uniqueID="get_UnderlyingSystemType():System.Type">
				<signature>System.RuntimeType.get_UnderlyingSystemType():System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_DomainInitialized" uniqueID="set_DomainInitialized(bool):void">
				<signature>System.RuntimeType.set_DomainInitialized(bool):void</signature>
			</method>
		</class>
		<class name="SystemException" uniqueID="System.SystemException">
			<method accessibility="Public" methodKind="Member" name="SystemException" uniqueID="SystemException():void">
				<signature>System.SystemException.SystemException():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SystemException" uniqueID="SystemException(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.SystemException.SystemException(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SystemException" uniqueID="SystemException(string):void">
				<signature>System.SystemException.SystemException(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SystemException" uniqueID="SystemException(string;System.Exception):void">
				<signature>System.SystemException.SystemException(string;System.Exception):void</signature>
			</method>
		</class>
		<class name="Utf8String" uniqueID="System.Utf8String">
			<method accessibility="Private" methodKind="Static" name="EqualsCaseInsensitive" uniqueID="EqualsCaseInsensitive(void;void;int):bool">
				<signature>System.Utf8String.EqualsCaseInsensitive(void;void;int):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="EqualsCaseSensitive" uniqueID="EqualsCaseSensitive(void;void;int):bool">
				<signature>System.Utf8String.EqualsCaseSensitive(void;void;int):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetUtf8StringByteLength" uniqueID="GetUtf8StringByteLength(void):int">
				<signature>System.Utf8String.GetUtf8StringByteLength(void):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Equals" uniqueID="Equals(System.Utf8String):bool">
				<signature>System.Utf8String.Equals(System.Utf8String):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EqualsCaseInsensitive" uniqueID="EqualsCaseInsensitive(System.Utf8String):bool">
				<signature>System.Utf8String.EqualsCaseInsensitive(System.Utf8String):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Utf8String.ToString():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Utf8String" uniqueID="Utf8String(void):void">
				<signature>System.Utf8String.Utf8String(void):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Utf8String" uniqueID="Utf8String(void;int):void">
				<signature>System.Utf8String.Utf8String(void;int):void</signature>
			</method>
		</class>
		<class name="Attribute" uniqueID="System.Attribute">
			<method accessibility="Private" methodKind="Static" name="AddAttributesToList" uniqueID="AddAttributesToList(System.Collections.ArrayList;System.Attribute[];System.Collections.Hashtable):void">
				<signature>System.Attribute.AddAttributesToList(System.Collections.ArrayList;System.Attribute[];System.Collections.Hashtable):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CopyToArrayList" uniqueID="CopyToArrayList(System.Collections.ArrayList;System.Attribute[];System.Collections.Hashtable):void">
				<signature>System.Attribute.CopyToArrayList(System.Collections.ArrayList;System.Attribute[];System.Collections.Hashtable):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCustomAttribute" uniqueID="GetCustomAttribute(System.Reflection.Assembly;System.Type):System.Attribute">
				<signature>System.Attribute.GetCustomAttribute(System.Reflection.Assembly;System.Type):System.Attribute</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCustomAttribute" uniqueID="GetCustomAttribute(System.Reflection.Assembly;System.Type;bool):System.Attribute">
				<signature>System.Attribute.GetCustomAttribute(System.Reflection.Assembly;System.Type;bool):System.Attribute</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCustomAttribute" uniqueID="GetCustomAttribute(System.Reflection.MemberInfo;System.Type):System.Attribute">
				<signature>System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo;System.Type):System.Attribute</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCustomAttribute" uniqueID="GetCustomAttribute(System.Reflection.MemberInfo;System.Type;bool):System.Attribute">
				<signature>System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo;System.Type;bool):System.Attribute</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCustomAttribute" uniqueID="GetCustomAttribute(System.Reflection.Module;System.Type):System.Attribute">
				<signature>System.Attribute.GetCustomAttribute(System.Reflection.Module;System.Type):System.Attribute</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCustomAttribute" uniqueID="GetCustomAttribute(System.Reflection.Module;System.Type;bool):System.Attribute">
				<signature>System.Attribute.GetCustomAttribute(System.Reflection.Module;System.Type;bool):System.Attribute</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCustomAttribute" uniqueID="GetCustomAttribute(System.Reflection.ParameterInfo;System.Type):System.Attribute">
				<signature>System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo;System.Type):System.Attribute</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCustomAttribute" uniqueID="GetCustomAttribute(System.Reflection.ParameterInfo;System.Type;bool):System.Attribute">
				<signature>System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo;System.Type;bool):System.Attribute</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Reflection.Assembly):System.Attribute[]">
				<signature>System.Attribute.GetCustomAttributes(System.Reflection.Assembly):System.Attribute[]</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Reflection.Assembly;System.Type):System.Attribute[]">
				<signature>System.Attribute.GetCustomAttributes(System.Reflection.Assembly;System.Type):System.Attribute[]</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Reflection.Assembly;System.Type;bool):System.Attribute[]">
				<signature>System.Attribute.GetCustomAttributes(System.Reflection.Assembly;System.Type;bool):System.Attribute[]</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Reflection.Assembly;bool):System.Attribute[]">
				<signature>System.Attribute.GetCustomAttributes(System.Reflection.Assembly;bool):System.Attribute[]</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Reflection.MemberInfo):System.Attribute[]">
				<signature>System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo):System.Attribute[]</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Reflection.MemberInfo;System.Type):System.Attribute[]">
				<signature>System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo;System.Type):System.Attribute[]</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Reflection.MemberInfo;System.Type;bool):System.Attribute[]">
				<signature>System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo;System.Type;bool):System.Attribute[]</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Reflection.MemberInfo;bool):System.Attribute[]">
				<signature>System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo;bool):System.Attribute[]</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Reflection.Module):System.Attribute[]">
				<signature>System.Attribute.GetCustomAttributes(System.Reflection.Module):System.Attribute[]</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Reflection.Module;System.Type):System.Attribute[]">
				<signature>System.Attribute.GetCustomAttributes(System.Reflection.Module;System.Type):System.Attribute[]</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Reflection.Module;System.Type;bool):System.Attribute[]">
				<signature>System.Attribute.GetCustomAttributes(System.Reflection.Module;System.Type;bool):System.Attribute[]</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Reflection.Module;bool):System.Attribute[]">
				<signature>System.Attribute.GetCustomAttributes(System.Reflection.Module;bool):System.Attribute[]</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Reflection.ParameterInfo):System.Attribute[]">
				<signature>System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo):System.Attribute[]</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Reflection.ParameterInfo;System.Type):System.Attribute[]">
				<signature>System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo;System.Type):System.Attribute[]</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Reflection.ParameterInfo;System.Type;bool):System.Attribute[]">
				<signature>System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo;System.Type;bool):System.Attribute[]</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Reflection.ParameterInfo;bool):System.Attribute[]">
				<signature>System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo;bool):System.Attribute[]</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetParentDefinition" uniqueID="GetParentDefinition(System.Reflection.EventInfo):System.Reflection.EventInfo">
				<signature>System.Attribute.GetParentDefinition(System.Reflection.EventInfo):System.Reflection.EventInfo</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetParentDefinition" uniqueID="GetParentDefinition(System.Reflection.PropertyInfo):System.Reflection.PropertyInfo">
				<signature>System.Attribute.GetParentDefinition(System.Reflection.PropertyInfo):System.Reflection.PropertyInfo</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalGetAttributeUsage" uniqueID="InternalGetAttributeUsage(System.Type):System.AttributeUsageAttribute">
				<signature>System.Attribute.InternalGetAttributeUsage(System.Type):System.AttributeUsageAttribute</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalGetCustomAttributes" uniqueID="InternalGetCustomAttributes(System.Reflection.EventInfo;System.Type;bool):System.Attribute[]">
				<signature>System.Attribute.InternalGetCustomAttributes(System.Reflection.EventInfo;System.Type;bool):System.Attribute[]</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalGetCustomAttributes" uniqueID="InternalGetCustomAttributes(System.Reflection.PropertyInfo;System.Type;bool):System.Attribute[]">
				<signature>System.Attribute.InternalGetCustomAttributes(System.Reflection.PropertyInfo;System.Type;bool):System.Attribute[]</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalIsDefined" uniqueID="InternalIsDefined(System.Reflection.EventInfo;System.Type;bool):bool">
				<signature>System.Attribute.InternalIsDefined(System.Reflection.EventInfo;System.Type;bool):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalIsDefined" uniqueID="InternalIsDefined(System.Reflection.PropertyInfo;System.Type;bool):bool">
				<signature>System.Attribute.InternalIsDefined(System.Reflection.PropertyInfo;System.Type;bool):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalParamGetCustomAttributes" uniqueID="InternalParamGetCustomAttributes(System.Reflection.MethodInfo;System.Reflection.ParameterInfo;System.Type;bool):System.Attribute[]">
				<signature>System.Attribute.InternalParamGetCustomAttributes(System.Reflection.MethodInfo;System.Reflection.ParameterInfo;System.Type;bool):System.Attribute[]</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalParamIsDefined" uniqueID="InternalParamIsDefined(System.Reflection.MethodInfo;System.Reflection.ParameterInfo;System.Type;bool):bool">
				<signature>System.Attribute.InternalParamIsDefined(System.Reflection.MethodInfo;System.Reflection.ParameterInfo;System.Type;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsDefined" uniqueID="IsDefined(System.Reflection.Assembly;System.Type):bool">
				<signature>System.Attribute.IsDefined(System.Reflection.Assembly;System.Type):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsDefined" uniqueID="IsDefined(System.Reflection.Assembly;System.Type;bool):bool">
				<signature>System.Attribute.IsDefined(System.Reflection.Assembly;System.Type;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsDefined" uniqueID="IsDefined(System.Reflection.MemberInfo;System.Type):bool">
				<signature>System.Attribute.IsDefined(System.Reflection.MemberInfo;System.Type):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsDefined" uniqueID="IsDefined(System.Reflection.MemberInfo;System.Type;bool):bool">
				<signature>System.Attribute.IsDefined(System.Reflection.MemberInfo;System.Type;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsDefined" uniqueID="IsDefined(System.Reflection.Module;System.Type):bool">
				<signature>System.Attribute.IsDefined(System.Reflection.Module;System.Type):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsDefined" uniqueID="IsDefined(System.Reflection.Module;System.Type;bool):bool">
				<signature>System.Attribute.IsDefined(System.Reflection.Module;System.Type;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsDefined" uniqueID="IsDefined(System.Reflection.ParameterInfo;System.Type):bool">
				<signature>System.Attribute.IsDefined(System.Reflection.ParameterInfo;System.Type):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsDefined" uniqueID="IsDefined(System.Reflection.ParameterInfo;System.Type;bool):bool">
				<signature>System.Attribute.IsDefined(System.Reflection.ParameterInfo;System.Type;bool):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Attribute" uniqueID="Attribute():void">
				<signature>System.Attribute.Attribute():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Attribute.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Attribute.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefaultAttribute" uniqueID="IsDefaultAttribute():bool">
				<signature>System.Attribute.IsDefaultAttribute():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Match" uniqueID="Match(object):bool">
				<signature>System.Attribute.Match(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._Attribute.GetIDsOfNames" uniqueID="System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._Attribute.GetTypeInfo" uniqueID="System.Runtime.InteropServices._Attribute.GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._Attribute.GetTypeInfoCount" uniqueID="System.Runtime.InteropServices._Attribute.GetTypeInfoCount(unsigned int):void">
				<signature>System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._Attribute.Invoke" uniqueID="System.Runtime.InteropServices._Attribute.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TypeId" uniqueID="get_TypeId():object">
				<signature>System.Attribute.get_TypeId():object</signature>
			</method>
		</class>
		<class name="TypedReference" uniqueID="System.TypedReference">
			<method accessibility="Public" methodKind="Static" name="GetTargetType" uniqueID="GetTargetType(System.TypedReference):System.Type">
				<signature>System.TypedReference.GetTargetType(System.TypedReference):System.Type</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalMakeTypedReference" uniqueID="InternalMakeTypedReference(void;object;System.RuntimeFieldHandle[];System.RuntimeTypeHandle):void">
				<signature>System.TypedReference.InternalMakeTypedReference(void;object;System.RuntimeFieldHandle[];System.RuntimeTypeHandle):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalSetTypedReference" uniqueID="InternalSetTypedReference(void;object):void">
				<signature>System.TypedReference.InternalSetTypedReference(void;object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalToObject" uniqueID="InternalToObject(void):object">
				<signature>System.TypedReference.InternalToObject(void):object</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="MakeTypedReference" uniqueID="MakeTypedReference(object;System.Reflection.FieldInfo[]):System.TypedReference">
				<signature>System.TypedReference.MakeTypedReference(object;System.Reflection.FieldInfo[]):System.TypedReference</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="SetTypedReference" uniqueID="SetTypedReference(System.TypedReference;object):void">
				<signature>System.TypedReference.SetTypedReference(System.TypedReference;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="TargetTypeToken" uniqueID="TargetTypeToken(System.TypedReference):System.RuntimeTypeHandle">
				<signature>System.TypedReference.TargetTypeToken(System.TypedReference):System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToObject" uniqueID="ToObject(System.TypedReference):object">
				<signature>System.TypedReference.ToObject(System.TypedReference):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.TypedReference.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.TypedReference.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IsNull" uniqueID="get_IsNull():bool">
				<signature>System.TypedReference.get_IsNull():bool</signature>
			</method>
		</class>
		<class name="AsyncCallback" uniqueID="System.AsyncCallback">
			<method accessibility="Public" methodKind="Member" name="AsyncCallback" uniqueID="AsyncCallback(object;native signed int):void">
				<signature>System.AsyncCallback.AsyncCallback(object;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(System.IAsyncResult;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.AsyncCallback.BeginInvoke(System.IAsyncResult;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):void">
				<signature>System.AsyncCallback.EndInvoke(System.IAsyncResult):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(System.IAsyncResult):void">
				<signature>System.AsyncCallback.Invoke(System.IAsyncResult):void</signature>
			</method>
		</class>
		<class name="Comparison&lt;System.Reflection.RuntimePropertyInfo&gt;" uniqueID="System.Comparison&lt;System.Reflection.RuntimePropertyInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(System.Reflection.RuntimePropertyInfo;System.Reflection.RuntimePropertyInfo;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Comparison&lt;System.Reflection.RuntimePropertyInfo&gt;.BeginInvoke(System.Reflection.RuntimePropertyInfo;System.Reflection.RuntimePropertyInfo;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Comparison&lt;System.Reflection.RuntimePropertyInfo&gt;" uniqueID="Comparison&lt;System.Reflection.RuntimePropertyInfo&gt;(object;native signed int):void">
				<signature>System.Comparison&lt;System.Reflection.RuntimePropertyInfo&gt;.Comparison&lt;System.Reflection.RuntimePropertyInfo&gt;(object;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):int">
				<signature>System.Comparison&lt;System.Reflection.RuntimePropertyInfo&gt;.EndInvoke(System.IAsyncResult):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(System.Reflection.RuntimePropertyInfo;System.Reflection.RuntimePropertyInfo):int">
				<signature>System.Comparison&lt;System.Reflection.RuntimePropertyInfo&gt;.Invoke(System.Reflection.RuntimePropertyInfo;System.Reflection.RuntimePropertyInfo):int</signature>
			</method>
		</class>
		<class name="IComparable&lt;System.TimeSpan&gt;" uniqueID="System.IComparable&lt;System.TimeSpan&gt;">
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(System.TimeSpan):int">
				<signature>System.IComparable&lt;System.TimeSpan&gt;.CompareTo(System.TimeSpan):int</signature>
			</method>
		</class>
		<class name="Int32" uniqueID="System.Int32">
			<method accessibility="Public" methodKind="Static" name="Parse" uniqueID="Parse(string):int">
				<signature>System.Int32.Parse(string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Parse" uniqueID="Parse(string;System.Globalization.NumberStyles):int">
				<signature>System.Int32.Parse(string;System.Globalization.NumberStyles):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Parse" uniqueID="Parse(string;System.Globalization.NumberStyles;System.IFormatProvider):int">
				<signature>System.Int32.Parse(string;System.Globalization.NumberStyles;System.IFormatProvider):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Parse" uniqueID="Parse(string;System.IFormatProvider):int">
				<signature>System.Int32.Parse(string;System.IFormatProvider):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="TryParse" uniqueID="TryParse(string;System.Globalization.NumberStyles;System.IFormatProvider;int):bool">
				<signature>System.Int32.TryParse(string;System.Globalization.NumberStyles;System.IFormatProvider;int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="TryParse" uniqueID="TryParse(string;int):bool">
				<signature>System.Int32.TryParse(string;int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(int):int">
				<signature>System.Int32.CompareTo(int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(object):int">
				<signature>System.Int32.CompareTo(object):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(int):bool">
				<signature>System.Int32.Equals(int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Int32.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Int32.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeCode" uniqueID="GetTypeCode():System.TypeCode">
				<signature>System.Int32.GetTypeCode():System.TypeCode</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToBoolean" uniqueID="System.IConvertible.ToBoolean(System.IFormatProvider):bool">
				<signature>System.Int32.System.IConvertible.ToBoolean(System.IFormatProvider):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToByte" uniqueID="System.IConvertible.ToByte(System.IFormatProvider):byte">
				<signature>System.Int32.System.IConvertible.ToByte(System.IFormatProvider):byte</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToChar" uniqueID="System.IConvertible.ToChar(System.IFormatProvider):char">
				<signature>System.Int32.System.IConvertible.ToChar(System.IFormatProvider):char</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToDateTime" uniqueID="System.IConvertible.ToDateTime(System.IFormatProvider):System.DateTime">
				<signature>System.Int32.System.IConvertible.ToDateTime(System.IFormatProvider):System.DateTime</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToDecimal" uniqueID="System.IConvertible.ToDecimal(System.IFormatProvider):System.Decimal">
				<signature>System.Int32.System.IConvertible.ToDecimal(System.IFormatProvider):System.Decimal</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToDouble" uniqueID="System.IConvertible.ToDouble(System.IFormatProvider):double">
				<signature>System.Int32.System.IConvertible.ToDouble(System.IFormatProvider):double</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToInt16" uniqueID="System.IConvertible.ToInt16(System.IFormatProvider):short">
				<signature>System.Int32.System.IConvertible.ToInt16(System.IFormatProvider):short</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToInt32" uniqueID="System.IConvertible.ToInt32(System.IFormatProvider):int">
				<signature>System.Int32.System.IConvertible.ToInt32(System.IFormatProvider):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToInt64" uniqueID="System.IConvertible.ToInt64(System.IFormatProvider):long">
				<signature>System.Int32.System.IConvertible.ToInt64(System.IFormatProvider):long</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToSByte" uniqueID="System.IConvertible.ToSByte(System.IFormatProvider):sbyte">
				<signature>System.Int32.System.IConvertible.ToSByte(System.IFormatProvider):sbyte</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToSingle" uniqueID="System.IConvertible.ToSingle(System.IFormatProvider):float">
				<signature>System.Int32.System.IConvertible.ToSingle(System.IFormatProvider):float</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToType" uniqueID="System.IConvertible.ToType(System.Type;System.IFormatProvider):object">
				<signature>System.Int32.System.IConvertible.ToType(System.Type;System.IFormatProvider):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToUInt16" uniqueID="System.IConvertible.ToUInt16(System.IFormatProvider):unsigned short">
				<signature>System.Int32.System.IConvertible.ToUInt16(System.IFormatProvider):unsigned short</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToUInt32" uniqueID="System.IConvertible.ToUInt32(System.IFormatProvider):unsigned int">
				<signature>System.Int32.System.IConvertible.ToUInt32(System.IFormatProvider):unsigned int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToUInt64" uniqueID="System.IConvertible.ToUInt64(System.IFormatProvider):unsigned long">
				<signature>System.Int32.System.IConvertible.ToUInt64(System.IFormatProvider):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Int32.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString(System.IFormatProvider):string">
				<signature>System.Int32.ToString(System.IFormatProvider):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString(string):string">
				<signature>System.Int32.ToString(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString(string;System.IFormatProvider):string">
				<signature>System.Int32.ToString(string;System.IFormatProvider):string</signature>
			</method>
		</class>
		<class name="Version" uniqueID="System.Version">
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.Version;System.Version):bool">
				<signature>System.Version.op_Equality(System.Version;System.Version):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_GreaterThan" uniqueID="op_GreaterThan(System.Version;System.Version):bool">
				<signature>System.Version.op_GreaterThan(System.Version;System.Version):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_GreaterThanOrEqual" uniqueID="op_GreaterThanOrEqual(System.Version;System.Version):bool">
				<signature>System.Version.op_GreaterThanOrEqual(System.Version;System.Version):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.Version;System.Version):bool">
				<signature>System.Version.op_Inequality(System.Version;System.Version):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_LessThan" uniqueID="op_LessThan(System.Version;System.Version):bool">
				<signature>System.Version.op_LessThan(System.Version;System.Version):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_LessThanOrEqual" uniqueID="op_LessThanOrEqual(System.Version;System.Version):bool">
				<signature>System.Version.op_LessThanOrEqual(System.Version;System.Version):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone():object">
				<signature>System.Version.Clone():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(System.Version):int">
				<signature>System.Version.CompareTo(System.Version):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(object):int">
				<signature>System.Version.CompareTo(object):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.Version):bool">
				<signature>System.Version.Equals(System.Version):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Version.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Version.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Version.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString(int):string">
				<signature>System.Version.ToString(int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Version" uniqueID="Version():void">
				<signature>System.Version.Version():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Version" uniqueID="Version(int;int):void">
				<signature>System.Version.Version(int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Version" uniqueID="Version(int;int;int):void">
				<signature>System.Version.Version(int;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Version" uniqueID="Version(int;int;int;int):void">
				<signature>System.Version.Version(int;int;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Version" uniqueID="Version(string):void">
				<signature>System.Version.Version(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Build" uniqueID="get_Build():int">
				<signature>System.Version.get_Build():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Major" uniqueID="get_Major():int">
				<signature>System.Version.get_Major():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MajorRevision" uniqueID="get_MajorRevision():short">
				<signature>System.Version.get_MajorRevision():short</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Minor" uniqueID="get_Minor():int">
				<signature>System.Version.get_Minor():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MinorRevision" uniqueID="get_MinorRevision():short">
				<signature>System.Version.get_MinorRevision():short</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Revision" uniqueID="get_Revision():int">
				<signature>System.Version.get_Revision():int</signature>
			</method>
		</class>
		<class name="CharEnumerator" uniqueID="System.CharEnumerator">
			<method accessibility="Protected" methodKind="Member" name="CharEnumerator" uniqueID="CharEnumerator(string):void">
				<signature>System.CharEnumerator.CharEnumerator(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone():object">
				<signature>System.CharEnumerator.Clone():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MoveNext" uniqueID="MoveNext():bool">
				<signature>System.CharEnumerator.MoveNext():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reset" uniqueID="Reset():void">
				<signature>System.CharEnumerator.Reset():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerator.get_Current" uniqueID="System.Collections.IEnumerator.get_Current():object">
				<signature>System.CharEnumerator.System.Collections.IEnumerator.get_Current():object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IDisposable.Dispose" uniqueID="System.IDisposable.Dispose():void">
				<signature>System.CharEnumerator.System.IDisposable.Dispose():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Current" uniqueID="get_Current():char">
				<signature>System.CharEnumerator.get_Current():char</signature>
			</method>
		</class>
		<class name="Comparison&lt;System.RuntimeType&gt;" uniqueID="System.Comparison&lt;System.RuntimeType&gt;">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(System.RuntimeType;System.RuntimeType;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Comparison&lt;System.RuntimeType&gt;.BeginInvoke(System.RuntimeType;System.RuntimeType;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Comparison&lt;System.RuntimeType&gt;" uniqueID="Comparison&lt;System.RuntimeType&gt;(object;native signed int):void">
				<signature>System.Comparison&lt;System.RuntimeType&gt;.Comparison&lt;System.RuntimeType&gt;(object;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):int">
				<signature>System.Comparison&lt;System.RuntimeType&gt;.EndInvoke(System.IAsyncResult):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(System.RuntimeType;System.RuntimeType):int">
				<signature>System.Comparison&lt;System.RuntimeType&gt;.Invoke(System.RuntimeType;System.RuntimeType):int</signature>
			</method>
		</class>
		<class name="IAsyncResult" uniqueID="System.IAsyncResult">
			<method accessibility="Public" methodKind="Member" name="get_AsyncState" uniqueID="get_AsyncState():object">
				<signature>System.IAsyncResult.get_AsyncState():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AsyncWaitHandle" uniqueID="get_AsyncWaitHandle():System.Threading.WaitHandle">
				<signature>System.IAsyncResult.get_AsyncWaitHandle():System.Threading.WaitHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CompletedSynchronously" uniqueID="get_CompletedSynchronously():bool">
				<signature>System.IAsyncResult.get_CompletedSynchronously():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsCompleted" uniqueID="get_IsCompleted():bool">
				<signature>System.IAsyncResult.get_IsCompleted():bool</signature>
			</method>
		</class>
		<class name="IComparable&lt;System.Guid&gt;" uniqueID="System.IComparable&lt;System.Guid&gt;">
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(System.Guid):int">
				<signature>System.IComparable&lt;System.Guid&gt;.CompareTo(System.Guid):int</signature>
			</method>
		</class>
		<class name="__DTString" uniqueID="System.__DTString">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.__DTString.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Advance" uniqueID="Advance(int):bool">
				<signature>System.__DTString.Advance(int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ConsumeSubString" uniqueID="ConsumeSubString(System.DTSubString):void">
				<signature>System.__DTString.ConsumeSubString(System.DTSubString):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetChar" uniqueID="GetChar():char">
				<signature>System.__DTString.GetChar():char</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetDigit" uniqueID="GetDigit():int">
				<signature>System.__DTString.GetDigit():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetNext" uniqueID="GetNext():bool">
				<signature>System.__DTString.GetNext():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetNextDigit" uniqueID="GetNextDigit():bool">
				<signature>System.__DTString.GetNextDigit():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetRegularToken" uniqueID="GetRegularToken(System.TokenType;int;System.Globalization.DateTimeFormatInfo):void">
				<signature>System.__DTString.GetRegularToken(System.TokenType;int;System.Globalization.DateTimeFormatInfo):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetRepeatCount" uniqueID="GetRepeatCount():int">
				<signature>System.__DTString.GetRepeatCount():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetSeparatorToken" uniqueID="GetSeparatorToken(System.Globalization.DateTimeFormatInfo;int;char):System.TokenType">
				<signature>System.__DTString.GetSeparatorToken(System.Globalization.DateTimeFormatInfo;int;char):System.TokenType</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetSubString" uniqueID="GetSubString():System.DTSubString">
				<signature>System.__DTString.GetSubString():System.DTSubString</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Match" uniqueID="Match(char):bool">
				<signature>System.__DTString.Match(char):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Match" uniqueID="Match(string):bool">
				<signature>System.__DTString.Match(string):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MatchLongestWords" uniqueID="MatchLongestWords(string[];int):int">
				<signature>System.__DTString.MatchLongestWords(string[];int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MatchSpecifiedWord" uniqueID="MatchSpecifiedWord(string):bool">
				<signature>System.__DTString.MatchSpecifiedWord(string):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MatchSpecifiedWord" uniqueID="MatchSpecifiedWord(string;int):bool">
				<signature>System.__DTString.MatchSpecifiedWord(string;int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MatchSpecifiedWords" uniqueID="MatchSpecifiedWords(string;bool;int):bool">
				<signature>System.__DTString.MatchSpecifiedWords(string;bool;int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RemoveLeadingInQuoteSpaces" uniqueID="RemoveLeadingInQuoteSpaces():void">
				<signature>System.__DTString.RemoveLeadingInQuoteSpaces():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RemoveTrailingInQuoteSpaces" uniqueID="RemoveTrailingInQuoteSpaces():void">
				<signature>System.__DTString.RemoveTrailingInQuoteSpaces():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SkipWhiteSpaceCurrent" uniqueID="SkipWhiteSpaceCurrent():bool">
				<signature>System.__DTString.SkipWhiteSpaceCurrent():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SkipWhiteSpaces" uniqueID="SkipWhiteSpaces():void">
				<signature>System.__DTString.SkipWhiteSpaces():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="TrimTail" uniqueID="TrimTail():void">
				<signature>System.__DTString.TrimTail():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="__DTString" uniqueID="__DTString(string;System.Globalization.DateTimeFormatInfo):void">
				<signature>System.__DTString.__DTString(string;System.Globalization.DateTimeFormatInfo):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="__DTString" uniqueID="__DTString(string;System.Globalization.DateTimeFormatInfo;bool):void">
				<signature>System.__DTString.__DTString(string;System.Globalization.DateTimeFormatInfo;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_CompareInfo" uniqueID="get_CompareInfo():System.Globalization.CompareInfo">
				<signature>System.__DTString.get_CompareInfo():System.Globalization.CompareInfo</signature>
			</method>
		</class>
		<class name="AppDomainSetup" uniqueID="System.AppDomainSetup">
			<method accessibility="Protected" methodKind="Static" name="Locate" uniqueID="Locate(string):int">
				<signature>System.AppDomainSetup.Locate(string):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="UpdateContextProperty" uniqueID="UpdateContextProperty(native signed int;string;object):void">
				<signature>System.AppDomainSetup.UpdateContextProperty(native signed int;string;object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_ApplicationBaseKey" uniqueID="get_ApplicationBaseKey():string">
				<signature>System.AppDomainSetup.get_ApplicationBaseKey():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_ApplicationNameKey" uniqueID="get_ApplicationNameKey():string">
				<signature>System.AppDomainSetup.get_ApplicationNameKey():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_CachePathKey" uniqueID="get_CachePathKey():string">
				<signature>System.AppDomainSetup.get_CachePathKey():string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="get_ConfigurationBytesKey" uniqueID="get_ConfigurationBytesKey():string">
				<signature>System.AppDomainSetup.get_ConfigurationBytesKey():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_ConfigurationExtension" uniqueID="get_ConfigurationExtension():string">
				<signature>System.AppDomainSetup.get_ConfigurationExtension():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_ConfigurationFileKey" uniqueID="get_ConfigurationFileKey():string">
				<signature>System.AppDomainSetup.get_ConfigurationFileKey():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_DeveloperPathKey" uniqueID="get_DeveloperPathKey():string">
				<signature>System.AppDomainSetup.get_DeveloperPathKey():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_DisallowAppBaseProbingKey" uniqueID="get_DisallowAppBaseProbingKey():string">
				<signature>System.AppDomainSetup.get_DisallowAppBaseProbingKey():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_DisallowBindingRedirectsKey" uniqueID="get_DisallowBindingRedirectsKey():string">
				<signature>System.AppDomainSetup.get_DisallowBindingRedirectsKey():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_DisallowCodeDownloadKey" uniqueID="get_DisallowCodeDownloadKey():string">
				<signature>System.AppDomainSetup.get_DisallowCodeDownloadKey():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_DisallowPublisherPolicyKey" uniqueID="get_DisallowPublisherPolicyKey():string">
				<signature>System.AppDomainSetup.get_DisallowPublisherPolicyKey():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_DynamicBaseKey" uniqueID="get_DynamicBaseKey():string">
				<signature>System.AppDomainSetup.get_DynamicBaseKey():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_HostBindingKey" uniqueID="get_HostBindingKey():string">
				<signature>System.AppDomainSetup.get_HostBindingKey():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_LoaderOptimizationKey" uniqueID="get_LoaderOptimizationKey():string">
				<signature>System.AppDomainSetup.get_LoaderOptimizationKey():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_MachineConfigKey" uniqueID="get_MachineConfigKey():string">
				<signature>System.AppDomainSetup.get_MachineConfigKey():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_PrivateBinPathEnvironmentVariable" uniqueID="get_PrivateBinPathEnvironmentVariable():string">
				<signature>System.AppDomainSetup.get_PrivateBinPathEnvironmentVariable():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_PrivateBinPathKey" uniqueID="get_PrivateBinPathKey():string">
				<signature>System.AppDomainSetup.get_PrivateBinPathKey():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_PrivateBinPathProbeKey" uniqueID="get_PrivateBinPathProbeKey():string">
				<signature>System.AppDomainSetup.get_PrivateBinPathProbeKey():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_RuntimeConfigurationFile" uniqueID="get_RuntimeConfigurationFile():string">
				<signature>System.AppDomainSetup.get_RuntimeConfigurationFile():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_ShadowCopyDirectoriesKey" uniqueID="get_ShadowCopyDirectoriesKey():string">
				<signature>System.AppDomainSetup.get_ShadowCopyDirectoriesKey():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_ShadowCopyFilesKey" uniqueID="get_ShadowCopyFilesKey():string">
				<signature>System.AppDomainSetup.get_ShadowCopyFilesKey():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AppDomainSetup" uniqueID="AppDomainSetup():void">
				<signature>System.AppDomainSetup.AppDomainSetup():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AppDomainSetup" uniqueID="AppDomainSetup(System.ActivationContext):void">
				<signature>System.AppDomainSetup.AppDomainSetup(System.ActivationContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AppDomainSetup" uniqueID="AppDomainSetup(System.AppDomainSetup;bool):void">
				<signature>System.AppDomainSetup.AppDomainSetup(System.AppDomainSetup;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AppDomainSetup" uniqueID="AppDomainSetup(System.Runtime.Hosting.ActivationArguments):void">
				<signature>System.AppDomainSetup.AppDomainSetup(System.Runtime.Hosting.ActivationArguments):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="BuildShadowCopyDirectories" uniqueID="BuildShadowCopyDirectories():string">
				<signature>System.AppDomainSetup.BuildShadowCopyDirectories():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetConfigurationBytes" uniqueID="GetConfigurationBytes():byte[]">
				<signature>System.AppDomainSetup.GetConfigurationBytes():byte[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="IsFilePath" uniqueID="IsFilePath(string):bool">
				<signature>System.AppDomainSetup.IsFilePath(string):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="NormalizePath" uniqueID="NormalizePath(string;bool):string">
				<signature>System.AppDomainSetup.NormalizePath(string;bool):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetConfigurationBytes" uniqueID="SetConfigurationBytes(byte[]):void">
				<signature>System.AppDomainSetup.SetConfigurationBytes(byte[]):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetupDefaultApplicationBase" uniqueID="SetupDefaultApplicationBase(string):void">
				<signature>System.AppDomainSetup.SetupDefaultApplicationBase(string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetupFusionContext" uniqueID="SetupFusionContext(native signed int):void">
				<signature>System.AppDomainSetup.SetupFusionContext(native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="VerifyDir" uniqueID="VerifyDir(string;bool):string">
				<signature>System.AppDomainSetup.VerifyDir(string;bool):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="VerifyDirList" uniqueID="VerifyDirList(string):void">
				<signature>System.AppDomainSetup.VerifyDirList(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ActivationArguments" uniqueID="get_ActivationArguments():System.Runtime.Hosting.ActivationArguments">
				<signature>System.AppDomainSetup.get_ActivationArguments():System.Runtime.Hosting.ActivationArguments</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AppDomainInitializer" uniqueID="get_AppDomainInitializer():System.AppDomainInitializer">
				<signature>System.AppDomainSetup.get_AppDomainInitializer():System.AppDomainInitializer</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AppDomainInitializerArguments" uniqueID="get_AppDomainInitializerArguments():string[]">
				<signature>System.AppDomainSetup.get_AppDomainInitializerArguments():string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ApplicationBase" uniqueID="get_ApplicationBase():string">
				<signature>System.AppDomainSetup.get_ApplicationBase():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ApplicationName" uniqueID="get_ApplicationName():string">
				<signature>System.AppDomainSetup.get_ApplicationName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ApplicationTrust" uniqueID="get_ApplicationTrust():System.Security.Policy.ApplicationTrust">
				<signature>System.AppDomainSetup.get_ApplicationTrust():System.Security.Policy.ApplicationTrust</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CachePath" uniqueID="get_CachePath():string">
				<signature>System.AppDomainSetup.get_CachePath():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ConfigurationFile" uniqueID="get_ConfigurationFile():string">
				<signature>System.AppDomainSetup.get_ConfigurationFile():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ConfigurationFileInternal" uniqueID="get_ConfigurationFileInternal():string">
				<signature>System.AppDomainSetup.get_ConfigurationFileInternal():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_DeveloperPath" uniqueID="get_DeveloperPath():string">
				<signature>System.AppDomainSetup.get_DeveloperPath():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DisallowApplicationBaseProbing" uniqueID="get_DisallowApplicationBaseProbing():bool">
				<signature>System.AppDomainSetup.get_DisallowApplicationBaseProbing():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DisallowBindingRedirects" uniqueID="get_DisallowBindingRedirects():bool">
				<signature>System.AppDomainSetup.get_DisallowBindingRedirects():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DisallowCodeDownload" uniqueID="get_DisallowCodeDownload():bool">
				<signature>System.AppDomainSetup.get_DisallowCodeDownload():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DisallowPublisherPolicy" uniqueID="get_DisallowPublisherPolicy():bool">
				<signature>System.AppDomainSetup.get_DisallowPublisherPolicy():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DynamicBase" uniqueID="get_DynamicBase():string">
				<signature>System.AppDomainSetup.get_DynamicBase():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_LicenseFile" uniqueID="get_LicenseFile():string">
				<signature>System.AppDomainSetup.get_LicenseFile():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_LoaderOptimization" uniqueID="get_LoaderOptimization():System.LoaderOptimization">
				<signature>System.AppDomainSetup.get_LoaderOptimization():System.LoaderOptimization</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PrivateBinPath" uniqueID="get_PrivateBinPath():string">
				<signature>System.AppDomainSetup.get_PrivateBinPath():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PrivateBinPathProbe" uniqueID="get_PrivateBinPathProbe():string">
				<signature>System.AppDomainSetup.get_PrivateBinPathProbe():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SandboxInterop" uniqueID="get_SandboxInterop():bool">
				<signature>System.AppDomainSetup.get_SandboxInterop():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ShadowCopyDirectories" uniqueID="get_ShadowCopyDirectories():string">
				<signature>System.AppDomainSetup.get_ShadowCopyDirectories():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ShadowCopyFiles" uniqueID="get_ShadowCopyFiles():string">
				<signature>System.AppDomainSetup.get_ShadowCopyFiles():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Value" uniqueID="get_Value():string[]">
				<signature>System.AppDomainSetup.get_Value():string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ActivationArguments" uniqueID="set_ActivationArguments(System.Runtime.Hosting.ActivationArguments):void">
				<signature>System.AppDomainSetup.set_ActivationArguments(System.Runtime.Hosting.ActivationArguments):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_AppDomainInitializer" uniqueID="set_AppDomainInitializer(System.AppDomainInitializer):void">
				<signature>System.AppDomainSetup.set_AppDomainInitializer(System.AppDomainInitializer):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_AppDomainInitializerArguments" uniqueID="set_AppDomainInitializerArguments(string[]):void">
				<signature>System.AppDomainSetup.set_AppDomainInitializerArguments(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ApplicationBase" uniqueID="set_ApplicationBase(string):void">
				<signature>System.AppDomainSetup.set_ApplicationBase(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ApplicationName" uniqueID="set_ApplicationName(string):void">
				<signature>System.AppDomainSetup.set_ApplicationName(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ApplicationTrust" uniqueID="set_ApplicationTrust(System.Security.Policy.ApplicationTrust):void">
				<signature>System.AppDomainSetup.set_ApplicationTrust(System.Security.Policy.ApplicationTrust):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_CachePath" uniqueID="set_CachePath(string):void">
				<signature>System.AppDomainSetup.set_CachePath(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ConfigurationFile" uniqueID="set_ConfigurationFile(string):void">
				<signature>System.AppDomainSetup.set_ConfigurationFile(string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_DeveloperPath" uniqueID="set_DeveloperPath(string):void">
				<signature>System.AppDomainSetup.set_DeveloperPath(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_DisallowApplicationBaseProbing" uniqueID="set_DisallowApplicationBaseProbing(bool):void">
				<signature>System.AppDomainSetup.set_DisallowApplicationBaseProbing(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_DisallowBindingRedirects" uniqueID="set_DisallowBindingRedirects(bool):void">
				<signature>System.AppDomainSetup.set_DisallowBindingRedirects(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_DisallowCodeDownload" uniqueID="set_DisallowCodeDownload(bool):void">
				<signature>System.AppDomainSetup.set_DisallowCodeDownload(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_DisallowPublisherPolicy" uniqueID="set_DisallowPublisherPolicy(bool):void">
				<signature>System.AppDomainSetup.set_DisallowPublisherPolicy(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_DynamicBase" uniqueID="set_DynamicBase(string):void">
				<signature>System.AppDomainSetup.set_DynamicBase(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_LicenseFile" uniqueID="set_LicenseFile(string):void">
				<signature>System.AppDomainSetup.set_LicenseFile(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_LoaderOptimization" uniqueID="set_LoaderOptimization(System.LoaderOptimization):void">
				<signature>System.AppDomainSetup.set_LoaderOptimization(System.LoaderOptimization):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_PrivateBinPath" uniqueID="set_PrivateBinPath(string):void">
				<signature>System.AppDomainSetup.set_PrivateBinPath(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_PrivateBinPathProbe" uniqueID="set_PrivateBinPathProbe(string):void">
				<signature>System.AppDomainSetup.set_PrivateBinPathProbe(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_SandboxInterop" uniqueID="set_SandboxInterop(bool):void">
				<signature>System.AppDomainSetup.set_SandboxInterop(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ShadowCopyDirectories" uniqueID="set_ShadowCopyDirectories(string):void">
				<signature>System.AppDomainSetup.set_ShadowCopyDirectories(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ShadowCopyFiles" uniqueID="set_ShadowCopyFiles(string):void">
				<signature>System.AppDomainSetup.set_ShadowCopyFiles(string):void</signature>
			</method>
		</class>
		<class name="ApplicationIdentity" uniqueID="System.ApplicationIdentity">
			<method accessibility="Private" methodKind="Member" name="ApplicationIdentity" uniqueID="ApplicationIdentity():void">
				<signature>System.ApplicationIdentity.ApplicationIdentity():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ApplicationIdentity" uniqueID="ApplicationIdentity(System.Deployment.Internal.Isolation.IDefinitionAppId):void">
				<signature>System.ApplicationIdentity.ApplicationIdentity(System.Deployment.Internal.Isolation.IDefinitionAppId):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ApplicationIdentity" uniqueID="ApplicationIdentity(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.ApplicationIdentity.ApplicationIdentity(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ApplicationIdentity" uniqueID="ApplicationIdentity(string):void">
				<signature>System.ApplicationIdentity.ApplicationIdentity(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.Serialization.ISerializable.GetObjectData" uniqueID="System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.ApplicationIdentity.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.ApplicationIdentity.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CodeBase" uniqueID="get_CodeBase():string">
				<signature>System.ApplicationIdentity.get_CodeBase():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FullName" uniqueID="get_FullName():string">
				<signature>System.ApplicationIdentity.get_FullName():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Identity" uniqueID="get_Identity():System.Deployment.Internal.Isolation.IDefinitionAppId">
				<signature>System.ApplicationIdentity.get_Identity():System.Deployment.Internal.Isolation.IDefinitionAppId</signature>
			</method>
		</class>
		<class name="Guid" uniqueID="System.Guid">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Guid.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="EatAllWhitespace" uniqueID="EatAllWhitespace(string):string">
				<signature>System.Guid.EatAllWhitespace(string):string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="HexToChar" uniqueID="HexToChar(int):char">
				<signature>System.Guid.HexToChar(int):char</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="HexsToChars" uniqueID="HexsToChars(char[];int;int;int):int">
				<signature>System.Guid.HexsToChars(char[];int;int;int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IsHexPrefix" uniqueID="IsHexPrefix(string;int):bool">
				<signature>System.Guid.IsHexPrefix(string;int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="NewGuid" uniqueID="NewGuid():System.Guid">
				<signature>System.Guid.NewGuid():System.Guid</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="TryParse" uniqueID="TryParse(string;int;int):int">
				<signature>System.Guid.TryParse(string;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.Guid;System.Guid):bool">
				<signature>System.Guid.op_Equality(System.Guid;System.Guid):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.Guid;System.Guid):bool">
				<signature>System.Guid.op_Inequality(System.Guid;System.Guid):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(System.Guid):int">
				<signature>System.Guid.CompareTo(System.Guid):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(object):int">
				<signature>System.Guid.CompareTo(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CompleteGuid" uniqueID="CompleteGuid():void">
				<signature>System.Guid.CompleteGuid():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.Guid):bool">
				<signature>System.Guid.Equals(System.Guid):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Guid.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Guid.GetHashCode():int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetResult" uniqueID="GetResult(unsigned int;unsigned int):int">
				<signature>System.Guid.GetResult(unsigned int;unsigned int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Guid" uniqueID="Guid(bool):void">
				<signature>System.Guid.Guid(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Guid" uniqueID="Guid(byte[]):void">
				<signature>System.Guid.Guid(byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Guid" uniqueID="Guid(int;short;short;byte;byte;byte;byte;byte;byte;byte;byte):void">
				<signature>System.Guid.Guid(int;short;short;byte;byte;byte;byte;byte;byte;byte;byte):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Guid" uniqueID="Guid(int;short;short;byte[]):void">
				<signature>System.Guid.Guid(int;short;short;byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Guid" uniqueID="Guid(string):void">
				<signature>System.Guid.Guid(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Guid" uniqueID="Guid(unsigned int;unsigned short;unsigned short;byte;byte;byte;byte;byte;byte;byte;byte):void">
				<signature>System.Guid.Guid(unsigned int;unsigned short;unsigned short;byte;byte;byte;byte;byte;byte;byte;byte):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToByteArray" uniqueID="ToByteArray():byte[]">
				<signature>System.Guid.ToByteArray():byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Guid.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString(string):string">
				<signature>System.Guid.ToString(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString(string;System.IFormatProvider):string">
				<signature>System.Guid.ToString(string;System.IFormatProvider):string</signature>
			</method>
		</class>
		<class name="Comparison&lt;System.Reflection.RuntimeConstructorInfo&gt;" uniqueID="System.Comparison&lt;System.Reflection.RuntimeConstructorInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(System.Reflection.RuntimeConstructorInfo;System.Reflection.RuntimeConstructorInfo;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Comparison&lt;System.Reflection.RuntimeConstructorInfo&gt;.BeginInvoke(System.Reflection.RuntimeConstructorInfo;System.Reflection.RuntimeConstructorInfo;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Comparison&lt;System.Reflection.RuntimeConstructorInfo&gt;" uniqueID="Comparison&lt;System.Reflection.RuntimeConstructorInfo&gt;(object;native signed int):void">
				<signature>System.Comparison&lt;System.Reflection.RuntimeConstructorInfo&gt;.Comparison&lt;System.Reflection.RuntimeConstructorInfo&gt;(object;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):int">
				<signature>System.Comparison&lt;System.Reflection.RuntimeConstructorInfo&gt;.EndInvoke(System.IAsyncResult):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(System.Reflection.RuntimeConstructorInfo;System.Reflection.RuntimeConstructorInfo):int">
				<signature>System.Comparison&lt;System.Reflection.RuntimeConstructorInfo&gt;.Invoke(System.Reflection.RuntimeConstructorInfo;System.Reflection.RuntimeConstructorInfo):int</signature>
			</method>
		</class>
		<class name="IEquatable&lt;System.Decimal&gt;" uniqueID="System.IEquatable&lt;System.Decimal&gt;">
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.Decimal):bool">
				<signature>System.IEquatable&lt;System.Decimal&gt;.Equals(System.Decimal):bool</signature>
			</method>
		</class>
		<class name="Resolver" uniqueID="System.Resolver">
			<method accessibility="Protected" methodKind="Member" name="GetCodeInfo" uniqueID="GetCodeInfo(int;int;int):byte[]">
				<signature>System.Resolver.GetCodeInfo(int;int;int):byte[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetDynamicMethod" uniqueID="GetDynamicMethod():System.Reflection.MethodInfo">
				<signature>System.Resolver.GetDynamicMethod():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetEHInfo" uniqueID="GetEHInfo(int;void):void">
				<signature>System.Resolver.GetEHInfo(int;void):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetJitContext" uniqueID="GetJitContext(int;System.RuntimeTypeHandle):void">
				<signature>System.Resolver.GetJitContext(int;System.RuntimeTypeHandle):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetLocalsSignature" uniqueID="GetLocalsSignature():byte[]">
				<signature>System.Resolver.GetLocalsSignature():byte[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetRawEHInfo" uniqueID="GetRawEHInfo():byte[]">
				<signature>System.Resolver.GetRawEHInfo():byte[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetSecurityContext" uniqueID="GetSecurityContext():System.Threading.CompressedStack">
				<signature>System.Resolver.GetSecurityContext():System.Threading.CompressedStack</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetStringLiteral" uniqueID="GetStringLiteral(int):string">
				<signature>System.Resolver.GetStringLiteral(int):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsValidToken" uniqueID="IsValidToken(int):int">
				<signature>System.Resolver.IsValidToken(int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ParentToken" uniqueID="ParentToken(int):int">
				<signature>System.Resolver.ParentToken(int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ResolveSignature" uniqueID="ResolveSignature(int;int):byte[]">
				<signature>System.Resolver.ResolveSignature(int;int):byte[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ResolveToken" uniqueID="ResolveToken(int):void">
				<signature>System.Resolver.ResolveToken(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Resolver" uniqueID="Resolver():void">
				<signature>System.Resolver.Resolver():void</signature>
			</method>
		</class>
		<class name="Action&lt;System.Reflection.RuntimeConstructorInfo&gt;" uniqueID="System.Action&lt;System.Reflection.RuntimeConstructorInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="Action&lt;System.Reflection.RuntimeConstructorInfo&gt;" uniqueID="Action&lt;System.Reflection.RuntimeConstructorInfo&gt;(object;native signed int):void">
				<signature>System.Action&lt;System.Reflection.RuntimeConstructorInfo&gt;.Action&lt;System.Reflection.RuntimeConstructorInfo&gt;(object;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(System.Reflection.RuntimeConstructorInfo;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Action&lt;System.Reflection.RuntimeConstructorInfo&gt;.BeginInvoke(System.Reflection.RuntimeConstructorInfo;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):void">
				<signature>System.Action&lt;System.Reflection.RuntimeConstructorInfo&gt;.EndInvoke(System.IAsyncResult):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(System.Reflection.RuntimeConstructorInfo):void">
				<signature>System.Action&lt;System.Reflection.RuntimeConstructorInfo&gt;.Invoke(System.Reflection.RuntimeConstructorInfo):void</signature>
			</method>
		</class>
		<class name="AppDomainManager" uniqueID="System.AppDomainManager">
			<method accessibility="Protected" methodKind="Static" name="CreateDomainHelper" uniqueID="CreateDomainHelper(string;System.Security.Policy.Evidence;System.AppDomainSetup):System.AppDomain">
				<signature>System.AppDomainManager.CreateDomainHelper(string;System.Security.Policy.Evidence;System.AppDomainSetup):System.AppDomain</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_CurrentAppDomainManager" uniqueID="get_CurrentAppDomainManager():System.AppDomainManager">
				<signature>System.AppDomainManager.get_CurrentAppDomainManager():System.AppDomainManager</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="nGetEntryAssembly" uniqueID="nGetEntryAssembly():System.Reflection.Assembly">
				<signature>System.AppDomainManager.nGetEntryAssembly():System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AppDomainManager" uniqueID="AppDomainManager():void">
				<signature>System.AppDomainManager.AppDomainManager():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CheckSecuritySettings" uniqueID="CheckSecuritySettings(System.Security.SecurityState):bool">
				<signature>System.AppDomainManager.CheckSecuritySettings(System.Security.SecurityState):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateDomain" uniqueID="CreateDomain(string;System.Security.Policy.Evidence;System.AppDomainSetup):System.AppDomain">
				<signature>System.AppDomainManager.CreateDomain(string;System.Security.Policy.Evidence;System.AppDomainSetup):System.AppDomain</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InitializeNewDomain" uniqueID="InitializeNewDomain(System.AppDomainSetup):void">
				<signature>System.AppDomainManager.InitializeNewDomain(System.AppDomainSetup):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ApplicationActivator" uniqueID="get_ApplicationActivator():System.Runtime.Hosting.ApplicationActivator">
				<signature>System.AppDomainManager.get_ApplicationActivator():System.Runtime.Hosting.ApplicationActivator</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_EntryAssembly" uniqueID="get_EntryAssembly():System.Reflection.Assembly">
				<signature>System.AppDomainManager.get_EntryAssembly():System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_HostExecutionContextManager" uniqueID="get_HostExecutionContextManager():System.Threading.HostExecutionContextManager">
				<signature>System.AppDomainManager.get_HostExecutionContextManager():System.Threading.HostExecutionContextManager</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_HostSecurityManager" uniqueID="get_HostSecurityManager():System.Security.HostSecurityManager">
				<signature>System.AppDomainManager.get_HostSecurityManager():System.Security.HostSecurityManager</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_InitializationFlags" uniqueID="get_InitializationFlags():System.AppDomainManagerInitializationOptions">
				<signature>System.AppDomainManager.get_InitializationFlags():System.AppDomainManagerInitializationOptions</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nRegisterWithHost" uniqueID="nRegisterWithHost():void">
				<signature>System.AppDomainManager.nRegisterWithHost():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_InitializationFlags" uniqueID="set_InitializationFlags(System.AppDomainManagerInitializationOptions):void">
				<signature>System.AppDomainManager.set_InitializationFlags(System.AppDomainManagerInitializationOptions):void</signature>
			</method>
		</class>
		<class name="Enum+HashEntry" uniqueID="System.Enum+HashEntry">
			<method accessibility="Public" methodKind="Member" name="Enum+HashEntry" uniqueID="Enum+HashEntry(string[];unsigned long[]):void">
				<signature>System.Enum+HashEntry.Enum+HashEntry(string[];unsigned long[]):void</signature>
			</method>
		</class>
		<class name="IComparable&lt;System.DateTime&gt;" uniqueID="System.IComparable&lt;System.DateTime&gt;">
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(System.DateTime):int">
				<signature>System.IComparable&lt;System.DateTime&gt;.CompareTo(System.DateTime):int</signature>
			</method>
		</class>
		<class name="Convert" uniqueID="System.Convert">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Convert.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CalculateOutputLength" uniqueID="CalculateOutputLength(int;bool):int">
				<signature>System.Convert.CalculateOutputLength(int;bool):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ChangeType" uniqueID="ChangeType(object;System.Type):object">
				<signature>System.Convert.ChangeType(object;System.Type):object</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ChangeType" uniqueID="ChangeType(object;System.Type;System.IFormatProvider):object">
				<signature>System.Convert.ChangeType(object;System.Type;System.IFormatProvider):object</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ChangeType" uniqueID="ChangeType(object;System.TypeCode):object">
				<signature>System.Convert.ChangeType(object;System.TypeCode):object</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ChangeType" uniqueID="ChangeType(object;System.TypeCode;System.IFormatProvider):object">
				<signature>System.Convert.ChangeType(object;System.TypeCode;System.IFormatProvider):object</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ConvertToBase64Array" uniqueID="ConvertToBase64Array(char;byte;int;int;bool):int">
				<signature>System.Convert.ConvertToBase64Array(char;byte;int;int;bool):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="DefaultToType" uniqueID="DefaultToType(System.IConvertible;System.Type;System.IFormatProvider):object">
				<signature>System.Convert.DefaultToType(System.IConvertible;System.Type;System.IFormatProvider):object</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="FromBase64CharArray" uniqueID="FromBase64CharArray(char[];int;int):byte[]">
				<signature>System.Convert.FromBase64CharArray(char[];int;int):byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="FromBase64String" uniqueID="FromBase64String(string):byte[]">
				<signature>System.Convert.FromBase64String(string):byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetTypeCode" uniqueID="GetTypeCode(object):System.TypeCode">
				<signature>System.Convert.GetTypeCode(object):System.TypeCode</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsDBNull" uniqueID="IsDBNull(object):bool">
				<signature>System.Convert.IsDBNull(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToBase64CharArray" uniqueID="ToBase64CharArray(byte[];int;int;char[];int):int">
				<signature>System.Convert.ToBase64CharArray(byte[];int;int;char[];int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToBase64CharArray" uniqueID="ToBase64CharArray(byte[];int;int;char[];int;System.Base64FormattingOptions):int">
				<signature>System.Convert.ToBase64CharArray(byte[];int;int;char[];int;System.Base64FormattingOptions):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToBase64String" uniqueID="ToBase64String(byte[]):string">
				<signature>System.Convert.ToBase64String(byte[]):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToBase64String" uniqueID="ToBase64String(byte[];System.Base64FormattingOptions):string">
				<signature>System.Convert.ToBase64String(byte[];System.Base64FormattingOptions):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToBase64String" uniqueID="ToBase64String(byte[];int;int):string">
				<signature>System.Convert.ToBase64String(byte[];int;int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToBase64String" uniqueID="ToBase64String(byte[];int;int;System.Base64FormattingOptions):string">
				<signature>System.Convert.ToBase64String(byte[];int;int;System.Base64FormattingOptions):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToBoolean" uniqueID="ToBoolean(System.DateTime):bool">
				<signature>System.Convert.ToBoolean(System.DateTime):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToBoolean" uniqueID="ToBoolean(System.Decimal):bool">
				<signature>System.Convert.ToBoolean(System.Decimal):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToBoolean" uniqueID="ToBoolean(bool):bool">
				<signature>System.Convert.ToBoolean(bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToBoolean" uniqueID="ToBoolean(byte):bool">
				<signature>System.Convert.ToBoolean(byte):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToBoolean" uniqueID="ToBoolean(char):bool">
				<signature>System.Convert.ToBoolean(char):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToBoolean" uniqueID="ToBoolean(double):bool">
				<signature>System.Convert.ToBoolean(double):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToBoolean" uniqueID="ToBoolean(float):bool">
				<signature>System.Convert.ToBoolean(float):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToBoolean" uniqueID="ToBoolean(int):bool">
				<signature>System.Convert.ToBoolean(int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToBoolean" uniqueID="ToBoolean(long):bool">
				<signature>System.Convert.ToBoolean(long):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToBoolean" uniqueID="ToBoolean(object):bool">
				<signature>System.Convert.ToBoolean(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToBoolean" uniqueID="ToBoolean(object;System.IFormatProvider):bool">
				<signature>System.Convert.ToBoolean(object;System.IFormatProvider):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToBoolean" uniqueID="ToBoolean(sbyte):bool">
				<signature>System.Convert.ToBoolean(sbyte):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToBoolean" uniqueID="ToBoolean(short):bool">
				<signature>System.Convert.ToBoolean(short):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToBoolean" uniqueID="ToBoolean(string):bool">
				<signature>System.Convert.ToBoolean(string):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToBoolean" uniqueID="ToBoolean(string;System.IFormatProvider):bool">
				<signature>System.Convert.ToBoolean(string;System.IFormatProvider):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToBoolean" uniqueID="ToBoolean(unsigned int):bool">
				<signature>System.Convert.ToBoolean(unsigned int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToBoolean" uniqueID="ToBoolean(unsigned long):bool">
				<signature>System.Convert.ToBoolean(unsigned long):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToBoolean" uniqueID="ToBoolean(unsigned short):bool">
				<signature>System.Convert.ToBoolean(unsigned short):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToByte" uniqueID="ToByte(System.DateTime):byte">
				<signature>System.Convert.ToByte(System.DateTime):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToByte" uniqueID="ToByte(System.Decimal):byte">
				<signature>System.Convert.ToByte(System.Decimal):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToByte" uniqueID="ToByte(bool):byte">
				<signature>System.Convert.ToByte(bool):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToByte" uniqueID="ToByte(byte):byte">
				<signature>System.Convert.ToByte(byte):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToByte" uniqueID="ToByte(char):byte">
				<signature>System.Convert.ToByte(char):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToByte" uniqueID="ToByte(double):byte">
				<signature>System.Convert.ToByte(double):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToByte" uniqueID="ToByte(float):byte">
				<signature>System.Convert.ToByte(float):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToByte" uniqueID="ToByte(int):byte">
				<signature>System.Convert.ToByte(int):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToByte" uniqueID="ToByte(long):byte">
				<signature>System.Convert.ToByte(long):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToByte" uniqueID="ToByte(object):byte">
				<signature>System.Convert.ToByte(object):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToByte" uniqueID="ToByte(object;System.IFormatProvider):byte">
				<signature>System.Convert.ToByte(object;System.IFormatProvider):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToByte" uniqueID="ToByte(sbyte):byte">
				<signature>System.Convert.ToByte(sbyte):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToByte" uniqueID="ToByte(short):byte">
				<signature>System.Convert.ToByte(short):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToByte" uniqueID="ToByte(string):byte">
				<signature>System.Convert.ToByte(string):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToByte" uniqueID="ToByte(string;System.IFormatProvider):byte">
				<signature>System.Convert.ToByte(string;System.IFormatProvider):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToByte" uniqueID="ToByte(string;int):byte">
				<signature>System.Convert.ToByte(string;int):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToByte" uniqueID="ToByte(unsigned int):byte">
				<signature>System.Convert.ToByte(unsigned int):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToByte" uniqueID="ToByte(unsigned long):byte">
				<signature>System.Convert.ToByte(unsigned long):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToByte" uniqueID="ToByte(unsigned short):byte">
				<signature>System.Convert.ToByte(unsigned short):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToChar" uniqueID="ToChar(System.DateTime):char">
				<signature>System.Convert.ToChar(System.DateTime):char</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToChar" uniqueID="ToChar(System.Decimal):char">
				<signature>System.Convert.ToChar(System.Decimal):char</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToChar" uniqueID="ToChar(bool):char">
				<signature>System.Convert.ToChar(bool):char</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToChar" uniqueID="ToChar(byte):char">
				<signature>System.Convert.ToChar(byte):char</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToChar" uniqueID="ToChar(char):char">
				<signature>System.Convert.ToChar(char):char</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToChar" uniqueID="ToChar(double):char">
				<signature>System.Convert.ToChar(double):char</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToChar" uniqueID="ToChar(float):char">
				<signature>System.Convert.ToChar(float):char</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToChar" uniqueID="ToChar(int):char">
				<signature>System.Convert.ToChar(int):char</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToChar" uniqueID="ToChar(long):char">
				<signature>System.Convert.ToChar(long):char</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToChar" uniqueID="ToChar(object):char">
				<signature>System.Convert.ToChar(object):char</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToChar" uniqueID="ToChar(object;System.IFormatProvider):char">
				<signature>System.Convert.ToChar(object;System.IFormatProvider):char</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToChar" uniqueID="ToChar(sbyte):char">
				<signature>System.Convert.ToChar(sbyte):char</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToChar" uniqueID="ToChar(short):char">
				<signature>System.Convert.ToChar(short):char</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToChar" uniqueID="ToChar(string):char">
				<signature>System.Convert.ToChar(string):char</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToChar" uniqueID="ToChar(string;System.IFormatProvider):char">
				<signature>System.Convert.ToChar(string;System.IFormatProvider):char</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToChar" uniqueID="ToChar(unsigned int):char">
				<signature>System.Convert.ToChar(unsigned int):char</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToChar" uniqueID="ToChar(unsigned long):char">
				<signature>System.Convert.ToChar(unsigned long):char</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToChar" uniqueID="ToChar(unsigned short):char">
				<signature>System.Convert.ToChar(unsigned short):char</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDateTime" uniqueID="ToDateTime(System.DateTime):System.DateTime">
				<signature>System.Convert.ToDateTime(System.DateTime):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDateTime" uniqueID="ToDateTime(System.Decimal):System.DateTime">
				<signature>System.Convert.ToDateTime(System.Decimal):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDateTime" uniqueID="ToDateTime(bool):System.DateTime">
				<signature>System.Convert.ToDateTime(bool):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDateTime" uniqueID="ToDateTime(byte):System.DateTime">
				<signature>System.Convert.ToDateTime(byte):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDateTime" uniqueID="ToDateTime(char):System.DateTime">
				<signature>System.Convert.ToDateTime(char):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDateTime" uniqueID="ToDateTime(double):System.DateTime">
				<signature>System.Convert.ToDateTime(double):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDateTime" uniqueID="ToDateTime(float):System.DateTime">
				<signature>System.Convert.ToDateTime(float):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDateTime" uniqueID="ToDateTime(int):System.DateTime">
				<signature>System.Convert.ToDateTime(int):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDateTime" uniqueID="ToDateTime(long):System.DateTime">
				<signature>System.Convert.ToDateTime(long):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDateTime" uniqueID="ToDateTime(object):System.DateTime">
				<signature>System.Convert.ToDateTime(object):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDateTime" uniqueID="ToDateTime(object;System.IFormatProvider):System.DateTime">
				<signature>System.Convert.ToDateTime(object;System.IFormatProvider):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDateTime" uniqueID="ToDateTime(sbyte):System.DateTime">
				<signature>System.Convert.ToDateTime(sbyte):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDateTime" uniqueID="ToDateTime(short):System.DateTime">
				<signature>System.Convert.ToDateTime(short):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDateTime" uniqueID="ToDateTime(string):System.DateTime">
				<signature>System.Convert.ToDateTime(string):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDateTime" uniqueID="ToDateTime(string;System.IFormatProvider):System.DateTime">
				<signature>System.Convert.ToDateTime(string;System.IFormatProvider):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDateTime" uniqueID="ToDateTime(unsigned int):System.DateTime">
				<signature>System.Convert.ToDateTime(unsigned int):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDateTime" uniqueID="ToDateTime(unsigned long):System.DateTime">
				<signature>System.Convert.ToDateTime(unsigned long):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDateTime" uniqueID="ToDateTime(unsigned short):System.DateTime">
				<signature>System.Convert.ToDateTime(unsigned short):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDecimal" uniqueID="ToDecimal(System.DateTime):System.Decimal">
				<signature>System.Convert.ToDecimal(System.DateTime):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDecimal" uniqueID="ToDecimal(System.Decimal):System.Decimal">
				<signature>System.Convert.ToDecimal(System.Decimal):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDecimal" uniqueID="ToDecimal(bool):System.Decimal">
				<signature>System.Convert.ToDecimal(bool):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDecimal" uniqueID="ToDecimal(byte):System.Decimal">
				<signature>System.Convert.ToDecimal(byte):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDecimal" uniqueID="ToDecimal(char):System.Decimal">
				<signature>System.Convert.ToDecimal(char):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDecimal" uniqueID="ToDecimal(double):System.Decimal">
				<signature>System.Convert.ToDecimal(double):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDecimal" uniqueID="ToDecimal(float):System.Decimal">
				<signature>System.Convert.ToDecimal(float):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDecimal" uniqueID="ToDecimal(int):System.Decimal">
				<signature>System.Convert.ToDecimal(int):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDecimal" uniqueID="ToDecimal(long):System.Decimal">
				<signature>System.Convert.ToDecimal(long):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDecimal" uniqueID="ToDecimal(object):System.Decimal">
				<signature>System.Convert.ToDecimal(object):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDecimal" uniqueID="ToDecimal(object;System.IFormatProvider):System.Decimal">
				<signature>System.Convert.ToDecimal(object;System.IFormatProvider):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDecimal" uniqueID="ToDecimal(sbyte):System.Decimal">
				<signature>System.Convert.ToDecimal(sbyte):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDecimal" uniqueID="ToDecimal(short):System.Decimal">
				<signature>System.Convert.ToDecimal(short):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDecimal" uniqueID="ToDecimal(string):System.Decimal">
				<signature>System.Convert.ToDecimal(string):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDecimal" uniqueID="ToDecimal(string;System.IFormatProvider):System.Decimal">
				<signature>System.Convert.ToDecimal(string;System.IFormatProvider):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDecimal" uniqueID="ToDecimal(unsigned int):System.Decimal">
				<signature>System.Convert.ToDecimal(unsigned int):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDecimal" uniqueID="ToDecimal(unsigned long):System.Decimal">
				<signature>System.Convert.ToDecimal(unsigned long):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDecimal" uniqueID="ToDecimal(unsigned short):System.Decimal">
				<signature>System.Convert.ToDecimal(unsigned short):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDouble" uniqueID="ToDouble(System.DateTime):double">
				<signature>System.Convert.ToDouble(System.DateTime):double</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDouble" uniqueID="ToDouble(System.Decimal):double">
				<signature>System.Convert.ToDouble(System.Decimal):double</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDouble" uniqueID="ToDouble(bool):double">
				<signature>System.Convert.ToDouble(bool):double</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDouble" uniqueID="ToDouble(byte):double">
				<signature>System.Convert.ToDouble(byte):double</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDouble" uniqueID="ToDouble(char):double">
				<signature>System.Convert.ToDouble(char):double</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDouble" uniqueID="ToDouble(double):double">
				<signature>System.Convert.ToDouble(double):double</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDouble" uniqueID="ToDouble(float):double">
				<signature>System.Convert.ToDouble(float):double</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDouble" uniqueID="ToDouble(int):double">
				<signature>System.Convert.ToDouble(int):double</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDouble" uniqueID="ToDouble(long):double">
				<signature>System.Convert.ToDouble(long):double</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDouble" uniqueID="ToDouble(object):double">
				<signature>System.Convert.ToDouble(object):double</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDouble" uniqueID="ToDouble(object;System.IFormatProvider):double">
				<signature>System.Convert.ToDouble(object;System.IFormatProvider):double</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDouble" uniqueID="ToDouble(sbyte):double">
				<signature>System.Convert.ToDouble(sbyte):double</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDouble" uniqueID="ToDouble(short):double">
				<signature>System.Convert.ToDouble(short):double</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDouble" uniqueID="ToDouble(string):double">
				<signature>System.Convert.ToDouble(string):double</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDouble" uniqueID="ToDouble(string;System.IFormatProvider):double">
				<signature>System.Convert.ToDouble(string;System.IFormatProvider):double</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDouble" uniqueID="ToDouble(unsigned int):double">
				<signature>System.Convert.ToDouble(unsigned int):double</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDouble" uniqueID="ToDouble(unsigned long):double">
				<signature>System.Convert.ToDouble(unsigned long):double</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDouble" uniqueID="ToDouble(unsigned short):double">
				<signature>System.Convert.ToDouble(unsigned short):double</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt16" uniqueID="ToInt16(System.DateTime):short">
				<signature>System.Convert.ToInt16(System.DateTime):short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt16" uniqueID="ToInt16(System.Decimal):short">
				<signature>System.Convert.ToInt16(System.Decimal):short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt16" uniqueID="ToInt16(bool):short">
				<signature>System.Convert.ToInt16(bool):short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt16" uniqueID="ToInt16(byte):short">
				<signature>System.Convert.ToInt16(byte):short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt16" uniqueID="ToInt16(char):short">
				<signature>System.Convert.ToInt16(char):short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt16" uniqueID="ToInt16(double):short">
				<signature>System.Convert.ToInt16(double):short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt16" uniqueID="ToInt16(float):short">
				<signature>System.Convert.ToInt16(float):short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt16" uniqueID="ToInt16(int):short">
				<signature>System.Convert.ToInt16(int):short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt16" uniqueID="ToInt16(long):short">
				<signature>System.Convert.ToInt16(long):short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt16" uniqueID="ToInt16(object):short">
				<signature>System.Convert.ToInt16(object):short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt16" uniqueID="ToInt16(object;System.IFormatProvider):short">
				<signature>System.Convert.ToInt16(object;System.IFormatProvider):short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt16" uniqueID="ToInt16(sbyte):short">
				<signature>System.Convert.ToInt16(sbyte):short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt16" uniqueID="ToInt16(short):short">
				<signature>System.Convert.ToInt16(short):short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt16" uniqueID="ToInt16(string):short">
				<signature>System.Convert.ToInt16(string):short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt16" uniqueID="ToInt16(string;System.IFormatProvider):short">
				<signature>System.Convert.ToInt16(string;System.IFormatProvider):short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt16" uniqueID="ToInt16(string;int):short">
				<signature>System.Convert.ToInt16(string;int):short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt16" uniqueID="ToInt16(unsigned int):short">
				<signature>System.Convert.ToInt16(unsigned int):short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt16" uniqueID="ToInt16(unsigned long):short">
				<signature>System.Convert.ToInt16(unsigned long):short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt16" uniqueID="ToInt16(unsigned short):short">
				<signature>System.Convert.ToInt16(unsigned short):short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt32" uniqueID="ToInt32(System.DateTime):int">
				<signature>System.Convert.ToInt32(System.DateTime):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt32" uniqueID="ToInt32(System.Decimal):int">
				<signature>System.Convert.ToInt32(System.Decimal):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt32" uniqueID="ToInt32(bool):int">
				<signature>System.Convert.ToInt32(bool):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt32" uniqueID="ToInt32(byte):int">
				<signature>System.Convert.ToInt32(byte):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt32" uniqueID="ToInt32(char):int">
				<signature>System.Convert.ToInt32(char):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt32" uniqueID="ToInt32(double):int">
				<signature>System.Convert.ToInt32(double):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt32" uniqueID="ToInt32(float):int">
				<signature>System.Convert.ToInt32(float):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt32" uniqueID="ToInt32(int):int">
				<signature>System.Convert.ToInt32(int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt32" uniqueID="ToInt32(long):int">
				<signature>System.Convert.ToInt32(long):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt32" uniqueID="ToInt32(object):int">
				<signature>System.Convert.ToInt32(object):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt32" uniqueID="ToInt32(object;System.IFormatProvider):int">
				<signature>System.Convert.ToInt32(object;System.IFormatProvider):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt32" uniqueID="ToInt32(sbyte):int">
				<signature>System.Convert.ToInt32(sbyte):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt32" uniqueID="ToInt32(short):int">
				<signature>System.Convert.ToInt32(short):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt32" uniqueID="ToInt32(string):int">
				<signature>System.Convert.ToInt32(string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt32" uniqueID="ToInt32(string;System.IFormatProvider):int">
				<signature>System.Convert.ToInt32(string;System.IFormatProvider):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt32" uniqueID="ToInt32(string;int):int">
				<signature>System.Convert.ToInt32(string;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt32" uniqueID="ToInt32(unsigned int):int">
				<signature>System.Convert.ToInt32(unsigned int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt32" uniqueID="ToInt32(unsigned long):int">
				<signature>System.Convert.ToInt32(unsigned long):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt32" uniqueID="ToInt32(unsigned short):int">
				<signature>System.Convert.ToInt32(unsigned short):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt64" uniqueID="ToInt64(System.DateTime):long">
				<signature>System.Convert.ToInt64(System.DateTime):long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt64" uniqueID="ToInt64(System.Decimal):long">
				<signature>System.Convert.ToInt64(System.Decimal):long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt64" uniqueID="ToInt64(bool):long">
				<signature>System.Convert.ToInt64(bool):long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt64" uniqueID="ToInt64(byte):long">
				<signature>System.Convert.ToInt64(byte):long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt64" uniqueID="ToInt64(char):long">
				<signature>System.Convert.ToInt64(char):long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt64" uniqueID="ToInt64(double):long">
				<signature>System.Convert.ToInt64(double):long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt64" uniqueID="ToInt64(float):long">
				<signature>System.Convert.ToInt64(float):long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt64" uniqueID="ToInt64(int):long">
				<signature>System.Convert.ToInt64(int):long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt64" uniqueID="ToInt64(long):long">
				<signature>System.Convert.ToInt64(long):long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt64" uniqueID="ToInt64(object):long">
				<signature>System.Convert.ToInt64(object):long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt64" uniqueID="ToInt64(object;System.IFormatProvider):long">
				<signature>System.Convert.ToInt64(object;System.IFormatProvider):long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt64" uniqueID="ToInt64(sbyte):long">
				<signature>System.Convert.ToInt64(sbyte):long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt64" uniqueID="ToInt64(short):long">
				<signature>System.Convert.ToInt64(short):long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt64" uniqueID="ToInt64(string):long">
				<signature>System.Convert.ToInt64(string):long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt64" uniqueID="ToInt64(string;System.IFormatProvider):long">
				<signature>System.Convert.ToInt64(string;System.IFormatProvider):long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt64" uniqueID="ToInt64(string;int):long">
				<signature>System.Convert.ToInt64(string;int):long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt64" uniqueID="ToInt64(unsigned int):long">
				<signature>System.Convert.ToInt64(unsigned int):long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt64" uniqueID="ToInt64(unsigned long):long">
				<signature>System.Convert.ToInt64(unsigned long):long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt64" uniqueID="ToInt64(unsigned short):long">
				<signature>System.Convert.ToInt64(unsigned short):long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSByte" uniqueID="ToSByte(System.DateTime):sbyte">
				<signature>System.Convert.ToSByte(System.DateTime):sbyte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSByte" uniqueID="ToSByte(System.Decimal):sbyte">
				<signature>System.Convert.ToSByte(System.Decimal):sbyte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSByte" uniqueID="ToSByte(bool):sbyte">
				<signature>System.Convert.ToSByte(bool):sbyte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSByte" uniqueID="ToSByte(byte):sbyte">
				<signature>System.Convert.ToSByte(byte):sbyte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSByte" uniqueID="ToSByte(char):sbyte">
				<signature>System.Convert.ToSByte(char):sbyte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSByte" uniqueID="ToSByte(double):sbyte">
				<signature>System.Convert.ToSByte(double):sbyte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSByte" uniqueID="ToSByte(float):sbyte">
				<signature>System.Convert.ToSByte(float):sbyte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSByte" uniqueID="ToSByte(int):sbyte">
				<signature>System.Convert.ToSByte(int):sbyte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSByte" uniqueID="ToSByte(long):sbyte">
				<signature>System.Convert.ToSByte(long):sbyte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSByte" uniqueID="ToSByte(object):sbyte">
				<signature>System.Convert.ToSByte(object):sbyte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSByte" uniqueID="ToSByte(object;System.IFormatProvider):sbyte">
				<signature>System.Convert.ToSByte(object;System.IFormatProvider):sbyte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSByte" uniqueID="ToSByte(sbyte):sbyte">
				<signature>System.Convert.ToSByte(sbyte):sbyte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSByte" uniqueID="ToSByte(short):sbyte">
				<signature>System.Convert.ToSByte(short):sbyte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSByte" uniqueID="ToSByte(string):sbyte">
				<signature>System.Convert.ToSByte(string):sbyte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSByte" uniqueID="ToSByte(string;System.IFormatProvider):sbyte">
				<signature>System.Convert.ToSByte(string;System.IFormatProvider):sbyte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSByte" uniqueID="ToSByte(string;int):sbyte">
				<signature>System.Convert.ToSByte(string;int):sbyte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSByte" uniqueID="ToSByte(unsigned int):sbyte">
				<signature>System.Convert.ToSByte(unsigned int):sbyte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSByte" uniqueID="ToSByte(unsigned long):sbyte">
				<signature>System.Convert.ToSByte(unsigned long):sbyte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSByte" uniqueID="ToSByte(unsigned short):sbyte">
				<signature>System.Convert.ToSByte(unsigned short):sbyte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSingle" uniqueID="ToSingle(System.DateTime):float">
				<signature>System.Convert.ToSingle(System.DateTime):float</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSingle" uniqueID="ToSingle(System.Decimal):float">
				<signature>System.Convert.ToSingle(System.Decimal):float</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSingle" uniqueID="ToSingle(bool):float">
				<signature>System.Convert.ToSingle(bool):float</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSingle" uniqueID="ToSingle(byte):float">
				<signature>System.Convert.ToSingle(byte):float</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSingle" uniqueID="ToSingle(char):float">
				<signature>System.Convert.ToSingle(char):float</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSingle" uniqueID="ToSingle(double):float">
				<signature>System.Convert.ToSingle(double):float</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSingle" uniqueID="ToSingle(float):float">
				<signature>System.Convert.ToSingle(float):float</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSingle" uniqueID="ToSingle(int):float">
				<signature>System.Convert.ToSingle(int):float</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSingle" uniqueID="ToSingle(long):float">
				<signature>System.Convert.ToSingle(long):float</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSingle" uniqueID="ToSingle(object):float">
				<signature>System.Convert.ToSingle(object):float</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSingle" uniqueID="ToSingle(object;System.IFormatProvider):float">
				<signature>System.Convert.ToSingle(object;System.IFormatProvider):float</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSingle" uniqueID="ToSingle(sbyte):float">
				<signature>System.Convert.ToSingle(sbyte):float</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSingle" uniqueID="ToSingle(short):float">
				<signature>System.Convert.ToSingle(short):float</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSingle" uniqueID="ToSingle(string):float">
				<signature>System.Convert.ToSingle(string):float</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSingle" uniqueID="ToSingle(string;System.IFormatProvider):float">
				<signature>System.Convert.ToSingle(string;System.IFormatProvider):float</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSingle" uniqueID="ToSingle(unsigned int):float">
				<signature>System.Convert.ToSingle(unsigned int):float</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSingle" uniqueID="ToSingle(unsigned long):float">
				<signature>System.Convert.ToSingle(unsigned long):float</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSingle" uniqueID="ToSingle(unsigned short):float">
				<signature>System.Convert.ToSingle(unsigned short):float</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(System.DateTime):string">
				<signature>System.Convert.ToString(System.DateTime):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(System.DateTime;System.IFormatProvider):string">
				<signature>System.Convert.ToString(System.DateTime;System.IFormatProvider):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(System.Decimal):string">
				<signature>System.Convert.ToString(System.Decimal):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(System.Decimal;System.IFormatProvider):string">
				<signature>System.Convert.ToString(System.Decimal;System.IFormatProvider):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(bool):string">
				<signature>System.Convert.ToString(bool):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(bool;System.IFormatProvider):string">
				<signature>System.Convert.ToString(bool;System.IFormatProvider):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(byte):string">
				<signature>System.Convert.ToString(byte):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(byte;System.IFormatProvider):string">
				<signature>System.Convert.ToString(byte;System.IFormatProvider):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(byte;int):string">
				<signature>System.Convert.ToString(byte;int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(char):string">
				<signature>System.Convert.ToString(char):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(char;System.IFormatProvider):string">
				<signature>System.Convert.ToString(char;System.IFormatProvider):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(double):string">
				<signature>System.Convert.ToString(double):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(double;System.IFormatProvider):string">
				<signature>System.Convert.ToString(double;System.IFormatProvider):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(float):string">
				<signature>System.Convert.ToString(float):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(float;System.IFormatProvider):string">
				<signature>System.Convert.ToString(float;System.IFormatProvider):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(int):string">
				<signature>System.Convert.ToString(int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(int;System.IFormatProvider):string">
				<signature>System.Convert.ToString(int;System.IFormatProvider):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(int;int):string">
				<signature>System.Convert.ToString(int;int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(long):string">
				<signature>System.Convert.ToString(long):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(long;System.IFormatProvider):string">
				<signature>System.Convert.ToString(long;System.IFormatProvider):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(long;int):string">
				<signature>System.Convert.ToString(long;int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(object):string">
				<signature>System.Convert.ToString(object):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(object;System.IFormatProvider):string">
				<signature>System.Convert.ToString(object;System.IFormatProvider):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(sbyte):string">
				<signature>System.Convert.ToString(sbyte):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(sbyte;System.IFormatProvider):string">
				<signature>System.Convert.ToString(sbyte;System.IFormatProvider):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(short):string">
				<signature>System.Convert.ToString(short):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(short;System.IFormatProvider):string">
				<signature>System.Convert.ToString(short;System.IFormatProvider):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(short;int):string">
				<signature>System.Convert.ToString(short;int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(string):string">
				<signature>System.Convert.ToString(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(string;System.IFormatProvider):string">
				<signature>System.Convert.ToString(string;System.IFormatProvider):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(unsigned int):string">
				<signature>System.Convert.ToString(unsigned int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(unsigned int;System.IFormatProvider):string">
				<signature>System.Convert.ToString(unsigned int;System.IFormatProvider):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(unsigned long):string">
				<signature>System.Convert.ToString(unsigned long):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(unsigned long;System.IFormatProvider):string">
				<signature>System.Convert.ToString(unsigned long;System.IFormatProvider):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(unsigned short):string">
				<signature>System.Convert.ToString(unsigned short):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(unsigned short;System.IFormatProvider):string">
				<signature>System.Convert.ToString(unsigned short;System.IFormatProvider):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt16" uniqueID="ToUInt16(System.DateTime):unsigned short">
				<signature>System.Convert.ToUInt16(System.DateTime):unsigned short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt16" uniqueID="ToUInt16(System.Decimal):unsigned short">
				<signature>System.Convert.ToUInt16(System.Decimal):unsigned short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt16" uniqueID="ToUInt16(bool):unsigned short">
				<signature>System.Convert.ToUInt16(bool):unsigned short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt16" uniqueID="ToUInt16(byte):unsigned short">
				<signature>System.Convert.ToUInt16(byte):unsigned short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt16" uniqueID="ToUInt16(char):unsigned short">
				<signature>System.Convert.ToUInt16(char):unsigned short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt16" uniqueID="ToUInt16(double):unsigned short">
				<signature>System.Convert.ToUInt16(double):unsigned short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt16" uniqueID="ToUInt16(float):unsigned short">
				<signature>System.Convert.ToUInt16(float):unsigned short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt16" uniqueID="ToUInt16(int):unsigned short">
				<signature>System.Convert.ToUInt16(int):unsigned short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt16" uniqueID="ToUInt16(long):unsigned short">
				<signature>System.Convert.ToUInt16(long):unsigned short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt16" uniqueID="ToUInt16(object):unsigned short">
				<signature>System.Convert.ToUInt16(object):unsigned short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt16" uniqueID="ToUInt16(object;System.IFormatProvider):unsigned short">
				<signature>System.Convert.ToUInt16(object;System.IFormatProvider):unsigned short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt16" uniqueID="ToUInt16(sbyte):unsigned short">
				<signature>System.Convert.ToUInt16(sbyte):unsigned short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt16" uniqueID="ToUInt16(short):unsigned short">
				<signature>System.Convert.ToUInt16(short):unsigned short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt16" uniqueID="ToUInt16(string):unsigned short">
				<signature>System.Convert.ToUInt16(string):unsigned short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt16" uniqueID="ToUInt16(string;System.IFormatProvider):unsigned short">
				<signature>System.Convert.ToUInt16(string;System.IFormatProvider):unsigned short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt16" uniqueID="ToUInt16(string;int):unsigned short">
				<signature>System.Convert.ToUInt16(string;int):unsigned short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt16" uniqueID="ToUInt16(unsigned int):unsigned short">
				<signature>System.Convert.ToUInt16(unsigned int):unsigned short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt16" uniqueID="ToUInt16(unsigned long):unsigned short">
				<signature>System.Convert.ToUInt16(unsigned long):unsigned short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt16" uniqueID="ToUInt16(unsigned short):unsigned short">
				<signature>System.Convert.ToUInt16(unsigned short):unsigned short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt32" uniqueID="ToUInt32(System.DateTime):unsigned int">
				<signature>System.Convert.ToUInt32(System.DateTime):unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt32" uniqueID="ToUInt32(System.Decimal):unsigned int">
				<signature>System.Convert.ToUInt32(System.Decimal):unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt32" uniqueID="ToUInt32(bool):unsigned int">
				<signature>System.Convert.ToUInt32(bool):unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt32" uniqueID="ToUInt32(byte):unsigned int">
				<signature>System.Convert.ToUInt32(byte):unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt32" uniqueID="ToUInt32(char):unsigned int">
				<signature>System.Convert.ToUInt32(char):unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt32" uniqueID="ToUInt32(double):unsigned int">
				<signature>System.Convert.ToUInt32(double):unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt32" uniqueID="ToUInt32(float):unsigned int">
				<signature>System.Convert.ToUInt32(float):unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt32" uniqueID="ToUInt32(int):unsigned int">
				<signature>System.Convert.ToUInt32(int):unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt32" uniqueID="ToUInt32(long):unsigned int">
				<signature>System.Convert.ToUInt32(long):unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt32" uniqueID="ToUInt32(object):unsigned int">
				<signature>System.Convert.ToUInt32(object):unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt32" uniqueID="ToUInt32(object;System.IFormatProvider):unsigned int">
				<signature>System.Convert.ToUInt32(object;System.IFormatProvider):unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt32" uniqueID="ToUInt32(sbyte):unsigned int">
				<signature>System.Convert.ToUInt32(sbyte):unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt32" uniqueID="ToUInt32(short):unsigned int">
				<signature>System.Convert.ToUInt32(short):unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt32" uniqueID="ToUInt32(string):unsigned int">
				<signature>System.Convert.ToUInt32(string):unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt32" uniqueID="ToUInt32(string;System.IFormatProvider):unsigned int">
				<signature>System.Convert.ToUInt32(string;System.IFormatProvider):unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt32" uniqueID="ToUInt32(string;int):unsigned int">
				<signature>System.Convert.ToUInt32(string;int):unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt32" uniqueID="ToUInt32(unsigned int):unsigned int">
				<signature>System.Convert.ToUInt32(unsigned int):unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt32" uniqueID="ToUInt32(unsigned long):unsigned int">
				<signature>System.Convert.ToUInt32(unsigned long):unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt32" uniqueID="ToUInt32(unsigned short):unsigned int">
				<signature>System.Convert.ToUInt32(unsigned short):unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt64" uniqueID="ToUInt64(System.DateTime):unsigned long">
				<signature>System.Convert.ToUInt64(System.DateTime):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt64" uniqueID="ToUInt64(System.Decimal):unsigned long">
				<signature>System.Convert.ToUInt64(System.Decimal):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt64" uniqueID="ToUInt64(bool):unsigned long">
				<signature>System.Convert.ToUInt64(bool):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt64" uniqueID="ToUInt64(byte):unsigned long">
				<signature>System.Convert.ToUInt64(byte):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt64" uniqueID="ToUInt64(char):unsigned long">
				<signature>System.Convert.ToUInt64(char):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt64" uniqueID="ToUInt64(double):unsigned long">
				<signature>System.Convert.ToUInt64(double):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt64" uniqueID="ToUInt64(float):unsigned long">
				<signature>System.Convert.ToUInt64(float):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt64" uniqueID="ToUInt64(int):unsigned long">
				<signature>System.Convert.ToUInt64(int):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt64" uniqueID="ToUInt64(long):unsigned long">
				<signature>System.Convert.ToUInt64(long):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt64" uniqueID="ToUInt64(object):unsigned long">
				<signature>System.Convert.ToUInt64(object):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt64" uniqueID="ToUInt64(object;System.IFormatProvider):unsigned long">
				<signature>System.Convert.ToUInt64(object;System.IFormatProvider):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt64" uniqueID="ToUInt64(sbyte):unsigned long">
				<signature>System.Convert.ToUInt64(sbyte):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt64" uniqueID="ToUInt64(short):unsigned long">
				<signature>System.Convert.ToUInt64(short):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt64" uniqueID="ToUInt64(string):unsigned long">
				<signature>System.Convert.ToUInt64(string):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt64" uniqueID="ToUInt64(string;System.IFormatProvider):unsigned long">
				<signature>System.Convert.ToUInt64(string;System.IFormatProvider):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt64" uniqueID="ToUInt64(string;int):unsigned long">
				<signature>System.Convert.ToUInt64(string;int):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt64" uniqueID="ToUInt64(unsigned int):unsigned long">
				<signature>System.Convert.ToUInt64(unsigned int):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt64" uniqueID="ToUInt64(unsigned long):unsigned long">
				<signature>System.Convert.ToUInt64(unsigned long):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt64" uniqueID="ToUInt64(unsigned short):unsigned long">
				<signature>System.Convert.ToUInt64(unsigned short):unsigned long</signature>
			</method>
		</class>
		<class name="CrossAppDomainDelegate" uniqueID="System.CrossAppDomainDelegate">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.CrossAppDomainDelegate.BeginInvoke(System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CrossAppDomainDelegate" uniqueID="CrossAppDomainDelegate(object;native signed int):void">
				<signature>System.CrossAppDomainDelegate.CrossAppDomainDelegate(object;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):void">
				<signature>System.CrossAppDomainDelegate.EndInvoke(System.IAsyncResult):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke():void">
				<signature>System.CrossAppDomainDelegate.Invoke():void</signature>
			</method>
		</class>
		<class name="Predicate&lt;System.Reflection.RuntimeEventInfo&gt;" uniqueID="System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(System.Reflection.RuntimeEventInfo;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;.BeginInvoke(System.Reflection.RuntimeEventInfo;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):bool">
				<signature>System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;.EndInvoke(System.IAsyncResult):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(System.Reflection.RuntimeEventInfo):bool">
				<signature>System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;.Invoke(System.Reflection.RuntimeEventInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Predicate&lt;System.Reflection.RuntimeEventInfo&gt;" uniqueID="Predicate&lt;System.Reflection.RuntimeEventInfo&gt;(object;native signed int):void">
				<signature>System.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;.Predicate&lt;System.Reflection.RuntimeEventInfo&gt;(object;native signed int):void</signature>
			</method>
		</class>
		<class name="Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;" uniqueID="System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(System.Reflection.RuntimePropertyInfo;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;.BeginInvoke(System.Reflection.RuntimePropertyInfo;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):bool">
				<signature>System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;.EndInvoke(System.IAsyncResult):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(System.Reflection.RuntimePropertyInfo):bool">
				<signature>System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;.Invoke(System.Reflection.RuntimePropertyInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;" uniqueID="Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;(object;native signed int):void">
				<signature>System.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;.Predicate&lt;System.Reflection.RuntimePropertyInfo&gt;(object;native signed int):void</signature>
			</method>
		</class>
		<class name="ConsoleCancelEventArgs" uniqueID="System.ConsoleCancelEventArgs">
			<method accessibility="Protected" methodKind="Member" name="ConsoleCancelEventArgs" uniqueID="ConsoleCancelEventArgs(System.ConsoleSpecialKey):void">
				<signature>System.ConsoleCancelEventArgs.ConsoleCancelEventArgs(System.ConsoleSpecialKey):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Cancel" uniqueID="get_Cancel():bool">
				<signature>System.ConsoleCancelEventArgs.get_Cancel():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SpecialKey" uniqueID="get_SpecialKey():System.ConsoleSpecialKey">
				<signature>System.ConsoleCancelEventArgs.get_SpecialKey():System.ConsoleSpecialKey</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Cancel" uniqueID="set_Cancel(bool):void">
				<signature>System.ConsoleCancelEventArgs.set_Cancel(bool):void</signature>
			</method>
		</class>
		<class name="EventArgs" uniqueID="System.EventArgs">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.EventArgs.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EventArgs" uniqueID="EventArgs():void">
				<signature>System.EventArgs.EventArgs():void</signature>
			</method>
		</class>
		<class name="Object" uniqueID="System.Object">
			<method accessibility="Public" methodKind="Static" name="Equals" uniqueID="Equals(object;object):bool">
				<signature>System.Object.Equals(object;object):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalEquals" uniqueID="InternalEquals(object;object):bool">
				<signature>System.Object.InternalEquals(object;object):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalGetHashCode" uniqueID="InternalGetHashCode(object):int">
				<signature>System.Object.InternalGetHashCode(object):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ReferenceEquals" uniqueID="ReferenceEquals(object;object):bool">
				<signature>System.Object.ReferenceEquals(object;object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Object.Equals(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="FieldGetter" uniqueID="FieldGetter(string;string;object):void">
				<signature>System.Object.FieldGetter(string;string;object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="FieldSetter" uniqueID="FieldSetter(string;string;object):void">
				<signature>System.Object.FieldSetter(string;string;object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Finalize" uniqueID="Finalize():void">
				<signature>System.Object.Finalize():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetFieldInfo" uniqueID="GetFieldInfo(string;string):System.Reflection.FieldInfo">
				<signature>System.Object.GetFieldInfo(string;string):System.Reflection.FieldInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Object.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType():System.Type">
				<signature>System.Object.GetType():System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MemberwiseClone" uniqueID="MemberwiseClone():object">
				<signature>System.Object.MemberwiseClone():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Object" uniqueID="Object():void">
				<signature>System.Object.Object():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Object.ToString():string</signature>
			</method>
		</class>
		<class name="Predicate&lt;string&gt;" uniqueID="System.Predicate&lt;string&gt;">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(string;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Predicate&lt;string&gt;.BeginInvoke(string;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):bool">
				<signature>System.Predicate&lt;string&gt;.EndInvoke(System.IAsyncResult):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(string):bool">
				<signature>System.Predicate&lt;string&gt;.Invoke(string):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Predicate&lt;string&gt;" uniqueID="Predicate&lt;string&gt;(object;native signed int):void">
				<signature>System.Predicate&lt;string&gt;.Predicate&lt;string&gt;(object;native signed int):void</signature>
			</method>
		</class>
		<class name="UnhandledExceptionEventArgs" uniqueID="System.UnhandledExceptionEventArgs">
			<method accessibility="Public" methodKind="Member" name="UnhandledExceptionEventArgs" uniqueID="UnhandledExceptionEventArgs(object;bool):void">
				<signature>System.UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(object;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ExceptionObject" uniqueID="get_ExceptionObject():object">
				<signature>System.UnhandledExceptionEventArgs.get_ExceptionObject():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsTerminating" uniqueID="get_IsTerminating():bool">
				<signature>System.UnhandledExceptionEventArgs.get_IsTerminating():bool</signature>
			</method>
		</class>
		<class name="ConsoleCancelEventHandler" uniqueID="System.ConsoleCancelEventHandler">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(object;System.ConsoleCancelEventArgs;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.ConsoleCancelEventHandler.BeginInvoke(object;System.ConsoleCancelEventArgs;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ConsoleCancelEventHandler" uniqueID="ConsoleCancelEventHandler(object;native signed int):void">
				<signature>System.ConsoleCancelEventHandler.ConsoleCancelEventHandler(object;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):void">
				<signature>System.ConsoleCancelEventHandler.EndInvoke(System.IAsyncResult):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(object;System.ConsoleCancelEventArgs):void">
				<signature>System.ConsoleCancelEventHandler.Invoke(object;System.ConsoleCancelEventArgs):void</signature>
			</method>
		</class>
		<class name="ConsoleKeyInfo" uniqueID="System.ConsoleKeyInfo">
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.ConsoleKeyInfo;System.ConsoleKeyInfo):bool">
				<signature>System.ConsoleKeyInfo.op_Equality(System.ConsoleKeyInfo;System.ConsoleKeyInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.ConsoleKeyInfo;System.ConsoleKeyInfo):bool">
				<signature>System.ConsoleKeyInfo.op_Inequality(System.ConsoleKeyInfo;System.ConsoleKeyInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ConsoleKeyInfo" uniqueID="ConsoleKeyInfo(char;System.ConsoleKey;bool;bool;bool):void">
				<signature>System.ConsoleKeyInfo.ConsoleKeyInfo(char;System.ConsoleKey;bool;bool;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.ConsoleKeyInfo):bool">
				<signature>System.ConsoleKeyInfo.Equals(System.ConsoleKeyInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.ConsoleKeyInfo.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.ConsoleKeyInfo.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Key" uniqueID="get_Key():System.ConsoleKey">
				<signature>System.ConsoleKeyInfo.get_Key():System.ConsoleKey</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_KeyChar" uniqueID="get_KeyChar():char">
				<signature>System.ConsoleKeyInfo.get_KeyChar():char</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Modifiers" uniqueID="get_Modifiers():System.ConsoleModifiers">
				<signature>System.ConsoleKeyInfo.get_Modifiers():System.ConsoleModifiers</signature>
			</method>
		</class>
		<class name="Environment" uniqueID="System.Environment">
			<method accessibility="Private" methodKind="Static" name="CheckEnvironmentVariableName" uniqueID="CheckEnvironmentVariableName(string):void">
				<signature>System.Environment.CheckEnvironmentVariableName(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Exit" uniqueID="Exit(int):void">
				<signature>System.Environment.Exit(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ExitNative" uniqueID="ExitNative(int):void">
				<signature>System.Environment.ExitNative(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ExpandEnvironmentVariables" uniqueID="ExpandEnvironmentVariables(string):string">
				<signature>System.Environment.ExpandEnvironmentVariables(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="FailFast" uniqueID="FailFast(string):void">
				<signature>System.Environment.FailFast(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCommandLineArgs" uniqueID="GetCommandLineArgs():string[]">
				<signature>System.Environment.GetCommandLineArgs():string[]</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetCommandLineArgsNative" uniqueID="GetCommandLineArgsNative():string[]">
				<signature>System.Environment.GetCommandLineArgsNative():string[]</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetCommandLineNative" uniqueID="GetCommandLineNative():string">
				<signature>System.Environment.GetCommandLineNative():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetCompatibilityFlag" uniqueID="GetCompatibilityFlag(System.CompatibilityFlag):bool">
				<signature>System.Environment.GetCompatibilityFlag(System.CompatibilityFlag):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetEnvironmentVariable" uniqueID="GetEnvironmentVariable(string):string">
				<signature>System.Environment.GetEnvironmentVariable(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetEnvironmentVariable" uniqueID="GetEnvironmentVariable(string;System.EnvironmentVariableTarget):string">
				<signature>System.Environment.GetEnvironmentVariable(string;System.EnvironmentVariableTarget):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetEnvironmentVariables" uniqueID="GetEnvironmentVariables():System.Collections.IDictionary">
				<signature>System.Environment.GetEnvironmentVariables():System.Collections.IDictionary</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetEnvironmentVariables" uniqueID="GetEnvironmentVariables(System.EnvironmentVariableTarget):System.Collections.IDictionary">
				<signature>System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget):System.Collections.IDictionary</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetFolderPath" uniqueID="GetFolderPath(System.Environment+SpecialFolder):string">
				<signature>System.Environment.GetFolderPath(System.Environment+SpecialFolder):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetLogicalDrives" uniqueID="GetLogicalDrives():string[]">
				<signature>System.Environment.GetLogicalDrives():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetRegistryKeyNameValuePairs" uniqueID="GetRegistryKeyNameValuePairs(Microsoft.Win32.RegistryKey):System.Collections.IDictionary">
				<signature>System.Environment.GetRegistryKeyNameValuePairs(Microsoft.Win32.RegistryKey):System.Collections.IDictionary</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetResourceFromDefault" uniqueID="GetResourceFromDefault(string):string">
				<signature>System.Environment.GetResourceFromDefault(string):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetResourceString" uniqueID="GetResourceString(string):string">
				<signature>System.Environment.GetResourceString(string):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetResourceString" uniqueID="GetResourceString(string;object[]):string">
				<signature>System.Environment.GetResourceString(string;object[]):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetResourceStringLocal" uniqueID="GetResourceStringLocal(string):string">
				<signature>System.Environment.GetResourceStringLocal(string):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetStackTrace" uniqueID="GetStackTrace(System.Exception;bool):string">
				<signature>System.Environment.GetStackTrace(System.Exception;bool):string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InitResourceHelper" uniqueID="InitResourceHelper():void">
				<signature>System.Environment.InitResourceHelper():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="IsWin9X" uniqueID="IsWin9X():bool">
				<signature>System.Environment.IsWin9X():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="SetEnvironmentVariable" uniqueID="SetEnvironmentVariable(string;string):void">
				<signature>System.Environment.SetEnvironmentVariable(string;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="SetEnvironmentVariable" uniqueID="SetEnvironmentVariable(string;string;System.EnvironmentVariableTarget):void">
				<signature>System.Environment.SetEnvironmentVariable(string;string;System.EnvironmentVariableTarget):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_CommandLine" uniqueID="get_CommandLine():string">
				<signature>System.Environment.get_CommandLine():string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_CurrentDirectory" uniqueID="get_CurrentDirectory():string">
				<signature>System.Environment.get_CurrentDirectory():string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_ExitCode" uniqueID="get_ExitCode():int">
				<signature>System.Environment.get_ExitCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_HasShutdownStarted" uniqueID="get_HasShutdownStarted():bool">
				<signature>System.Environment.get_HasShutdownStarted():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="get_InternalSyncObject" uniqueID="get_InternalSyncObject():object">
				<signature>System.Environment.get_InternalSyncObject():object</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_InternalWindowsDirectory" uniqueID="get_InternalWindowsDirectory():string">
				<signature>System.Environment.get_InternalWindowsDirectory():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_IsW2k3" uniqueID="get_IsW2k3():bool">
				<signature>System.Environment.get_IsW2k3():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_MachineName" uniqueID="get_MachineName():string">
				<signature>System.Environment.get_MachineName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_NewLine" uniqueID="get_NewLine():string">
				<signature>System.Environment.get_NewLine():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_OSInfo" uniqueID="get_OSInfo():System.Environment+OSName">
				<signature>System.Environment.get_OSInfo():System.Environment+OSName</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_OSVersion" uniqueID="get_OSVersion():System.OperatingSystem">
				<signature>System.Environment.get_OSVersion():System.OperatingSystem</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_ProcessorCount" uniqueID="get_ProcessorCount():int">
				<signature>System.Environment.get_ProcessorCount():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_RunningOnWinNT" uniqueID="get_RunningOnWinNT():bool">
				<signature>System.Environment.get_RunningOnWinNT():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_StackTrace" uniqueID="get_StackTrace():string">
				<signature>System.Environment.get_StackTrace():string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_SystemDirectory" uniqueID="get_SystemDirectory():string">
				<signature>System.Environment.get_SystemDirectory():string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_TickCount" uniqueID="get_TickCount():int">
				<signature>System.Environment.get_TickCount():int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_UserDomainName" uniqueID="get_UserDomainName():string">
				<signature>System.Environment.get_UserDomainName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_UserInteractive" uniqueID="get_UserInteractive():bool">
				<signature>System.Environment.get_UserInteractive():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_UserName" uniqueID="get_UserName():string">
				<signature>System.Environment.get_UserName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_Version" uniqueID="get_Version():System.Version">
				<signature>System.Environment.get_Version():System.Version</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_WorkingSet" uniqueID="get_WorkingSet():long">
				<signature>System.Environment.get_WorkingSet():long</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="nativeGetEnvironmentCharArray" uniqueID="nativeGetEnvironmentCharArray():char[]">
				<signature>System.Environment.nativeGetEnvironmentCharArray():char[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeGetEnvironmentVariable" uniqueID="nativeGetEnvironmentVariable(string):string">
				<signature>System.Environment.nativeGetEnvironmentVariable(string):string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="nativeGetExitCode" uniqueID="nativeGetExitCode():int">
				<signature>System.Environment.nativeGetExitCode():int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="nativeGetTickCount" uniqueID="nativeGetTickCount():int">
				<signature>System.Environment.nativeGetTickCount():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeGetWorkingSet" uniqueID="nativeGetWorkingSet():long">
				<signature>System.Environment.nativeGetWorkingSet():long</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="nativeHasShutdownStarted" uniqueID="nativeHasShutdownStarted():bool">
				<signature>System.Environment.nativeHasShutdownStarted():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeIsWin9x" uniqueID="nativeIsWin9x():bool">
				<signature>System.Environment.nativeIsWin9x():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="nativeSetExitCode" uniqueID="nativeSetExitCode(int):void">
				<signature>System.Environment.nativeSetExitCode(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="set_CurrentDirectory" uniqueID="set_CurrentDirectory(string):void">
				<signature>System.Environment.set_CurrentDirectory(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="set_ExitCode" uniqueID="set_ExitCode(int):void">
				<signature>System.Environment.set_ExitCode(int):void</signature>
			</method>
		</class>
		<class name="ModuleHandle" uniqueID="System.ModuleHandle">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.ModuleHandle.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CopyRuntimeTypeHandles" uniqueID="CopyRuntimeTypeHandles(System.RuntimeTypeHandle[]):System.RuntimeTypeHandle[]">
				<signature>System.ModuleHandle.CopyRuntimeTypeHandles(System.RuntimeTypeHandle[]):System.RuntimeTypeHandle[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetCallerType" uniqueID="GetCallerType(System.Threading.StackCrawlMark):System.RuntimeTypeHandle">
				<signature>System.ModuleHandle.GetCallerType(System.Threading.StackCrawlMark):System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetDynamicMethod" uniqueID="GetDynamicMethod(void;string;byte[];System.Resolver):void">
				<signature>System.ModuleHandle.GetDynamicMethod(void;string;byte[];System.Resolver):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.ModuleHandle;System.ModuleHandle):bool">
				<signature>System.ModuleHandle.op_Equality(System.ModuleHandle;System.ModuleHandle):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.ModuleHandle;System.ModuleHandle):bool">
				<signature>System.ModuleHandle.op_Inequality(System.ModuleHandle;System.ModuleHandle):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.ModuleHandle):bool">
				<signature>System.ModuleHandle.Equals(System.ModuleHandle):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.ModuleHandle.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.ModuleHandle.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMetadataImport" uniqueID="GetMetadataImport():System.Reflection.MetadataImport">
				<signature>System.ModuleHandle.GetMetadataImport():System.Reflection.MetadataImport</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetModule" uniqueID="GetModule():System.Reflection.Module">
				<signature>System.ModuleHandle.GetModule():System.Reflection.Module</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetModuleTypeHandle" uniqueID="GetModuleTypeHandle():System.RuntimeTypeHandle">
				<signature>System.ModuleHandle.GetModuleTypeHandle():System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetPEKind" uniqueID="GetPEKind(System.Reflection.PortableExecutableKinds;System.Reflection.ImageFileMachine):void">
				<signature>System.ModuleHandle.GetPEKind(System.Reflection.PortableExecutableKinds;System.Reflection.ImageFileMachine):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRuntimeFieldHandleFromMetadataToken" uniqueID="GetRuntimeFieldHandleFromMetadataToken(int):System.RuntimeFieldHandle">
				<signature>System.ModuleHandle.GetRuntimeFieldHandleFromMetadataToken(int):System.RuntimeFieldHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRuntimeMethodHandleFromMetadataToken" uniqueID="GetRuntimeMethodHandleFromMetadataToken(int):System.RuntimeMethodHandle">
				<signature>System.ModuleHandle.GetRuntimeMethodHandleFromMetadataToken(int):System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRuntimeTypeHandleFromMetadataToken" uniqueID="GetRuntimeTypeHandleFromMetadataToken(int):System.RuntimeTypeHandle">
				<signature>System.ModuleHandle.GetRuntimeTypeHandleFromMetadataToken(int):System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetToken" uniqueID="GetToken():int">
				<signature>System.ModuleHandle.GetToken():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsNullHandle" uniqueID="IsNullHandle():bool">
				<signature>System.ModuleHandle.IsNullHandle():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ModuleHandle" uniqueID="ModuleHandle(void):void">
				<signature>System.ModuleHandle.ModuleHandle(void):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ResolveField" uniqueID="ResolveField(int;System.RuntimeTypeHandle;int;System.RuntimeTypeHandle;int):System.RuntimeFieldHandle">
				<signature>System.ModuleHandle.ResolveField(int;System.RuntimeTypeHandle;int;System.RuntimeTypeHandle;int):System.RuntimeFieldHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ResolveFieldHandle" uniqueID="ResolveFieldHandle(int):System.RuntimeFieldHandle">
				<signature>System.ModuleHandle.ResolveFieldHandle(int):System.RuntimeFieldHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ResolveFieldHandle" uniqueID="ResolveFieldHandle(int;System.RuntimeTypeHandle[];System.RuntimeTypeHandle[]):System.RuntimeFieldHandle">
				<signature>System.ModuleHandle.ResolveFieldHandle(int;System.RuntimeTypeHandle[];System.RuntimeTypeHandle[]):System.RuntimeFieldHandle</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ResolveMethod" uniqueID="ResolveMethod(int;System.RuntimeTypeHandle;int;System.RuntimeTypeHandle;int):System.RuntimeMethodHandle">
				<signature>System.ModuleHandle.ResolveMethod(int;System.RuntimeTypeHandle;int;System.RuntimeTypeHandle;int):System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ResolveMethodHandle" uniqueID="ResolveMethodHandle(int):System.RuntimeMethodHandle">
				<signature>System.ModuleHandle.ResolveMethodHandle(int):System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ResolveMethodHandle" uniqueID="ResolveMethodHandle(int;System.RuntimeTypeHandle[];System.RuntimeTypeHandle[]):System.RuntimeMethodHandle">
				<signature>System.ModuleHandle.ResolveMethodHandle(int;System.RuntimeTypeHandle[];System.RuntimeTypeHandle[]):System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ResolveType" uniqueID="ResolveType(int;System.RuntimeTypeHandle;int;System.RuntimeTypeHandle;int):System.RuntimeTypeHandle">
				<signature>System.ModuleHandle.ResolveType(int;System.RuntimeTypeHandle;int;System.RuntimeTypeHandle;int):System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ResolveTypeHandle" uniqueID="ResolveTypeHandle(int):System.RuntimeTypeHandle">
				<signature>System.ModuleHandle.ResolveTypeHandle(int):System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ResolveTypeHandle" uniqueID="ResolveTypeHandle(int;System.RuntimeTypeHandle[];System.RuntimeTypeHandle[]):System.RuntimeTypeHandle">
				<signature>System.ModuleHandle.ResolveTypeHandle(int;System.RuntimeTypeHandle[];System.RuntimeTypeHandle[]):System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ValidateModulePointer" uniqueID="ValidateModulePointer():void">
				<signature>System.ModuleHandle.ValidateModulePointer():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="_GetMDStreamVersion" uniqueID="_GetMDStreamVersion():int">
				<signature>System.ModuleHandle._GetMDStreamVersion():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="_GetMetadataImport" uniqueID="_GetMetadataImport():void">
				<signature>System.ModuleHandle._GetMetadataImport():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="_GetModuleTypeHandle" uniqueID="_GetModuleTypeHandle():void">
				<signature>System.ModuleHandle._GetModuleTypeHandle():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="_GetPEKind" uniqueID="_GetPEKind(int;int):void">
				<signature>System.ModuleHandle._GetPEKind(int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MDStreamVersion" uniqueID="get_MDStreamVersion():int">
				<signature>System.ModuleHandle.get_MDStreamVersion():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Value" uniqueID="get_Value():void">
				<signature>System.ModuleHandle.get_Value():void</signature>
			</method>
		</class>
		<class name="ICloneable" uniqueID="System.ICloneable">
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone():object">
				<signature>System.ICloneable.Clone():object</signature>
			</method>
		</class>
		<class name="Predicate&lt;System.RuntimeType&gt;" uniqueID="System.Predicate&lt;System.RuntimeType&gt;">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(System.RuntimeType;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Predicate&lt;System.RuntimeType&gt;.BeginInvoke(System.RuntimeType;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):bool">
				<signature>System.Predicate&lt;System.RuntimeType&gt;.EndInvoke(System.IAsyncResult):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(System.RuntimeType):bool">
				<signature>System.Predicate&lt;System.RuntimeType&gt;.Invoke(System.RuntimeType):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Predicate&lt;System.RuntimeType&gt;" uniqueID="Predicate&lt;System.RuntimeType&gt;(object;native signed int):void">
				<signature>System.Predicate&lt;System.RuntimeType&gt;.Predicate&lt;System.RuntimeType&gt;(object;native signed int):void</signature>
			</method>
		</class>
		<class name="DTSubString" uniqueID="System.DTSubString">
			<method accessibility="Protected" methodKind="Member" name="get_Item" uniqueID="get_Item(int):char">
				<signature>System.DTSubString.get_Item(int):char</signature>
			</method>
		</class>
		<class name="DateTime" uniqueID="System.DateTime">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.DateTime.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Compare" uniqueID="Compare(System.DateTime;System.DateTime):int">
				<signature>System.DateTime.Compare(System.DateTime;System.DateTime):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="DateToTicks" uniqueID="DateToTicks(int;int;int):long">
				<signature>System.DateTime.DateToTicks(int;int;int):long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="DaysInMonth" uniqueID="DaysInMonth(int;int):int">
				<signature>System.DateTime.DaysInMonth(int;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="DoubleDateToTicks" uniqueID="DoubleDateToTicks(double):long">
				<signature>System.DateTime.DoubleDateToTicks(double):long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Equals" uniqueID="Equals(System.DateTime;System.DateTime):bool">
				<signature>System.DateTime.Equals(System.DateTime;System.DateTime):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="FromBinary" uniqueID="FromBinary(long):System.DateTime">
				<signature>System.DateTime.FromBinary(long):System.DateTime</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="FromBinaryRaw" uniqueID="FromBinaryRaw(long):System.DateTime">
				<signature>System.DateTime.FromBinaryRaw(long):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="FromFileTime" uniqueID="FromFileTime(long):System.DateTime">
				<signature>System.DateTime.FromFileTime(long):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="FromFileTimeUtc" uniqueID="FromFileTimeUtc(long):System.DateTime">
				<signature>System.DateTime.FromFileTimeUtc(long):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="FromOADate" uniqueID="FromOADate(double):System.DateTime">
				<signature>System.DateTime.FromOADate(double):System.DateTime</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetSystemTimeAsFileTime" uniqueID="GetSystemTimeAsFileTime():long">
				<signature>System.DateTime.GetSystemTimeAsFileTime():long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsLeapYear" uniqueID="IsLeapYear(int):bool">
				<signature>System.DateTime.IsLeapYear(int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Parse" uniqueID="Parse(string):System.DateTime">
				<signature>System.DateTime.Parse(string):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Parse" uniqueID="Parse(string;System.IFormatProvider):System.DateTime">
				<signature>System.DateTime.Parse(string;System.IFormatProvider):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Parse" uniqueID="Parse(string;System.IFormatProvider;System.Globalization.DateTimeStyles):System.DateTime">
				<signature>System.DateTime.Parse(string;System.IFormatProvider;System.Globalization.DateTimeStyles):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ParseExact" uniqueID="ParseExact(string;string;System.IFormatProvider):System.DateTime">
				<signature>System.DateTime.ParseExact(string;string;System.IFormatProvider):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ParseExact" uniqueID="ParseExact(string;string;System.IFormatProvider;System.Globalization.DateTimeStyles):System.DateTime">
				<signature>System.DateTime.ParseExact(string;string;System.IFormatProvider;System.Globalization.DateTimeStyles):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ParseExact" uniqueID="ParseExact(string;string[];System.IFormatProvider;System.Globalization.DateTimeStyles):System.DateTime">
				<signature>System.DateTime.ParseExact(string;string[];System.IFormatProvider;System.Globalization.DateTimeStyles):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="SpecifyKind" uniqueID="SpecifyKind(System.DateTime;System.DateTimeKind):System.DateTime">
				<signature>System.DateTime.SpecifyKind(System.DateTime;System.DateTimeKind):System.DateTime</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="TicksToOADate" uniqueID="TicksToOADate(long):double">
				<signature>System.DateTime.TicksToOADate(long):double</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="TimeToTicks" uniqueID="TimeToTicks(int;int;int):long">
				<signature>System.DateTime.TimeToTicks(int;int;int):long</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="TryCreate" uniqueID="TryCreate(int;int;int;int;int;int;int;System.DateTime):bool">
				<signature>System.DateTime.TryCreate(int;int;int;int;int;int;int;System.DateTime):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="TryParse" uniqueID="TryParse(string;System.DateTime):bool">
				<signature>System.DateTime.TryParse(string;System.DateTime):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="TryParse" uniqueID="TryParse(string;System.IFormatProvider;System.Globalization.DateTimeStyles;System.DateTime):bool">
				<signature>System.DateTime.TryParse(string;System.IFormatProvider;System.Globalization.DateTimeStyles;System.DateTime):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="TryParseExact" uniqueID="TryParseExact(string;string;System.IFormatProvider;System.Globalization.DateTimeStyles;System.DateTime):bool">
				<signature>System.DateTime.TryParseExact(string;string;System.IFormatProvider;System.Globalization.DateTimeStyles;System.DateTime):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="TryParseExact" uniqueID="TryParseExact(string;string[];System.IFormatProvider;System.Globalization.DateTimeStyles;System.DateTime):bool">
				<signature>System.DateTime.TryParseExact(string;string[];System.IFormatProvider;System.Globalization.DateTimeStyles;System.DateTime):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_Now" uniqueID="get_Now():System.DateTime">
				<signature>System.DateTime.get_Now():System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_Today" uniqueID="get_Today():System.DateTime">
				<signature>System.DateTime.get_Today():System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_UtcNow" uniqueID="get_UtcNow():System.DateTime">
				<signature>System.DateTime.get_UtcNow():System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Addition" uniqueID="op_Addition(System.DateTime;System.TimeSpan):System.DateTime">
				<signature>System.DateTime.op_Addition(System.DateTime;System.TimeSpan):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.DateTime;System.DateTime):bool">
				<signature>System.DateTime.op_Equality(System.DateTime;System.DateTime):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_GreaterThan" uniqueID="op_GreaterThan(System.DateTime;System.DateTime):bool">
				<signature>System.DateTime.op_GreaterThan(System.DateTime;System.DateTime):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_GreaterThanOrEqual" uniqueID="op_GreaterThanOrEqual(System.DateTime;System.DateTime):bool">
				<signature>System.DateTime.op_GreaterThanOrEqual(System.DateTime;System.DateTime):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.DateTime;System.DateTime):bool">
				<signature>System.DateTime.op_Inequality(System.DateTime;System.DateTime):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_LessThan" uniqueID="op_LessThan(System.DateTime;System.DateTime):bool">
				<signature>System.DateTime.op_LessThan(System.DateTime;System.DateTime):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_LessThanOrEqual" uniqueID="op_LessThanOrEqual(System.DateTime;System.DateTime):bool">
				<signature>System.DateTime.op_LessThanOrEqual(System.DateTime;System.DateTime):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Subtraction" uniqueID="op_Subtraction(System.DateTime;System.DateTime):System.TimeSpan">
				<signature>System.DateTime.op_Subtraction(System.DateTime;System.DateTime):System.TimeSpan</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Subtraction" uniqueID="op_Subtraction(System.DateTime;System.TimeSpan):System.DateTime">
				<signature>System.DateTime.op_Subtraction(System.DateTime;System.TimeSpan):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(System.TimeSpan):System.DateTime">
				<signature>System.DateTime.Add(System.TimeSpan):System.DateTime</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Add" uniqueID="Add(double;int):System.DateTime">
				<signature>System.DateTime.Add(double;int):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddDays" uniqueID="AddDays(double):System.DateTime">
				<signature>System.DateTime.AddDays(double):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddHours" uniqueID="AddHours(double):System.DateTime">
				<signature>System.DateTime.AddHours(double):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddMilliseconds" uniqueID="AddMilliseconds(double):System.DateTime">
				<signature>System.DateTime.AddMilliseconds(double):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddMinutes" uniqueID="AddMinutes(double):System.DateTime">
				<signature>System.DateTime.AddMinutes(double):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddMonths" uniqueID="AddMonths(int):System.DateTime">
				<signature>System.DateTime.AddMonths(int):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddSeconds" uniqueID="AddSeconds(double):System.DateTime">
				<signature>System.DateTime.AddSeconds(double):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddTicks" uniqueID="AddTicks(long):System.DateTime">
				<signature>System.DateTime.AddTicks(long):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddYears" uniqueID="AddYears(int):System.DateTime">
				<signature>System.DateTime.AddYears(int):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(System.DateTime):int">
				<signature>System.DateTime.CompareTo(System.DateTime):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(object):int">
				<signature>System.DateTime.CompareTo(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DateTime" uniqueID="DateTime(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.DateTime.DateTime(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DateTime" uniqueID="DateTime(int;int;int):void">
				<signature>System.DateTime.DateTime(int;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DateTime" uniqueID="DateTime(int;int;int;System.Globalization.Calendar):void">
				<signature>System.DateTime.DateTime(int;int;int;System.Globalization.Calendar):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DateTime" uniqueID="DateTime(int;int;int;int;int;int):void">
				<signature>System.DateTime.DateTime(int;int;int;int;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DateTime" uniqueID="DateTime(int;int;int;int;int;int;System.DateTimeKind):void">
				<signature>System.DateTime.DateTime(int;int;int;int;int;int;System.DateTimeKind):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DateTime" uniqueID="DateTime(int;int;int;int;int;int;System.Globalization.Calendar):void">
				<signature>System.DateTime.DateTime(int;int;int;int;int;int;System.Globalization.Calendar):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DateTime" uniqueID="DateTime(int;int;int;int;int;int;int):void">
				<signature>System.DateTime.DateTime(int;int;int;int;int;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DateTime" uniqueID="DateTime(int;int;int;int;int;int;int;System.DateTimeKind):void">
				<signature>System.DateTime.DateTime(int;int;int;int;int;int;int;System.DateTimeKind):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DateTime" uniqueID="DateTime(int;int;int;int;int;int;int;System.Globalization.Calendar):void">
				<signature>System.DateTime.DateTime(int;int;int;int;int;int;int;System.Globalization.Calendar):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DateTime" uniqueID="DateTime(int;int;int;int;int;int;int;System.Globalization.Calendar;System.DateTimeKind):void">
				<signature>System.DateTime.DateTime(int;int;int;int;int;int;int;System.Globalization.Calendar;System.DateTimeKind):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DateTime" uniqueID="DateTime(long):void">
				<signature>System.DateTime.DateTime(long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DateTime" uniqueID="DateTime(long;System.DateTimeKind):void">
				<signature>System.DateTime.DateTime(long;System.DateTimeKind):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="DateTime" uniqueID="DateTime(long;System.DateTimeKind;bool):void">
				<signature>System.DateTime.DateTime(long;System.DateTimeKind;bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DateTime" uniqueID="DateTime(unsigned long):void">
				<signature>System.DateTime.DateTime(unsigned long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.DateTime):bool">
				<signature>System.DateTime.Equals(System.DateTime):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.DateTime.Equals(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetDatePart" uniqueID="GetDatePart(int):int">
				<signature>System.DateTime.GetDatePart(int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetDateTimeFormats" uniqueID="GetDateTimeFormats():string[]">
				<signature>System.DateTime.GetDateTimeFormats():string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetDateTimeFormats" uniqueID="GetDateTimeFormats(System.IFormatProvider):string[]">
				<signature>System.DateTime.GetDateTimeFormats(System.IFormatProvider):string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetDateTimeFormats" uniqueID="GetDateTimeFormats(char):string[]">
				<signature>System.DateTime.GetDateTimeFormats(char):string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetDateTimeFormats" uniqueID="GetDateTimeFormats(char;System.IFormatProvider):string[]">
				<signature>System.DateTime.GetDateTimeFormats(char;System.IFormatProvider):string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.DateTime.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeCode" uniqueID="GetTypeCode():System.TypeCode">
				<signature>System.DateTime.GetTypeCode():System.TypeCode</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsAmbiguousDaylightSavingTime" uniqueID="IsAmbiguousDaylightSavingTime():bool">
				<signature>System.DateTime.IsAmbiguousDaylightSavingTime():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDaylightSavingTime" uniqueID="IsDaylightSavingTime():bool">
				<signature>System.DateTime.IsDaylightSavingTime():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Subtract" uniqueID="Subtract(System.DateTime):System.TimeSpan">
				<signature>System.DateTime.Subtract(System.DateTime):System.TimeSpan</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Subtract" uniqueID="Subtract(System.TimeSpan):System.DateTime">
				<signature>System.DateTime.Subtract(System.TimeSpan):System.DateTime</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToBoolean" uniqueID="System.IConvertible.ToBoolean(System.IFormatProvider):bool">
				<signature>System.DateTime.System.IConvertible.ToBoolean(System.IFormatProvider):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToByte" uniqueID="System.IConvertible.ToByte(System.IFormatProvider):byte">
				<signature>System.DateTime.System.IConvertible.ToByte(System.IFormatProvider):byte</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToChar" uniqueID="System.IConvertible.ToChar(System.IFormatProvider):char">
				<signature>System.DateTime.System.IConvertible.ToChar(System.IFormatProvider):char</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToDateTime" uniqueID="System.IConvertible.ToDateTime(System.IFormatProvider):System.DateTime">
				<signature>System.DateTime.System.IConvertible.ToDateTime(System.IFormatProvider):System.DateTime</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToDecimal" uniqueID="System.IConvertible.ToDecimal(System.IFormatProvider):System.Decimal">
				<signature>System.DateTime.System.IConvertible.ToDecimal(System.IFormatProvider):System.Decimal</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToDouble" uniqueID="System.IConvertible.ToDouble(System.IFormatProvider):double">
				<signature>System.DateTime.System.IConvertible.ToDouble(System.IFormatProvider):double</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToInt16" uniqueID="System.IConvertible.ToInt16(System.IFormatProvider):short">
				<signature>System.DateTime.System.IConvertible.ToInt16(System.IFormatProvider):short</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToInt32" uniqueID="System.IConvertible.ToInt32(System.IFormatProvider):int">
				<signature>System.DateTime.System.IConvertible.ToInt32(System.IFormatProvider):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToInt64" uniqueID="System.IConvertible.ToInt64(System.IFormatProvider):long">
				<signature>System.DateTime.System.IConvertible.ToInt64(System.IFormatProvider):long</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToSByte" uniqueID="System.IConvertible.ToSByte(System.IFormatProvider):sbyte">
				<signature>System.DateTime.System.IConvertible.ToSByte(System.IFormatProvider):sbyte</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToSingle" uniqueID="System.IConvertible.ToSingle(System.IFormatProvider):float">
				<signature>System.DateTime.System.IConvertible.ToSingle(System.IFormatProvider):float</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToType" uniqueID="System.IConvertible.ToType(System.Type;System.IFormatProvider):object">
				<signature>System.DateTime.System.IConvertible.ToType(System.Type;System.IFormatProvider):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToUInt16" uniqueID="System.IConvertible.ToUInt16(System.IFormatProvider):unsigned short">
				<signature>System.DateTime.System.IConvertible.ToUInt16(System.IFormatProvider):unsigned short</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToUInt32" uniqueID="System.IConvertible.ToUInt32(System.IFormatProvider):unsigned int">
				<signature>System.DateTime.System.IConvertible.ToUInt32(System.IFormatProvider):unsigned int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToUInt64" uniqueID="System.IConvertible.ToUInt64(System.IFormatProvider):unsigned long">
				<signature>System.DateTime.System.IConvertible.ToUInt64(System.IFormatProvider):unsigned long</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.Serialization.ISerializable.GetObjectData" uniqueID="System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.DateTime.System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToBinary" uniqueID="ToBinary():long">
				<signature>System.DateTime.ToBinary():long</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ToBinaryRaw" uniqueID="ToBinaryRaw():long">
				<signature>System.DateTime.ToBinaryRaw():long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToFileTime" uniqueID="ToFileTime():long">
				<signature>System.DateTime.ToFileTime():long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToFileTimeUtc" uniqueID="ToFileTimeUtc():long">
				<signature>System.DateTime.ToFileTimeUtc():long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToLocalTime" uniqueID="ToLocalTime():System.DateTime">
				<signature>System.DateTime.ToLocalTime():System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToLongDateString" uniqueID="ToLongDateString():string">
				<signature>System.DateTime.ToLongDateString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToLongTimeString" uniqueID="ToLongTimeString():string">
				<signature>System.DateTime.ToLongTimeString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToOADate" uniqueID="ToOADate():double">
				<signature>System.DateTime.ToOADate():double</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToShortDateString" uniqueID="ToShortDateString():string">
				<signature>System.DateTime.ToShortDateString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToShortTimeString" uniqueID="ToShortTimeString():string">
				<signature>System.DateTime.ToShortTimeString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.DateTime.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString(System.IFormatProvider):string">
				<signature>System.DateTime.ToString(System.IFormatProvider):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString(string):string">
				<signature>System.DateTime.ToString(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString(string;System.IFormatProvider):string">
				<signature>System.DateTime.ToString(string;System.IFormatProvider):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToUniversalTime" uniqueID="ToUniversalTime():System.DateTime">
				<signature>System.DateTime.ToUniversalTime():System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Date" uniqueID="get_Date():System.DateTime">
				<signature>System.DateTime.get_Date():System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Day" uniqueID="get_Day():int">
				<signature>System.DateTime.get_Day():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DayOfWeek" uniqueID="get_DayOfWeek():System.DayOfWeek">
				<signature>System.DateTime.get_DayOfWeek():System.DayOfWeek</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DayOfYear" uniqueID="get_DayOfYear():int">
				<signature>System.DateTime.get_DayOfYear():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Hour" uniqueID="get_Hour():int">
				<signature>System.DateTime.get_Hour():int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_InternalKind" uniqueID="get_InternalKind():unsigned long">
				<signature>System.DateTime.get_InternalKind():unsigned long</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_InternalTicks" uniqueID="get_InternalTicks():long">
				<signature>System.DateTime.get_InternalTicks():long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Kind" uniqueID="get_Kind():System.DateTimeKind">
				<signature>System.DateTime.get_Kind():System.DateTimeKind</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Millisecond" uniqueID="get_Millisecond():int">
				<signature>System.DateTime.get_Millisecond():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Minute" uniqueID="get_Minute():int">
				<signature>System.DateTime.get_Minute():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Month" uniqueID="get_Month():int">
				<signature>System.DateTime.get_Month():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Second" uniqueID="get_Second():int">
				<signature>System.DateTime.get_Second():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Ticks" uniqueID="get_Ticks():long">
				<signature>System.DateTime.get_Ticks():long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TimeOfDay" uniqueID="get_TimeOfDay():System.TimeSpan">
				<signature>System.DateTime.get_TimeOfDay():System.TimeSpan</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Year" uniqueID="get_Year():int">
				<signature>System.DateTime.get_Year():int</signature>
			</method>
		</class>
		<class name="IComparable" uniqueID="System.IComparable">
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(object):int">
				<signature>System.IComparable.CompareTo(object):int</signature>
			</method>
		</class>
		<class name="IComparable&lt;string&gt;" uniqueID="System.IComparable&lt;string&gt;">
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(string):int">
				<signature>System.IComparable&lt;string&gt;.CompareTo(string):int</signature>
			</method>
		</class>
		<class name="OleAutBinder" uniqueID="System.OleAutBinder">
			<method accessibility="Public" methodKind="Member" name="ChangeType" uniqueID="ChangeType(object;System.Type;System.Globalization.CultureInfo):object">
				<signature>System.OleAutBinder.ChangeType(object;System.Type;System.Globalization.CultureInfo):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="OleAutBinder" uniqueID="OleAutBinder():void">
				<signature>System.OleAutBinder.OleAutBinder():void</signature>
			</method>
		</class>
		<class name="Char" uniqueID="System.Char">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Char.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CheckLetter" uniqueID="CheckLetter(System.Globalization.UnicodeCategory):bool">
				<signature>System.Char.CheckLetter(System.Globalization.UnicodeCategory):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CheckLetterOrDigit" uniqueID="CheckLetterOrDigit(System.Globalization.UnicodeCategory):bool">
				<signature>System.Char.CheckLetterOrDigit(System.Globalization.UnicodeCategory):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CheckNumber" uniqueID="CheckNumber(System.Globalization.UnicodeCategory):bool">
				<signature>System.Char.CheckNumber(System.Globalization.UnicodeCategory):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CheckPunctuation" uniqueID="CheckPunctuation(System.Globalization.UnicodeCategory):bool">
				<signature>System.Char.CheckPunctuation(System.Globalization.UnicodeCategory):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CheckSeparator" uniqueID="CheckSeparator(System.Globalization.UnicodeCategory):bool">
				<signature>System.Char.CheckSeparator(System.Globalization.UnicodeCategory):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CheckSymbol" uniqueID="CheckSymbol(System.Globalization.UnicodeCategory):bool">
				<signature>System.Char.CheckSymbol(System.Globalization.UnicodeCategory):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ConvertFromUtf32" uniqueID="ConvertFromUtf32(int):string">
				<signature>System.Char.ConvertFromUtf32(int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ConvertToUtf32" uniqueID="ConvertToUtf32(char;char):int">
				<signature>System.Char.ConvertToUtf32(char;char):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ConvertToUtf32" uniqueID="ConvertToUtf32(string;int):int">
				<signature>System.Char.ConvertToUtf32(string;int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetLatin1UnicodeCategory" uniqueID="GetLatin1UnicodeCategory(char):System.Globalization.UnicodeCategory">
				<signature>System.Char.GetLatin1UnicodeCategory(char):System.Globalization.UnicodeCategory</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetNumericValue" uniqueID="GetNumericValue(char):double">
				<signature>System.Char.GetNumericValue(char):double</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetNumericValue" uniqueID="GetNumericValue(string;int):double">
				<signature>System.Char.GetNumericValue(string;int):double</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetUnicodeCategory" uniqueID="GetUnicodeCategory(char):System.Globalization.UnicodeCategory">
				<signature>System.Char.GetUnicodeCategory(char):System.Globalization.UnicodeCategory</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetUnicodeCategory" uniqueID="GetUnicodeCategory(string;int):System.Globalization.UnicodeCategory">
				<signature>System.Char.GetUnicodeCategory(string;int):System.Globalization.UnicodeCategory</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IsAscii" uniqueID="IsAscii(char):bool">
				<signature>System.Char.IsAscii(char):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsControl" uniqueID="IsControl(char):bool">
				<signature>System.Char.IsControl(char):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsControl" uniqueID="IsControl(string;int):bool">
				<signature>System.Char.IsControl(string;int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsDigit" uniqueID="IsDigit(char):bool">
				<signature>System.Char.IsDigit(char):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsDigit" uniqueID="IsDigit(string;int):bool">
				<signature>System.Char.IsDigit(string;int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsHighSurrogate" uniqueID="IsHighSurrogate(char):bool">
				<signature>System.Char.IsHighSurrogate(char):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsHighSurrogate" uniqueID="IsHighSurrogate(string;int):bool">
				<signature>System.Char.IsHighSurrogate(string;int):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IsLatin1" uniqueID="IsLatin1(char):bool">
				<signature>System.Char.IsLatin1(char):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsLetter" uniqueID="IsLetter(char):bool">
				<signature>System.Char.IsLetter(char):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsLetter" uniqueID="IsLetter(string;int):bool">
				<signature>System.Char.IsLetter(string;int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsLetterOrDigit" uniqueID="IsLetterOrDigit(char):bool">
				<signature>System.Char.IsLetterOrDigit(char):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsLetterOrDigit" uniqueID="IsLetterOrDigit(string;int):bool">
				<signature>System.Char.IsLetterOrDigit(string;int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsLowSurrogate" uniqueID="IsLowSurrogate(char):bool">
				<signature>System.Char.IsLowSurrogate(char):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsLowSurrogate" uniqueID="IsLowSurrogate(string;int):bool">
				<signature>System.Char.IsLowSurrogate(string;int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsLower" uniqueID="IsLower(char):bool">
				<signature>System.Char.IsLower(char):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsLower" uniqueID="IsLower(string;int):bool">
				<signature>System.Char.IsLower(string;int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsNumber" uniqueID="IsNumber(char):bool">
				<signature>System.Char.IsNumber(char):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsNumber" uniqueID="IsNumber(string;int):bool">
				<signature>System.Char.IsNumber(string;int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsPunctuation" uniqueID="IsPunctuation(char):bool">
				<signature>System.Char.IsPunctuation(char):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsPunctuation" uniqueID="IsPunctuation(string;int):bool">
				<signature>System.Char.IsPunctuation(string;int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsSeparator" uniqueID="IsSeparator(char):bool">
				<signature>System.Char.IsSeparator(char):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsSeparator" uniqueID="IsSeparator(string;int):bool">
				<signature>System.Char.IsSeparator(string;int):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IsSeparatorLatin1" uniqueID="IsSeparatorLatin1(char):bool">
				<signature>System.Char.IsSeparatorLatin1(char):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsSurrogate" uniqueID="IsSurrogate(char):bool">
				<signature>System.Char.IsSurrogate(char):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsSurrogate" uniqueID="IsSurrogate(string;int):bool">
				<signature>System.Char.IsSurrogate(string;int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsSurrogatePair" uniqueID="IsSurrogatePair(char;char):bool">
				<signature>System.Char.IsSurrogatePair(char;char):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsSurrogatePair" uniqueID="IsSurrogatePair(string;int):bool">
				<signature>System.Char.IsSurrogatePair(string;int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsSymbol" uniqueID="IsSymbol(char):bool">
				<signature>System.Char.IsSymbol(char):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsSymbol" uniqueID="IsSymbol(string;int):bool">
				<signature>System.Char.IsSymbol(string;int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsUpper" uniqueID="IsUpper(char):bool">
				<signature>System.Char.IsUpper(char):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsUpper" uniqueID="IsUpper(string;int):bool">
				<signature>System.Char.IsUpper(string;int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsWhiteSpace" uniqueID="IsWhiteSpace(char):bool">
				<signature>System.Char.IsWhiteSpace(char):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsWhiteSpace" uniqueID="IsWhiteSpace(string;int):bool">
				<signature>System.Char.IsWhiteSpace(string;int):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IsWhiteSpaceLatin1" uniqueID="IsWhiteSpaceLatin1(char):bool">
				<signature>System.Char.IsWhiteSpaceLatin1(char):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Parse" uniqueID="Parse(string):char">
				<signature>System.Char.Parse(string):char</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToLower" uniqueID="ToLower(char):char">
				<signature>System.Char.ToLower(char):char</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToLower" uniqueID="ToLower(char;System.Globalization.CultureInfo):char">
				<signature>System.Char.ToLower(char;System.Globalization.CultureInfo):char</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToLowerInvariant" uniqueID="ToLowerInvariant(char):char">
				<signature>System.Char.ToLowerInvariant(char):char</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToString" uniqueID="ToString(char):string">
				<signature>System.Char.ToString(char):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUpper" uniqueID="ToUpper(char):char">
				<signature>System.Char.ToUpper(char):char</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUpper" uniqueID="ToUpper(char;System.Globalization.CultureInfo):char">
				<signature>System.Char.ToUpper(char;System.Globalization.CultureInfo):char</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUpperInvariant" uniqueID="ToUpperInvariant(char):char">
				<signature>System.Char.ToUpperInvariant(char):char</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="TryParse" uniqueID="TryParse(string;char):bool">
				<signature>System.Char.TryParse(string;char):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(char):int">
				<signature>System.Char.CompareTo(char):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(object):int">
				<signature>System.Char.CompareTo(object):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(char):bool">
				<signature>System.Char.Equals(char):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Char.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Char.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeCode" uniqueID="GetTypeCode():System.TypeCode">
				<signature>System.Char.GetTypeCode():System.TypeCode</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToBoolean" uniqueID="System.IConvertible.ToBoolean(System.IFormatProvider):bool">
				<signature>System.Char.System.IConvertible.ToBoolean(System.IFormatProvider):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToByte" uniqueID="System.IConvertible.ToByte(System.IFormatProvider):byte">
				<signature>System.Char.System.IConvertible.ToByte(System.IFormatProvider):byte</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToChar" uniqueID="System.IConvertible.ToChar(System.IFormatProvider):char">
				<signature>System.Char.System.IConvertible.ToChar(System.IFormatProvider):char</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToDateTime" uniqueID="System.IConvertible.ToDateTime(System.IFormatProvider):System.DateTime">
				<signature>System.Char.System.IConvertible.ToDateTime(System.IFormatProvider):System.DateTime</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToDecimal" uniqueID="System.IConvertible.ToDecimal(System.IFormatProvider):System.Decimal">
				<signature>System.Char.System.IConvertible.ToDecimal(System.IFormatProvider):System.Decimal</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToDouble" uniqueID="System.IConvertible.ToDouble(System.IFormatProvider):double">
				<signature>System.Char.System.IConvertible.ToDouble(System.IFormatProvider):double</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToInt16" uniqueID="System.IConvertible.ToInt16(System.IFormatProvider):short">
				<signature>System.Char.System.IConvertible.ToInt16(System.IFormatProvider):short</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToInt32" uniqueID="System.IConvertible.ToInt32(System.IFormatProvider):int">
				<signature>System.Char.System.IConvertible.ToInt32(System.IFormatProvider):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToInt64" uniqueID="System.IConvertible.ToInt64(System.IFormatProvider):long">
				<signature>System.Char.System.IConvertible.ToInt64(System.IFormatProvider):long</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToSByte" uniqueID="System.IConvertible.ToSByte(System.IFormatProvider):sbyte">
				<signature>System.Char.System.IConvertible.ToSByte(System.IFormatProvider):sbyte</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToSingle" uniqueID="System.IConvertible.ToSingle(System.IFormatProvider):float">
				<signature>System.Char.System.IConvertible.ToSingle(System.IFormatProvider):float</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToType" uniqueID="System.IConvertible.ToType(System.Type;System.IFormatProvider):object">
				<signature>System.Char.System.IConvertible.ToType(System.Type;System.IFormatProvider):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToUInt16" uniqueID="System.IConvertible.ToUInt16(System.IFormatProvider):unsigned short">
				<signature>System.Char.System.IConvertible.ToUInt16(System.IFormatProvider):unsigned short</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToUInt32" uniqueID="System.IConvertible.ToUInt32(System.IFormatProvider):unsigned int">
				<signature>System.Char.System.IConvertible.ToUInt32(System.IFormatProvider):unsigned int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToUInt64" uniqueID="System.IConvertible.ToUInt64(System.IFormatProvider):unsigned long">
				<signature>System.Char.System.IConvertible.ToUInt64(System.IFormatProvider):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Char.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString(System.IFormatProvider):string">
				<signature>System.Char.ToString(System.IFormatProvider):string</signature>
			</method>
		</class>
		<class name="Decimal" uniqueID="System.Decimal">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Decimal.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="Abs" uniqueID="Abs(System.Decimal):System.Decimal">
				<signature>System.Decimal.Abs(System.Decimal):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Add" uniqueID="Add(System.Decimal;System.Decimal):System.Decimal">
				<signature>System.Decimal.Add(System.Decimal;System.Decimal):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Ceiling" uniqueID="Ceiling(System.Decimal):System.Decimal">
				<signature>System.Decimal.Ceiling(System.Decimal):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Compare" uniqueID="Compare(System.Decimal;System.Decimal):int">
				<signature>System.Decimal.Compare(System.Decimal;System.Decimal):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Divide" uniqueID="Divide(System.Decimal;System.Decimal):System.Decimal">
				<signature>System.Decimal.Divide(System.Decimal;System.Decimal):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Equals" uniqueID="Equals(System.Decimal;System.Decimal):bool">
				<signature>System.Decimal.Equals(System.Decimal;System.Decimal):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="FCallAdd" uniqueID="FCallAdd(System.Decimal;System.Decimal;System.Decimal):void">
				<signature>System.Decimal.FCallAdd(System.Decimal;System.Decimal;System.Decimal):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="FCallDivide" uniqueID="FCallDivide(System.Decimal;System.Decimal;System.Decimal):void">
				<signature>System.Decimal.FCallDivide(System.Decimal;System.Decimal;System.Decimal):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="FCallFloor" uniqueID="FCallFloor(System.Decimal;System.Decimal):void">
				<signature>System.Decimal.FCallFloor(System.Decimal;System.Decimal):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="FCallMultiply" uniqueID="FCallMultiply(System.Decimal;System.Decimal;System.Decimal):void">
				<signature>System.Decimal.FCallMultiply(System.Decimal;System.Decimal;System.Decimal):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="FCallRound" uniqueID="FCallRound(System.Decimal;System.Decimal;int):void">
				<signature>System.Decimal.FCallRound(System.Decimal;System.Decimal;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="FCallSubtract" uniqueID="FCallSubtract(System.Decimal;System.Decimal;System.Decimal):void">
				<signature>System.Decimal.FCallSubtract(System.Decimal;System.Decimal;System.Decimal):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="FCallToCurrency" uniqueID="FCallToCurrency(System.Currency;System.Decimal):void">
				<signature>System.Decimal.FCallToCurrency(System.Currency;System.Decimal):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="FCallToInt32" uniqueID="FCallToInt32(System.Decimal):int">
				<signature>System.Decimal.FCallToInt32(System.Decimal):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="FCallTruncate" uniqueID="FCallTruncate(System.Decimal;System.Decimal):void">
				<signature>System.Decimal.FCallTruncate(System.Decimal;System.Decimal):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Floor" uniqueID="Floor(System.Decimal):System.Decimal">
				<signature>System.Decimal.Floor(System.Decimal):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="FromOACurrency" uniqueID="FromOACurrency(long):System.Decimal">
				<signature>System.Decimal.FromOACurrency(long):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetBits" uniqueID="GetBits(System.Decimal):int[]">
				<signature>System.Decimal.GetBits(System.Decimal):int[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetBytes" uniqueID="GetBytes(System.Decimal;byte[]):void">
				<signature>System.Decimal.GetBytes(System.Decimal;byte[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalAddUInt32RawUnchecked" uniqueID="InternalAddUInt32RawUnchecked(System.Decimal;unsigned int):void">
				<signature>System.Decimal.InternalAddUInt32RawUnchecked(System.Decimal;unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalDivRemUInt32" uniqueID="InternalDivRemUInt32(System.Decimal;unsigned int):unsigned int">
				<signature>System.Decimal.InternalDivRemUInt32(System.Decimal;unsigned int):unsigned int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalRoundFromZero" uniqueID="InternalRoundFromZero(System.Decimal;int):void">
				<signature>System.Decimal.InternalRoundFromZero(System.Decimal;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="Max" uniqueID="Max(System.Decimal;System.Decimal):System.Decimal">
				<signature>System.Decimal.Max(System.Decimal;System.Decimal):System.Decimal</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="Min" uniqueID="Min(System.Decimal;System.Decimal):System.Decimal">
				<signature>System.Decimal.Min(System.Decimal;System.Decimal):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Multiply" uniqueID="Multiply(System.Decimal;System.Decimal):System.Decimal">
				<signature>System.Decimal.Multiply(System.Decimal;System.Decimal):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Negate" uniqueID="Negate(System.Decimal):System.Decimal">
				<signature>System.Decimal.Negate(System.Decimal):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Parse" uniqueID="Parse(string):System.Decimal">
				<signature>System.Decimal.Parse(string):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Parse" uniqueID="Parse(string;System.Globalization.NumberStyles):System.Decimal">
				<signature>System.Decimal.Parse(string;System.Globalization.NumberStyles):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Parse" uniqueID="Parse(string;System.Globalization.NumberStyles;System.IFormatProvider):System.Decimal">
				<signature>System.Decimal.Parse(string;System.Globalization.NumberStyles;System.IFormatProvider):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Parse" uniqueID="Parse(string;System.IFormatProvider):System.Decimal">
				<signature>System.Decimal.Parse(string;System.IFormatProvider):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Remainder" uniqueID="Remainder(System.Decimal;System.Decimal):System.Decimal">
				<signature>System.Decimal.Remainder(System.Decimal;System.Decimal):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Round" uniqueID="Round(System.Decimal):System.Decimal">
				<signature>System.Decimal.Round(System.Decimal):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Round" uniqueID="Round(System.Decimal;System.MidpointRounding):System.Decimal">
				<signature>System.Decimal.Round(System.Decimal;System.MidpointRounding):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Round" uniqueID="Round(System.Decimal;int):System.Decimal">
				<signature>System.Decimal.Round(System.Decimal;int):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Round" uniqueID="Round(System.Decimal;int;System.MidpointRounding):System.Decimal">
				<signature>System.Decimal.Round(System.Decimal;int;System.MidpointRounding):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Subtract" uniqueID="Subtract(System.Decimal;System.Decimal):System.Decimal">
				<signature>System.Decimal.Subtract(System.Decimal;System.Decimal):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToByte" uniqueID="ToByte(System.Decimal):byte">
				<signature>System.Decimal.ToByte(System.Decimal):byte</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ToCurrency" uniqueID="ToCurrency(System.Decimal):System.Currency">
				<signature>System.Decimal.ToCurrency(System.Decimal):System.Currency</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ToDecimal" uniqueID="ToDecimal(byte[]):System.Decimal">
				<signature>System.Decimal.ToDecimal(byte[]):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToDouble" uniqueID="ToDouble(System.Decimal):double">
				<signature>System.Decimal.ToDouble(System.Decimal):double</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt16" uniqueID="ToInt16(System.Decimal):short">
				<signature>System.Decimal.ToInt16(System.Decimal):short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt32" uniqueID="ToInt32(System.Decimal):int">
				<signature>System.Decimal.ToInt32(System.Decimal):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToInt64" uniqueID="ToInt64(System.Decimal):long">
				<signature>System.Decimal.ToInt64(System.Decimal):long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToOACurrency" uniqueID="ToOACurrency(System.Decimal):long">
				<signature>System.Decimal.ToOACurrency(System.Decimal):long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSByte" uniqueID="ToSByte(System.Decimal):sbyte">
				<signature>System.Decimal.ToSByte(System.Decimal):sbyte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToSingle" uniqueID="ToSingle(System.Decimal):float">
				<signature>System.Decimal.ToSingle(System.Decimal):float</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt16" uniqueID="ToUInt16(System.Decimal):unsigned short">
				<signature>System.Decimal.ToUInt16(System.Decimal):unsigned short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt32" uniqueID="ToUInt32(System.Decimal):unsigned int">
				<signature>System.Decimal.ToUInt32(System.Decimal):unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ToUInt64" uniqueID="ToUInt64(System.Decimal):unsigned long">
				<signature>System.Decimal.ToUInt64(System.Decimal):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Truncate" uniqueID="Truncate(System.Decimal):System.Decimal">
				<signature>System.Decimal.Truncate(System.Decimal):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="TryParse" uniqueID="TryParse(string;System.Decimal):bool">
				<signature>System.Decimal.TryParse(string;System.Decimal):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="TryParse" uniqueID="TryParse(string;System.Globalization.NumberStyles;System.IFormatProvider;System.Decimal):bool">
				<signature>System.Decimal.TryParse(string;System.Globalization.NumberStyles;System.IFormatProvider;System.Decimal):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Addition" uniqueID="op_Addition(System.Decimal;System.Decimal):System.Decimal">
				<signature>System.Decimal.op_Addition(System.Decimal;System.Decimal):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Decrement" uniqueID="op_Decrement(System.Decimal):System.Decimal">
				<signature>System.Decimal.op_Decrement(System.Decimal):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Division" uniqueID="op_Division(System.Decimal;System.Decimal):System.Decimal">
				<signature>System.Decimal.op_Division(System.Decimal;System.Decimal):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.Decimal;System.Decimal):bool">
				<signature>System.Decimal.op_Equality(System.Decimal;System.Decimal):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Explicit" uniqueID="op_Explicit(System.Decimal):byte">
				<signature>System.Decimal.op_Explicit(System.Decimal):byte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Explicit" uniqueID="op_Explicit(System.Decimal):char">
				<signature>System.Decimal.op_Explicit(System.Decimal):char</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Explicit" uniqueID="op_Explicit(System.Decimal):double">
				<signature>System.Decimal.op_Explicit(System.Decimal):double</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Explicit" uniqueID="op_Explicit(System.Decimal):float">
				<signature>System.Decimal.op_Explicit(System.Decimal):float</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Explicit" uniqueID="op_Explicit(System.Decimal):int">
				<signature>System.Decimal.op_Explicit(System.Decimal):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Explicit" uniqueID="op_Explicit(System.Decimal):long">
				<signature>System.Decimal.op_Explicit(System.Decimal):long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Explicit" uniqueID="op_Explicit(System.Decimal):sbyte">
				<signature>System.Decimal.op_Explicit(System.Decimal):sbyte</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Explicit" uniqueID="op_Explicit(System.Decimal):short">
				<signature>System.Decimal.op_Explicit(System.Decimal):short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Explicit" uniqueID="op_Explicit(System.Decimal):unsigned int">
				<signature>System.Decimal.op_Explicit(System.Decimal):unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Explicit" uniqueID="op_Explicit(System.Decimal):unsigned long">
				<signature>System.Decimal.op_Explicit(System.Decimal):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Explicit" uniqueID="op_Explicit(System.Decimal):unsigned short">
				<signature>System.Decimal.op_Explicit(System.Decimal):unsigned short</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Explicit" uniqueID="op_Explicit(double):System.Decimal">
				<signature>System.Decimal.op_Explicit(double):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Explicit" uniqueID="op_Explicit(float):System.Decimal">
				<signature>System.Decimal.op_Explicit(float):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_GreaterThan" uniqueID="op_GreaterThan(System.Decimal;System.Decimal):bool">
				<signature>System.Decimal.op_GreaterThan(System.Decimal;System.Decimal):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_GreaterThanOrEqual" uniqueID="op_GreaterThanOrEqual(System.Decimal;System.Decimal):bool">
				<signature>System.Decimal.op_GreaterThanOrEqual(System.Decimal;System.Decimal):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Implicit" uniqueID="op_Implicit(byte):System.Decimal">
				<signature>System.Decimal.op_Implicit(byte):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Implicit" uniqueID="op_Implicit(char):System.Decimal">
				<signature>System.Decimal.op_Implicit(char):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Implicit" uniqueID="op_Implicit(int):System.Decimal">
				<signature>System.Decimal.op_Implicit(int):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Implicit" uniqueID="op_Implicit(long):System.Decimal">
				<signature>System.Decimal.op_Implicit(long):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Implicit" uniqueID="op_Implicit(sbyte):System.Decimal">
				<signature>System.Decimal.op_Implicit(sbyte):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Implicit" uniqueID="op_Implicit(short):System.Decimal">
				<signature>System.Decimal.op_Implicit(short):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Implicit" uniqueID="op_Implicit(unsigned int):System.Decimal">
				<signature>System.Decimal.op_Implicit(unsigned int):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Implicit" uniqueID="op_Implicit(unsigned long):System.Decimal">
				<signature>System.Decimal.op_Implicit(unsigned long):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Implicit" uniqueID="op_Implicit(unsigned short):System.Decimal">
				<signature>System.Decimal.op_Implicit(unsigned short):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Increment" uniqueID="op_Increment(System.Decimal):System.Decimal">
				<signature>System.Decimal.op_Increment(System.Decimal):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.Decimal;System.Decimal):bool">
				<signature>System.Decimal.op_Inequality(System.Decimal;System.Decimal):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_LessThan" uniqueID="op_LessThan(System.Decimal;System.Decimal):bool">
				<signature>System.Decimal.op_LessThan(System.Decimal;System.Decimal):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_LessThanOrEqual" uniqueID="op_LessThanOrEqual(System.Decimal;System.Decimal):bool">
				<signature>System.Decimal.op_LessThanOrEqual(System.Decimal;System.Decimal):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Modulus" uniqueID="op_Modulus(System.Decimal;System.Decimal):System.Decimal">
				<signature>System.Decimal.op_Modulus(System.Decimal;System.Decimal):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Multiply" uniqueID="op_Multiply(System.Decimal;System.Decimal):System.Decimal">
				<signature>System.Decimal.op_Multiply(System.Decimal;System.Decimal):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Subtraction" uniqueID="op_Subtraction(System.Decimal;System.Decimal):System.Decimal">
				<signature>System.Decimal.op_Subtraction(System.Decimal;System.Decimal):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_UnaryNegation" uniqueID="op_UnaryNegation(System.Decimal):System.Decimal">
				<signature>System.Decimal.op_UnaryNegation(System.Decimal):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_UnaryPlus" uniqueID="op_UnaryPlus(System.Decimal):System.Decimal">
				<signature>System.Decimal.op_UnaryPlus(System.Decimal):System.Decimal</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(System.Decimal):int">
				<signature>System.Decimal.CompareTo(System.Decimal):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(object):int">
				<signature>System.Decimal.CompareTo(object):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Decimal" uniqueID="Decimal(System.Currency):void">
				<signature>System.Decimal.Decimal(System.Currency):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Decimal" uniqueID="Decimal(double):void">
				<signature>System.Decimal.Decimal(double):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Decimal" uniqueID="Decimal(float):void">
				<signature>System.Decimal.Decimal(float):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Decimal" uniqueID="Decimal(int):void">
				<signature>System.Decimal.Decimal(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Decimal" uniqueID="Decimal(int;int;int;bool;byte):void">
				<signature>System.Decimal.Decimal(int;int;int;bool;byte):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Decimal" uniqueID="Decimal(int;int;int;int):void">
				<signature>System.Decimal.Decimal(int;int;int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Decimal" uniqueID="Decimal(int[]):void">
				<signature>System.Decimal.Decimal(int[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Decimal" uniqueID="Decimal(long):void">
				<signature>System.Decimal.Decimal(long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Decimal" uniqueID="Decimal(unsigned int):void">
				<signature>System.Decimal.Decimal(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Decimal" uniqueID="Decimal(unsigned long):void">
				<signature>System.Decimal.Decimal(unsigned long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.Decimal):bool">
				<signature>System.Decimal.Equals(System.Decimal):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Decimal.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Decimal.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeCode" uniqueID="GetTypeCode():System.TypeCode">
				<signature>System.Decimal.GetTypeCode():System.TypeCode</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToBoolean" uniqueID="System.IConvertible.ToBoolean(System.IFormatProvider):bool">
				<signature>System.Decimal.System.IConvertible.ToBoolean(System.IFormatProvider):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToByte" uniqueID="System.IConvertible.ToByte(System.IFormatProvider):byte">
				<signature>System.Decimal.System.IConvertible.ToByte(System.IFormatProvider):byte</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToChar" uniqueID="System.IConvertible.ToChar(System.IFormatProvider):char">
				<signature>System.Decimal.System.IConvertible.ToChar(System.IFormatProvider):char</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToDateTime" uniqueID="System.IConvertible.ToDateTime(System.IFormatProvider):System.DateTime">
				<signature>System.Decimal.System.IConvertible.ToDateTime(System.IFormatProvider):System.DateTime</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToDecimal" uniqueID="System.IConvertible.ToDecimal(System.IFormatProvider):System.Decimal">
				<signature>System.Decimal.System.IConvertible.ToDecimal(System.IFormatProvider):System.Decimal</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToDouble" uniqueID="System.IConvertible.ToDouble(System.IFormatProvider):double">
				<signature>System.Decimal.System.IConvertible.ToDouble(System.IFormatProvider):double</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToInt16" uniqueID="System.IConvertible.ToInt16(System.IFormatProvider):short">
				<signature>System.Decimal.System.IConvertible.ToInt16(System.IFormatProvider):short</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToInt32" uniqueID="System.IConvertible.ToInt32(System.IFormatProvider):int">
				<signature>System.Decimal.System.IConvertible.ToInt32(System.IFormatProvider):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToInt64" uniqueID="System.IConvertible.ToInt64(System.IFormatProvider):long">
				<signature>System.Decimal.System.IConvertible.ToInt64(System.IFormatProvider):long</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToSByte" uniqueID="System.IConvertible.ToSByte(System.IFormatProvider):sbyte">
				<signature>System.Decimal.System.IConvertible.ToSByte(System.IFormatProvider):sbyte</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToSingle" uniqueID="System.IConvertible.ToSingle(System.IFormatProvider):float">
				<signature>System.Decimal.System.IConvertible.ToSingle(System.IFormatProvider):float</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToType" uniqueID="System.IConvertible.ToType(System.Type;System.IFormatProvider):object">
				<signature>System.Decimal.System.IConvertible.ToType(System.Type;System.IFormatProvider):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToUInt16" uniqueID="System.IConvertible.ToUInt16(System.IFormatProvider):unsigned short">
				<signature>System.Decimal.System.IConvertible.ToUInt16(System.IFormatProvider):unsigned short</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToUInt32" uniqueID="System.IConvertible.ToUInt32(System.IFormatProvider):unsigned int">
				<signature>System.Decimal.System.IConvertible.ToUInt32(System.IFormatProvider):unsigned int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IConvertible.ToUInt64" uniqueID="System.IConvertible.ToUInt64(System.IFormatProvider):unsigned long">
				<signature>System.Decimal.System.IConvertible.ToUInt64(System.IFormatProvider):unsigned long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Decimal.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString(System.IFormatProvider):string">
				<signature>System.Decimal.ToString(System.IFormatProvider):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString(string):string">
				<signature>System.Decimal.ToString(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString(string;System.IFormatProvider):string">
				<signature>System.Decimal.ToString(string;System.IFormatProvider):string</signature>
			</method>
		</class>
		<class name="Delegate" uniqueID="System.Delegate">
			<method accessibility="Public" methodKind="Static" name="Combine" uniqueID="Combine(System.Delegate;System.Delegate):System.Delegate">
				<signature>System.Delegate.Combine(System.Delegate;System.Delegate):System.Delegate</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Combine" uniqueID="Combine(System.Delegate[]):System.Delegate">
				<signature>System.Delegate.Combine(System.Delegate[]):System.Delegate</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CreateDelegate" uniqueID="CreateDelegate(System.Type;System.Reflection.MethodInfo):System.Delegate">
				<signature>System.Delegate.CreateDelegate(System.Type;System.Reflection.MethodInfo):System.Delegate</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CreateDelegate" uniqueID="CreateDelegate(System.Type;System.Reflection.MethodInfo;bool):System.Delegate">
				<signature>System.Delegate.CreateDelegate(System.Type;System.Reflection.MethodInfo;bool):System.Delegate</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CreateDelegate" uniqueID="CreateDelegate(System.Type;System.Type;string):System.Delegate">
				<signature>System.Delegate.CreateDelegate(System.Type;System.Type;string):System.Delegate</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CreateDelegate" uniqueID="CreateDelegate(System.Type;System.Type;string;bool):System.Delegate">
				<signature>System.Delegate.CreateDelegate(System.Type;System.Type;string;bool):System.Delegate</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CreateDelegate" uniqueID="CreateDelegate(System.Type;System.Type;string;bool;bool):System.Delegate">
				<signature>System.Delegate.CreateDelegate(System.Type;System.Type;string;bool;bool):System.Delegate</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CreateDelegate" uniqueID="CreateDelegate(System.Type;object;System.Reflection.MethodInfo):System.Delegate">
				<signature>System.Delegate.CreateDelegate(System.Type;object;System.Reflection.MethodInfo):System.Delegate</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CreateDelegate" uniqueID="CreateDelegate(System.Type;object;System.Reflection.MethodInfo;bool):System.Delegate">
				<signature>System.Delegate.CreateDelegate(System.Type;object;System.Reflection.MethodInfo;bool):System.Delegate</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CreateDelegate" uniqueID="CreateDelegate(System.Type;object;System.RuntimeMethodHandle):System.Delegate">
				<signature>System.Delegate.CreateDelegate(System.Type;object;System.RuntimeMethodHandle):System.Delegate</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CreateDelegate" uniqueID="CreateDelegate(System.Type;object;string):System.Delegate">
				<signature>System.Delegate.CreateDelegate(System.Type;object;string):System.Delegate</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CreateDelegate" uniqueID="CreateDelegate(System.Type;object;string;bool):System.Delegate">
				<signature>System.Delegate.CreateDelegate(System.Type;object;string;bool):System.Delegate</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CreateDelegate" uniqueID="CreateDelegate(System.Type;object;string;bool;bool):System.Delegate">
				<signature>System.Delegate.CreateDelegate(System.Type;object;string;bool;bool):System.Delegate</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalAlloc" uniqueID="InternalAlloc(System.RuntimeTypeHandle):System.MulticastDelegate">
				<signature>System.Delegate.InternalAlloc(System.RuntimeTypeHandle):System.MulticastDelegate</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalAllocLike" uniqueID="InternalAllocLike(System.Delegate):System.MulticastDelegate">
				<signature>System.Delegate.InternalAllocLike(System.Delegate):System.MulticastDelegate</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalCreateDelegate" uniqueID="InternalCreateDelegate(System.Type;object;System.Reflection.MethodInfo):System.Delegate">
				<signature>System.Delegate.InternalCreateDelegate(System.Type;object;System.Reflection.MethodInfo):System.Delegate</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalEqualTypes" uniqueID="InternalEqualTypes(object;object):bool">
				<signature>System.Delegate.InternalEqualTypes(object;object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Remove" uniqueID="Remove(System.Delegate;System.Delegate):System.Delegate">
				<signature>System.Delegate.Remove(System.Delegate;System.Delegate):System.Delegate</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="RemoveAll" uniqueID="RemoveAll(System.Delegate;System.Delegate):System.Delegate">
				<signature>System.Delegate.RemoveAll(System.Delegate;System.Delegate):System.Delegate</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.Delegate;System.Delegate):bool">
				<signature>System.Delegate.op_Equality(System.Delegate;System.Delegate):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.Delegate;System.Delegate):bool">
				<signature>System.Delegate.op_Inequality(System.Delegate;System.Delegate):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AdjustTarget" uniqueID="AdjustTarget(object;native signed int):native signed int">
				<signature>System.Delegate.AdjustTarget(object;native signed int):native signed int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="BindToMethodInfo" uniqueID="BindToMethodInfo(object;System.RuntimeMethodHandle;System.RuntimeTypeHandle;System.DelegateBindingFlags):bool">
				<signature>System.Delegate.BindToMethodInfo(object;System.RuntimeMethodHandle;System.RuntimeTypeHandle;System.DelegateBindingFlags):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="BindToMethodName" uniqueID="BindToMethodName(object;System.RuntimeTypeHandle;string;System.DelegateBindingFlags):bool">
				<signature>System.Delegate.BindToMethodName(object;System.RuntimeTypeHandle;string;System.DelegateBindingFlags):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone():object">
				<signature>System.Delegate.Clone():object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CombineImpl" uniqueID="CombineImpl(System.Delegate):System.Delegate">
				<signature>System.Delegate.CombineImpl(System.Delegate):System.Delegate</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Delegate" uniqueID="Delegate():void">
				<signature>System.Delegate.Delegate():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Delegate" uniqueID="Delegate(System.Type;string):void">
				<signature>System.Delegate.Delegate(System.Type;string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Delegate" uniqueID="Delegate(object;string):void">
				<signature>System.Delegate.Delegate(object;string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DelegateConstruct" uniqueID="DelegateConstruct(object;native signed int):void">
				<signature>System.Delegate.DelegateConstruct(object;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DynamicInvoke" uniqueID="DynamicInvoke(object[]):object">
				<signature>System.Delegate.DynamicInvoke(object[]):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="DynamicInvokeImpl" uniqueID="DynamicInvokeImpl(object[]):object">
				<signature>System.Delegate.DynamicInvokeImpl(object[]):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Delegate.Equals(object):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FindMethodHandle" uniqueID="FindMethodHandle():System.RuntimeMethodHandle">
				<signature>System.Delegate.FindMethodHandle():System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetCallStub" uniqueID="GetCallStub(native signed int):native signed int">
				<signature>System.Delegate.GetCallStub(native signed int):native signed int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Delegate.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetInvocationList" uniqueID="GetInvocationList():System.Delegate[]">
				<signature>System.Delegate.GetInvocationList():System.Delegate[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetInvokeMethod" uniqueID="GetInvokeMethod():native signed int">
				<signature>System.Delegate.GetInvokeMethod():native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMethodImpl" uniqueID="GetMethodImpl():System.Reflection.MethodInfo">
				<signature>System.Delegate.GetMethodImpl():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMulticastInvoke" uniqueID="GetMulticastInvoke():native signed int">
				<signature>System.Delegate.GetMulticastInvoke():native signed int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetObjectData" uniqueID="GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Delegate.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetTarget" uniqueID="GetTarget():object">
				<signature>System.Delegate.GetTarget():object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetUnmanagedCallSite" uniqueID="GetUnmanagedCallSite():native signed int">
				<signature>System.Delegate.GetUnmanagedCallSite():native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RemoveImpl" uniqueID="RemoveImpl(System.Delegate):System.Delegate">
				<signature>System.Delegate.RemoveImpl(System.Delegate):System.Delegate</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Method" uniqueID="get_Method():System.Reflection.MethodInfo">
				<signature>System.Delegate.get_Method():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Target" uniqueID="get_Target():object">
				<signature>System.Delegate.get_Target():object</signature>
			</method>
		</class>
		<class name="Exception" uniqueID="System.Exception">
			<method accessibility="Protected" methodKind="Static" name="GetMessageFromNativeResources" uniqueID="GetMessageFromNativeResources(System.Exception+ExceptionMessageKind):string">
				<signature>System.Exception.GetMessageFromNativeResources(System.Exception+ExceptionMessageKind):string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalGetMethod" uniqueID="InternalGetMethod(object):System.RuntimeMethodHandle">
				<signature>System.Exception.InternalGetMethod(object):System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IsImmutableAgileException" uniqueID="IsImmutableAgileException(System.Exception):bool">
				<signature>System.Exception.IsImmutableAgileException(System.Exception):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_InternalGetMethod" uniqueID="_InternalGetMethod(object):void">
				<signature>System.Exception._InternalGetMethod(object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="nIsTransient" uniqueID="nIsTransient(int):bool">
				<signature>System.Exception.nIsTransient(int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Exception" uniqueID="Exception():void">
				<signature>System.Exception.Exception():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Exception" uniqueID="Exception(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Exception.Exception(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Exception" uniqueID="Exception(string):void">
				<signature>System.Exception.Exception(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Exception" uniqueID="Exception(string;System.Exception):void">
				<signature>System.Exception.Exception(string;System.Exception):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetBaseException" uniqueID="GetBaseException():System.Exception">
				<signature>System.Exception.GetBaseException():System.Exception</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetClassName" uniqueID="GetClassName():string">
				<signature>System.Exception.GetClassName():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetDataInternal" uniqueID="GetDataInternal():System.Collections.IDictionary">
				<signature>System.Exception.GetDataInternal():System.Collections.IDictionary</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetExceptionMethodFromString" uniqueID="GetExceptionMethodFromString():System.Reflection.MethodBase">
				<signature>System.Exception.GetExceptionMethodFromString():System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetExceptionMethodString" uniqueID="GetExceptionMethodString():string">
				<signature>System.Exception.GetExceptionMethodString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetObjectData" uniqueID="GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetTargetSiteInternal" uniqueID="GetTargetSiteInternal():System.Reflection.MethodBase">
				<signature>System.Exception.GetTargetSiteInternal():System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType():System.Type">
				<signature>System.Exception.GetType():System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalPreserveStackTrace" uniqueID="InternalPreserveStackTrace():void">
				<signature>System.Exception.InternalPreserveStackTrace():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalToString" uniqueID="InternalToString():string">
				<signature>System.Exception.InternalToString():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="PrepForRemoting" uniqueID="PrepForRemoting():System.Exception">
				<signature>System.Exception.PrepForRemoting():System.Exception</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetErrorCode" uniqueID="SetErrorCode(int):void">
				<signature>System.Exception.SetErrorCode(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Exception.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Data" uniqueID="get_Data():System.Collections.IDictionary">
				<signature>System.Exception.get_Data():System.Collections.IDictionary</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_HResult" uniqueID="get_HResult():int">
				<signature>System.Exception.get_HResult():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_HelpLink" uniqueID="get_HelpLink():string">
				<signature>System.Exception.get_HelpLink():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_InnerException" uniqueID="get_InnerException():System.Exception">
				<signature>System.Exception.get_InnerException():System.Exception</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IsTransient" uniqueID="get_IsTransient():bool">
				<signature>System.Exception.get_IsTransient():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Message" uniqueID="get_Message():string">
				<signature>System.Exception.get_Message():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Source" uniqueID="get_Source():string">
				<signature>System.Exception.get_Source():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_StackTrace" uniqueID="get_StackTrace():string">
				<signature>System.Exception.get_StackTrace():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TargetSite" uniqueID="get_TargetSite():System.Reflection.MethodBase">
				<signature>System.Exception.get_TargetSite():System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_HResult" uniqueID="set_HResult(int):void">
				<signature>System.Exception.set_HResult(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_HelpLink" uniqueID="set_HelpLink(string):void">
				<signature>System.Exception.set_HelpLink(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Source" uniqueID="set_Source(string):void">
				<signature>System.Exception.set_Source(string):void</signature>
			</method>
		</class>
		<class name="IComparable&lt;char&gt;" uniqueID="System.IComparable&lt;char&gt;">
			<method accessibility="Public" methodKind="Member" name="CompareTo" uniqueID="CompareTo(char):int">
				<signature>System.IComparable&lt;char&gt;.CompareTo(char):int</signature>
			</method>
		</class>
		<class name="LocalDataStore" uniqueID="System.LocalDataStore">
			<method accessibility="Public" methodKind="Member" name="GetData" uniqueID="GetData(System.LocalDataStoreSlot):object">
				<signature>System.LocalDataStore.GetData(System.LocalDataStoreSlot):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LocalDataStore" uniqueID="LocalDataStore(System.LocalDataStoreMgr;int):void">
				<signature>System.LocalDataStore.LocalDataStore(System.LocalDataStoreMgr;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SetCapacity" uniqueID="SetCapacity(int):void">
				<signature>System.LocalDataStore.SetCapacity(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetData" uniqueID="SetData(System.LocalDataStoreSlot;object):void">
				<signature>System.LocalDataStore.SetData(System.LocalDataStoreSlot;object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetDataInternal" uniqueID="SetDataInternal(int;object;bool):void">
				<signature>System.LocalDataStore.SetDataInternal(int;object;bool):void</signature>
			</method>
		</class>
		<class name="LocalDataStoreSlot" uniqueID="System.LocalDataStoreSlot">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.LocalDataStoreSlot.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Finalize" uniqueID="Finalize():void">
				<signature>System.LocalDataStoreSlot.Finalize():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsValid" uniqueID="IsValid():bool">
				<signature>System.LocalDataStoreSlot.IsValid():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="LocalDataStoreSlot" uniqueID="LocalDataStoreSlot(System.LocalDataStoreMgr;int):void">
				<signature>System.LocalDataStoreSlot.LocalDataStoreSlot(System.LocalDataStoreMgr;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Manager" uniqueID="get_Manager():System.LocalDataStoreMgr">
				<signature>System.LocalDataStoreSlot.get_Manager():System.LocalDataStoreMgr</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Slot" uniqueID="get_Slot():int">
				<signature>System.LocalDataStoreSlot.get_Slot():int</signature>
			</method>
		</class>
	</package>
	<package name="System.Runtime.CompilerServices">
		<class name="CompilerGeneratedAttribute" uniqueID="System.Runtime.CompilerServices.CompilerGeneratedAttribute">
			<method accessibility="Public" methodKind="Member" name="CompilerGeneratedAttribute" uniqueID="CompilerGeneratedAttribute():void">
				<signature>System.Runtime.CompilerServices.CompilerGeneratedAttribute.CompilerGeneratedAttribute():void</signature>
			</method>
		</class>
		<class name="RuntimeHelpers" uniqueID="System.Runtime.CompilerServices.RuntimeHelpers">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="EnterMonitorAndTryCode" uniqueID="EnterMonitorAndTryCode(object):void">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers.EnterMonitorAndTryCode(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Equals" uniqueID="Equals(object;object):bool">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers.Equals(object;object):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ExecuteBackoutCodeHelper" uniqueID="ExecuteBackoutCodeHelper(object;object;bool):void">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers.ExecuteBackoutCodeHelper(object;object;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ExecuteCodeWithGuaranteedCleanup" uniqueID="ExecuteCodeWithGuaranteedCleanup(System.Runtime.CompilerServices.RuntimeHelpers+TryCode;System.Runtime.CompilerServices.RuntimeHelpers+CleanupCode;object):void">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers.ExecuteCodeWithGuaranteedCleanup(System.Runtime.CompilerServices.RuntimeHelpers+TryCode;System.Runtime.CompilerServices.RuntimeHelpers+CleanupCode;object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ExecuteCodeWithLock" uniqueID="ExecuteCodeWithLock(object;System.Runtime.CompilerServices.RuntimeHelpers+TryCode;object):void">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers.ExecuteCodeWithLock(object;System.Runtime.CompilerServices.RuntimeHelpers+TryCode;object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ExitMonitorOnBackout" uniqueID="ExitMonitorOnBackout(object;bool):void">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers.ExitMonitorOnBackout(object;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetHashCode" uniqueID="GetHashCode(object):int">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(object):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetObjectValue" uniqueID="GetObjectValue(object):object">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers.GetObjectValue(object):object</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="InitializeArray" uniqueID="InitializeArray(System.Array;System.RuntimeFieldHandle):void">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers.InitializeArray(System.Array;System.RuntimeFieldHandle):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="PrepareConstrainedRegions" uniqueID="PrepareConstrainedRegions():void">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegions():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="PrepareConstrainedRegionsNoOP" uniqueID="PrepareConstrainedRegionsNoOP():void">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers.PrepareConstrainedRegionsNoOP():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="PrepareDelegate" uniqueID="PrepareDelegate(System.Delegate):void">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers.PrepareDelegate(System.Delegate):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="PrepareMethod" uniqueID="PrepareMethod(System.RuntimeMethodHandle):void">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers.PrepareMethod(System.RuntimeMethodHandle):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="PrepareMethod" uniqueID="PrepareMethod(System.RuntimeMethodHandle;System.RuntimeTypeHandle[]):void">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers.PrepareMethod(System.RuntimeMethodHandle;System.RuntimeTypeHandle[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ProbeForSufficientStack" uniqueID="ProbeForSufficientStack():void">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers.ProbeForSufficientStack():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="RunClassConstructor" uniqueID="RunClassConstructor(System.RuntimeTypeHandle):void">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(System.RuntimeTypeHandle):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="RunModuleConstructor" uniqueID="RunModuleConstructor(System.ModuleHandle):void">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers.RunModuleConstructor(System.ModuleHandle):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="_CompileMethod" uniqueID="_CompileMethod(native signed int):void">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers._CompileMethod(native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_PrepareMethod" uniqueID="_PrepareMethod(native signed int;System.RuntimeTypeHandle[]):void">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers._PrepareMethod(native signed int;System.RuntimeTypeHandle[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_RunClassConstructor" uniqueID="_RunClassConstructor(native signed int):void">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers._RunClassConstructor(native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_RunModuleConstructor" uniqueID="_RunModuleConstructor(native signed int):void">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers._RunModuleConstructor(native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_OffsetToStringData" uniqueID="get_OffsetToStringData():int">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers.get_OffsetToStringData():int</signature>
			</method>
		</class>
		<class name="RuntimeHelpers+CleanupCode" uniqueID="System.Runtime.CompilerServices.RuntimeHelpers+CleanupCode">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(object;bool;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers+CleanupCode.BeginInvoke(object;bool;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):void">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers+CleanupCode.EndInvoke(System.IAsyncResult):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(object;bool):void">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers+CleanupCode.Invoke(object;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RuntimeHelpers+CleanupCode" uniqueID="RuntimeHelpers+CleanupCode(object;native signed int):void">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers+CleanupCode.RuntimeHelpers+CleanupCode(object;native signed int):void</signature>
			</method>
		</class>
		<class name="RuntimeHelpers+TryCode" uniqueID="System.Runtime.CompilerServices.RuntimeHelpers+TryCode">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(object;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers+TryCode.BeginInvoke(object;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):void">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers+TryCode.EndInvoke(System.IAsyncResult):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(object):void">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers+TryCode.Invoke(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RuntimeHelpers+TryCode" uniqueID="RuntimeHelpers+TryCode(object;native signed int):void">
				<signature>System.Runtime.CompilerServices.RuntimeHelpers+TryCode.RuntimeHelpers+TryCode(object;native signed int):void</signature>
			</method>
		</class>
	</package>
	<package name="System.Collections">
		<class name="IEnumerator" uniqueID="System.Collections.IEnumerator">
			<method accessibility="Public" methodKind="Member" name="MoveNext" uniqueID="MoveNext():bool">
				<signature>System.Collections.IEnumerator.MoveNext():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reset" uniqueID="Reset():void">
				<signature>System.Collections.IEnumerator.Reset():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Current" uniqueID="get_Current():object">
				<signature>System.Collections.IEnumerator.get_Current():object</signature>
			</method>
		</class>
		<class name="ReadOnlyCollectionBase" uniqueID="System.Collections.ReadOnlyCollectionBase">
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Collections.ReadOnlyCollectionBase.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ReadOnlyCollectionBase" uniqueID="ReadOnlyCollectionBase():void">
				<signature>System.Collections.ReadOnlyCollectionBase.ReadOnlyCollectionBase():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.CopyTo" uniqueID="System.Collections.ICollection.CopyTo(System.Array;int):void">
				<signature>System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_IsSynchronized" uniqueID="System.Collections.ICollection.get_IsSynchronized():bool">
				<signature>System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_SyncRoot" uniqueID="System.Collections.ICollection.get_SyncRoot():object">
				<signature>System.Collections.ReadOnlyCollectionBase.System.Collections.ICollection.get_SyncRoot():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.ReadOnlyCollectionBase.get_Count():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_InnerList" uniqueID="get_InnerList():System.Collections.ArrayList">
				<signature>System.Collections.ReadOnlyCollectionBase.get_InnerList():System.Collections.ArrayList</signature>
			</method>
		</class>
		<class name="DictionaryEntry" uniqueID="System.Collections.DictionaryEntry">
			<method accessibility="Public" methodKind="Member" name="DictionaryEntry" uniqueID="DictionaryEntry(object;object):void">
				<signature>System.Collections.DictionaryEntry.DictionaryEntry(object;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Key" uniqueID="get_Key():object">
				<signature>System.Collections.DictionaryEntry.get_Key():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Value" uniqueID="get_Value():object">
				<signature>System.Collections.DictionaryEntry.get_Value():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Key" uniqueID="set_Key(object):void">
				<signature>System.Collections.DictionaryEntry.set_Key(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Value" uniqueID="set_Value(object):void">
				<signature>System.Collections.DictionaryEntry.set_Value(object):void</signature>
			</method>
		</class>
		<class name="ICollection" uniqueID="System.Collections.ICollection">
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Array;int):void">
				<signature>System.Collections.ICollection.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.ICollection.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSynchronized" uniqueID="get_IsSynchronized():bool">
				<signature>System.Collections.ICollection.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SyncRoot" uniqueID="get_SyncRoot():object">
				<signature>System.Collections.ICollection.get_SyncRoot():object</signature>
			</method>
		</class>
		<class name="IEnumerable" uniqueID="System.Collections.IEnumerable">
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
		</class>
		<class name="IHashCodeProvider" uniqueID="System.Collections.IHashCodeProvider">
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode(object):int">
				<signature>System.Collections.IHashCodeProvider.GetHashCode(object):int</signature>
			</method>
		</class>
		<class name="KeyValuePairs" uniqueID="System.Collections.KeyValuePairs">
			<method accessibility="Public" methodKind="Member" name="KeyValuePairs" uniqueID="KeyValuePairs(object;object):void">
				<signature>System.Collections.KeyValuePairs.KeyValuePairs(object;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Key" uniqueID="get_Key():object">
				<signature>System.Collections.KeyValuePairs.get_Key():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Value" uniqueID="get_Value():object">
				<signature>System.Collections.KeyValuePairs.get_Value():object</signature>
			</method>
		</class>
		<class name="ArrayList" uniqueID="System.Collections.ArrayList">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Collections.ArrayList.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Adapter" uniqueID="Adapter(System.Collections.IList):System.Collections.ArrayList">
				<signature>System.Collections.ArrayList.Adapter(System.Collections.IList):System.Collections.ArrayList</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="FixedSize" uniqueID="FixedSize(System.Collections.ArrayList):System.Collections.ArrayList">
				<signature>System.Collections.ArrayList.FixedSize(System.Collections.ArrayList):System.Collections.ArrayList</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="FixedSize" uniqueID="FixedSize(System.Collections.IList):System.Collections.IList">
				<signature>System.Collections.ArrayList.FixedSize(System.Collections.IList):System.Collections.IList</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ReadOnly" uniqueID="ReadOnly(System.Collections.ArrayList):System.Collections.ArrayList">
				<signature>System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList):System.Collections.ArrayList</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ReadOnly" uniqueID="ReadOnly(System.Collections.IList):System.Collections.IList">
				<signature>System.Collections.ArrayList.ReadOnly(System.Collections.IList):System.Collections.IList</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Repeat" uniqueID="Repeat(object;int):System.Collections.ArrayList">
				<signature>System.Collections.ArrayList.Repeat(object;int):System.Collections.ArrayList</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Synchronized" uniqueID="Synchronized(System.Collections.ArrayList):System.Collections.ArrayList">
				<signature>System.Collections.ArrayList.Synchronized(System.Collections.ArrayList):System.Collections.ArrayList</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Synchronized" uniqueID="Synchronized(System.Collections.IList):System.Collections.IList">
				<signature>System.Collections.ArrayList.Synchronized(System.Collections.IList):System.Collections.IList</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(object):int">
				<signature>System.Collections.ArrayList.Add(object):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddRange" uniqueID="AddRange(System.Collections.ICollection):void">
				<signature>System.Collections.ArrayList.AddRange(System.Collections.ICollection):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ArrayList" uniqueID="ArrayList():void">
				<signature>System.Collections.ArrayList.ArrayList():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ArrayList" uniqueID="ArrayList(System.Collections.ICollection):void">
				<signature>System.Collections.ArrayList.ArrayList(System.Collections.ICollection):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ArrayList" uniqueID="ArrayList(bool):void">
				<signature>System.Collections.ArrayList.ArrayList(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ArrayList" uniqueID="ArrayList(int):void">
				<signature>System.Collections.ArrayList.ArrayList(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinarySearch" uniqueID="BinarySearch(int;int;object;System.Collections.IComparer):int">
				<signature>System.Collections.ArrayList.BinarySearch(int;int;object;System.Collections.IComparer):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinarySearch" uniqueID="BinarySearch(object):int">
				<signature>System.Collections.ArrayList.BinarySearch(object):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinarySearch" uniqueID="BinarySearch(object;System.Collections.IComparer):int">
				<signature>System.Collections.ArrayList.BinarySearch(object;System.Collections.IComparer):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Collections.ArrayList.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone():object">
				<signature>System.Collections.ArrayList.Clone():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(object):bool">
				<signature>System.Collections.ArrayList.Contains(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Array):void">
				<signature>System.Collections.ArrayList.CopyTo(System.Array):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Array;int):void">
				<signature>System.Collections.ArrayList.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(int;System.Array;int;int):void">
				<signature>System.Collections.ArrayList.CopyTo(int;System.Array;int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="EnsureCapacity" uniqueID="EnsureCapacity(int):void">
				<signature>System.Collections.ArrayList.EnsureCapacity(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Collections.ArrayList.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator(int;int):System.Collections.IEnumerator">
				<signature>System.Collections.ArrayList.GetEnumerator(int;int):System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRange" uniqueID="GetRange(int;int):System.Collections.ArrayList">
				<signature>System.Collections.ArrayList.GetRange(int;int):System.Collections.ArrayList</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(object):int">
				<signature>System.Collections.ArrayList.IndexOf(object):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(object;int):int">
				<signature>System.Collections.ArrayList.IndexOf(object;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(object;int;int):int">
				<signature>System.Collections.ArrayList.IndexOf(object;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;object):void">
				<signature>System.Collections.ArrayList.Insert(int;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InsertRange" uniqueID="InsertRange(int;System.Collections.ICollection):void">
				<signature>System.Collections.ArrayList.InsertRange(int;System.Collections.ICollection):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(object):int">
				<signature>System.Collections.ArrayList.LastIndexOf(object):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(object;int):int">
				<signature>System.Collections.ArrayList.LastIndexOf(object;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(object;int;int):int">
				<signature>System.Collections.ArrayList.LastIndexOf(object;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(object):void">
				<signature>System.Collections.ArrayList.Remove(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAt" uniqueID="RemoveAt(int):void">
				<signature>System.Collections.ArrayList.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveRange" uniqueID="RemoveRange(int;int):void">
				<signature>System.Collections.ArrayList.RemoveRange(int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reverse" uniqueID="Reverse():void">
				<signature>System.Collections.ArrayList.Reverse():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reverse" uniqueID="Reverse(int;int):void">
				<signature>System.Collections.ArrayList.Reverse(int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetRange" uniqueID="SetRange(int;System.Collections.ICollection):void">
				<signature>System.Collections.ArrayList.SetRange(int;System.Collections.ICollection):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort():void">
				<signature>System.Collections.ArrayList.Sort():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort(System.Collections.IComparer):void">
				<signature>System.Collections.ArrayList.Sort(System.Collections.IComparer):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Sort" uniqueID="Sort(int;int;System.Collections.IComparer):void">
				<signature>System.Collections.ArrayList.Sort(int;int;System.Collections.IComparer):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToArray" uniqueID="ToArray():object[]">
				<signature>System.Collections.ArrayList.ToArray():object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToArray" uniqueID="ToArray(System.Type):System.Array">
				<signature>System.Collections.ArrayList.ToArray(System.Type):System.Array</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="TrimToSize" uniqueID="TrimToSize():void">
				<signature>System.Collections.ArrayList.TrimToSize():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Capacity" uniqueID="get_Capacity():int">
				<signature>System.Collections.ArrayList.get_Capacity():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.ArrayList.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFixedSize" uniqueID="get_IsFixedSize():bool">
				<signature>System.Collections.ArrayList.get_IsFixedSize():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsReadOnly" uniqueID="get_IsReadOnly():bool">
				<signature>System.Collections.ArrayList.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSynchronized" uniqueID="get_IsSynchronized():bool">
				<signature>System.Collections.ArrayList.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):object">
				<signature>System.Collections.ArrayList.get_Item(int):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SyncRoot" uniqueID="get_SyncRoot():object">
				<signature>System.Collections.ArrayList.get_SyncRoot():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Capacity" uniqueID="set_Capacity(int):void">
				<signature>System.Collections.ArrayList.set_Capacity(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(int;object):void">
				<signature>System.Collections.ArrayList.set_Item(int;object):void</signature>
			</method>
		</class>
		<class name="IComparer" uniqueID="System.Collections.IComparer">
			<method accessibility="Public" methodKind="Member" name="Compare" uniqueID="Compare(object;object):int">
				<signature>System.Collections.IComparer.Compare(object;object):int</signature>
			</method>
		</class>
		<class name="IDictionary" uniqueID="System.Collections.IDictionary">
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(object;object):void">
				<signature>System.Collections.IDictionary.Add(object;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Collections.IDictionary.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(object):bool">
				<signature>System.Collections.IDictionary.Contains(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.IDictionaryEnumerator">
				<signature>System.Collections.IDictionary.GetEnumerator():System.Collections.IDictionaryEnumerator</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(object):void">
				<signature>System.Collections.IDictionary.Remove(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFixedSize" uniqueID="get_IsFixedSize():bool">
				<signature>System.Collections.IDictionary.get_IsFixedSize():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsReadOnly" uniqueID="get_IsReadOnly():bool">
				<signature>System.Collections.IDictionary.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(object):object">
				<signature>System.Collections.IDictionary.get_Item(object):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Keys" uniqueID="get_Keys():System.Collections.ICollection">
				<signature>System.Collections.IDictionary.get_Keys():System.Collections.ICollection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Values" uniqueID="get_Values():System.Collections.ICollection">
				<signature>System.Collections.IDictionary.get_Values():System.Collections.ICollection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(object;object):void">
				<signature>System.Collections.IDictionary.set_Item(object;object):void</signature>
			</method>
		</class>
		<class name="IList" uniqueID="System.Collections.IList">
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(object):int">
				<signature>System.Collections.IList.Add(object):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Collections.IList.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(object):bool">
				<signature>System.Collections.IList.Contains(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(object):int">
				<signature>System.Collections.IList.IndexOf(object):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Insert" uniqueID="Insert(int;object):void">
				<signature>System.Collections.IList.Insert(int;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(object):void">
				<signature>System.Collections.IList.Remove(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAt" uniqueID="RemoveAt(int):void">
				<signature>System.Collections.IList.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFixedSize" uniqueID="get_IsFixedSize():bool">
				<signature>System.Collections.IList.get_IsFixedSize():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsReadOnly" uniqueID="get_IsReadOnly():bool">
				<signature>System.Collections.IList.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):object">
				<signature>System.Collections.IList.get_Item(int):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(int;object):void">
				<signature>System.Collections.IList.set_Item(int;object):void</signature>
			</method>
		</class>
		<class name="Hashtable" uniqueID="System.Collections.Hashtable">
			<method accessibility="Public" methodKind="Static" name="Synchronized" uniqueID="Synchronized(System.Collections.Hashtable):System.Collections.Hashtable">
				<signature>System.Collections.Hashtable.Synchronized(System.Collections.Hashtable):System.Collections.Hashtable</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(object;object):void">
				<signature>System.Collections.Hashtable.Add(object;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Collections.Hashtable.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone():object">
				<signature>System.Collections.Hashtable.Clone():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(object):bool">
				<signature>System.Collections.Hashtable.Contains(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ContainsKey" uniqueID="ContainsKey(object):bool">
				<signature>System.Collections.Hashtable.ContainsKey(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ContainsValue" uniqueID="ContainsValue(object):bool">
				<signature>System.Collections.Hashtable.ContainsValue(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CopyEntries" uniqueID="CopyEntries(System.Array;int):void">
				<signature>System.Collections.Hashtable.CopyEntries(System.Array;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CopyKeys" uniqueID="CopyKeys(System.Array;int):void">
				<signature>System.Collections.Hashtable.CopyKeys(System.Array;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Array;int):void">
				<signature>System.Collections.Hashtable.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CopyValues" uniqueID="CopyValues(System.Array;int):void">
				<signature>System.Collections.Hashtable.CopyValues(System.Array;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.IDictionaryEnumerator">
				<signature>System.Collections.Hashtable.GetEnumerator():System.Collections.IDictionaryEnumerator</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetHash" uniqueID="GetHash(object):int">
				<signature>System.Collections.Hashtable.GetHash(object):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetObjectData" uniqueID="GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Collections.Hashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Hashtable" uniqueID="Hashtable():void">
				<signature>System.Collections.Hashtable.Hashtable():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Hashtable" uniqueID="Hashtable(System.Collections.IDictionary):void">
				<signature>System.Collections.Hashtable.Hashtable(System.Collections.IDictionary):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Hashtable" uniqueID="Hashtable(System.Collections.IDictionary;System.Collections.IEqualityComparer):void">
				<signature>System.Collections.Hashtable.Hashtable(System.Collections.IDictionary;System.Collections.IEqualityComparer):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Hashtable" uniqueID="Hashtable(System.Collections.IDictionary;System.Collections.IHashCodeProvider;System.Collections.IComparer):void">
				<signature>System.Collections.Hashtable.Hashtable(System.Collections.IDictionary;System.Collections.IHashCodeProvider;System.Collections.IComparer):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Hashtable" uniqueID="Hashtable(System.Collections.IDictionary;float):void">
				<signature>System.Collections.Hashtable.Hashtable(System.Collections.IDictionary;float):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Hashtable" uniqueID="Hashtable(System.Collections.IDictionary;float;System.Collections.IEqualityComparer):void">
				<signature>System.Collections.Hashtable.Hashtable(System.Collections.IDictionary;float;System.Collections.IEqualityComparer):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Hashtable" uniqueID="Hashtable(System.Collections.IDictionary;float;System.Collections.IHashCodeProvider;System.Collections.IComparer):void">
				<signature>System.Collections.Hashtable.Hashtable(System.Collections.IDictionary;float;System.Collections.IHashCodeProvider;System.Collections.IComparer):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Hashtable" uniqueID="Hashtable(System.Collections.IEqualityComparer):void">
				<signature>System.Collections.Hashtable.Hashtable(System.Collections.IEqualityComparer):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Hashtable" uniqueID="Hashtable(System.Collections.IHashCodeProvider;System.Collections.IComparer):void">
				<signature>System.Collections.Hashtable.Hashtable(System.Collections.IHashCodeProvider;System.Collections.IComparer):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Hashtable" uniqueID="Hashtable(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Collections.Hashtable.Hashtable(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Hashtable" uniqueID="Hashtable(bool):void">
				<signature>System.Collections.Hashtable.Hashtable(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Hashtable" uniqueID="Hashtable(int):void">
				<signature>System.Collections.Hashtable.Hashtable(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Hashtable" uniqueID="Hashtable(int;System.Collections.IEqualityComparer):void">
				<signature>System.Collections.Hashtable.Hashtable(int;System.Collections.IEqualityComparer):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Hashtable" uniqueID="Hashtable(int;System.Collections.IHashCodeProvider;System.Collections.IComparer):void">
				<signature>System.Collections.Hashtable.Hashtable(int;System.Collections.IHashCodeProvider;System.Collections.IComparer):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Hashtable" uniqueID="Hashtable(int;float):void">
				<signature>System.Collections.Hashtable.Hashtable(int;float):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Hashtable" uniqueID="Hashtable(int;float;System.Collections.IEqualityComparer):void">
				<signature>System.Collections.Hashtable.Hashtable(int;float;System.Collections.IEqualityComparer):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Hashtable" uniqueID="Hashtable(int;float;System.Collections.IHashCodeProvider;System.Collections.IComparer):void">
				<signature>System.Collections.Hashtable.Hashtable(int;float;System.Collections.IHashCodeProvider;System.Collections.IComparer):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="InitHash" uniqueID="InitHash(object;int;unsigned int;unsigned int):unsigned int">
				<signature>System.Collections.Hashtable.InitHash(object;int;unsigned int;unsigned int):unsigned int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Insert" uniqueID="Insert(object;object;bool):void">
				<signature>System.Collections.Hashtable.Insert(object;object;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="KeyEquals" uniqueID="KeyEquals(object;object):bool">
				<signature>System.Collections.Hashtable.KeyEquals(object;object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="OnDeserialization" uniqueID="OnDeserialization(object):void">
				<signature>System.Collections.Hashtable.OnDeserialization(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(object):void">
				<signature>System.Collections.Hashtable.Remove(object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerable.GetEnumerator" uniqueID="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Collections.Hashtable.System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ToKeyValuePairsArray" uniqueID="ToKeyValuePairsArray():System.Collections.KeyValuePairs[]">
				<signature>System.Collections.Hashtable.ToKeyValuePairsArray():System.Collections.KeyValuePairs[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="UpdateVersion" uniqueID="UpdateVersion():void">
				<signature>System.Collections.Hashtable.UpdateVersion():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="expand" uniqueID="expand():void">
				<signature>System.Collections.Hashtable.expand():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.Hashtable.get_Count():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_EqualityComparer" uniqueID="get_EqualityComparer():System.Collections.IEqualityComparer">
				<signature>System.Collections.Hashtable.get_EqualityComparer():System.Collections.IEqualityComparer</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsFixedSize" uniqueID="get_IsFixedSize():bool">
				<signature>System.Collections.Hashtable.get_IsFixedSize():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsReadOnly" uniqueID="get_IsReadOnly():bool">
				<signature>System.Collections.Hashtable.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSynchronized" uniqueID="get_IsSynchronized():bool">
				<signature>System.Collections.Hashtable.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(object):object">
				<signature>System.Collections.Hashtable.get_Item(object):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Keys" uniqueID="get_Keys():System.Collections.ICollection">
				<signature>System.Collections.Hashtable.get_Keys():System.Collections.ICollection</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SyncRoot" uniqueID="get_SyncRoot():object">
				<signature>System.Collections.Hashtable.get_SyncRoot():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Values" uniqueID="get_Values():System.Collections.ICollection">
				<signature>System.Collections.Hashtable.get_Values():System.Collections.ICollection</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_comparer" uniqueID="get_comparer():System.Collections.IComparer">
				<signature>System.Collections.Hashtable.get_comparer():System.Collections.IComparer</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_hcp" uniqueID="get_hcp():System.Collections.IHashCodeProvider">
				<signature>System.Collections.Hashtable.get_hcp():System.Collections.IHashCodeProvider</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="putEntry" uniqueID="putEntry(System.Collections.Hashtable+bucket[];object;object;int):void">
				<signature>System.Collections.Hashtable.putEntry(System.Collections.Hashtable+bucket[];object;object;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="rehash" uniqueID="rehash():void">
				<signature>System.Collections.Hashtable.rehash():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="rehash" uniqueID="rehash(int):void">
				<signature>System.Collections.Hashtable.rehash(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(object;object):void">
				<signature>System.Collections.Hashtable.set_Item(object;object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_comparer" uniqueID="set_comparer(System.Collections.IComparer):void">
				<signature>System.Collections.Hashtable.set_comparer(System.Collections.IComparer):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_hcp" uniqueID="set_hcp(System.Collections.IHashCodeProvider):void">
				<signature>System.Collections.Hashtable.set_hcp(System.Collections.IHashCodeProvider):void</signature>
			</method>
		</class>
		<class name="IDictionaryEnumerator" uniqueID="System.Collections.IDictionaryEnumerator">
			<method accessibility="Public" methodKind="Member" name="get_Entry" uniqueID="get_Entry():System.Collections.DictionaryEntry">
				<signature>System.Collections.IDictionaryEnumerator.get_Entry():System.Collections.DictionaryEntry</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Key" uniqueID="get_Key():object">
				<signature>System.Collections.IDictionaryEnumerator.get_Key():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Value" uniqueID="get_Value():object">
				<signature>System.Collections.IDictionaryEnumerator.get_Value():object</signature>
			</method>
		</class>
		<class name="IEqualityComparer" uniqueID="System.Collections.IEqualityComparer">
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object;object):bool">
				<signature>System.Collections.IEqualityComparer.Equals(object;object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode(object):int">
				<signature>System.Collections.IEqualityComparer.GetHashCode(object):int</signature>
			</method>
		</class>
	</package>
	<package name="System.Collections.ObjectModel">
		<class name="ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;" uniqueID="System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;">
			<method accessibility="Private" methodKind="Static" name="IsCompatibleObject" uniqueID="IsCompatibleObject(object):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.IsCompatibleObject(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="VerifyValueType" uniqueID="VerifyValueType(object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.VerifyValueType(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(System.Reflection.RuntimeConstructorInfo):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.Contains(System.Reflection.RuntimeConstructorInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Reflection.RuntimeConstructorInfo[];int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.CopyTo(System.Reflection.RuntimeConstructorInfo[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeConstructorInfo&gt;">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeConstructorInfo&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.Reflection.RuntimeConstructorInfo):int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.IndexOf(System.Reflection.RuntimeConstructorInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;" uniqueID="ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;(System.Collections.Generic.IList&lt;System.Reflection.RuntimeConstructorInfo&gt;):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;(System.Collections.Generic.IList&lt;System.Reflection.RuntimeConstructorInfo&gt;):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.Add" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.Add(System.Reflection.RuntimeConstructorInfo):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.Generic.ICollection&lt;T&gt;.Add(System.Reflection.RuntimeConstructorInfo):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.Clear" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.Clear():void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.Generic.ICollection&lt;T&gt;.Clear():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.Remove" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.Remove(System.Reflection.RuntimeConstructorInfo):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.Generic.ICollection&lt;T&gt;.Remove(System.Reflection.RuntimeConstructorInfo):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.Insert" uniqueID="System.Collections.Generic.IList&lt;T&gt;.Insert(int;System.Reflection.RuntimeConstructorInfo):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.Generic.IList&lt;T&gt;.Insert(int;System.Reflection.RuntimeConstructorInfo):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.RemoveAt" uniqueID="System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.get_Item" uniqueID="System.Collections.Generic.IList&lt;T&gt;.get_Item(int):System.Reflection.RuntimeConstructorInfo">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.Generic.IList&lt;T&gt;.get_Item(int):System.Reflection.RuntimeConstructorInfo</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.set_Item" uniqueID="System.Collections.Generic.IList&lt;T&gt;.set_Item(int;System.Reflection.RuntimeConstructorInfo):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.Generic.IList&lt;T&gt;.set_Item(int;System.Reflection.RuntimeConstructorInfo):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.CopyTo" uniqueID="System.Collections.ICollection.CopyTo(System.Array;int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.ICollection.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_IsSynchronized" uniqueID="System.Collections.ICollection.get_IsSynchronized():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.ICollection.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_SyncRoot" uniqueID="System.Collections.ICollection.get_SyncRoot():object">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.ICollection.get_SyncRoot():object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerable.GetEnumerator" uniqueID="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Add" uniqueID="System.Collections.IList.Add(object):int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.IList.Add(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Clear" uniqueID="System.Collections.IList.Clear():void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.IList.Clear():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Contains" uniqueID="System.Collections.IList.Contains(object):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.IList.Contains(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.IndexOf" uniqueID="System.Collections.IList.IndexOf(object):int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.IList.IndexOf(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Insert" uniqueID="System.Collections.IList.Insert(int;object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.IList.Insert(int;object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Remove" uniqueID="System.Collections.IList.Remove(object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.IList.Remove(object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.RemoveAt" uniqueID="System.Collections.IList.RemoveAt(int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.IList.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsFixedSize" uniqueID="System.Collections.IList.get_IsFixedSize():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.IList.get_IsFixedSize():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsReadOnly" uniqueID="System.Collections.IList.get_IsReadOnly():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.IList.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_Item" uniqueID="System.Collections.IList.get_Item(int):object">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.IList.get_Item(int):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.set_Item" uniqueID="System.Collections.IList.set_Item(int;object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.System.Collections.IList.set_Item(int;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.Reflection.RuntimeConstructorInfo">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.get_Item(int):System.Reflection.RuntimeConstructorInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Items" uniqueID="get_Items():System.Collections.Generic.IList&lt;System.Reflection.RuntimeConstructorInfo&gt;">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeConstructorInfo&gt;.get_Items():System.Collections.Generic.IList&lt;System.Reflection.RuntimeConstructorInfo&gt;</signature>
			</method>
		</class>
		<class name="ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;" uniqueID="System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;">
			<method accessibility="Private" methodKind="Static" name="IsCompatibleObject" uniqueID="IsCompatibleObject(object):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.IsCompatibleObject(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="VerifyValueType" uniqueID="VerifyValueType(object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.VerifyValueType(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(System.Reflection.RuntimeEventInfo):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.Contains(System.Reflection.RuntimeEventInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Reflection.RuntimeEventInfo[];int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.CopyTo(System.Reflection.RuntimeEventInfo[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeEventInfo&gt;">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeEventInfo&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.Reflection.RuntimeEventInfo):int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.IndexOf(System.Reflection.RuntimeEventInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;" uniqueID="ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;(System.Collections.Generic.IList&lt;System.Reflection.RuntimeEventInfo&gt;):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;(System.Collections.Generic.IList&lt;System.Reflection.RuntimeEventInfo&gt;):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.Add" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.Add(System.Reflection.RuntimeEventInfo):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.Generic.ICollection&lt;T&gt;.Add(System.Reflection.RuntimeEventInfo):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.Clear" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.Clear():void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.Generic.ICollection&lt;T&gt;.Clear():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.Remove" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.Remove(System.Reflection.RuntimeEventInfo):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.Generic.ICollection&lt;T&gt;.Remove(System.Reflection.RuntimeEventInfo):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.Insert" uniqueID="System.Collections.Generic.IList&lt;T&gt;.Insert(int;System.Reflection.RuntimeEventInfo):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.Generic.IList&lt;T&gt;.Insert(int;System.Reflection.RuntimeEventInfo):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.RemoveAt" uniqueID="System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.get_Item" uniqueID="System.Collections.Generic.IList&lt;T&gt;.get_Item(int):System.Reflection.RuntimeEventInfo">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.Generic.IList&lt;T&gt;.get_Item(int):System.Reflection.RuntimeEventInfo</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.set_Item" uniqueID="System.Collections.Generic.IList&lt;T&gt;.set_Item(int;System.Reflection.RuntimeEventInfo):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.Generic.IList&lt;T&gt;.set_Item(int;System.Reflection.RuntimeEventInfo):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.CopyTo" uniqueID="System.Collections.ICollection.CopyTo(System.Array;int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.ICollection.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_IsSynchronized" uniqueID="System.Collections.ICollection.get_IsSynchronized():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.ICollection.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_SyncRoot" uniqueID="System.Collections.ICollection.get_SyncRoot():object">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.ICollection.get_SyncRoot():object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerable.GetEnumerator" uniqueID="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Add" uniqueID="System.Collections.IList.Add(object):int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.IList.Add(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Clear" uniqueID="System.Collections.IList.Clear():void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.IList.Clear():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Contains" uniqueID="System.Collections.IList.Contains(object):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.IList.Contains(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.IndexOf" uniqueID="System.Collections.IList.IndexOf(object):int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.IList.IndexOf(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Insert" uniqueID="System.Collections.IList.Insert(int;object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.IList.Insert(int;object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Remove" uniqueID="System.Collections.IList.Remove(object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.IList.Remove(object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.RemoveAt" uniqueID="System.Collections.IList.RemoveAt(int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.IList.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsFixedSize" uniqueID="System.Collections.IList.get_IsFixedSize():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.IList.get_IsFixedSize():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsReadOnly" uniqueID="System.Collections.IList.get_IsReadOnly():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.IList.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_Item" uniqueID="System.Collections.IList.get_Item(int):object">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.IList.get_Item(int):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.set_Item" uniqueID="System.Collections.IList.set_Item(int;object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.System.Collections.IList.set_Item(int;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.Reflection.RuntimeEventInfo">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.get_Item(int):System.Reflection.RuntimeEventInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Items" uniqueID="get_Items():System.Collections.Generic.IList&lt;System.Reflection.RuntimeEventInfo&gt;">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeEventInfo&gt;.get_Items():System.Collections.Generic.IList&lt;System.Reflection.RuntimeEventInfo&gt;</signature>
			</method>
		</class>
		<class name="ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;" uniqueID="System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;">
			<method accessibility="Private" methodKind="Static" name="IsCompatibleObject" uniqueID="IsCompatibleObject(object):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.IsCompatibleObject(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="VerifyValueType" uniqueID="VerifyValueType(object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.VerifyValueType(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(System.Reflection.RuntimeFieldInfo):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.Contains(System.Reflection.RuntimeFieldInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Reflection.RuntimeFieldInfo[];int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.CopyTo(System.Reflection.RuntimeFieldInfo[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeFieldInfo&gt;">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeFieldInfo&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.Reflection.RuntimeFieldInfo):int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.IndexOf(System.Reflection.RuntimeFieldInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;" uniqueID="ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;(System.Collections.Generic.IList&lt;System.Reflection.RuntimeFieldInfo&gt;):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;(System.Collections.Generic.IList&lt;System.Reflection.RuntimeFieldInfo&gt;):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.Add" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.Add(System.Reflection.RuntimeFieldInfo):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.Generic.ICollection&lt;T&gt;.Add(System.Reflection.RuntimeFieldInfo):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.Clear" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.Clear():void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.Generic.ICollection&lt;T&gt;.Clear():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.Remove" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.Remove(System.Reflection.RuntimeFieldInfo):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.Generic.ICollection&lt;T&gt;.Remove(System.Reflection.RuntimeFieldInfo):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.Insert" uniqueID="System.Collections.Generic.IList&lt;T&gt;.Insert(int;System.Reflection.RuntimeFieldInfo):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.Generic.IList&lt;T&gt;.Insert(int;System.Reflection.RuntimeFieldInfo):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.RemoveAt" uniqueID="System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.get_Item" uniqueID="System.Collections.Generic.IList&lt;T&gt;.get_Item(int):System.Reflection.RuntimeFieldInfo">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.Generic.IList&lt;T&gt;.get_Item(int):System.Reflection.RuntimeFieldInfo</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.set_Item" uniqueID="System.Collections.Generic.IList&lt;T&gt;.set_Item(int;System.Reflection.RuntimeFieldInfo):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.Generic.IList&lt;T&gt;.set_Item(int;System.Reflection.RuntimeFieldInfo):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.CopyTo" uniqueID="System.Collections.ICollection.CopyTo(System.Array;int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.ICollection.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_IsSynchronized" uniqueID="System.Collections.ICollection.get_IsSynchronized():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.ICollection.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_SyncRoot" uniqueID="System.Collections.ICollection.get_SyncRoot():object">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.ICollection.get_SyncRoot():object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerable.GetEnumerator" uniqueID="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Add" uniqueID="System.Collections.IList.Add(object):int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.IList.Add(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Clear" uniqueID="System.Collections.IList.Clear():void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.IList.Clear():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Contains" uniqueID="System.Collections.IList.Contains(object):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.IList.Contains(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.IndexOf" uniqueID="System.Collections.IList.IndexOf(object):int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.IList.IndexOf(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Insert" uniqueID="System.Collections.IList.Insert(int;object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.IList.Insert(int;object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Remove" uniqueID="System.Collections.IList.Remove(object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.IList.Remove(object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.RemoveAt" uniqueID="System.Collections.IList.RemoveAt(int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.IList.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsFixedSize" uniqueID="System.Collections.IList.get_IsFixedSize():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.IList.get_IsFixedSize():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsReadOnly" uniqueID="System.Collections.IList.get_IsReadOnly():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.IList.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_Item" uniqueID="System.Collections.IList.get_Item(int):object">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.IList.get_Item(int):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.set_Item" uniqueID="System.Collections.IList.set_Item(int;object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.System.Collections.IList.set_Item(int;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.Reflection.RuntimeFieldInfo">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.get_Item(int):System.Reflection.RuntimeFieldInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Items" uniqueID="get_Items():System.Collections.Generic.IList&lt;System.Reflection.RuntimeFieldInfo&gt;">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeFieldInfo&gt;.get_Items():System.Collections.Generic.IList&lt;System.Reflection.RuntimeFieldInfo&gt;</signature>
			</method>
		</class>
		<class name="ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;" uniqueID="System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;">
			<method accessibility="Private" methodKind="Static" name="IsCompatibleObject" uniqueID="IsCompatibleObject(object):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.IsCompatibleObject(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="VerifyValueType" uniqueID="VerifyValueType(object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.VerifyValueType(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(System.Reflection.RuntimeMethodInfo):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.Contains(System.Reflection.RuntimeMethodInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Reflection.RuntimeMethodInfo[];int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.CopyTo(System.Reflection.RuntimeMethodInfo[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeMethodInfo&gt;">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimeMethodInfo&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.Reflection.RuntimeMethodInfo):int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.IndexOf(System.Reflection.RuntimeMethodInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;" uniqueID="ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;(System.Collections.Generic.IList&lt;System.Reflection.RuntimeMethodInfo&gt;):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;(System.Collections.Generic.IList&lt;System.Reflection.RuntimeMethodInfo&gt;):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.Add" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.Add(System.Reflection.RuntimeMethodInfo):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.Generic.ICollection&lt;T&gt;.Add(System.Reflection.RuntimeMethodInfo):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.Clear" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.Clear():void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.Generic.ICollection&lt;T&gt;.Clear():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.Remove" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.Remove(System.Reflection.RuntimeMethodInfo):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.Generic.ICollection&lt;T&gt;.Remove(System.Reflection.RuntimeMethodInfo):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.Insert" uniqueID="System.Collections.Generic.IList&lt;T&gt;.Insert(int;System.Reflection.RuntimeMethodInfo):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.Generic.IList&lt;T&gt;.Insert(int;System.Reflection.RuntimeMethodInfo):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.RemoveAt" uniqueID="System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.get_Item" uniqueID="System.Collections.Generic.IList&lt;T&gt;.get_Item(int):System.Reflection.RuntimeMethodInfo">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.Generic.IList&lt;T&gt;.get_Item(int):System.Reflection.RuntimeMethodInfo</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.set_Item" uniqueID="System.Collections.Generic.IList&lt;T&gt;.set_Item(int;System.Reflection.RuntimeMethodInfo):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.Generic.IList&lt;T&gt;.set_Item(int;System.Reflection.RuntimeMethodInfo):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.CopyTo" uniqueID="System.Collections.ICollection.CopyTo(System.Array;int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.ICollection.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_IsSynchronized" uniqueID="System.Collections.ICollection.get_IsSynchronized():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.ICollection.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_SyncRoot" uniqueID="System.Collections.ICollection.get_SyncRoot():object">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.ICollection.get_SyncRoot():object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerable.GetEnumerator" uniqueID="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Add" uniqueID="System.Collections.IList.Add(object):int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.IList.Add(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Clear" uniqueID="System.Collections.IList.Clear():void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.IList.Clear():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Contains" uniqueID="System.Collections.IList.Contains(object):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.IList.Contains(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.IndexOf" uniqueID="System.Collections.IList.IndexOf(object):int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.IList.IndexOf(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Insert" uniqueID="System.Collections.IList.Insert(int;object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.IList.Insert(int;object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Remove" uniqueID="System.Collections.IList.Remove(object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.IList.Remove(object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.RemoveAt" uniqueID="System.Collections.IList.RemoveAt(int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.IList.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsFixedSize" uniqueID="System.Collections.IList.get_IsFixedSize():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.IList.get_IsFixedSize():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsReadOnly" uniqueID="System.Collections.IList.get_IsReadOnly():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.IList.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_Item" uniqueID="System.Collections.IList.get_Item(int):object">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.IList.get_Item(int):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.set_Item" uniqueID="System.Collections.IList.set_Item(int;object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.System.Collections.IList.set_Item(int;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.Reflection.RuntimeMethodInfo">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.get_Item(int):System.Reflection.RuntimeMethodInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Items" uniqueID="get_Items():System.Collections.Generic.IList&lt;System.Reflection.RuntimeMethodInfo&gt;">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimeMethodInfo&gt;.get_Items():System.Collections.Generic.IList&lt;System.Reflection.RuntimeMethodInfo&gt;</signature>
			</method>
		</class>
		<class name="ReadOnlyCollection&lt;System.RuntimeType&gt;" uniqueID="System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;">
			<method accessibility="Private" methodKind="Static" name="IsCompatibleObject" uniqueID="IsCompatibleObject(object):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.IsCompatibleObject(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="VerifyValueType" uniqueID="VerifyValueType(object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.VerifyValueType(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(System.RuntimeType):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.Contains(System.RuntimeType):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.RuntimeType[];int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.CopyTo(System.RuntimeType[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.RuntimeType&gt;">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.RuntimeType&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.RuntimeType):int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.IndexOf(System.RuntimeType):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ReadOnlyCollection&lt;System.RuntimeType&gt;" uniqueID="ReadOnlyCollection&lt;System.RuntimeType&gt;(System.Collections.Generic.IList&lt;System.RuntimeType&gt;):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.ReadOnlyCollection&lt;System.RuntimeType&gt;(System.Collections.Generic.IList&lt;System.RuntimeType&gt;):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.Add" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.Add(System.RuntimeType):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.System.Collections.Generic.ICollection&lt;T&gt;.Add(System.RuntimeType):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.Clear" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.Clear():void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.System.Collections.Generic.ICollection&lt;T&gt;.Clear():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.Remove" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.Remove(System.RuntimeType):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.System.Collections.Generic.ICollection&lt;T&gt;.Remove(System.RuntimeType):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.Insert" uniqueID="System.Collections.Generic.IList&lt;T&gt;.Insert(int;System.RuntimeType):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.System.Collections.Generic.IList&lt;T&gt;.Insert(int;System.RuntimeType):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.RemoveAt" uniqueID="System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.get_Item" uniqueID="System.Collections.Generic.IList&lt;T&gt;.get_Item(int):System.RuntimeType">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.System.Collections.Generic.IList&lt;T&gt;.get_Item(int):System.RuntimeType</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.set_Item" uniqueID="System.Collections.Generic.IList&lt;T&gt;.set_Item(int;System.RuntimeType):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.System.Collections.Generic.IList&lt;T&gt;.set_Item(int;System.RuntimeType):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.CopyTo" uniqueID="System.Collections.ICollection.CopyTo(System.Array;int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.System.Collections.ICollection.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_IsSynchronized" uniqueID="System.Collections.ICollection.get_IsSynchronized():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.System.Collections.ICollection.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_SyncRoot" uniqueID="System.Collections.ICollection.get_SyncRoot():object">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.System.Collections.ICollection.get_SyncRoot():object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerable.GetEnumerator" uniqueID="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Add" uniqueID="System.Collections.IList.Add(object):int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.System.Collections.IList.Add(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Clear" uniqueID="System.Collections.IList.Clear():void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.System.Collections.IList.Clear():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Contains" uniqueID="System.Collections.IList.Contains(object):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.System.Collections.IList.Contains(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.IndexOf" uniqueID="System.Collections.IList.IndexOf(object):int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.System.Collections.IList.IndexOf(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Insert" uniqueID="System.Collections.IList.Insert(int;object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.System.Collections.IList.Insert(int;object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Remove" uniqueID="System.Collections.IList.Remove(object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.System.Collections.IList.Remove(object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.RemoveAt" uniqueID="System.Collections.IList.RemoveAt(int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.System.Collections.IList.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsFixedSize" uniqueID="System.Collections.IList.get_IsFixedSize():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.System.Collections.IList.get_IsFixedSize():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsReadOnly" uniqueID="System.Collections.IList.get_IsReadOnly():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.System.Collections.IList.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_Item" uniqueID="System.Collections.IList.get_Item(int):object">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.System.Collections.IList.get_Item(int):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.set_Item" uniqueID="System.Collections.IList.set_Item(int;object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.System.Collections.IList.set_Item(int;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.RuntimeType">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.get_Item(int):System.RuntimeType</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Items" uniqueID="get_Items():System.Collections.Generic.IList&lt;System.RuntimeType&gt;">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.RuntimeType&gt;.get_Items():System.Collections.Generic.IList&lt;System.RuntimeType&gt;</signature>
			</method>
		</class>
		<class name="ReadOnlyCollection&lt;string&gt;" uniqueID="System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;">
			<method accessibility="Private" methodKind="Static" name="IsCompatibleObject" uniqueID="IsCompatibleObject(object):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.IsCompatibleObject(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="VerifyValueType" uniqueID="VerifyValueType(object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.VerifyValueType(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(string):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.Contains(string):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(string[];int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.CopyTo(string[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.IEnumerator&lt;string&gt;">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;string&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(string):int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.IndexOf(string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ReadOnlyCollection&lt;string&gt;" uniqueID="ReadOnlyCollection&lt;string&gt;(System.Collections.Generic.IList&lt;string&gt;):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.ReadOnlyCollection&lt;string&gt;(System.Collections.Generic.IList&lt;string&gt;):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.Add" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.Add(string):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.System.Collections.Generic.ICollection&lt;T&gt;.Add(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.Clear" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.Clear():void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.System.Collections.Generic.ICollection&lt;T&gt;.Clear():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.Remove" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.Remove(string):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.System.Collections.Generic.ICollection&lt;T&gt;.Remove(string):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.Insert" uniqueID="System.Collections.Generic.IList&lt;T&gt;.Insert(int;string):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.System.Collections.Generic.IList&lt;T&gt;.Insert(int;string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.RemoveAt" uniqueID="System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.get_Item" uniqueID="System.Collections.Generic.IList&lt;T&gt;.get_Item(int):string">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.System.Collections.Generic.IList&lt;T&gt;.get_Item(int):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.set_Item" uniqueID="System.Collections.Generic.IList&lt;T&gt;.set_Item(int;string):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.System.Collections.Generic.IList&lt;T&gt;.set_Item(int;string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.CopyTo" uniqueID="System.Collections.ICollection.CopyTo(System.Array;int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.System.Collections.ICollection.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_IsSynchronized" uniqueID="System.Collections.ICollection.get_IsSynchronized():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.System.Collections.ICollection.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_SyncRoot" uniqueID="System.Collections.ICollection.get_SyncRoot():object">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.System.Collections.ICollection.get_SyncRoot():object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerable.GetEnumerator" uniqueID="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Add" uniqueID="System.Collections.IList.Add(object):int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.System.Collections.IList.Add(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Clear" uniqueID="System.Collections.IList.Clear():void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.System.Collections.IList.Clear():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Contains" uniqueID="System.Collections.IList.Contains(object):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.System.Collections.IList.Contains(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.IndexOf" uniqueID="System.Collections.IList.IndexOf(object):int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.System.Collections.IList.IndexOf(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Insert" uniqueID="System.Collections.IList.Insert(int;object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.System.Collections.IList.Insert(int;object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Remove" uniqueID="System.Collections.IList.Remove(object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.System.Collections.IList.Remove(object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.RemoveAt" uniqueID="System.Collections.IList.RemoveAt(int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.System.Collections.IList.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsFixedSize" uniqueID="System.Collections.IList.get_IsFixedSize():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.System.Collections.IList.get_IsFixedSize():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsReadOnly" uniqueID="System.Collections.IList.get_IsReadOnly():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.System.Collections.IList.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_Item" uniqueID="System.Collections.IList.get_Item(int):object">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.System.Collections.IList.get_Item(int):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.set_Item" uniqueID="System.Collections.IList.set_Item(int;object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.System.Collections.IList.set_Item(int;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):string">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.get_Item(int):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Items" uniqueID="get_Items():System.Collections.Generic.IList&lt;string&gt;">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;.get_Items():System.Collections.Generic.IList&lt;string&gt;</signature>
			</method>
		</class>
		<class name="ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;" uniqueID="System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;">
			<method accessibility="Private" methodKind="Static" name="IsCompatibleObject" uniqueID="IsCompatibleObject(object):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.IsCompatibleObject(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="VerifyValueType" uniqueID="VerifyValueType(object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.VerifyValueType(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Contains" uniqueID="Contains(System.Reflection.RuntimePropertyInfo):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.Contains(System.Reflection.RuntimePropertyInfo):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Reflection.RuntimePropertyInfo[];int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.CopyTo(System.Reflection.RuntimePropertyInfo[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimePropertyInfo&gt;">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.GetEnumerator():System.Collections.Generic.IEnumerator&lt;System.Reflection.RuntimePropertyInfo&gt;</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(System.Reflection.RuntimePropertyInfo):int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.IndexOf(System.Reflection.RuntimePropertyInfo):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;" uniqueID="ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;(System.Collections.Generic.IList&lt;System.Reflection.RuntimePropertyInfo&gt;):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;(System.Collections.Generic.IList&lt;System.Reflection.RuntimePropertyInfo&gt;):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.Add" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.Add(System.Reflection.RuntimePropertyInfo):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.Generic.ICollection&lt;T&gt;.Add(System.Reflection.RuntimePropertyInfo):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.Clear" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.Clear():void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.Generic.ICollection&lt;T&gt;.Clear():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.Remove" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.Remove(System.Reflection.RuntimePropertyInfo):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.Generic.ICollection&lt;T&gt;.Remove(System.Reflection.RuntimePropertyInfo):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly" uniqueID="System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.Generic.ICollection&lt;T&gt;.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.Insert" uniqueID="System.Collections.Generic.IList&lt;T&gt;.Insert(int;System.Reflection.RuntimePropertyInfo):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.Generic.IList&lt;T&gt;.Insert(int;System.Reflection.RuntimePropertyInfo):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.RemoveAt" uniqueID="System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.Generic.IList&lt;T&gt;.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.get_Item" uniqueID="System.Collections.Generic.IList&lt;T&gt;.get_Item(int):System.Reflection.RuntimePropertyInfo">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.Generic.IList&lt;T&gt;.get_Item(int):System.Reflection.RuntimePropertyInfo</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.Generic.IList&lt;T&gt;.set_Item" uniqueID="System.Collections.Generic.IList&lt;T&gt;.set_Item(int;System.Reflection.RuntimePropertyInfo):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.Generic.IList&lt;T&gt;.set_Item(int;System.Reflection.RuntimePropertyInfo):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.CopyTo" uniqueID="System.Collections.ICollection.CopyTo(System.Array;int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.ICollection.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_IsSynchronized" uniqueID="System.Collections.ICollection.get_IsSynchronized():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.ICollection.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_SyncRoot" uniqueID="System.Collections.ICollection.get_SyncRoot():object">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.ICollection.get_SyncRoot():object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IEnumerable.GetEnumerator" uniqueID="System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.IEnumerable.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Add" uniqueID="System.Collections.IList.Add(object):int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.IList.Add(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Clear" uniqueID="System.Collections.IList.Clear():void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.IList.Clear():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Contains" uniqueID="System.Collections.IList.Contains(object):bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.IList.Contains(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.IndexOf" uniqueID="System.Collections.IList.IndexOf(object):int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.IList.IndexOf(object):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Insert" uniqueID="System.Collections.IList.Insert(int;object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.IList.Insert(int;object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.Remove" uniqueID="System.Collections.IList.Remove(object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.IList.Remove(object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.RemoveAt" uniqueID="System.Collections.IList.RemoveAt(int):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.IList.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsFixedSize" uniqueID="System.Collections.IList.get_IsFixedSize():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.IList.get_IsFixedSize():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_IsReadOnly" uniqueID="System.Collections.IList.get_IsReadOnly():bool">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.IList.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.get_Item" uniqueID="System.Collections.IList.get_Item(int):object">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.IList.get_Item(int):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.IList.set_Item" uniqueID="System.Collections.IList.set_Item(int;object):void">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.System.Collections.IList.set_Item(int;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.Reflection.RuntimePropertyInfo">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.get_Item(int):System.Reflection.RuntimePropertyInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Items" uniqueID="get_Items():System.Collections.Generic.IList&lt;System.Reflection.RuntimePropertyInfo&gt;">
				<signature>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Reflection.RuntimePropertyInfo&gt;.get_Items():System.Collections.Generic.IList&lt;System.Reflection.RuntimePropertyInfo&gt;</signature>
			</method>
		</class>
	</package>
	<package name="System.IO">
		<class name="FileStream" uniqueID="System.IO.FileStream">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.IO.FileStream.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="AsyncFSCallback" uniqueID="AsyncFSCallback(unsigned int;unsigned int;System.Threading.NativeOverlapped):void">
				<signature>System.IO.FileStream.AsyncFSCallback(unsigned int;unsigned int;System.Threading.NativeOverlapped):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetSecAttrs" uniqueID="GetSecAttrs(System.IO.FileShare):Microsoft.Win32.Win32Native+SECURITY_ATTRIBUTES">
				<signature>System.IO.FileStream.GetSecAttrs(System.IO.FileShare):Microsoft.Win32.Win32Native+SECURITY_ATTRIBUTES</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetSecAttrs" uniqueID="GetSecAttrs(System.IO.FileShare;System.Security.AccessControl.FileSecurity;object):Microsoft.Win32.Win32Native+SECURITY_ATTRIBUTES">
				<signature>System.IO.FileStream.GetSecAttrs(System.IO.FileShare;System.Security.AccessControl.FileSecurity;object):Microsoft.Win32.Win32Native+SECURITY_ATTRIBUTES</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BeginRead" uniqueID="BeginRead(byte[];int;int;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.IO.FileStream.BeginRead(byte[];int;int;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="BeginReadCore" uniqueID="BeginReadCore(byte[];int;int;System.AsyncCallback;object;int):System.IO.FileStreamAsyncResult">
				<signature>System.IO.FileStream.BeginReadCore(byte[];int;int;System.AsyncCallback;object;int):System.IO.FileStreamAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BeginWrite" uniqueID="BeginWrite(byte[];int;int;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.IO.FileStream.BeginWrite(byte[];int;int;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="BeginWriteCore" uniqueID="BeginWriteCore(byte[];int;int;System.AsyncCallback;object):System.IO.FileStreamAsyncResult">
				<signature>System.IO.FileStream.BeginWriteCore(byte[];int;int;System.AsyncCallback;object):System.IO.FileStreamAsyncResult</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Dispose" uniqueID="Dispose(bool):void">
				<signature>System.IO.FileStream.Dispose(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndRead" uniqueID="EndRead(System.IAsyncResult):int">
				<signature>System.IO.FileStream.EndRead(System.IAsyncResult):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndWrite" uniqueID="EndWrite(System.IAsyncResult):void">
				<signature>System.IO.FileStream.EndWrite(System.IAsyncResult):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FileStream" uniqueID="FileStream():void">
				<signature>System.IO.FileStream.FileStream():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FileStream" uniqueID="FileStream(Microsoft.Win32.SafeHandles.SafeFileHandle;System.IO.FileAccess):void">
				<signature>System.IO.FileStream.FileStream(Microsoft.Win32.SafeHandles.SafeFileHandle;System.IO.FileAccess):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FileStream" uniqueID="FileStream(Microsoft.Win32.SafeHandles.SafeFileHandle;System.IO.FileAccess;int):void">
				<signature>System.IO.FileStream.FileStream(Microsoft.Win32.SafeHandles.SafeFileHandle;System.IO.FileAccess;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FileStream" uniqueID="FileStream(Microsoft.Win32.SafeHandles.SafeFileHandle;System.IO.FileAccess;int;bool):void">
				<signature>System.IO.FileStream.FileStream(Microsoft.Win32.SafeHandles.SafeFileHandle;System.IO.FileAccess;int;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FileStream" uniqueID="FileStream(native signed int;System.IO.FileAccess):void">
				<signature>System.IO.FileStream.FileStream(native signed int;System.IO.FileAccess):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FileStream" uniqueID="FileStream(native signed int;System.IO.FileAccess;bool):void">
				<signature>System.IO.FileStream.FileStream(native signed int;System.IO.FileAccess;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FileStream" uniqueID="FileStream(native signed int;System.IO.FileAccess;bool;int):void">
				<signature>System.IO.FileStream.FileStream(native signed int;System.IO.FileAccess;bool;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FileStream" uniqueID="FileStream(native signed int;System.IO.FileAccess;bool;int;bool):void">
				<signature>System.IO.FileStream.FileStream(native signed int;System.IO.FileAccess;bool;int;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FileStream" uniqueID="FileStream(string;System.IO.FileMode):void">
				<signature>System.IO.FileStream.FileStream(string;System.IO.FileMode):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FileStream" uniqueID="FileStream(string;System.IO.FileMode;System.IO.FileAccess):void">
				<signature>System.IO.FileStream.FileStream(string;System.IO.FileMode;System.IO.FileAccess):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FileStream" uniqueID="FileStream(string;System.IO.FileMode;System.IO.FileAccess;System.IO.FileShare):void">
				<signature>System.IO.FileStream.FileStream(string;System.IO.FileMode;System.IO.FileAccess;System.IO.FileShare):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FileStream" uniqueID="FileStream(string;System.IO.FileMode;System.IO.FileAccess;System.IO.FileShare;int):void">
				<signature>System.IO.FileStream.FileStream(string;System.IO.FileMode;System.IO.FileAccess;System.IO.FileShare;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FileStream" uniqueID="FileStream(string;System.IO.FileMode;System.IO.FileAccess;System.IO.FileShare;int;System.IO.FileOptions):void">
				<signature>System.IO.FileStream.FileStream(string;System.IO.FileMode;System.IO.FileAccess;System.IO.FileShare;int;System.IO.FileOptions):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FileStream" uniqueID="FileStream(string;System.IO.FileMode;System.IO.FileAccess;System.IO.FileShare;int;System.IO.FileOptions;string;bool):void">
				<signature>System.IO.FileStream.FileStream(string;System.IO.FileMode;System.IO.FileAccess;System.IO.FileShare;int;System.IO.FileOptions;string;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FileStream" uniqueID="FileStream(string;System.IO.FileMode;System.IO.FileAccess;System.IO.FileShare;int;bool):void">
				<signature>System.IO.FileStream.FileStream(string;System.IO.FileMode;System.IO.FileAccess;System.IO.FileShare;int;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FileStream" uniqueID="FileStream(string;System.IO.FileMode;System.Security.AccessControl.FileSystemRights;System.IO.FileShare;int;System.IO.FileOptions):void">
				<signature>System.IO.FileStream.FileStream(string;System.IO.FileMode;System.Security.AccessControl.FileSystemRights;System.IO.FileShare;int;System.IO.FileOptions):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FileStream" uniqueID="FileStream(string;System.IO.FileMode;System.Security.AccessControl.FileSystemRights;System.IO.FileShare;int;System.IO.FileOptions;System.Security.AccessControl.FileSecurity):void">
				<signature>System.IO.FileStream.FileStream(string;System.IO.FileMode;System.Security.AccessControl.FileSystemRights;System.IO.FileShare;int;System.IO.FileOptions;System.Security.AccessControl.FileSecurity):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Finalize" uniqueID="Finalize():void">
				<signature>System.IO.FileStream.Finalize():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Flush" uniqueID="Flush():void">
				<signature>System.IO.FileStream.Flush():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="FlushRead" uniqueID="FlushRead():void">
				<signature>System.IO.FileStream.FlushRead():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="FlushWrite" uniqueID="FlushWrite(bool):void">
				<signature>System.IO.FileStream.FlushWrite(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAccessControl" uniqueID="GetAccessControl():System.Security.AccessControl.FileSecurity">
				<signature>System.IO.FileStream.GetAccessControl():System.Security.AccessControl.FileSecurity</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Init" uniqueID="Init(string;System.IO.FileMode;System.IO.FileAccess;int;bool;System.IO.FileShare;int;System.IO.FileOptions;Microsoft.Win32.Win32Native+SECURITY_ATTRIBUTES;string;bool):void">
				<signature>System.IO.FileStream.Init(string;System.IO.FileMode;System.IO.FileAccess;int;bool;System.IO.FileShare;int;System.IO.FileOptions;Microsoft.Win32.Win32Native+SECURITY_ATTRIBUTES;string;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Lock" uniqueID="Lock(long;long):void">
				<signature>System.IO.FileStream.Lock(long;long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Read" uniqueID="Read(byte[];int;int):int">
				<signature>System.IO.FileStream.Read(byte[];int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ReadByte" uniqueID="ReadByte():int">
				<signature>System.IO.FileStream.ReadByte():int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ReadCore" uniqueID="ReadCore(byte[];int;int):int">
				<signature>System.IO.FileStream.ReadCore(byte[];int;int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ReadFileNative" uniqueID="ReadFileNative(Microsoft.Win32.SafeHandles.SafeFileHandle;byte[];int;int;System.Threading.NativeOverlapped;int):int">
				<signature>System.IO.FileStream.ReadFileNative(Microsoft.Win32.SafeHandles.SafeFileHandle;byte[];int;int;System.Threading.NativeOverlapped;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Seek" uniqueID="Seek(long;System.IO.SeekOrigin):long">
				<signature>System.IO.FileStream.Seek(long;System.IO.SeekOrigin):long</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SeekCore" uniqueID="SeekCore(long;System.IO.SeekOrigin):long">
				<signature>System.IO.FileStream.SeekCore(long;System.IO.SeekOrigin):long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetAccessControl" uniqueID="SetAccessControl(System.Security.AccessControl.FileSecurity):void">
				<signature>System.IO.FileStream.SetAccessControl(System.Security.AccessControl.FileSecurity):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetLength" uniqueID="SetLength(long):void">
				<signature>System.IO.FileStream.SetLength(long):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SetLengthCore" uniqueID="SetLengthCore(long):void">
				<signature>System.IO.FileStream.SetLengthCore(long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Unlock" uniqueID="Unlock(long;long):void">
				<signature>System.IO.FileStream.Unlock(long;long):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="VerifyHandleIsSync" uniqueID="VerifyHandleIsSync():void">
				<signature>System.IO.FileStream.VerifyHandleIsSync():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="VerifyOSHandlePosition" uniqueID="VerifyOSHandlePosition():void">
				<signature>System.IO.FileStream.VerifyOSHandlePosition():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(byte[];int;int):void">
				<signature>System.IO.FileStream.Write(byte[];int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="WriteByte" uniqueID="WriteByte(byte):void">
				<signature>System.IO.FileStream.WriteByte(byte):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="WriteCore" uniqueID="WriteCore(byte[];int;int):void">
				<signature>System.IO.FileStream.WriteCore(byte[];int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="WriteFileNative" uniqueID="WriteFileNative(Microsoft.Win32.SafeHandles.SafeFileHandle;byte[];int;int;System.Threading.NativeOverlapped;int):int">
				<signature>System.IO.FileStream.WriteFileNative(Microsoft.Win32.SafeHandles.SafeFileHandle;byte[];int;int;System.Threading.NativeOverlapped;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CanRead" uniqueID="get_CanRead():bool">
				<signature>System.IO.FileStream.get_CanRead():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CanSeek" uniqueID="get_CanSeek():bool">
				<signature>System.IO.FileStream.get_CanSeek():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CanWrite" uniqueID="get_CanWrite():bool">
				<signature>System.IO.FileStream.get_CanWrite():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Handle" uniqueID="get_Handle():native signed int">
				<signature>System.IO.FileStream.get_Handle():native signed int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsAsync" uniqueID="get_IsAsync():bool">
				<signature>System.IO.FileStream.get_IsAsync():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Length" uniqueID="get_Length():long">
				<signature>System.IO.FileStream.get_Length():long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.IO.FileStream.get_Name():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_NameInternal" uniqueID="get_NameInternal():string">
				<signature>System.IO.FileStream.get_NameInternal():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Position" uniqueID="get_Position():long">
				<signature>System.IO.FileStream.get_Position():long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SafeFileHandle" uniqueID="get_SafeFileHandle():Microsoft.Win32.SafeHandles.SafeFileHandle">
				<signature>System.IO.FileStream.get_SafeFileHandle():Microsoft.Win32.SafeHandles.SafeFileHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Position" uniqueID="set_Position(long):void">
				<signature>System.IO.FileStream.set_Position(long):void</signature>
			</method>
		</class>
		<class name="BinaryWriter" uniqueID="System.IO.BinaryWriter">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.IO.BinaryWriter.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="BinaryWriter" uniqueID="BinaryWriter():void">
				<signature>System.IO.BinaryWriter.BinaryWriter():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinaryWriter" uniqueID="BinaryWriter(System.IO.Stream):void">
				<signature>System.IO.BinaryWriter.BinaryWriter(System.IO.Stream):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BinaryWriter" uniqueID="BinaryWriter(System.IO.Stream;System.Text.Encoding):void">
				<signature>System.IO.BinaryWriter.BinaryWriter(System.IO.Stream;System.Text.Encoding):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Close" uniqueID="Close():void">
				<signature>System.IO.BinaryWriter.Close():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Dispose" uniqueID="Dispose(bool):void">
				<signature>System.IO.BinaryWriter.Dispose(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Flush" uniqueID="Flush():void">
				<signature>System.IO.BinaryWriter.Flush():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Seek" uniqueID="Seek(int;System.IO.SeekOrigin):long">
				<signature>System.IO.BinaryWriter.Seek(int;System.IO.SeekOrigin):long</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.IDisposable.Dispose" uniqueID="System.IDisposable.Dispose():void">
				<signature>System.IO.BinaryWriter.System.IDisposable.Dispose():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(System.Decimal):void">
				<signature>System.IO.BinaryWriter.Write(System.Decimal):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(bool):void">
				<signature>System.IO.BinaryWriter.Write(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(byte):void">
				<signature>System.IO.BinaryWriter.Write(byte):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(byte[]):void">
				<signature>System.IO.BinaryWriter.Write(byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(byte[];int;int):void">
				<signature>System.IO.BinaryWriter.Write(byte[];int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(char):void">
				<signature>System.IO.BinaryWriter.Write(char):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(char[]):void">
				<signature>System.IO.BinaryWriter.Write(char[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(char[];int;int):void">
				<signature>System.IO.BinaryWriter.Write(char[];int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(double):void">
				<signature>System.IO.BinaryWriter.Write(double):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(float):void">
				<signature>System.IO.BinaryWriter.Write(float):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(int):void">
				<signature>System.IO.BinaryWriter.Write(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(long):void">
				<signature>System.IO.BinaryWriter.Write(long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(sbyte):void">
				<signature>System.IO.BinaryWriter.Write(sbyte):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(short):void">
				<signature>System.IO.BinaryWriter.Write(short):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(string):void">
				<signature>System.IO.BinaryWriter.Write(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(unsigned int):void">
				<signature>System.IO.BinaryWriter.Write(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(unsigned long):void">
				<signature>System.IO.BinaryWriter.Write(unsigned long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(unsigned short):void">
				<signature>System.IO.BinaryWriter.Write(unsigned short):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Write7BitEncodedInt" uniqueID="Write7BitEncodedInt(int):void">
				<signature>System.IO.BinaryWriter.Write7BitEncodedInt(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_BaseStream" uniqueID="get_BaseStream():System.IO.Stream">
				<signature>System.IO.BinaryWriter.get_BaseStream():System.IO.Stream</signature>
			</method>
		</class>
		<class name="FileStreamAsyncResult" uniqueID="System.IO.FileStreamAsyncResult">
			<method accessibility="Protected" methodKind="Static" name="CreateBufferedReadResult" uniqueID="CreateBufferedReadResult(int;System.AsyncCallback;object):System.IO.FileStreamAsyncResult">
				<signature>System.IO.FileStreamAsyncResult.CreateBufferedReadResult(int;System.AsyncCallback;object):System.IO.FileStreamAsyncResult</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CallUserCallback" uniqueID="CallUserCallback():void">
				<signature>System.IO.FileStreamAsyncResult.CallUserCallback():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CallUserCallbackWorker" uniqueID="CallUserCallbackWorker(object):void">
				<signature>System.IO.FileStreamAsyncResult.CallUserCallbackWorker(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FileStreamAsyncResult" uniqueID="FileStreamAsyncResult():void">
				<signature>System.IO.FileStreamAsyncResult.FileStreamAsyncResult():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AsyncState" uniqueID="get_AsyncState():object">
				<signature>System.IO.FileStreamAsyncResult.get_AsyncState():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AsyncWaitHandle" uniqueID="get_AsyncWaitHandle():System.Threading.WaitHandle">
				<signature>System.IO.FileStreamAsyncResult.get_AsyncWaitHandle():System.Threading.WaitHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CompletedSynchronously" uniqueID="get_CompletedSynchronously():bool">
				<signature>System.IO.FileStreamAsyncResult.get_CompletedSynchronously():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsCompleted" uniqueID="get_IsCompleted():bool">
				<signature>System.IO.FileStreamAsyncResult.get_IsCompleted():bool</signature>
			</method>
		</class>
		<class name="Stream" uniqueID="System.IO.Stream">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.IO.Stream.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Synchronized" uniqueID="Synchronized(System.IO.Stream):System.IO.Stream">
				<signature>System.IO.Stream.Synchronized(System.IO.Stream):System.IO.Stream</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BeginRead" uniqueID="BeginRead(byte[];int;int;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.IO.Stream.BeginRead(byte[];int;int;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BeginWrite" uniqueID="BeginWrite(byte[];int;int;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.IO.Stream.BeginWrite(byte[];int;int;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Close" uniqueID="Close():void">
				<signature>System.IO.Stream.Close():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CreateWaitHandle" uniqueID="CreateWaitHandle():System.Threading.WaitHandle">
				<signature>System.IO.Stream.CreateWaitHandle():System.Threading.WaitHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Dispose" uniqueID="Dispose():void">
				<signature>System.IO.Stream.Dispose():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Dispose" uniqueID="Dispose(bool):void">
				<signature>System.IO.Stream.Dispose(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndRead" uniqueID="EndRead(System.IAsyncResult):int">
				<signature>System.IO.Stream.EndRead(System.IAsyncResult):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndWrite" uniqueID="EndWrite(System.IAsyncResult):void">
				<signature>System.IO.Stream.EndWrite(System.IAsyncResult):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Flush" uniqueID="Flush():void">
				<signature>System.IO.Stream.Flush():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Read" uniqueID="Read(byte[];int;int):int">
				<signature>System.IO.Stream.Read(byte[];int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ReadByte" uniqueID="ReadByte():int">
				<signature>System.IO.Stream.ReadByte():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Seek" uniqueID="Seek(long;System.IO.SeekOrigin):long">
				<signature>System.IO.Stream.Seek(long;System.IO.SeekOrigin):long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetLength" uniqueID="SetLength(long):void">
				<signature>System.IO.Stream.SetLength(long):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Stream" uniqueID="Stream():void">
				<signature>System.IO.Stream.Stream():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(byte[];int;int):void">
				<signature>System.IO.Stream.Write(byte[];int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="WriteByte" uniqueID="WriteByte(byte):void">
				<signature>System.IO.Stream.WriteByte(byte):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_CloseAsyncActiveEvent" uniqueID="_CloseAsyncActiveEvent(int):void">
				<signature>System.IO.Stream._CloseAsyncActiveEvent(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CanRead" uniqueID="get_CanRead():bool">
				<signature>System.IO.Stream.get_CanRead():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CanSeek" uniqueID="get_CanSeek():bool">
				<signature>System.IO.Stream.get_CanSeek():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CanTimeout" uniqueID="get_CanTimeout():bool">
				<signature>System.IO.Stream.get_CanTimeout():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CanWrite" uniqueID="get_CanWrite():bool">
				<signature>System.IO.Stream.get_CanWrite():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Length" uniqueID="get_Length():long">
				<signature>System.IO.Stream.get_Length():long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Position" uniqueID="get_Position():long">
				<signature>System.IO.Stream.get_Position():long</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReadTimeout" uniqueID="get_ReadTimeout():int">
				<signature>System.IO.Stream.get_ReadTimeout():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_WriteTimeout" uniqueID="get_WriteTimeout():int">
				<signature>System.IO.Stream.get_WriteTimeout():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Position" uniqueID="set_Position(long):void">
				<signature>System.IO.Stream.set_Position(long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ReadTimeout" uniqueID="set_ReadTimeout(int):void">
				<signature>System.IO.Stream.set_ReadTimeout(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_WriteTimeout" uniqueID="set_WriteTimeout(int):void">
				<signature>System.IO.Stream.set_WriteTimeout(int):void</signature>
			</method>
		</class>
		<class name="StreamReader" uniqueID="System.IO.StreamReader">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.IO.StreamReader.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Close" uniqueID="Close():void">
				<signature>System.IO.StreamReader.Close():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CompressBuffer" uniqueID="CompressBuffer(int):void">
				<signature>System.IO.StreamReader.CompressBuffer(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DetectEncoding" uniqueID="DetectEncoding():void">
				<signature>System.IO.StreamReader.DetectEncoding():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DiscardBufferedData" uniqueID="DiscardBufferedData():void">
				<signature>System.IO.StreamReader.DiscardBufferedData():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Dispose" uniqueID="Dispose(bool):void">
				<signature>System.IO.StreamReader.Dispose(bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Init" uniqueID="Init(System.IO.Stream;System.Text.Encoding;bool;int):void">
				<signature>System.IO.StreamReader.Init(System.IO.Stream;System.Text.Encoding;bool;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="IsPreamble" uniqueID="IsPreamble():bool">
				<signature>System.IO.StreamReader.IsPreamble():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Peek" uniqueID="Peek():int">
				<signature>System.IO.StreamReader.Peek():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Read" uniqueID="Read():int">
				<signature>System.IO.StreamReader.Read():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Read" uniqueID="Read(char[];int;int):int">
				<signature>System.IO.StreamReader.Read(char[];int;int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ReadBuffer" uniqueID="ReadBuffer():int">
				<signature>System.IO.StreamReader.ReadBuffer():int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ReadBuffer" uniqueID="ReadBuffer(char[];int;int;bool):int">
				<signature>System.IO.StreamReader.ReadBuffer(char[];int;int;bool):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ReadLine" uniqueID="ReadLine():string">
				<signature>System.IO.StreamReader.ReadLine():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ReadToEnd" uniqueID="ReadToEnd():string">
				<signature>System.IO.StreamReader.ReadToEnd():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="StreamReader" uniqueID="StreamReader():void">
				<signature>System.IO.StreamReader.StreamReader():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StreamReader" uniqueID="StreamReader(System.IO.Stream):void">
				<signature>System.IO.StreamReader.StreamReader(System.IO.Stream):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StreamReader" uniqueID="StreamReader(System.IO.Stream;System.Text.Encoding):void">
				<signature>System.IO.StreamReader.StreamReader(System.IO.Stream;System.Text.Encoding):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StreamReader" uniqueID="StreamReader(System.IO.Stream;System.Text.Encoding;bool):void">
				<signature>System.IO.StreamReader.StreamReader(System.IO.Stream;System.Text.Encoding;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StreamReader" uniqueID="StreamReader(System.IO.Stream;System.Text.Encoding;bool;int):void">
				<signature>System.IO.StreamReader.StreamReader(System.IO.Stream;System.Text.Encoding;bool;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="StreamReader" uniqueID="StreamReader(System.IO.Stream;System.Text.Encoding;bool;int;bool):void">
				<signature>System.IO.StreamReader.StreamReader(System.IO.Stream;System.Text.Encoding;bool;int;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StreamReader" uniqueID="StreamReader(System.IO.Stream;bool):void">
				<signature>System.IO.StreamReader.StreamReader(System.IO.Stream;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StreamReader" uniqueID="StreamReader(string):void">
				<signature>System.IO.StreamReader.StreamReader(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StreamReader" uniqueID="StreamReader(string;System.Text.Encoding):void">
				<signature>System.IO.StreamReader.StreamReader(string;System.Text.Encoding):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StreamReader" uniqueID="StreamReader(string;System.Text.Encoding;bool):void">
				<signature>System.IO.StreamReader.StreamReader(string;System.Text.Encoding;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StreamReader" uniqueID="StreamReader(string;System.Text.Encoding;bool;int):void">
				<signature>System.IO.StreamReader.StreamReader(string;System.Text.Encoding;bool;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StreamReader" uniqueID="StreamReader(string;bool):void">
				<signature>System.IO.StreamReader.StreamReader(string;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_BaseStream" uniqueID="get_BaseStream():System.IO.Stream">
				<signature>System.IO.StreamReader.get_BaseStream():System.IO.Stream</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Closable" uniqueID="get_Closable():bool">
				<signature>System.IO.StreamReader.get_Closable():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CurrentEncoding" uniqueID="get_CurrentEncoding():System.Text.Encoding">
				<signature>System.IO.StreamReader.get_CurrentEncoding():System.Text.Encoding</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_EndOfStream" uniqueID="get_EndOfStream():bool">
				<signature>System.IO.StreamReader.get_EndOfStream():bool</signature>
			</method>
		</class>
		<class name="StreamWriter" uniqueID="System.IO.StreamWriter">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.IO.StreamWriter.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CreateFile" uniqueID="CreateFile(string;bool):System.IO.Stream">
				<signature>System.IO.StreamWriter.CreateFile(string;bool):System.IO.Stream</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_UTF8NoBOM" uniqueID="get_UTF8NoBOM():System.Text.Encoding">
				<signature>System.IO.StreamWriter.get_UTF8NoBOM():System.Text.Encoding</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Close" uniqueID="Close():void">
				<signature>System.IO.StreamWriter.Close():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Dispose" uniqueID="Dispose(bool):void">
				<signature>System.IO.StreamWriter.Dispose(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Flush" uniqueID="Flush():void">
				<signature>System.IO.StreamWriter.Flush():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Flush" uniqueID="Flush(bool;bool):void">
				<signature>System.IO.StreamWriter.Flush(bool;bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Init" uniqueID="Init(System.IO.Stream;System.Text.Encoding;int):void">
				<signature>System.IO.StreamWriter.Init(System.IO.Stream;System.Text.Encoding;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="StreamWriter" uniqueID="StreamWriter():void">
				<signature>System.IO.StreamWriter.StreamWriter():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StreamWriter" uniqueID="StreamWriter(System.IO.Stream):void">
				<signature>System.IO.StreamWriter.StreamWriter(System.IO.Stream):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StreamWriter" uniqueID="StreamWriter(System.IO.Stream;System.Text.Encoding):void">
				<signature>System.IO.StreamWriter.StreamWriter(System.IO.Stream;System.Text.Encoding):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StreamWriter" uniqueID="StreamWriter(System.IO.Stream;System.Text.Encoding;int):void">
				<signature>System.IO.StreamWriter.StreamWriter(System.IO.Stream;System.Text.Encoding;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="StreamWriter" uniqueID="StreamWriter(System.IO.Stream;System.Text.Encoding;int;bool):void">
				<signature>System.IO.StreamWriter.StreamWriter(System.IO.Stream;System.Text.Encoding;int;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StreamWriter" uniqueID="StreamWriter(string):void">
				<signature>System.IO.StreamWriter.StreamWriter(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StreamWriter" uniqueID="StreamWriter(string;bool):void">
				<signature>System.IO.StreamWriter.StreamWriter(string;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StreamWriter" uniqueID="StreamWriter(string;bool;System.Text.Encoding):void">
				<signature>System.IO.StreamWriter.StreamWriter(string;bool;System.Text.Encoding):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StreamWriter" uniqueID="StreamWriter(string;bool;System.Text.Encoding;int):void">
				<signature>System.IO.StreamWriter.StreamWriter(string;bool;System.Text.Encoding;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(char):void">
				<signature>System.IO.StreamWriter.Write(char):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(char[]):void">
				<signature>System.IO.StreamWriter.Write(char[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(char[];int;int):void">
				<signature>System.IO.StreamWriter.Write(char[];int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(string):void">
				<signature>System.IO.StreamWriter.Write(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AutoFlush" uniqueID="get_AutoFlush():bool">
				<signature>System.IO.StreamWriter.get_AutoFlush():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_BaseStream" uniqueID="get_BaseStream():System.IO.Stream">
				<signature>System.IO.StreamWriter.get_BaseStream():System.IO.Stream</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Closable" uniqueID="get_Closable():bool">
				<signature>System.IO.StreamWriter.get_Closable():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Encoding" uniqueID="get_Encoding():System.Text.Encoding">
				<signature>System.IO.StreamWriter.get_Encoding():System.Text.Encoding</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_AutoFlush" uniqueID="set_AutoFlush(bool):void">
				<signature>System.IO.StreamWriter.set_AutoFlush(bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_HaveWrittenPreamble" uniqueID="set_HaveWrittenPreamble(bool):void">
				<signature>System.IO.StreamWriter.set_HaveWrittenPreamble(bool):void</signature>
			</method>
		</class>
		<class name="TextReader" uniqueID="System.IO.TextReader">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.IO.TextReader.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Synchronized" uniqueID="Synchronized(System.IO.TextReader):System.IO.TextReader">
				<signature>System.IO.TextReader.Synchronized(System.IO.TextReader):System.IO.TextReader</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Close" uniqueID="Close():void">
				<signature>System.IO.TextReader.Close():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Dispose" uniqueID="Dispose():void">
				<signature>System.IO.TextReader.Dispose():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Dispose" uniqueID="Dispose(bool):void">
				<signature>System.IO.TextReader.Dispose(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Peek" uniqueID="Peek():int">
				<signature>System.IO.TextReader.Peek():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Read" uniqueID="Read():int">
				<signature>System.IO.TextReader.Read():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Read" uniqueID="Read(char[];int;int):int">
				<signature>System.IO.TextReader.Read(char[];int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ReadBlock" uniqueID="ReadBlock(char[];int;int):int">
				<signature>System.IO.TextReader.ReadBlock(char[];int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ReadLine" uniqueID="ReadLine():string">
				<signature>System.IO.TextReader.ReadLine():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ReadToEnd" uniqueID="ReadToEnd():string">
				<signature>System.IO.TextReader.ReadToEnd():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="TextReader" uniqueID="TextReader():void">
				<signature>System.IO.TextReader.TextReader():void</signature>
			</method>
		</class>
		<class name="TextWriter" uniqueID="System.IO.TextWriter">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.IO.TextWriter.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Synchronized" uniqueID="Synchronized(System.IO.TextWriter):System.IO.TextWriter">
				<signature>System.IO.TextWriter.Synchronized(System.IO.TextWriter):System.IO.TextWriter</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Close" uniqueID="Close():void">
				<signature>System.IO.TextWriter.Close():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Dispose" uniqueID="Dispose():void">
				<signature>System.IO.TextWriter.Dispose():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Dispose" uniqueID="Dispose(bool):void">
				<signature>System.IO.TextWriter.Dispose(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Flush" uniqueID="Flush():void">
				<signature>System.IO.TextWriter.Flush():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="TextWriter" uniqueID="TextWriter():void">
				<signature>System.IO.TextWriter.TextWriter():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="TextWriter" uniqueID="TextWriter(System.IFormatProvider):void">
				<signature>System.IO.TextWriter.TextWriter(System.IFormatProvider):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(System.Decimal):void">
				<signature>System.IO.TextWriter.Write(System.Decimal):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(bool):void">
				<signature>System.IO.TextWriter.Write(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(char):void">
				<signature>System.IO.TextWriter.Write(char):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(char[]):void">
				<signature>System.IO.TextWriter.Write(char[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(char[];int;int):void">
				<signature>System.IO.TextWriter.Write(char[];int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(double):void">
				<signature>System.IO.TextWriter.Write(double):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(float):void">
				<signature>System.IO.TextWriter.Write(float):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(int):void">
				<signature>System.IO.TextWriter.Write(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(long):void">
				<signature>System.IO.TextWriter.Write(long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(object):void">
				<signature>System.IO.TextWriter.Write(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(string):void">
				<signature>System.IO.TextWriter.Write(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(string;object):void">
				<signature>System.IO.TextWriter.Write(string;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(string;object;object):void">
				<signature>System.IO.TextWriter.Write(string;object;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(string;object;object;object):void">
				<signature>System.IO.TextWriter.Write(string;object;object;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(string;object[]):void">
				<signature>System.IO.TextWriter.Write(string;object[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(unsigned int):void">
				<signature>System.IO.TextWriter.Write(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Write" uniqueID="Write(unsigned long):void">
				<signature>System.IO.TextWriter.Write(unsigned long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="WriteLine" uniqueID="WriteLine():void">
				<signature>System.IO.TextWriter.WriteLine():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="WriteLine" uniqueID="WriteLine(System.Decimal):void">
				<signature>System.IO.TextWriter.WriteLine(System.Decimal):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="WriteLine" uniqueID="WriteLine(bool):void">
				<signature>System.IO.TextWriter.WriteLine(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="WriteLine" uniqueID="WriteLine(char):void">
				<signature>System.IO.TextWriter.WriteLine(char):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="WriteLine" uniqueID="WriteLine(char[]):void">
				<signature>System.IO.TextWriter.WriteLine(char[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="WriteLine" uniqueID="WriteLine(char[];int;int):void">
				<signature>System.IO.TextWriter.WriteLine(char[];int;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="WriteLine" uniqueID="WriteLine(double):void">
				<signature>System.IO.TextWriter.WriteLine(double):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="WriteLine" uniqueID="WriteLine(float):void">
				<signature>System.IO.TextWriter.WriteLine(float):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="WriteLine" uniqueID="WriteLine(int):void">
				<signature>System.IO.TextWriter.WriteLine(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="WriteLine" uniqueID="WriteLine(long):void">
				<signature>System.IO.TextWriter.WriteLine(long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="WriteLine" uniqueID="WriteLine(object):void">
				<signature>System.IO.TextWriter.WriteLine(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="WriteLine" uniqueID="WriteLine(string):void">
				<signature>System.IO.TextWriter.WriteLine(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="WriteLine" uniqueID="WriteLine(string;object):void">
				<signature>System.IO.TextWriter.WriteLine(string;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="WriteLine" uniqueID="WriteLine(string;object;object):void">
				<signature>System.IO.TextWriter.WriteLine(string;object;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="WriteLine" uniqueID="WriteLine(string;object;object;object):void">
				<signature>System.IO.TextWriter.WriteLine(string;object;object;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="WriteLine" uniqueID="WriteLine(string;object[]):void">
				<signature>System.IO.TextWriter.WriteLine(string;object[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="WriteLine" uniqueID="WriteLine(unsigned int):void">
				<signature>System.IO.TextWriter.WriteLine(unsigned int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="WriteLine" uniqueID="WriteLine(unsigned long):void">
				<signature>System.IO.TextWriter.WriteLine(unsigned long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Encoding" uniqueID="get_Encoding():System.Text.Encoding">
				<signature>System.IO.TextWriter.get_Encoding():System.Text.Encoding</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FormatProvider" uniqueID="get_FormatProvider():System.IFormatProvider">
				<signature>System.IO.TextWriter.get_FormatProvider():System.IFormatProvider</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_NewLine" uniqueID="get_NewLine():string">
				<signature>System.IO.TextWriter.get_NewLine():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_NewLine" uniqueID="set_NewLine(string):void">
				<signature>System.IO.TextWriter.set_NewLine(string):void</signature>
			</method>
		</class>
	</package>
	<package name="System.Reflection.Emit">
		<class name="CustomAttributeBuilder" uniqueID="System.Reflection.Emit.CustomAttributeBuilder">
			<method accessibility="Protected" methodKind="Member" name="CreateCustomAttribute" uniqueID="CreateCustomAttribute(System.Reflection.Emit.ModuleBuilder;int):void">
				<signature>System.Reflection.Emit.CustomAttributeBuilder.CreateCustomAttribute(System.Reflection.Emit.ModuleBuilder;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CreateCustomAttribute" uniqueID="CreateCustomAttribute(System.Reflection.Emit.ModuleBuilder;int;int;bool):void">
				<signature>System.Reflection.Emit.CustomAttributeBuilder.CreateCustomAttribute(System.Reflection.Emit.ModuleBuilder;int;int;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CustomAttributeBuilder" uniqueID="CustomAttributeBuilder(System.Reflection.ConstructorInfo;object[]):void">
				<signature>System.Reflection.Emit.CustomAttributeBuilder.CustomAttributeBuilder(System.Reflection.ConstructorInfo;object[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CustomAttributeBuilder" uniqueID="CustomAttributeBuilder(System.Reflection.ConstructorInfo;object[];System.Reflection.FieldInfo[];object[]):void">
				<signature>System.Reflection.Emit.CustomAttributeBuilder.CustomAttributeBuilder(System.Reflection.ConstructorInfo;object[];System.Reflection.FieldInfo[];object[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CustomAttributeBuilder" uniqueID="CustomAttributeBuilder(System.Reflection.ConstructorInfo;object[];System.Reflection.PropertyInfo[];object[]):void">
				<signature>System.Reflection.Emit.CustomAttributeBuilder.CustomAttributeBuilder(System.Reflection.ConstructorInfo;object[];System.Reflection.PropertyInfo[];object[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CustomAttributeBuilder" uniqueID="CustomAttributeBuilder(System.Reflection.ConstructorInfo;object[];System.Reflection.PropertyInfo[];object[];System.Reflection.FieldInfo[];object[]):void">
				<signature>System.Reflection.Emit.CustomAttributeBuilder.CustomAttributeBuilder(System.Reflection.ConstructorInfo;object[];System.Reflection.PropertyInfo[];object[];System.Reflection.FieldInfo[];object[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="EmitString" uniqueID="EmitString(System.IO.BinaryWriter;string):void">
				<signature>System.Reflection.Emit.CustomAttributeBuilder.EmitString(System.IO.BinaryWriter;string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="EmitType" uniqueID="EmitType(System.IO.BinaryWriter;System.Type):void">
				<signature>System.Reflection.Emit.CustomAttributeBuilder.EmitType(System.IO.BinaryWriter;System.Type):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="EmitValue" uniqueID="EmitValue(System.IO.BinaryWriter;System.Type;object):void">
				<signature>System.Reflection.Emit.CustomAttributeBuilder.EmitValue(System.IO.BinaryWriter;System.Type;object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InitCustomAttributeBuilder" uniqueID="InitCustomAttributeBuilder(System.Reflection.ConstructorInfo;object[];System.Reflection.PropertyInfo[];object[];System.Reflection.FieldInfo[];object[]):void">
				<signature>System.Reflection.Emit.CustomAttributeBuilder.InitCustomAttributeBuilder(System.Reflection.ConstructorInfo;object[];System.Reflection.PropertyInfo[];object[];System.Reflection.FieldInfo[];object[]):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="PrepareCreateCustomAttributeToDisk" uniqueID="PrepareCreateCustomAttributeToDisk(System.Reflection.Emit.ModuleBuilder):int">
				<signature>System.Reflection.Emit.CustomAttributeBuilder.PrepareCreateCustomAttributeToDisk(System.Reflection.Emit.ModuleBuilder):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._CustomAttributeBuilder.GetIDsOfNames" uniqueID="System.Runtime.InteropServices._CustomAttributeBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.CustomAttributeBuilder.System.Runtime.InteropServices._CustomAttributeBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._CustomAttributeBuilder.GetTypeInfo" uniqueID="System.Runtime.InteropServices._CustomAttributeBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.CustomAttributeBuilder.System.Runtime.InteropServices._CustomAttributeBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._CustomAttributeBuilder.GetTypeInfoCount" uniqueID="System.Runtime.InteropServices._CustomAttributeBuilder.GetTypeInfoCount(unsigned int):void">
				<signature>System.Reflection.Emit.CustomAttributeBuilder.System.Runtime.InteropServices._CustomAttributeBuilder.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._CustomAttributeBuilder.Invoke" uniqueID="System.Runtime.InteropServices._CustomAttributeBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Reflection.Emit.CustomAttributeBuilder.System.Runtime.InteropServices._CustomAttributeBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ValidateType" uniqueID="ValidateType(System.Type):bool">
				<signature>System.Reflection.Emit.CustomAttributeBuilder.ValidateType(System.Type):bool</signature>
			</method>
		</class>
		<class name="MethodBuilder" uniqueID="System.Reflection.Emit.MethodBuilder">
			<method accessibility="Public" methodKind="Member" name="AddDeclarativeSecurity" uniqueID="AddDeclarativeSecurity(System.Security.Permissions.SecurityAction;System.Security.PermissionSet):void">
				<signature>System.Reflection.Emit.MethodBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction;System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CalculateNumberOfExceptions" uniqueID="CalculateNumberOfExceptions(System.Reflection.Emit.__ExceptionInfo[]):int">
				<signature>System.Reflection.Emit.MethodBuilder.CalculateNumberOfExceptions(System.Reflection.Emit.__ExceptionInfo[]):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckContext" uniqueID="CheckContext(System.Type[]):void">
				<signature>System.Reflection.Emit.MethodBuilder.CheckContext(System.Type[]):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckContext" uniqueID="CheckContext(System.Type[][]):void">
				<signature>System.Reflection.Emit.MethodBuilder.CheckContext(System.Type[][]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateMethodBody" uniqueID="CreateMethodBody(byte[];int):void">
				<signature>System.Reflection.Emit.MethodBuilder.CreateMethodBody(byte[];int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CreateMethodBodyHelper" uniqueID="CreateMethodBodyHelper(System.Reflection.Emit.ILGenerator):void">
				<signature>System.Reflection.Emit.MethodBuilder.CreateMethodBodyHelper(System.Reflection.Emit.ILGenerator):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineGenericParameters" uniqueID="DefineGenericParameters(string[]):System.Reflection.Emit.GenericTypeParameterBuilder[]">
				<signature>System.Reflection.Emit.MethodBuilder.DefineGenericParameters(string[]):System.Reflection.Emit.GenericTypeParameterBuilder[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineParameter" uniqueID="DefineParameter(int;System.Reflection.ParameterAttributes;string):System.Reflection.Emit.ParameterBuilder">
				<signature>System.Reflection.Emit.MethodBuilder.DefineParameter(int;System.Reflection.ParameterAttributes;string):System.Reflection.Emit.ParameterBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Reflection.Emit.MethodBuilder.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetBaseDefinition" uniqueID="GetBaseDefinition():System.Reflection.MethodInfo">
				<signature>System.Reflection.Emit.MethodBuilder.GetBaseDefinition():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetBody" uniqueID="GetBody():byte[]">
				<signature>System.Reflection.Emit.MethodBuilder.GetBody():byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.Reflection.Emit.MethodBuilder.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetExceptionInstances" uniqueID="GetExceptionInstances():System.Reflection.Emit.__ExceptionInstance[]">
				<signature>System.Reflection.Emit.MethodBuilder.GetExceptionInstances():System.Reflection.Emit.__ExceptionInstance[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetGenericArguments" uniqueID="GetGenericArguments():System.Type[]">
				<signature>System.Reflection.Emit.MethodBuilder.GetGenericArguments():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetGenericMethodDefinition" uniqueID="GetGenericMethodDefinition():System.Reflection.MethodInfo">
				<signature>System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Reflection.Emit.MethodBuilder.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetILGenerator" uniqueID="GetILGenerator():System.Reflection.Emit.ILGenerator">
				<signature>System.Reflection.Emit.MethodBuilder.GetILGenerator():System.Reflection.Emit.ILGenerator</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetILGenerator" uniqueID="GetILGenerator(int):System.Reflection.Emit.ILGenerator">
				<signature>System.Reflection.Emit.MethodBuilder.GetILGenerator(int):System.Reflection.Emit.ILGenerator</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetLocalsSignature" uniqueID="GetLocalsSignature():System.Reflection.Emit.SignatureHelper">
				<signature>System.Reflection.Emit.MethodBuilder.GetLocalsSignature():System.Reflection.Emit.SignatureHelper</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethodImplementationFlags" uniqueID="GetMethodImplementationFlags():System.Reflection.MethodImplAttributes">
				<signature>System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags():System.Reflection.MethodImplAttributes</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMethodSignature" uniqueID="GetMethodSignature():System.Reflection.Emit.SignatureHelper">
				<signature>System.Reflection.Emit.MethodBuilder.GetMethodSignature():System.Reflection.Emit.SignatureHelper</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetModule" uniqueID="GetModule():System.Reflection.Module">
				<signature>System.Reflection.Emit.MethodBuilder.GetModule():System.Reflection.Module</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetNumberOfExceptions" uniqueID="GetNumberOfExceptions():int">
				<signature>System.Reflection.Emit.MethodBuilder.GetNumberOfExceptions():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetParameterTypes" uniqueID="GetParameterTypes():System.Type[]">
				<signature>System.Reflection.Emit.MethodBuilder.GetParameterTypes():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetParameters" uniqueID="GetParameters():System.Reflection.ParameterInfo[]">
				<signature>System.Reflection.Emit.MethodBuilder.GetParameters():System.Reflection.ParameterInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetRVAFixups" uniqueID="GetRVAFixups():int[]">
				<signature>System.Reflection.Emit.MethodBuilder.GetRVAFixups():int[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetReturnType" uniqueID="GetReturnType():System.Type">
				<signature>System.Reflection.Emit.MethodBuilder.GetReturnType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetToken" uniqueID="GetToken():System.Reflection.Emit.MethodToken">
				<signature>System.Reflection.Emit.MethodBuilder.GetToken():System.Reflection.Emit.MethodToken</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetTokenFixups" uniqueID="GetTokenFixups():int[]">
				<signature>System.Reflection.Emit.MethodBuilder.GetTokenFixups():int[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetTypeBuilder" uniqueID="GetTypeBuilder():System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.MethodBuilder.GetTypeBuilder():System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Init" uniqueID="Init(string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][];System.Reflection.Module;System.Reflection.Emit.TypeBuilder;bool):void">
				<signature>System.Reflection.Emit.MethodBuilder.Init(string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][];System.Reflection.Module;System.Reflection.Emit.TypeBuilder;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object">
				<signature>System.Reflection.Emit.MethodBuilder.Invoke(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.Reflection.Emit.MethodBuilder.IsDefined(System.Type;bool):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="IsKnownCA" uniqueID="IsKnownCA(System.Reflection.ConstructorInfo):bool">
				<signature>System.Reflection.Emit.MethodBuilder.IsKnownCA(System.Reflection.ConstructorInfo):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsTypeCreated" uniqueID="IsTypeCreated():bool">
				<signature>System.Reflection.Emit.MethodBuilder.IsTypeCreated():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakeGenericMethod" uniqueID="MakeGenericMethod(System.Type[]):System.Reflection.MethodInfo">
				<signature>System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[]):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MethodBuilder" uniqueID="MethodBuilder(string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Reflection.Module;System.Reflection.Emit.TypeBuilder;bool):void">
				<signature>System.Reflection.Emit.MethodBuilder.MethodBuilder(string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Reflection.Module;System.Reflection.Emit.TypeBuilder;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MethodBuilder" uniqueID="MethodBuilder(string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][];System.Reflection.Module;System.Reflection.Emit.TypeBuilder;bool):void">
				<signature>System.Reflection.Emit.MethodBuilder.MethodBuilder(string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][];System.Reflection.Module;System.Reflection.Emit.TypeBuilder;bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ParseCA" uniqueID="ParseCA(System.Reflection.ConstructorInfo;byte[]):void">
				<signature>System.Reflection.Emit.MethodBuilder.ParseCA(System.Reflection.ConstructorInfo;byte[]):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ReleaseBakedStructures" uniqueID="ReleaseBakedStructures():void">
				<signature>System.Reflection.Emit.MethodBuilder.ReleaseBakedStructures():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetCustomAttribute" uniqueID="SetCustomAttribute(System.Reflection.ConstructorInfo;byte[]):void">
				<signature>System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo;byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetCustomAttribute" uniqueID="SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder):void">
				<signature>System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetImplementationFlags" uniqueID="SetImplementationFlags(System.Reflection.MethodImplAttributes):void">
				<signature>System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetMarshal" uniqueID="SetMarshal(System.Reflection.Emit.UnmanagedMarshal):void">
				<signature>System.Reflection.Emit.MethodBuilder.SetMarshal(System.Reflection.Emit.UnmanagedMarshal):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetParameters" uniqueID="SetParameters(System.Type[]):void">
				<signature>System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetReturnType" uniqueID="SetReturnType(System.Type):void">
				<signature>System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetSignature" uniqueID="SetSignature(System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][]):void">
				<signature>System.Reflection.Emit.MethodBuilder.SetSignature(System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetSymCustomAttribute" uniqueID="SetSymCustomAttribute(string;byte[]):void">
				<signature>System.Reflection.Emit.MethodBuilder.SetSymCustomAttribute(string;byte[]):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetToken" uniqueID="SetToken(System.Reflection.Emit.MethodToken):void">
				<signature>System.Reflection.Emit.MethodBuilder.SetToken(System.Reflection.Emit.MethodToken):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames" uniqueID="System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.MethodBuilder.System.Runtime.InteropServices._MethodBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MethodBuilder.GetTypeInfo" uniqueID="System.Runtime.InteropServices._MethodBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.MethodBuilder.System.Runtime.InteropServices._MethodBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount" uniqueID="System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount(unsigned int):void">
				<signature>System.Reflection.Emit.MethodBuilder.System.Runtime.InteropServices._MethodBuilder.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._MethodBuilder.Invoke" uniqueID="System.Runtime.InteropServices._MethodBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Reflection.Emit.MethodBuilder.System.Runtime.InteropServices._MethodBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ThrowIfGeneric" uniqueID="ThrowIfGeneric():void">
				<signature>System.Reflection.Emit.MethodBuilder.ThrowIfGeneric():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ThrowIfShouldNotHaveBody" uniqueID="ThrowIfShouldNotHaveBody():void">
				<signature>System.Reflection.Emit.MethodBuilder.ThrowIfShouldNotHaveBody():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Reflection.Emit.MethodBuilder.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Attributes" uniqueID="get_Attributes():System.Reflection.MethodAttributes">
				<signature>System.Reflection.Emit.MethodBuilder.get_Attributes():System.Reflection.MethodAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CallingConvention" uniqueID="get_CallingConvention():System.Reflection.CallingConventions">
				<signature>System.Reflection.Emit.MethodBuilder.get_CallingConvention():System.Reflection.CallingConventions</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ContainsGenericParameters" uniqueID="get_ContainsGenericParameters():bool">
				<signature>System.Reflection.Emit.MethodBuilder.get_ContainsGenericParameters():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringType" uniqueID="get_DeclaringType():System.Type">
				<signature>System.Reflection.Emit.MethodBuilder.get_DeclaringType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_InitLocals" uniqueID="get_InitLocals():bool">
				<signature>System.Reflection.Emit.MethodBuilder.get_InitLocals():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsGenericMethod" uniqueID="get_IsGenericMethod():bool">
				<signature>System.Reflection.Emit.MethodBuilder.get_IsGenericMethod():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsGenericMethodDefinition" uniqueID="get_IsGenericMethodDefinition():bool">
				<signature>System.Reflection.Emit.MethodBuilder.get_IsGenericMethodDefinition():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_MetadataTokenInternal" uniqueID="get_MetadataTokenInternal():int">
				<signature>System.Reflection.Emit.MethodBuilder.get_MetadataTokenInternal():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MethodHandle" uniqueID="get_MethodHandle():System.RuntimeMethodHandle">
				<signature>System.Reflection.Emit.MethodBuilder.get_MethodHandle():System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Module" uniqueID="get_Module():System.Reflection.Module">
				<signature>System.Reflection.Emit.MethodBuilder.get_Module():System.Reflection.Module</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Reflection.Emit.MethodBuilder.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReflectedType" uniqueID="get_ReflectedType():System.Type">
				<signature>System.Reflection.Emit.MethodBuilder.get_ReflectedType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReturnParameter" uniqueID="get_ReturnParameter():System.Reflection.ParameterInfo">
				<signature>System.Reflection.Emit.MethodBuilder.get_ReturnParameter():System.Reflection.ParameterInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReturnTypeCustomAttributes" uniqueID="get_ReturnTypeCustomAttributes():System.Reflection.ICustomAttributeProvider">
				<signature>System.Reflection.Emit.MethodBuilder.get_ReturnTypeCustomAttributes():System.Reflection.ICustomAttributeProvider</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Signature" uniqueID="get_Signature():string">
				<signature>System.Reflection.Emit.MethodBuilder.get_Signature():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_InitLocals" uniqueID="set_InitLocals(bool):void">
				<signature>System.Reflection.Emit.MethodBuilder.set_InitLocals(bool):void</signature>
			</method>
		</class>
		<class name="__ExceptionInfo" uniqueID="System.Reflection.Emit.__ExceptionInfo">
			<method accessibility="Protected" methodKind="Member" name="Done" uniqueID="Done(int):void">
				<signature>System.Reflection.Emit.__ExceptionInfo.Done(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetCatchAddresses" uniqueID="GetCatchAddresses():int[]">
				<signature>System.Reflection.Emit.__ExceptionInfo.GetCatchAddresses():int[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetCatchClass" uniqueID="GetCatchClass():System.Type[]">
				<signature>System.Reflection.Emit.__ExceptionInfo.GetCatchClass():System.Type[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetCatchEndAddresses" uniqueID="GetCatchEndAddresses():int[]">
				<signature>System.Reflection.Emit.__ExceptionInfo.GetCatchEndAddresses():int[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetCurrentState" uniqueID="GetCurrentState():int">
				<signature>System.Reflection.Emit.__ExceptionInfo.GetCurrentState():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetEndAddress" uniqueID="GetEndAddress():int">
				<signature>System.Reflection.Emit.__ExceptionInfo.GetEndAddress():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetEndLabel" uniqueID="GetEndLabel():System.Reflection.Emit.Label">
				<signature>System.Reflection.Emit.__ExceptionInfo.GetEndLabel():System.Reflection.Emit.Label</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetExceptionTypes" uniqueID="GetExceptionTypes():int[]">
				<signature>System.Reflection.Emit.__ExceptionInfo.GetExceptionTypes():int[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetFilterAddresses" uniqueID="GetFilterAddresses():int[]">
				<signature>System.Reflection.Emit.__ExceptionInfo.GetFilterAddresses():int[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetFinallyEndAddress" uniqueID="GetFinallyEndAddress():int">
				<signature>System.Reflection.Emit.__ExceptionInfo.GetFinallyEndAddress():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetFinallyEndLabel" uniqueID="GetFinallyEndLabel():System.Reflection.Emit.Label">
				<signature>System.Reflection.Emit.__ExceptionInfo.GetFinallyEndLabel():System.Reflection.Emit.Label</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetNumberOfCatches" uniqueID="GetNumberOfCatches():int">
				<signature>System.Reflection.Emit.__ExceptionInfo.GetNumberOfCatches():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetStartAddress" uniqueID="GetStartAddress():int">
				<signature>System.Reflection.Emit.__ExceptionInfo.GetStartAddress():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsInner" uniqueID="IsInner(System.Reflection.Emit.__ExceptionInfo):bool">
				<signature>System.Reflection.Emit.__ExceptionInfo.IsInner(System.Reflection.Emit.__ExceptionInfo):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MarkCatchAddr" uniqueID="MarkCatchAddr(int;System.Type):void">
				<signature>System.Reflection.Emit.__ExceptionInfo.MarkCatchAddr(int;System.Type):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MarkFaultAddr" uniqueID="MarkFaultAddr(int):void">
				<signature>System.Reflection.Emit.__ExceptionInfo.MarkFaultAddr(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MarkFilterAddr" uniqueID="MarkFilterAddr(int):void">
				<signature>System.Reflection.Emit.__ExceptionInfo.MarkFilterAddr(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MarkFinallyAddr" uniqueID="MarkFinallyAddr(int;int):void">
				<signature>System.Reflection.Emit.__ExceptionInfo.MarkFinallyAddr(int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="MarkHelper" uniqueID="MarkHelper(int;int;System.Type;int):void">
				<signature>System.Reflection.Emit.__ExceptionInfo.MarkHelper(int;int;System.Type;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetFinallyEndLabel" uniqueID="SetFinallyEndLabel(System.Reflection.Emit.Label):void">
				<signature>System.Reflection.Emit.__ExceptionInfo.SetFinallyEndLabel(System.Reflection.Emit.Label):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="__ExceptionInfo" uniqueID="__ExceptionInfo():void">
				<signature>System.Reflection.Emit.__ExceptionInfo.__ExceptionInfo():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="__ExceptionInfo" uniqueID="__ExceptionInfo(int;System.Reflection.Emit.Label):void">
				<signature>System.Reflection.Emit.__ExceptionInfo.__ExceptionInfo(int;System.Reflection.Emit.Label):void</signature>
			</method>
		</class>
		<class name="PropertyBuilder" uniqueID="System.Reflection.Emit.PropertyBuilder">
			<method accessibility="Public" methodKind="Member" name="AddOtherMethod" uniqueID="AddOtherMethod(System.Reflection.Emit.MethodBuilder):void">
				<signature>System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAccessors" uniqueID="GetAccessors(bool):System.Reflection.MethodInfo[]">
				<signature>System.Reflection.Emit.PropertyBuilder.GetAccessors(bool):System.Reflection.MethodInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetGetMethod" uniqueID="GetGetMethod(bool):System.Reflection.MethodInfo">
				<signature>System.Reflection.Emit.PropertyBuilder.GetGetMethod(bool):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetIndexParameters" uniqueID="GetIndexParameters():System.Reflection.ParameterInfo[]">
				<signature>System.Reflection.Emit.PropertyBuilder.GetIndexParameters():System.Reflection.ParameterInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSetMethod" uniqueID="GetSetMethod(bool):System.Reflection.MethodInfo">
				<signature>System.Reflection.Emit.PropertyBuilder.GetSetMethod(bool):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValue" uniqueID="GetValue(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object">
				<signature>System.Reflection.Emit.PropertyBuilder.GetValue(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValue" uniqueID="GetValue(object;object[]):object">
				<signature>System.Reflection.Emit.PropertyBuilder.GetValue(object;object[]):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type;bool):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="PropertyBuilder" uniqueID="PropertyBuilder():void">
				<signature>System.Reflection.Emit.PropertyBuilder.PropertyBuilder():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="PropertyBuilder" uniqueID="PropertyBuilder(System.Reflection.Module;string;System.Reflection.Emit.SignatureHelper;System.Reflection.PropertyAttributes;System.Type;System.Reflection.Emit.PropertyToken;System.Reflection.Emit.TypeBuilder):void">
				<signature>System.Reflection.Emit.PropertyBuilder.PropertyBuilder(System.Reflection.Module;string;System.Reflection.Emit.SignatureHelper;System.Reflection.PropertyAttributes;System.Type;System.Reflection.Emit.PropertyToken;System.Reflection.Emit.TypeBuilder):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetConstant" uniqueID="SetConstant(object):void">
				<signature>System.Reflection.Emit.PropertyBuilder.SetConstant(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetCustomAttribute" uniqueID="SetCustomAttribute(System.Reflection.ConstructorInfo;byte[]):void">
				<signature>System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo;byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetCustomAttribute" uniqueID="SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder):void">
				<signature>System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetGetMethod" uniqueID="SetGetMethod(System.Reflection.Emit.MethodBuilder):void">
				<signature>System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetSetMethod" uniqueID="SetSetMethod(System.Reflection.Emit.MethodBuilder):void">
				<signature>System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetValue" uniqueID="SetValue(object;object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):void">
				<signature>System.Reflection.Emit.PropertyBuilder.SetValue(object;object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetValue" uniqueID="SetValue(object;object;object[]):void">
				<signature>System.Reflection.Emit.PropertyBuilder.SetValue(object;object;object[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._PropertyBuilder.GetIDsOfNames" uniqueID="System.Runtime.InteropServices._PropertyBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.PropertyBuilder.System.Runtime.InteropServices._PropertyBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._PropertyBuilder.GetTypeInfo" uniqueID="System.Runtime.InteropServices._PropertyBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.PropertyBuilder.System.Runtime.InteropServices._PropertyBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._PropertyBuilder.GetTypeInfoCount" uniqueID="System.Runtime.InteropServices._PropertyBuilder.GetTypeInfoCount(unsigned int):void">
				<signature>System.Reflection.Emit.PropertyBuilder.System.Runtime.InteropServices._PropertyBuilder.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._PropertyBuilder.Invoke" uniqueID="System.Runtime.InteropServices._PropertyBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Reflection.Emit.PropertyBuilder.System.Runtime.InteropServices._PropertyBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Attributes" uniqueID="get_Attributes():System.Reflection.PropertyAttributes">
				<signature>System.Reflection.Emit.PropertyBuilder.get_Attributes():System.Reflection.PropertyAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CanRead" uniqueID="get_CanRead():bool">
				<signature>System.Reflection.Emit.PropertyBuilder.get_CanRead():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CanWrite" uniqueID="get_CanWrite():bool">
				<signature>System.Reflection.Emit.PropertyBuilder.get_CanWrite():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringType" uniqueID="get_DeclaringType():System.Type">
				<signature>System.Reflection.Emit.PropertyBuilder.get_DeclaringType():System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_MetadataTokenInternal" uniqueID="get_MetadataTokenInternal():int">
				<signature>System.Reflection.Emit.PropertyBuilder.get_MetadataTokenInternal():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Module" uniqueID="get_Module():System.Reflection.Module">
				<signature>System.Reflection.Emit.PropertyBuilder.get_Module():System.Reflection.Module</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Reflection.Emit.PropertyBuilder.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PropertyToken" uniqueID="get_PropertyToken():System.Reflection.Emit.PropertyToken">
				<signature>System.Reflection.Emit.PropertyBuilder.get_PropertyToken():System.Reflection.Emit.PropertyToken</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PropertyType" uniqueID="get_PropertyType():System.Type">
				<signature>System.Reflection.Emit.PropertyBuilder.get_PropertyType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReflectedType" uniqueID="get_ReflectedType():System.Type">
				<signature>System.Reflection.Emit.PropertyBuilder.get_ReflectedType():System.Type</signature>
			</method>
		</class>
		<class name="REDocument" uniqueID="System.Reflection.Emit.REDocument">
			<method accessibility="Protected" methodKind="Member" name="AddLineNumberInfo" uniqueID="AddLineNumberInfo(System.Diagnostics.SymbolStore.ISymbolDocumentWriter;int;int;int;int;int):void">
				<signature>System.Reflection.Emit.REDocument.AddLineNumberInfo(System.Diagnostics.SymbolStore.ISymbolDocumentWriter;int;int;int;int;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EmitLineNumberInfo" uniqueID="EmitLineNumberInfo(System.Diagnostics.SymbolStore.ISymbolWriter):void">
				<signature>System.Reflection.Emit.REDocument.EmitLineNumberInfo(System.Diagnostics.SymbolStore.ISymbolWriter):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EnsureCapacity" uniqueID="EnsureCapacity():void">
				<signature>System.Reflection.Emit.REDocument.EnsureCapacity():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="REDocument" uniqueID="REDocument(System.Diagnostics.SymbolStore.ISymbolDocumentWriter):void">
				<signature>System.Reflection.Emit.REDocument.REDocument(System.Diagnostics.SymbolStore.ISymbolDocumentWriter):void</signature>
			</method>
		</class>
		<class name="SignatureHelper" uniqueID="System.Reflection.Emit.SignatureHelper">
			<method accessibility="Protected" methodKind="Static" name="GetCorElementTypeFromClass" uniqueID="GetCorElementTypeFromClass(System.RuntimeType):int">
				<signature>System.Reflection.Emit.SignatureHelper.GetCorElementTypeFromClass(System.RuntimeType):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetFieldSigHelper" uniqueID="GetFieldSigHelper(System.Reflection.Module):System.Reflection.Emit.SignatureHelper">
				<signature>System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module):System.Reflection.Emit.SignatureHelper</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetLocalVarSigHelper" uniqueID="GetLocalVarSigHelper():System.Reflection.Emit.SignatureHelper">
				<signature>System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper():System.Reflection.Emit.SignatureHelper</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetLocalVarSigHelper" uniqueID="GetLocalVarSigHelper(System.Reflection.Module):System.Reflection.Emit.SignatureHelper">
				<signature>System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module):System.Reflection.Emit.SignatureHelper</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetMethodSigHelper" uniqueID="GetMethodSigHelper(System.Reflection.CallingConventions;System.Type):System.Reflection.Emit.SignatureHelper">
				<signature>System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions;System.Type):System.Reflection.Emit.SignatureHelper</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetMethodSigHelper" uniqueID="GetMethodSigHelper(System.Reflection.Module;System.Reflection.CallingConventions;System.Type):System.Reflection.Emit.SignatureHelper">
				<signature>System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module;System.Reflection.CallingConventions;System.Type):System.Reflection.Emit.SignatureHelper</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetMethodSigHelper" uniqueID="GetMethodSigHelper(System.Reflection.Module;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][]):System.Reflection.Emit.SignatureHelper">
				<signature>System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][]):System.Reflection.Emit.SignatureHelper</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetMethodSigHelper" uniqueID="GetMethodSigHelper(System.Reflection.Module;System.Reflection.CallingConventions;System.Type;int):System.Reflection.Emit.SignatureHelper">
				<signature>System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module;System.Reflection.CallingConventions;System.Type;int):System.Reflection.Emit.SignatureHelper</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetMethodSigHelper" uniqueID="GetMethodSigHelper(System.Reflection.Module;System.Reflection.CallingConventions;int;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][]):System.Reflection.Emit.SignatureHelper">
				<signature>System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module;System.Reflection.CallingConventions;int;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][]):System.Reflection.Emit.SignatureHelper</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetMethodSigHelper" uniqueID="GetMethodSigHelper(System.Reflection.Module;System.Runtime.InteropServices.CallingConvention;System.Type):System.Reflection.Emit.SignatureHelper">
				<signature>System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module;System.Runtime.InteropServices.CallingConvention;System.Type):System.Reflection.Emit.SignatureHelper</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetMethodSigHelper" uniqueID="GetMethodSigHelper(System.Reflection.Module;System.Type;System.Type[]):System.Reflection.Emit.SignatureHelper">
				<signature>System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module;System.Type;System.Type[]):System.Reflection.Emit.SignatureHelper</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetMethodSigHelper" uniqueID="GetMethodSigHelper(System.Runtime.InteropServices.CallingConvention;System.Type):System.Reflection.Emit.SignatureHelper">
				<signature>System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Runtime.InteropServices.CallingConvention;System.Type):System.Reflection.Emit.SignatureHelper</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetMethodSpecSigHelper" uniqueID="GetMethodSpecSigHelper(System.Reflection.Module;System.Type[]):System.Reflection.Emit.SignatureHelper">
				<signature>System.Reflection.Emit.SignatureHelper.GetMethodSpecSigHelper(System.Reflection.Module;System.Type[]):System.Reflection.Emit.SignatureHelper</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetPropertySigHelper" uniqueID="GetPropertySigHelper(System.Reflection.Module;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][]):System.Reflection.Emit.SignatureHelper">
				<signature>System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][]):System.Reflection.Emit.SignatureHelper</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetPropertySigHelper" uniqueID="GetPropertySigHelper(System.Reflection.Module;System.Type;System.Type[]):System.Reflection.Emit.SignatureHelper">
				<signature>System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module;System.Type;System.Type[]):System.Reflection.Emit.SignatureHelper</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetPropertySigHelper" uniqueID="GetPropertySigHelper(System.Reflection.Module;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][]):System.Reflection.Emit.SignatureHelper">
				<signature>System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][]):System.Reflection.Emit.SignatureHelper</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetTypeSigToken" uniqueID="GetTypeSigToken(System.Reflection.Module;System.Type):System.Reflection.Emit.SignatureHelper">
				<signature>System.Reflection.Emit.SignatureHelper.GetTypeSigToken(System.Reflection.Module;System.Type):System.Reflection.Emit.SignatureHelper</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="IsSimpleType" uniqueID="IsSimpleType(int):bool">
				<signature>System.Reflection.Emit.SignatureHelper.IsSimpleType(int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddArgument" uniqueID="AddArgument(System.Type):void">
				<signature>System.Reflection.Emit.SignatureHelper.AddArgument(System.Type):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddArgument" uniqueID="AddArgument(System.Type;System.Type[];System.Type[]):void">
				<signature>System.Reflection.Emit.SignatureHelper.AddArgument(System.Type;System.Type[];System.Type[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddArgument" uniqueID="AddArgument(System.Type;bool):void">
				<signature>System.Reflection.Emit.SignatureHelper.AddArgument(System.Type;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddArguments" uniqueID="AddArguments(System.Type[];System.Type[][];System.Type[][]):void">
				<signature>System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[];System.Type[][];System.Type[][]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="AddData" uniqueID="AddData(int):void">
				<signature>System.Reflection.Emit.SignatureHelper.AddData(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="AddData" uniqueID="AddData(unsigned int):void">
				<signature>System.Reflection.Emit.SignatureHelper.AddData(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="AddData" uniqueID="AddData(unsigned long):void">
				<signature>System.Reflection.Emit.SignatureHelper.AddData(unsigned long):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="AddElementType" uniqueID="AddElementType(int):void">
				<signature>System.Reflection.Emit.SignatureHelper.AddElementType(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="AddOneArgTypeHelper" uniqueID="AddOneArgTypeHelper(System.Type):void">
				<signature>System.Reflection.Emit.SignatureHelper.AddOneArgTypeHelper(System.Type):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="AddOneArgTypeHelper" uniqueID="AddOneArgTypeHelper(System.Type;System.Type[];System.Type[]):void">
				<signature>System.Reflection.Emit.SignatureHelper.AddOneArgTypeHelper(System.Type;System.Type[];System.Type[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="AddOneArgTypeHelper" uniqueID="AddOneArgTypeHelper(System.Type;bool):void">
				<signature>System.Reflection.Emit.SignatureHelper.AddOneArgTypeHelper(System.Type;bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="AddOneArgTypeHelperWorker" uniqueID="AddOneArgTypeHelperWorker(System.Type;bool):void">
				<signature>System.Reflection.Emit.SignatureHelper.AddOneArgTypeHelperWorker(System.Type;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddSentinel" uniqueID="AddSentinel():void">
				<signature>System.Reflection.Emit.SignatureHelper.AddSentinel():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="AddToken" uniqueID="AddToken(int):void">
				<signature>System.Reflection.Emit.SignatureHelper.AddToken(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Reflection.Emit.SignatureHelper.Equals(object):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ExpandArray" uniqueID="ExpandArray(byte[]):byte[]">
				<signature>System.Reflection.Emit.SignatureHelper.ExpandArray(byte[]):byte[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ExpandArray" uniqueID="ExpandArray(byte[];int):byte[]">
				<signature>System.Reflection.Emit.SignatureHelper.ExpandArray(byte[];int):byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Reflection.Emit.SignatureHelper.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSignature" uniqueID="GetSignature():byte[]">
				<signature>System.Reflection.Emit.SignatureHelper.GetSignature():byte[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetSignature" uniqueID="GetSignature(bool):byte[]">
				<signature>System.Reflection.Emit.SignatureHelper.GetSignature(bool):byte[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="IncrementArgCounts" uniqueID="IncrementArgCounts():void">
				<signature>System.Reflection.Emit.SignatureHelper.IncrementArgCounts():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Init" uniqueID="Init(System.Reflection.Module):void">
				<signature>System.Reflection.Emit.SignatureHelper.Init(System.Reflection.Module):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Init" uniqueID="Init(System.Reflection.Module;int):void">
				<signature>System.Reflection.Emit.SignatureHelper.Init(System.Reflection.Module;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Init" uniqueID="Init(System.Reflection.Module;int;int):void">
				<signature>System.Reflection.Emit.SignatureHelper.Init(System.Reflection.Module;int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="InternalAddRuntimeType" uniqueID="InternalAddRuntimeType(System.Type):void">
				<signature>System.Reflection.Emit.SignatureHelper.InternalAddRuntimeType(System.Type):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="InternalAddTypeToken" uniqueID="InternalAddTypeToken(System.Reflection.Emit.TypeToken;int):void">
				<signature>System.Reflection.Emit.SignatureHelper.InternalAddTypeToken(System.Reflection.Emit.TypeToken;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalGetSignature" uniqueID="InternalGetSignature(int):byte[]">
				<signature>System.Reflection.Emit.SignatureHelper.InternalGetSignature(int):byte[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalGetSignatureArray" uniqueID="InternalGetSignatureArray():byte[]">
				<signature>System.Reflection.Emit.SignatureHelper.InternalGetSignatureArray():byte[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SetNumberOfSignatureElements" uniqueID="SetNumberOfSignatureElements(bool):void">
				<signature>System.Reflection.Emit.SignatureHelper.SetNumberOfSignatureElements(bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SignatureHelper" uniqueID="SignatureHelper(System.Reflection.Module;System.Type):void">
				<signature>System.Reflection.Emit.SignatureHelper.SignatureHelper(System.Reflection.Module;System.Type):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SignatureHelper" uniqueID="SignatureHelper(System.Reflection.Module;int):void">
				<signature>System.Reflection.Emit.SignatureHelper.SignatureHelper(System.Reflection.Module;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SignatureHelper" uniqueID="SignatureHelper(System.Reflection.Module;int;System.Type;System.Type[];System.Type[]):void">
				<signature>System.Reflection.Emit.SignatureHelper.SignatureHelper(System.Reflection.Module;int;System.Type;System.Type[];System.Type[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SignatureHelper" uniqueID="SignatureHelper(System.Reflection.Module;int;int;System.Type;System.Type[];System.Type[]):void">
				<signature>System.Reflection.Emit.SignatureHelper.SignatureHelper(System.Reflection.Module;int;int;System.Type;System.Type[];System.Type[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._SignatureHelper.GetIDsOfNames" uniqueID="System.Runtime.InteropServices._SignatureHelper.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.SignatureHelper.System.Runtime.InteropServices._SignatureHelper.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._SignatureHelper.GetTypeInfo" uniqueID="System.Runtime.InteropServices._SignatureHelper.GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.SignatureHelper.System.Runtime.InteropServices._SignatureHelper.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._SignatureHelper.GetTypeInfoCount" uniqueID="System.Runtime.InteropServices._SignatureHelper.GetTypeInfoCount(unsigned int):void">
				<signature>System.Reflection.Emit.SignatureHelper.System.Runtime.InteropServices._SignatureHelper.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._SignatureHelper.Invoke" uniqueID="System.Runtime.InteropServices._SignatureHelper.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Reflection.Emit.SignatureHelper.System.Runtime.InteropServices._SignatureHelper.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Reflection.Emit.SignatureHelper.ToString():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ArgumentCount" uniqueID="get_ArgumentCount():int">
				<signature>System.Reflection.Emit.SignatureHelper.get_ArgumentCount():int</signature>
			</method>
		</class>
		<class name="GenericTypeParameterBuilder" uniqueID="System.Reflection.Emit.GenericTypeParameterBuilder">
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.Equals(object):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GenericTypeParameterBuilder" uniqueID="GenericTypeParameterBuilder(System.Reflection.Emit.TypeBuilder):void">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.GenericTypeParameterBuilder(System.Reflection.Emit.TypeBuilder):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetAttributeFlagsImpl" uniqueID="GetAttributeFlagsImpl():System.Reflection.TypeAttributes">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.GetAttributeFlagsImpl():System.Reflection.TypeAttributes</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetConstructorImpl" uniqueID="GetConstructorImpl(System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.ConstructorInfo">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructorImpl(System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.ConstructorInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetConstructors" uniqueID="GetConstructors(System.Reflection.BindingFlags):System.Reflection.ConstructorInfo[]">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags):System.Reflection.ConstructorInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetElementType" uniqueID="GetElementType():System.Type">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEvent" uniqueID="GetEvent(string;System.Reflection.BindingFlags):System.Reflection.EventInfo">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(string;System.Reflection.BindingFlags):System.Reflection.EventInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEvents" uniqueID="GetEvents():System.Reflection.EventInfo[]">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents():System.Reflection.EventInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEvents" uniqueID="GetEvents(System.Reflection.BindingFlags):System.Reflection.EventInfo[]">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags):System.Reflection.EventInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetField" uniqueID="GetField(string;System.Reflection.BindingFlags):System.Reflection.FieldInfo">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.GetField(string;System.Reflection.BindingFlags):System.Reflection.FieldInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFields" uniqueID="GetFields(System.Reflection.BindingFlags):System.Reflection.FieldInfo[]">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags):System.Reflection.FieldInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetGenericArguments" uniqueID="GetGenericArguments():System.Type[]">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetGenericTypeDefinition" uniqueID="GetGenericTypeDefinition():System.Type">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetInterface" uniqueID="GetInterface(string;bool):System.Type">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(string;bool):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetInterfaceMap" uniqueID="GetInterfaceMap(System.Type):System.Reflection.InterfaceMapping">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type):System.Reflection.InterfaceMapping</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetInterfaces" uniqueID="GetInterfaces():System.Type[]">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMember" uniqueID="GetMember(string;System.Reflection.MemberTypes;System.Reflection.BindingFlags):System.Reflection.MemberInfo[]">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(string;System.Reflection.MemberTypes;System.Reflection.BindingFlags):System.Reflection.MemberInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMembers" uniqueID="GetMembers(System.Reflection.BindingFlags):System.Reflection.MemberInfo[]">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags):System.Reflection.MemberInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMethodImpl" uniqueID="GetMethodImpl(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.GetMethodImpl(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethods" uniqueID="GetMethods(System.Reflection.BindingFlags):System.Reflection.MethodInfo[]">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags):System.Reflection.MethodInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetNestedType" uniqueID="GetNestedType(string;System.Reflection.BindingFlags):System.Type">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(string;System.Reflection.BindingFlags):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetNestedTypes" uniqueID="GetNestedTypes(System.Reflection.BindingFlags):System.Type[]">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags):System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetProperties" uniqueID="GetProperties(System.Reflection.BindingFlags):System.Reflection.PropertyInfo[]">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags):System.Reflection.PropertyInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetPropertyImpl" uniqueID="GetPropertyImpl(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Type;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.PropertyInfo">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.GetPropertyImpl(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Type;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.PropertyInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="HasElementTypeImpl" uniqueID="HasElementTypeImpl():bool">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.HasElementTypeImpl():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InvokeMember" uniqueID="InvokeMember(string;System.Reflection.BindingFlags;System.Reflection.Binder;object;object[];System.Reflection.ParameterModifier[];System.Globalization.CultureInfo;string[]):object">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(string;System.Reflection.BindingFlags;System.Reflection.Binder;object;object[];System.Reflection.ParameterModifier[];System.Globalization.CultureInfo;string[]):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsArrayImpl" uniqueID="IsArrayImpl():bool">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.IsArrayImpl():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsAssignableFrom" uniqueID="IsAssignableFrom(System.Type):bool">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsByRefImpl" uniqueID="IsByRefImpl():bool">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefImpl():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsCOMObjectImpl" uniqueID="IsCOMObjectImpl():bool">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.IsCOMObjectImpl():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type;bool):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsPointerImpl" uniqueID="IsPointerImpl():bool">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.IsPointerImpl():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsPrimitiveImpl" uniqueID="IsPrimitiveImpl():bool">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.IsPrimitiveImpl():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsSubclassOf" uniqueID="IsSubclassOf(System.Type):bool">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsValueTypeImpl" uniqueID="IsValueTypeImpl():bool">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.IsValueTypeImpl():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakeArrayType" uniqueID="MakeArrayType():System.Type">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakeArrayType" uniqueID="MakeArrayType(int):System.Type">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(int):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakeByRefType" uniqueID="MakeByRefType():System.Type">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakeGenericType" uniqueID="MakeGenericType(System.Type[]):System.Type">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[]):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakePointerType" uniqueID="MakePointerType():System.Type">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetBaseTypeConstraint" uniqueID="SetBaseTypeConstraint(System.Type):void">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetCustomAttribute" uniqueID="SetCustomAttribute(System.Reflection.ConstructorInfo;byte[]):void">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo;byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetCustomAttribute" uniqueID="SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder):void">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetGenericParameterAttributes" uniqueID="SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes):void">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetInterfaceConstraints" uniqueID="SetInterfaceConstraints(System.Type[]):void">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Assembly" uniqueID="get_Assembly():System.Reflection.Assembly">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.get_Assembly():System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AssemblyQualifiedName" uniqueID="get_AssemblyQualifiedName():string">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.get_AssemblyQualifiedName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_BaseType" uniqueID="get_BaseType():System.Type">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.get_BaseType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ContainsGenericParameters" uniqueID="get_ContainsGenericParameters():bool">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.get_ContainsGenericParameters():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringMethod" uniqueID="get_DeclaringMethod():System.Reflection.MethodBase">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.get_DeclaringMethod():System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringType" uniqueID="get_DeclaringType():System.Type">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.get_DeclaringType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FullName" uniqueID="get_FullName():string">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.get_FullName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_GUID" uniqueID="get_GUID():System.Guid">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.get_GUID():System.Guid</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_GenericParameterPosition" uniqueID="get_GenericParameterPosition():int">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.get_GenericParameterPosition():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsGenericParameter" uniqueID="get_IsGenericParameter():bool">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.get_IsGenericParameter():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsGenericType" uniqueID="get_IsGenericType():bool">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.get_IsGenericType():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsGenericTypeDefinition" uniqueID="get_IsGenericTypeDefinition():bool">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.get_IsGenericTypeDefinition():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_MetadataTokenInternal" uniqueID="get_MetadataTokenInternal():int">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.get_MetadataTokenInternal():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Module" uniqueID="get_Module():System.Reflection.Module">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.get_Module():System.Reflection.Module</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Namespace" uniqueID="get_Namespace():string">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.get_Namespace():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReflectedType" uniqueID="get_ReflectedType():System.Type">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.get_ReflectedType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TypeHandle" uniqueID="get_TypeHandle():System.RuntimeTypeHandle">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.get_TypeHandle():System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_UnderlyingSystemType" uniqueID="get_UnderlyingSystemType():System.Type">
				<signature>System.Reflection.Emit.GenericTypeParameterBuilder.get_UnderlyingSystemType():System.Type</signature>
			</method>
		</class>
		<class name="ILGenerator" uniqueID="System.Reflection.Emit.ILGenerator">
			<method accessibility="Protected" methodKind="Static" name="CalculateNumberOfExceptions" uniqueID="CalculateNumberOfExceptions(System.Reflection.Emit.__ExceptionInfo[]):int">
				<signature>System.Reflection.Emit.ILGenerator.CalculateNumberOfExceptions(System.Reflection.Emit.__ExceptionInfo[]):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="EnlargeArray" uniqueID="EnlargeArray(System.Reflection.Emit.__ExceptionInfo[]):System.Reflection.Emit.__ExceptionInfo[]">
				<signature>System.Reflection.Emit.ILGenerator.EnlargeArray(System.Reflection.Emit.__ExceptionInfo[]):System.Reflection.Emit.__ExceptionInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="EnlargeArray" uniqueID="EnlargeArray(System.Reflection.Emit.__FixupData[]):System.Reflection.Emit.__FixupData[]">
				<signature>System.Reflection.Emit.ILGenerator.EnlargeArray(System.Reflection.Emit.__FixupData[]):System.Reflection.Emit.__FixupData[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="EnlargeArray" uniqueID="EnlargeArray(System.Type[]):System.Type[]">
				<signature>System.Reflection.Emit.ILGenerator.EnlargeArray(System.Type[]):System.Type[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="EnlargeArray" uniqueID="EnlargeArray(byte[]):byte[]">
				<signature>System.Reflection.Emit.ILGenerator.EnlargeArray(byte[]):byte[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="EnlargeArray" uniqueID="EnlargeArray(byte[];int):byte[]">
				<signature>System.Reflection.Emit.ILGenerator.EnlargeArray(byte[];int):byte[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="EnlargeArray" uniqueID="EnlargeArray(int[]):int[]">
				<signature>System.Reflection.Emit.ILGenerator.EnlargeArray(int[]):int[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AddFixup" uniqueID="AddFixup(System.Reflection.Emit.Label;int;int):void">
				<signature>System.Reflection.Emit.ILGenerator.AddFixup(System.Reflection.Emit.Label;int;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="BakeByteArray" uniqueID="BakeByteArray():byte[]">
				<signature>System.Reflection.Emit.ILGenerator.BakeByteArray():byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BeginCatchBlock" uniqueID="BeginCatchBlock(System.Type):void">
				<signature>System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BeginExceptFilterBlock" uniqueID="BeginExceptFilterBlock():void">
				<signature>System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BeginExceptionBlock" uniqueID="BeginExceptionBlock():System.Reflection.Emit.Label">
				<signature>System.Reflection.Emit.ILGenerator.BeginExceptionBlock():System.Reflection.Emit.Label</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BeginFaultBlock" uniqueID="BeginFaultBlock():void">
				<signature>System.Reflection.Emit.ILGenerator.BeginFaultBlock():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BeginFinallyBlock" uniqueID="BeginFinallyBlock():void">
				<signature>System.Reflection.Emit.ILGenerator.BeginFinallyBlock():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="BeginScope" uniqueID="BeginScope():void">
				<signature>System.Reflection.Emit.ILGenerator.BeginScope():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DeclareLocal" uniqueID="DeclareLocal(System.Type):System.Reflection.Emit.LocalBuilder">
				<signature>System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type):System.Reflection.Emit.LocalBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DeclareLocal" uniqueID="DeclareLocal(System.Type;bool):System.Reflection.Emit.LocalBuilder">
				<signature>System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type;bool):System.Reflection.Emit.LocalBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineLabel" uniqueID="DefineLabel():System.Reflection.Emit.Label">
				<signature>System.Reflection.Emit.ILGenerator.DefineLabel():System.Reflection.Emit.Label</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Emit" uniqueID="Emit(System.Reflection.Emit.OpCode):void">
				<signature>System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Emit" uniqueID="Emit(System.Reflection.Emit.OpCode;System.Reflection.ConstructorInfo):void">
				<signature>System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode;System.Reflection.ConstructorInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Emit" uniqueID="Emit(System.Reflection.Emit.OpCode;System.Reflection.Emit.Label):void">
				<signature>System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode;System.Reflection.Emit.Label):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Emit" uniqueID="Emit(System.Reflection.Emit.OpCode;System.Reflection.Emit.Label[]):void">
				<signature>System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode;System.Reflection.Emit.Label[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Emit" uniqueID="Emit(System.Reflection.Emit.OpCode;System.Reflection.Emit.LocalBuilder):void">
				<signature>System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode;System.Reflection.Emit.LocalBuilder):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Emit" uniqueID="Emit(System.Reflection.Emit.OpCode;System.Reflection.Emit.SignatureHelper):void">
				<signature>System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode;System.Reflection.Emit.SignatureHelper):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Emit" uniqueID="Emit(System.Reflection.Emit.OpCode;System.Reflection.FieldInfo):void">
				<signature>System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode;System.Reflection.FieldInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Emit" uniqueID="Emit(System.Reflection.Emit.OpCode;System.Reflection.MethodInfo):void">
				<signature>System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode;System.Reflection.MethodInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Emit" uniqueID="Emit(System.Reflection.Emit.OpCode;System.Type):void">
				<signature>System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode;System.Type):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Emit" uniqueID="Emit(System.Reflection.Emit.OpCode;byte):void">
				<signature>System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode;byte):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Emit" uniqueID="Emit(System.Reflection.Emit.OpCode;double):void">
				<signature>System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode;double):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Emit" uniqueID="Emit(System.Reflection.Emit.OpCode;float):void">
				<signature>System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode;float):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Emit" uniqueID="Emit(System.Reflection.Emit.OpCode;int):void">
				<signature>System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Emit" uniqueID="Emit(System.Reflection.Emit.OpCode;long):void">
				<signature>System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode;long):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Emit" uniqueID="Emit(System.Reflection.Emit.OpCode;sbyte):void">
				<signature>System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode;sbyte):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Emit" uniqueID="Emit(System.Reflection.Emit.OpCode;short):void">
				<signature>System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode;short):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Emit" uniqueID="Emit(System.Reflection.Emit.OpCode;string):void">
				<signature>System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EmitCall" uniqueID="EmitCall(System.Reflection.Emit.OpCode;System.Reflection.MethodInfo;System.Type[]):void">
				<signature>System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode;System.Reflection.MethodInfo;System.Type[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EmitCalli" uniqueID="EmitCalli(System.Reflection.Emit.OpCode;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[]):void">
				<signature>System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EmitCalli" uniqueID="EmitCalli(System.Reflection.Emit.OpCode;System.Runtime.InteropServices.CallingConvention;System.Type;System.Type[]):void">
				<signature>System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode;System.Runtime.InteropServices.CallingConvention;System.Type;System.Type[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EmitWriteLine" uniqueID="EmitWriteLine(System.Reflection.Emit.LocalBuilder):void">
				<signature>System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EmitWriteLine" uniqueID="EmitWriteLine(System.Reflection.FieldInfo):void">
				<signature>System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EmitWriteLine" uniqueID="EmitWriteLine(string):void">
				<signature>System.Reflection.Emit.ILGenerator.EmitWriteLine(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndExceptionBlock" uniqueID="EndExceptionBlock():void">
				<signature>System.Reflection.Emit.ILGenerator.EndExceptionBlock():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndScope" uniqueID="EndScope():void">
				<signature>System.Reflection.Emit.ILGenerator.EndScope():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EnsureCapacity" uniqueID="EnsureCapacity(int):void">
				<signature>System.Reflection.Emit.ILGenerator.EnsureCapacity(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetExceptions" uniqueID="GetExceptions():System.Reflection.Emit.__ExceptionInfo[]">
				<signature>System.Reflection.Emit.ILGenerator.GetExceptions():System.Reflection.Emit.__ExceptionInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetLabelPos" uniqueID="GetLabelPos(System.Reflection.Emit.Label):int">
				<signature>System.Reflection.Emit.ILGenerator.GetLabelPos(System.Reflection.Emit.Label):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMaxStackSize" uniqueID="GetMaxStackSize():int">
				<signature>System.Reflection.Emit.ILGenerator.GetMaxStackSize():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMemberRefSignature" uniqueID="GetMemberRefSignature(System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[]):System.Reflection.Emit.SignatureHelper">
				<signature>System.Reflection.Emit.ILGenerator.GetMemberRefSignature(System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[]):System.Reflection.Emit.SignatureHelper</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMemberRefSignature" uniqueID="GetMemberRefSignature(System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];int):System.Reflection.Emit.SignatureHelper">
				<signature>System.Reflection.Emit.ILGenerator.GetMemberRefSignature(System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];int):System.Reflection.Emit.SignatureHelper</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMemberRefToken" uniqueID="GetMemberRefToken(System.Reflection.MethodBase;System.Type[]):int">
				<signature>System.Reflection.Emit.ILGenerator.GetMemberRefToken(System.Reflection.MethodBase;System.Type[]):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMethodToken" uniqueID="GetMethodToken(System.Reflection.MethodBase;System.Type[]):int">
				<signature>System.Reflection.Emit.ILGenerator.GetMethodToken(System.Reflection.MethodBase;System.Type[]):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetRVAFixups" uniqueID="GetRVAFixups():int[]">
				<signature>System.Reflection.Emit.ILGenerator.GetRVAFixups():int[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetTokenFixups" uniqueID="GetTokenFixups():int[]">
				<signature>System.Reflection.Emit.ILGenerator.GetTokenFixups():int[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ILGenerator" uniqueID="ILGenerator(System.Reflection.MethodInfo):void">
				<signature>System.Reflection.Emit.ILGenerator.ILGenerator(System.Reflection.MethodInfo):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ILGenerator" uniqueID="ILGenerator(System.Reflection.MethodInfo;int):void">
				<signature>System.Reflection.Emit.ILGenerator.ILGenerator(System.Reflection.MethodInfo;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ILGenerator" uniqueID="ILGenerator(int):void">
				<signature>System.Reflection.Emit.ILGenerator.ILGenerator(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalEmit" uniqueID="InternalEmit(System.Reflection.Emit.OpCode):void">
				<signature>System.Reflection.Emit.ILGenerator.InternalEmit(System.Reflection.Emit.OpCode):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MarkLabel" uniqueID="MarkLabel(System.Reflection.Emit.Label):void">
				<signature>System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MarkSequencePoint" uniqueID="MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter;int;int;int;int):void">
				<signature>System.Reflection.Emit.ILGenerator.MarkSequencePoint(System.Diagnostics.SymbolStore.ISymbolDocumentWriter;int;int;int;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="PutInteger4" uniqueID="PutInteger4(int;int;byte[]):int">
				<signature>System.Reflection.Emit.ILGenerator.PutInteger4(int;int;byte[]):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="RecordTokenFixup" uniqueID="RecordTokenFixup():void">
				<signature>System.Reflection.Emit.ILGenerator.RecordTokenFixup():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SortExceptions" uniqueID="SortExceptions(System.Reflection.Emit.__ExceptionInfo[]):void">
				<signature>System.Reflection.Emit.ILGenerator.SortExceptions(System.Reflection.Emit.__ExceptionInfo[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ILGenerator.GetIDsOfNames" uniqueID="System.Runtime.InteropServices._ILGenerator.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.ILGenerator.System.Runtime.InteropServices._ILGenerator.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ILGenerator.GetTypeInfo" uniqueID="System.Runtime.InteropServices._ILGenerator.GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.ILGenerator.System.Runtime.InteropServices._ILGenerator.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount" uniqueID="System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount(unsigned int):void">
				<signature>System.Reflection.Emit.ILGenerator.System.Runtime.InteropServices._ILGenerator.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ILGenerator.Invoke" uniqueID="System.Runtime.InteropServices._ILGenerator.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Reflection.Emit.ILGenerator.System.Runtime.InteropServices._ILGenerator.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ThrowException" uniqueID="ThrowException(System.Type):void">
				<signature>System.Reflection.Emit.ILGenerator.ThrowException(System.Type):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="UpdateStackSize" uniqueID="UpdateStackSize(System.Reflection.Emit.OpCode;int):void">
				<signature>System.Reflection.Emit.ILGenerator.UpdateStackSize(System.Reflection.Emit.OpCode;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="UsingNamespace" uniqueID="UsingNamespace(string):void">
				<signature>System.Reflection.Emit.ILGenerator.UsingNamespace(string):void</signature>
			</method>
		</class>
		<class name="MethodBuilderInstantiation" uniqueID="System.Reflection.Emit.MethodBuilderInstantiation">
			<method accessibility="Protected" methodKind="Static" name="MakeGenericMethod" uniqueID="MakeGenericMethod(System.Reflection.MethodInfo;System.Type[]):System.Reflection.MethodInfo">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.MakeGenericMethod(System.Reflection.MethodInfo;System.Type[]):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetBaseDefinition" uniqueID="GetBaseDefinition():System.Reflection.MethodInfo">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.GetBaseDefinition():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetGenericArguments" uniqueID="GetGenericArguments():System.Type[]">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.GetGenericArguments():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetGenericMethodDefinition" uniqueID="GetGenericMethodDefinition():System.Reflection.MethodInfo">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.GetGenericMethodDefinition():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethodImplementationFlags" uniqueID="GetMethodImplementationFlags():System.Reflection.MethodImplAttributes">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.GetMethodImplementationFlags():System.Reflection.MethodImplAttributes</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetParameterTypes" uniqueID="GetParameterTypes():System.Type[]">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.GetParameterTypes():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetParameters" uniqueID="GetParameters():System.Reflection.ParameterInfo[]">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.GetParameters():System.Reflection.ParameterInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetReturnType" uniqueID="GetReturnType():System.Type">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.GetReturnType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType():System.Type">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.GetType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.Invoke(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.IsDefined(System.Type;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakeGenericMethod" uniqueID="MakeGenericMethod(System.Type[]):System.Reflection.MethodInfo">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.MakeGenericMethod(System.Type[]):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MethodBuilderInstantiation" uniqueID="MethodBuilderInstantiation(System.Reflection.MethodInfo;System.Type[]):void">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.MethodBuilderInstantiation(System.Reflection.MethodInfo;System.Type[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Attributes" uniqueID="get_Attributes():System.Reflection.MethodAttributes">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.get_Attributes():System.Reflection.MethodAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CallingConvention" uniqueID="get_CallingConvention():System.Reflection.CallingConventions">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.get_CallingConvention():System.Reflection.CallingConventions</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ContainsGenericParameters" uniqueID="get_ContainsGenericParameters():bool">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.get_ContainsGenericParameters():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringType" uniqueID="get_DeclaringType():System.Type">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.get_DeclaringType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsGenericMethod" uniqueID="get_IsGenericMethod():bool">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.get_IsGenericMethod():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsGenericMethodDefinition" uniqueID="get_IsGenericMethodDefinition():bool">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.get_IsGenericMethodDefinition():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MemberType" uniqueID="get_MemberType():System.Reflection.MemberTypes">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.get_MemberType():System.Reflection.MemberTypes</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_MetadataTokenInternal" uniqueID="get_MetadataTokenInternal():int">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.get_MetadataTokenInternal():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MethodHandle" uniqueID="get_MethodHandle():System.RuntimeMethodHandle">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.get_MethodHandle():System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Module" uniqueID="get_Module():System.Reflection.Module">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.get_Module():System.Reflection.Module</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReflectedType" uniqueID="get_ReflectedType():System.Type">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.get_ReflectedType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReturnParameter" uniqueID="get_ReturnParameter():System.Reflection.ParameterInfo">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.get_ReturnParameter():System.Reflection.ParameterInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReturnTypeCustomAttributes" uniqueID="get_ReturnTypeCustomAttributes():System.Reflection.ICustomAttributeProvider">
				<signature>System.Reflection.Emit.MethodBuilderInstantiation.get_ReturnTypeCustomAttributes():System.Reflection.ICustomAttributeProvider</signature>
			</method>
		</class>
		<class name="OpCode" uniqueID="System.Reflection.Emit.OpCode">
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.Reflection.Emit.OpCode;System.Reflection.Emit.OpCode):bool">
				<signature>System.Reflection.Emit.OpCode.op_Equality(System.Reflection.Emit.OpCode;System.Reflection.Emit.OpCode):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.Reflection.Emit.OpCode;System.Reflection.Emit.OpCode):bool">
				<signature>System.Reflection.Emit.OpCode.op_Inequality(System.Reflection.Emit.OpCode;System.Reflection.Emit.OpCode):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EndsUncondJmpBlk" uniqueID="EndsUncondJmpBlk():bool">
				<signature>System.Reflection.Emit.OpCode.EndsUncondJmpBlk():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.Reflection.Emit.OpCode):bool">
				<signature>System.Reflection.Emit.OpCode.Equals(System.Reflection.Emit.OpCode):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Reflection.Emit.OpCode.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Reflection.Emit.OpCode.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="OpCode" uniqueID="OpCode(string;System.Reflection.Emit.StackBehaviour;System.Reflection.Emit.StackBehaviour;System.Reflection.Emit.OperandType;System.Reflection.Emit.OpCodeType;int;byte;byte;System.Reflection.Emit.FlowControl;bool;int):void">
				<signature>System.Reflection.Emit.OpCode.OpCode(string;System.Reflection.Emit.StackBehaviour;System.Reflection.Emit.StackBehaviour;System.Reflection.Emit.OperandType;System.Reflection.Emit.OpCodeType;int;byte;byte;System.Reflection.Emit.FlowControl;bool;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="StackChange" uniqueID="StackChange():int">
				<signature>System.Reflection.Emit.OpCode.StackChange():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Reflection.Emit.OpCode.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FlowControl" uniqueID="get_FlowControl():System.Reflection.Emit.FlowControl">
				<signature>System.Reflection.Emit.OpCode.get_FlowControl():System.Reflection.Emit.FlowControl</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Reflection.Emit.OpCode.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_OpCodeType" uniqueID="get_OpCodeType():System.Reflection.Emit.OpCodeType">
				<signature>System.Reflection.Emit.OpCode.get_OpCodeType():System.Reflection.Emit.OpCodeType</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_OperandType" uniqueID="get_OperandType():System.Reflection.Emit.OperandType">
				<signature>System.Reflection.Emit.OpCode.get_OperandType():System.Reflection.Emit.OperandType</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Size" uniqueID="get_Size():int">
				<signature>System.Reflection.Emit.OpCode.get_Size():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_StackBehaviourPop" uniqueID="get_StackBehaviourPop():System.Reflection.Emit.StackBehaviour">
				<signature>System.Reflection.Emit.OpCode.get_StackBehaviourPop():System.Reflection.Emit.StackBehaviour</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_StackBehaviourPush" uniqueID="get_StackBehaviourPush():System.Reflection.Emit.StackBehaviour">
				<signature>System.Reflection.Emit.OpCode.get_StackBehaviourPush():System.Reflection.Emit.StackBehaviour</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Value" uniqueID="get_Value():short">
				<signature>System.Reflection.Emit.OpCode.get_Value():short</signature>
			</method>
		</class>
		<class name="ScopeTree" uniqueID="System.Reflection.Emit.ScopeTree">
			<method accessibility="Protected" methodKind="Member" name="AddLocalSymInfoToCurrentScope" uniqueID="AddLocalSymInfoToCurrentScope(string;byte[];int;int;int):void">
				<signature>System.Reflection.Emit.ScopeTree.AddLocalSymInfoToCurrentScope(string;byte[];int;int;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AddScopeInfo" uniqueID="AddScopeInfo(System.Reflection.Emit.ScopeAction;int):void">
				<signature>System.Reflection.Emit.ScopeTree.AddScopeInfo(System.Reflection.Emit.ScopeAction;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AddUsingNamespaceToCurrentScope" uniqueID="AddUsingNamespaceToCurrentScope(string):void">
				<signature>System.Reflection.Emit.ScopeTree.AddUsingNamespaceToCurrentScope(string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EmitScopeTree" uniqueID="EmitScopeTree(System.Diagnostics.SymbolStore.ISymbolWriter):void">
				<signature>System.Reflection.Emit.ScopeTree.EmitScopeTree(System.Diagnostics.SymbolStore.ISymbolWriter):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EnsureCapacity" uniqueID="EnsureCapacity():void">
				<signature>System.Reflection.Emit.ScopeTree.EnsureCapacity():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetCurrentActiveScopeIndex" uniqueID="GetCurrentActiveScopeIndex():int">
				<signature>System.Reflection.Emit.ScopeTree.GetCurrentActiveScopeIndex():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ScopeTree" uniqueID="ScopeTree():void">
				<signature>System.Reflection.Emit.ScopeTree.ScopeTree():void</signature>
			</method>
		</class>
		<class name="SignatureToken" uniqueID="System.Reflection.Emit.SignatureToken">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Reflection.Emit.SignatureToken.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.Reflection.Emit.SignatureToken;System.Reflection.Emit.SignatureToken):bool">
				<signature>System.Reflection.Emit.SignatureToken.op_Equality(System.Reflection.Emit.SignatureToken;System.Reflection.Emit.SignatureToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.Reflection.Emit.SignatureToken;System.Reflection.Emit.SignatureToken):bool">
				<signature>System.Reflection.Emit.SignatureToken.op_Inequality(System.Reflection.Emit.SignatureToken;System.Reflection.Emit.SignatureToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.Reflection.Emit.SignatureToken):bool">
				<signature>System.Reflection.Emit.SignatureToken.Equals(System.Reflection.Emit.SignatureToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Reflection.Emit.SignatureToken.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Reflection.Emit.SignatureToken.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SignatureToken" uniqueID="SignatureToken(int;System.Reflection.Emit.ModuleBuilder):void">
				<signature>System.Reflection.Emit.SignatureToken.SignatureToken(int;System.Reflection.Emit.ModuleBuilder):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Token" uniqueID="get_Token():int">
				<signature>System.Reflection.Emit.SignatureToken.get_Token():int</signature>
			</method>
		</class>
		<class name="ConstructorBuilder" uniqueID="System.Reflection.Emit.ConstructorBuilder">
			<method accessibility="Public" methodKind="Member" name="AddDeclarativeSecurity" uniqueID="AddDeclarativeSecurity(System.Security.Permissions.SecurityAction;System.Security.PermissionSet):void">
				<signature>System.Reflection.Emit.ConstructorBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction;System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ConstructorBuilder" uniqueID="ConstructorBuilder():void">
				<signature>System.Reflection.Emit.ConstructorBuilder.ConstructorBuilder():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ConstructorBuilder" uniqueID="ConstructorBuilder(string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type[];System.Reflection.Module;System.Reflection.Emit.TypeBuilder):void">
				<signature>System.Reflection.Emit.ConstructorBuilder.ConstructorBuilder(string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type[];System.Reflection.Module;System.Reflection.Emit.TypeBuilder):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ConstructorBuilder" uniqueID="ConstructorBuilder(string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type[];System.Type[][];System.Type[][];System.Reflection.Module;System.Reflection.Emit.TypeBuilder):void">
				<signature>System.Reflection.Emit.ConstructorBuilder.ConstructorBuilder(string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type[];System.Type[][];System.Type[][];System.Reflection.Module;System.Reflection.Emit.TypeBuilder):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineParameter" uniqueID="DefineParameter(int;System.Reflection.ParameterAttributes;string):System.Reflection.Emit.ParameterBuilder">
				<signature>System.Reflection.Emit.ConstructorBuilder.DefineParameter(int;System.Reflection.ParameterAttributes;string):System.Reflection.Emit.ParameterBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetILGenerator" uniqueID="GetILGenerator():System.Reflection.Emit.ILGenerator">
				<signature>System.Reflection.Emit.ConstructorBuilder.GetILGenerator():System.Reflection.Emit.ILGenerator</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetILGenerator" uniqueID="GetILGenerator(int):System.Reflection.Emit.ILGenerator">
				<signature>System.Reflection.Emit.ConstructorBuilder.GetILGenerator(int):System.Reflection.Emit.ILGenerator</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethodImplementationFlags" uniqueID="GetMethodImplementationFlags():System.Reflection.MethodImplAttributes">
				<signature>System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags():System.Reflection.MethodImplAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetModule" uniqueID="GetModule():System.Reflection.Module">
				<signature>System.Reflection.Emit.ConstructorBuilder.GetModule():System.Reflection.Module</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetParameterTypes" uniqueID="GetParameterTypes():System.Type[]">
				<signature>System.Reflection.Emit.ConstructorBuilder.GetParameterTypes():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetParameters" uniqueID="GetParameters():System.Reflection.ParameterInfo[]">
				<signature>System.Reflection.Emit.ConstructorBuilder.GetParameters():System.Reflection.ParameterInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetReturnType" uniqueID="GetReturnType():System.Type">
				<signature>System.Reflection.Emit.ConstructorBuilder.GetReturnType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetToken" uniqueID="GetToken():System.Reflection.Emit.MethodToken">
				<signature>System.Reflection.Emit.ConstructorBuilder.GetToken():System.Reflection.Emit.MethodToken</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object">
				<signature>System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object">
				<signature>System.Reflection.Emit.ConstructorBuilder.Invoke(object;System.Reflection.BindingFlags;System.Reflection.Binder;object[];System.Globalization.CultureInfo):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetCustomAttribute" uniqueID="SetCustomAttribute(System.Reflection.ConstructorInfo;byte[]):void">
				<signature>System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo;byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetCustomAttribute" uniqueID="SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder):void">
				<signature>System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetImplementationFlags" uniqueID="SetImplementationFlags(System.Reflection.MethodImplAttributes):void">
				<signature>System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetSymCustomAttribute" uniqueID="SetSymCustomAttribute(string;byte[]):void">
				<signature>System.Reflection.Emit.ConstructorBuilder.SetSymCustomAttribute(string;byte[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ConstructorBuilder.GetIDsOfNames" uniqueID="System.Runtime.InteropServices._ConstructorBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.ConstructorBuilder.System.Runtime.InteropServices._ConstructorBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfo" uniqueID="System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.ConstructorBuilder.System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfoCount" uniqueID="System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfoCount(unsigned int):void">
				<signature>System.Reflection.Emit.ConstructorBuilder.System.Runtime.InteropServices._ConstructorBuilder.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ConstructorBuilder.Invoke" uniqueID="System.Runtime.InteropServices._ConstructorBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Reflection.Emit.ConstructorBuilder.System.Runtime.InteropServices._ConstructorBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Reflection.Emit.ConstructorBuilder.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Attributes" uniqueID="get_Attributes():System.Reflection.MethodAttributes">
				<signature>System.Reflection.Emit.ConstructorBuilder.get_Attributes():System.Reflection.MethodAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CallingConvention" uniqueID="get_CallingConvention():System.Reflection.CallingConventions">
				<signature>System.Reflection.Emit.ConstructorBuilder.get_CallingConvention():System.Reflection.CallingConventions</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringType" uniqueID="get_DeclaringType():System.Type">
				<signature>System.Reflection.Emit.ConstructorBuilder.get_DeclaringType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_InitLocals" uniqueID="get_InitLocals():bool">
				<signature>System.Reflection.Emit.ConstructorBuilder.get_InitLocals():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_MetadataTokenInternal" uniqueID="get_MetadataTokenInternal():int">
				<signature>System.Reflection.Emit.ConstructorBuilder.get_MetadataTokenInternal():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MethodHandle" uniqueID="get_MethodHandle():System.RuntimeMethodHandle">
				<signature>System.Reflection.Emit.ConstructorBuilder.get_MethodHandle():System.RuntimeMethodHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Module" uniqueID="get_Module():System.Reflection.Module">
				<signature>System.Reflection.Emit.ConstructorBuilder.get_Module():System.Reflection.Module</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Reflection.Emit.ConstructorBuilder.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReflectedType" uniqueID="get_ReflectedType():System.Type">
				<signature>System.Reflection.Emit.ConstructorBuilder.get_ReflectedType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReturnType" uniqueID="get_ReturnType():System.Type">
				<signature>System.Reflection.Emit.ConstructorBuilder.get_ReturnType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Signature" uniqueID="get_Signature():string">
				<signature>System.Reflection.Emit.ConstructorBuilder.get_Signature():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_InitLocals" uniqueID="set_InitLocals(bool):void">
				<signature>System.Reflection.Emit.ConstructorBuilder.set_InitLocals(bool):void</signature>
			</method>
		</class>
		<class name="LocalSymInfo" uniqueID="System.Reflection.Emit.LocalSymInfo">
			<method accessibility="Protected" methodKind="Member" name="AddLocalSymInfo" uniqueID="AddLocalSymInfo(string;byte[];int;int;int):void">
				<signature>System.Reflection.Emit.LocalSymInfo.AddLocalSymInfo(string;byte[];int;int;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AddUsingNamespace" uniqueID="AddUsingNamespace(string):void">
				<signature>System.Reflection.Emit.LocalSymInfo.AddUsingNamespace(string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EmitLocalSymInfo" uniqueID="EmitLocalSymInfo(System.Diagnostics.SymbolStore.ISymbolWriter):void">
				<signature>System.Reflection.Emit.LocalSymInfo.EmitLocalSymInfo(System.Diagnostics.SymbolStore.ISymbolWriter):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="EnsureCapacity" uniqueID="EnsureCapacity():void">
				<signature>System.Reflection.Emit.LocalSymInfo.EnsureCapacity():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="EnsureCapacityNamespace" uniqueID="EnsureCapacityNamespace():void">
				<signature>System.Reflection.Emit.LocalSymInfo.EnsureCapacityNamespace():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="LocalSymInfo" uniqueID="LocalSymInfo():void">
				<signature>System.Reflection.Emit.LocalSymInfo.LocalSymInfo():void</signature>
			</method>
		</class>
		<class name="ModuleBuilder" uniqueID="System.Reflection.Emit.ModuleBuilder">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Reflection.Emit.ModuleBuilder.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetModuleBuilder" uniqueID="GetModuleBuilder(System.Reflection.Module):System.Reflection.Module">
				<signature>System.Reflection.Emit.ModuleBuilder.GetModuleBuilder(System.Reflection.Module):System.Reflection.Module</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="UnmangleTypeName" uniqueID="UnmangleTypeName(string):string">
				<signature>System.Reflection.Emit.ModuleBuilder.UnmangleTypeName(string):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckContext" uniqueID="CheckContext(System.Type[]):void">
				<signature>System.Reflection.Emit.ModuleBuilder.CheckContext(System.Type[]):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckContext" uniqueID="CheckContext(System.Type[][]):void">
				<signature>System.Reflection.Emit.ModuleBuilder.CheckContext(System.Type[][]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateGlobalFunctions" uniqueID="CreateGlobalFunctions():void">
				<signature>System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CreateGlobalFunctionsNoLock" uniqueID="CreateGlobalFunctionsNoLock():void">
				<signature>System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctionsNoLock():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineDocument" uniqueID="DefineDocument(string;System.Guid;System.Guid;System.Guid):System.Diagnostics.SymbolStore.ISymbolDocumentWriter">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineDocument(string;System.Guid;System.Guid;System.Guid):System.Diagnostics.SymbolStore.ISymbolDocumentWriter</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineDocumentNoLock" uniqueID="DefineDocumentNoLock(string;System.Guid;System.Guid;System.Guid):System.Diagnostics.SymbolStore.ISymbolDocumentWriter">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineDocumentNoLock(string;System.Guid;System.Guid;System.Guid):System.Diagnostics.SymbolStore.ISymbolDocumentWriter</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineEnum" uniqueID="DefineEnum(string;System.Reflection.TypeAttributes;System.Type):System.Reflection.Emit.EnumBuilder">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineEnum(string;System.Reflection.TypeAttributes;System.Type):System.Reflection.Emit.EnumBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineEnumNoLock" uniqueID="DefineEnumNoLock(string;System.Reflection.TypeAttributes;System.Type):System.Reflection.Emit.EnumBuilder">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineEnumNoLock(string;System.Reflection.TypeAttributes;System.Type):System.Reflection.Emit.EnumBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineGlobalMethod" uniqueID="DefineGlobalMethod(string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[]):System.Reflection.Emit.MethodBuilder">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[]):System.Reflection.Emit.MethodBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineGlobalMethod" uniqueID="DefineGlobalMethod(string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][]):System.Reflection.Emit.MethodBuilder">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][]):System.Reflection.Emit.MethodBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineGlobalMethod" uniqueID="DefineGlobalMethod(string;System.Reflection.MethodAttributes;System.Type;System.Type[]):System.Reflection.Emit.MethodBuilder">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(string;System.Reflection.MethodAttributes;System.Type;System.Type[]):System.Reflection.Emit.MethodBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineGlobalMethodNoLock" uniqueID="DefineGlobalMethodNoLock(string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][]):System.Reflection.Emit.MethodBuilder">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineGlobalMethodNoLock(string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][]):System.Reflection.Emit.MethodBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineInitializedData" uniqueID="DefineInitializedData(string;byte[];System.Reflection.FieldAttributes):System.Reflection.Emit.FieldBuilder">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineInitializedData(string;byte[];System.Reflection.FieldAttributes):System.Reflection.Emit.FieldBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineInitializedDataNoLock" uniqueID="DefineInitializedDataNoLock(string;byte[];System.Reflection.FieldAttributes):System.Reflection.Emit.FieldBuilder">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineInitializedDataNoLock(string;byte[];System.Reflection.FieldAttributes):System.Reflection.Emit.FieldBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineManifestResource" uniqueID="DefineManifestResource(string;System.IO.Stream;System.Reflection.ResourceAttributes):void">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineManifestResource(string;System.IO.Stream;System.Reflection.ResourceAttributes):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineManifestResourceNoLock" uniqueID="DefineManifestResourceNoLock(string;System.IO.Stream;System.Reflection.ResourceAttributes):void">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineManifestResourceNoLock(string;System.IO.Stream;System.Reflection.ResourceAttributes):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefinePInvokeMethod" uniqueID="DefinePInvokeMethod(string;string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Runtime.InteropServices.CallingConvention;System.Runtime.InteropServices.CharSet):System.Reflection.Emit.MethodBuilder">
				<signature>System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(string;string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Runtime.InteropServices.CallingConvention;System.Runtime.InteropServices.CharSet):System.Reflection.Emit.MethodBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefinePInvokeMethod" uniqueID="DefinePInvokeMethod(string;string;string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Runtime.InteropServices.CallingConvention;System.Runtime.InteropServices.CharSet):System.Reflection.Emit.MethodBuilder">
				<signature>System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(string;string;string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Runtime.InteropServices.CallingConvention;System.Runtime.InteropServices.CharSet):System.Reflection.Emit.MethodBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefinePInvokeMethodNoLock" uniqueID="DefinePInvokeMethodNoLock(string;string;string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Runtime.InteropServices.CallingConvention;System.Runtime.InteropServices.CharSet):System.Reflection.Emit.MethodBuilder">
				<signature>System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethodNoLock(string;string;string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Runtime.InteropServices.CallingConvention;System.Runtime.InteropServices.CharSet):System.Reflection.Emit.MethodBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineResource" uniqueID="DefineResource(string;string):System.Resources.IResourceWriter">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineResource(string;string):System.Resources.IResourceWriter</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineResource" uniqueID="DefineResource(string;string;System.Reflection.ResourceAttributes):System.Resources.IResourceWriter">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineResource(string;string;System.Reflection.ResourceAttributes):System.Resources.IResourceWriter</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineResourceNoLock" uniqueID="DefineResourceNoLock(string;string;System.Reflection.ResourceAttributes):System.Resources.IResourceWriter">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineResourceNoLock(string;string;System.Reflection.ResourceAttributes):System.Resources.IResourceWriter</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineType" uniqueID="DefineType(string):System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineType(string):System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineType" uniqueID="DefineType(string;System.Reflection.TypeAttributes):System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineType(string;System.Reflection.TypeAttributes):System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineType" uniqueID="DefineType(string;System.Reflection.TypeAttributes;System.Type):System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineType(string;System.Reflection.TypeAttributes;System.Type):System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineType" uniqueID="DefineType(string;System.Reflection.TypeAttributes;System.Type;System.Reflection.Emit.PackingSize):System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineType(string;System.Reflection.TypeAttributes;System.Type;System.Reflection.Emit.PackingSize):System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineType" uniqueID="DefineType(string;System.Reflection.TypeAttributes;System.Type;System.Reflection.Emit.PackingSize;int):System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineType(string;System.Reflection.TypeAttributes;System.Type;System.Reflection.Emit.PackingSize;int):System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineType" uniqueID="DefineType(string;System.Reflection.TypeAttributes;System.Type;System.Type[]):System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineType(string;System.Reflection.TypeAttributes;System.Type;System.Type[]):System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineType" uniqueID="DefineType(string;System.Reflection.TypeAttributes;System.Type;int):System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineType(string;System.Reflection.TypeAttributes;System.Type;int):System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineTypeNoLock" uniqueID="DefineTypeNoLock(string):System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineTypeNoLock(string):System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineTypeNoLock" uniqueID="DefineTypeNoLock(string;System.Reflection.TypeAttributes):System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineTypeNoLock(string;System.Reflection.TypeAttributes):System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineTypeNoLock" uniqueID="DefineTypeNoLock(string;System.Reflection.TypeAttributes;System.Type):System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineTypeNoLock(string;System.Reflection.TypeAttributes;System.Type):System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineTypeNoLock" uniqueID="DefineTypeNoLock(string;System.Reflection.TypeAttributes;System.Type;System.Reflection.Emit.PackingSize):System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineTypeNoLock(string;System.Reflection.TypeAttributes;System.Type;System.Reflection.Emit.PackingSize):System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineTypeNoLock" uniqueID="DefineTypeNoLock(string;System.Reflection.TypeAttributes;System.Type;System.Reflection.Emit.PackingSize;int):System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineTypeNoLock(string;System.Reflection.TypeAttributes;System.Type;System.Reflection.Emit.PackingSize;int):System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineTypeNoLock" uniqueID="DefineTypeNoLock(string;System.Reflection.TypeAttributes;System.Type;System.Type[]):System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineTypeNoLock(string;System.Reflection.TypeAttributes;System.Type;System.Type[]):System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineTypeNoLock" uniqueID="DefineTypeNoLock(string;System.Reflection.TypeAttributes;System.Type;int):System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineTypeNoLock(string;System.Reflection.TypeAttributes;System.Type;int):System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineUninitializedData" uniqueID="DefineUninitializedData(string;int;System.Reflection.FieldAttributes):System.Reflection.Emit.FieldBuilder">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(string;int;System.Reflection.FieldAttributes):System.Reflection.Emit.FieldBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineUninitializedDataNoLock" uniqueID="DefineUninitializedDataNoLock(string;int;System.Reflection.FieldAttributes):System.Reflection.Emit.FieldBuilder">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineUninitializedDataNoLock(string;int;System.Reflection.FieldAttributes):System.Reflection.Emit.FieldBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineUnmanagedResource" uniqueID="DefineUnmanagedResource(byte[]):void">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource(byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineUnmanagedResource" uniqueID="DefineUnmanagedResource(string):void">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResource(string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="DefineUnmanagedResourceFileInternalNoLock" uniqueID="DefineUnmanagedResourceFileInternalNoLock(string):void">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResourceFileInternalNoLock(string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="DefineUnmanagedResourceInternalNoLock" uniqueID="DefineUnmanagedResourceInternalNoLock(byte[]):void">
				<signature>System.Reflection.Emit.ModuleBuilder.DefineUnmanagedResourceInternalNoLock(byte[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DemandGrantedAssemblyPermission" uniqueID="DemandGrantedAssemblyPermission():void">
				<signature>System.Reflection.Emit.ModuleBuilder.DemandGrantedAssemblyPermission():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FindTypeBuilderWithName" uniqueID="FindTypeBuilderWithName(string;bool):System.Type">
				<signature>System.Reflection.Emit.ModuleBuilder.FindTypeBuilderWithName(string;bool):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetArrayMethod" uniqueID="GetArrayMethod(System.Type;string;System.Reflection.CallingConventions;System.Type;System.Type[]):System.Reflection.MethodInfo">
				<signature>System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type;string;System.Reflection.CallingConventions;System.Type;System.Type[]):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetArrayMethodToken" uniqueID="GetArrayMethodToken(System.Type;string;System.Reflection.CallingConventions;System.Type;System.Type[]):System.Reflection.Emit.MethodToken">
				<signature>System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type;string;System.Reflection.CallingConventions;System.Type;System.Type[]):System.Reflection.Emit.MethodToken</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetArrayMethodTokenNoLock" uniqueID="GetArrayMethodTokenNoLock(System.Type;string;System.Reflection.CallingConventions;System.Type;System.Type[]):System.Reflection.Emit.MethodToken">
				<signature>System.Reflection.Emit.ModuleBuilder.GetArrayMethodTokenNoLock(System.Type;string;System.Reflection.CallingConventions;System.Type;System.Type[]):System.Reflection.Emit.MethodToken</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetAssemblyInternal" uniqueID="GetAssemblyInternal():System.Reflection.Assembly">
				<signature>System.Reflection.Emit.ModuleBuilder.GetAssemblyInternal():System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetConstructorToken" uniqueID="GetConstructorToken(System.Reflection.ConstructorInfo):System.Reflection.Emit.MethodToken">
				<signature>System.Reflection.Emit.ModuleBuilder.GetConstructorToken(System.Reflection.ConstructorInfo):System.Reflection.Emit.MethodToken</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFieldToken" uniqueID="GetFieldToken(System.Reflection.FieldInfo):System.Reflection.Emit.FieldToken">
				<signature>System.Reflection.Emit.ModuleBuilder.GetFieldToken(System.Reflection.FieldInfo):System.Reflection.Emit.FieldToken</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetFieldTokenNoLock" uniqueID="GetFieldTokenNoLock(System.Reflection.FieldInfo):System.Reflection.Emit.FieldToken">
				<signature>System.Reflection.Emit.ModuleBuilder.GetFieldTokenNoLock(System.Reflection.FieldInfo):System.Reflection.Emit.FieldToken</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMemberRefSignature" uniqueID="GetMemberRefSignature(System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];int):System.Reflection.Emit.SignatureHelper">
				<signature>System.Reflection.Emit.ModuleBuilder.GetMemberRefSignature(System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];int):System.Reflection.Emit.SignatureHelper</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMemberRefToken" uniqueID="GetMemberRefToken(System.Reflection.MethodBase;System.Type[]):int">
				<signature>System.Reflection.Emit.ModuleBuilder.GetMemberRefToken(System.Reflection.MethodBase;System.Type[]):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethodToken" uniqueID="GetMethodToken(System.Reflection.MethodInfo):System.Reflection.Emit.MethodToken">
				<signature>System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo):System.Reflection.Emit.MethodToken</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMethodTokenInternal" uniqueID="GetMethodTokenInternal(System.Reflection.MethodInfo):System.Reflection.Emit.MethodToken">
				<signature>System.Reflection.Emit.ModuleBuilder.GetMethodTokenInternal(System.Reflection.MethodInfo):System.Reflection.Emit.MethodToken</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetMethodTokenNoLock" uniqueID="GetMethodTokenNoLock(System.Reflection.MethodInfo;bool):System.Reflection.Emit.MethodToken">
				<signature>System.Reflection.Emit.ModuleBuilder.GetMethodTokenNoLock(System.Reflection.MethodInfo;bool):System.Reflection.Emit.MethodToken</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetRootElementType" uniqueID="GetRootElementType(System.Type):System.Type">
				<signature>System.Reflection.Emit.ModuleBuilder.GetRootElementType(System.Type):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSignatureToken" uniqueID="GetSignatureToken(System.Reflection.Emit.SignatureHelper):System.Reflection.Emit.SignatureToken">
				<signature>System.Reflection.Emit.ModuleBuilder.GetSignatureToken(System.Reflection.Emit.SignatureHelper):System.Reflection.Emit.SignatureToken</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSignatureToken" uniqueID="GetSignatureToken(byte[];int):System.Reflection.Emit.SignatureToken">
				<signature>System.Reflection.Emit.ModuleBuilder.GetSignatureToken(byte[];int):System.Reflection.Emit.SignatureToken</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetStringConstant" uniqueID="GetStringConstant(string):System.Reflection.Emit.StringToken">
				<signature>System.Reflection.Emit.ModuleBuilder.GetStringConstant(string):System.Reflection.Emit.StringToken</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSymWriter" uniqueID="GetSymWriter():System.Diagnostics.SymbolStore.ISymbolWriter">
				<signature>System.Reflection.Emit.ModuleBuilder.GetSymWriter():System.Diagnostics.SymbolStore.ISymbolWriter</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType(string):System.Type">
				<signature>System.Reflection.Emit.ModuleBuilder.GetType(string):System.Type</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetType" uniqueID="GetType(string;System.Type):System.Type">
				<signature>System.Reflection.Emit.ModuleBuilder.GetType(string;System.Type):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType(string;bool):System.Type">
				<signature>System.Reflection.Emit.ModuleBuilder.GetType(string;bool):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetType" uniqueID="GetType(string;bool;bool):System.Type">
				<signature>System.Reflection.Emit.ModuleBuilder.GetType(string;bool;bool):System.Type</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetTypeNoLock" uniqueID="GetTypeNoLock(string;bool;bool):System.Type">
				<signature>System.Reflection.Emit.ModuleBuilder.GetTypeNoLock(string;bool;bool):System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetTypeRefNested" uniqueID="GetTypeRefNested(System.Type;System.Reflection.Module;string):int">
				<signature>System.Reflection.Emit.ModuleBuilder.GetTypeRefNested(System.Type;System.Reflection.Module;string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeToken" uniqueID="GetTypeToken(System.Type):System.Reflection.Emit.TypeToken">
				<signature>System.Reflection.Emit.ModuleBuilder.GetTypeToken(System.Type):System.Reflection.Emit.TypeToken</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypeToken" uniqueID="GetTypeToken(string):System.Reflection.Emit.TypeToken">
				<signature>System.Reflection.Emit.ModuleBuilder.GetTypeToken(string):System.Reflection.Emit.TypeToken</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetTypeTokenInternal" uniqueID="GetTypeTokenInternal(System.Type):System.Reflection.Emit.TypeToken">
				<signature>System.Reflection.Emit.ModuleBuilder.GetTypeTokenInternal(System.Type):System.Reflection.Emit.TypeToken</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetTypeTokenInternal" uniqueID="GetTypeTokenInternal(System.Type;bool):System.Reflection.Emit.TypeToken">
				<signature>System.Reflection.Emit.ModuleBuilder.GetTypeTokenInternal(System.Type;bool):System.Reflection.Emit.TypeToken</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetTypeTokenWorkerNoLock" uniqueID="GetTypeTokenWorkerNoLock(System.Type;bool):System.Reflection.Emit.TypeToken">
				<signature>System.Reflection.Emit.ModuleBuilder.GetTypeTokenWorkerNoLock(System.Type;bool):System.Reflection.Emit.TypeToken</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTypes" uniqueID="GetTypes():System.Type[]">
				<signature>System.Reflection.Emit.ModuleBuilder.GetTypes():System.Type[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetTypesNoLock" uniqueID="GetTypesNoLock():System.Type[]">
				<signature>System.Reflection.Emit.ModuleBuilder.GetTypesNoLock():System.Type[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Init" uniqueID="Init(string;string;System.Diagnostics.SymbolStore.ISymbolWriter):void">
				<signature>System.Reflection.Emit.ModuleBuilder.Init(string;string;System.Diagnostics.SymbolStore.ISymbolWriter):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalGetConstructorToken" uniqueID="InternalGetConstructorToken(System.Reflection.ConstructorInfo;bool):System.Reflection.Emit.MethodToken">
				<signature>System.Reflection.Emit.ModuleBuilder.InternalGetConstructorToken(System.Reflection.ConstructorInfo;bool):System.Reflection.Emit.MethodToken</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsDynamic" uniqueID="IsDynamic():bool">
				<signature>System.Reflection.Emit.ModuleBuilder.IsDynamic():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsTransient" uniqueID="IsTransient():bool">
				<signature>System.Reflection.Emit.ModuleBuilder.IsTransient():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ModuleBuilder" uniqueID="ModuleBuilder(System.Reflection.Emit.AssemblyBuilder;System.Reflection.Emit.ModuleBuilder):void">
				<signature>System.Reflection.Emit.ModuleBuilder.ModuleBuilder(System.Reflection.Emit.AssemblyBuilder;System.Reflection.Emit.ModuleBuilder):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="PreSave" uniqueID="PreSave(string;System.Reflection.PortableExecutableKinds;System.Reflection.ImageFileMachine):void">
				<signature>System.Reflection.Emit.ModuleBuilder.PreSave(string;System.Reflection.PortableExecutableKinds;System.Reflection.ImageFileMachine):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="PreSaveNoLock" uniqueID="PreSaveNoLock(string;System.Reflection.PortableExecutableKinds;System.Reflection.ImageFileMachine):void">
				<signature>System.Reflection.Emit.ModuleBuilder.PreSaveNoLock(string;System.Reflection.PortableExecutableKinds;System.Reflection.ImageFileMachine):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Save" uniqueID="Save(string;bool;System.Reflection.PortableExecutableKinds;System.Reflection.ImageFileMachine):void">
				<signature>System.Reflection.Emit.ModuleBuilder.Save(string;bool;System.Reflection.PortableExecutableKinds;System.Reflection.ImageFileMachine):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SaveNoLock" uniqueID="SaveNoLock(string;bool;System.Reflection.PortableExecutableKinds;System.Reflection.ImageFileMachine):void">
				<signature>System.Reflection.Emit.ModuleBuilder.SaveNoLock(string;bool;System.Reflection.PortableExecutableKinds;System.Reflection.ImageFileMachine):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetCustomAttribute" uniqueID="SetCustomAttribute(System.Reflection.ConstructorInfo;byte[]):void">
				<signature>System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo;byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetCustomAttribute" uniqueID="SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder):void">
				<signature>System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetEntryPoint" uniqueID="SetEntryPoint(System.Reflection.MethodInfo):void">
				<signature>System.Reflection.Emit.ModuleBuilder.SetEntryPoint(System.Reflection.MethodInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetSymCustomAttribute" uniqueID="SetSymCustomAttribute(string;byte[]):void">
				<signature>System.Reflection.Emit.ModuleBuilder.SetSymCustomAttribute(string;byte[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SetSymCustomAttributeNoLock" uniqueID="SetSymCustomAttributeNoLock(string;byte[]):void">
				<signature>System.Reflection.Emit.ModuleBuilder.SetSymCustomAttributeNoLock(string;byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetUserEntryPoint" uniqueID="SetUserEntryPoint(System.Reflection.MethodInfo):void">
				<signature>System.Reflection.Emit.ModuleBuilder.SetUserEntryPoint(System.Reflection.MethodInfo):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SetUserEntryPointNoLock" uniqueID="SetUserEntryPointNoLock(System.Reflection.MethodInfo):void">
				<signature>System.Reflection.Emit.ModuleBuilder.SetUserEntryPointNoLock(System.Reflection.MethodInfo):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ModuleBuilder.GetIDsOfNames" uniqueID="System.Runtime.InteropServices._ModuleBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.ModuleBuilder.System.Runtime.InteropServices._ModuleBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ModuleBuilder.GetTypeInfo" uniqueID="System.Runtime.InteropServices._ModuleBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.ModuleBuilder.System.Runtime.InteropServices._ModuleBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ModuleBuilder.GetTypeInfoCount" uniqueID="System.Runtime.InteropServices._ModuleBuilder.GetTypeInfoCount(unsigned int):void">
				<signature>System.Reflection.Emit.ModuleBuilder.System.Runtime.InteropServices._ModuleBuilder.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ModuleBuilder.Invoke" uniqueID="System.Runtime.InteropServices._ModuleBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Reflection.Emit.ModuleBuilder.System.Runtime.InteropServices._ModuleBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FullyQualifiedName" uniqueID="get_FullyQualifiedName():string">
				<signature>System.Reflection.Emit.ModuleBuilder.get_FullyQualifiedName():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_InternalModule" uniqueID="get_InternalModule():System.Reflection.Module">
				<signature>System.Reflection.Emit.ModuleBuilder.get_InternalModule():System.Reflection.Module</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_IsInternal" uniqueID="get_IsInternal():bool">
				<signature>System.Reflection.Emit.ModuleBuilder.get_IsInternal():bool</signature>
			</method>
		</class>
		<class name="ModuleBuilderData" uniqueID="System.Reflection.Emit.ModuleBuilderData">
			<method accessibility="Protected" methodKind="Member" name="Init" uniqueID="Init(System.Reflection.Emit.ModuleBuilder;string;string):void">
				<signature>System.Reflection.Emit.ModuleBuilderData.Init(System.Reflection.Emit.ModuleBuilder;string;string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsTransient" uniqueID="IsTransient():bool">
				<signature>System.Reflection.Emit.ModuleBuilderData.IsTransient():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ModuleBuilderData" uniqueID="ModuleBuilderData(System.Reflection.Emit.ModuleBuilder;string;string):void">
				<signature>System.Reflection.Emit.ModuleBuilderData.ModuleBuilderData(System.Reflection.Emit.ModuleBuilder;string;string):void</signature>
			</method>
		</class>
		<class name="ParameterToken" uniqueID="System.Reflection.Emit.ParameterToken">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Reflection.Emit.ParameterToken.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.Reflection.Emit.ParameterToken;System.Reflection.Emit.ParameterToken):bool">
				<signature>System.Reflection.Emit.ParameterToken.op_Equality(System.Reflection.Emit.ParameterToken;System.Reflection.Emit.ParameterToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.Reflection.Emit.ParameterToken;System.Reflection.Emit.ParameterToken):bool">
				<signature>System.Reflection.Emit.ParameterToken.op_Inequality(System.Reflection.Emit.ParameterToken;System.Reflection.Emit.ParameterToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.Reflection.Emit.ParameterToken):bool">
				<signature>System.Reflection.Emit.ParameterToken.Equals(System.Reflection.Emit.ParameterToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Reflection.Emit.ParameterToken.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Reflection.Emit.ParameterToken.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ParameterToken" uniqueID="ParameterToken(int):void">
				<signature>System.Reflection.Emit.ParameterToken.ParameterToken(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Token" uniqueID="get_Token():int">
				<signature>System.Reflection.Emit.ParameterToken.get_Token():int</signature>
			</method>
		</class>
		<class name="__ExceptionInstance" uniqueID="System.Reflection.Emit.__ExceptionInstance">
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Reflection.Emit.__ExceptionInstance.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Reflection.Emit.__ExceptionInstance.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="__ExceptionInstance" uniqueID="__ExceptionInstance(int;int;int;int;int;int;int):void">
				<signature>System.Reflection.Emit.__ExceptionInstance.__ExceptionInstance(int;int;int;int;int;int;int):void</signature>
			</method>
		</class>
		<class name="StringToken" uniqueID="System.Reflection.Emit.StringToken">
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.Reflection.Emit.StringToken;System.Reflection.Emit.StringToken):bool">
				<signature>System.Reflection.Emit.StringToken.op_Equality(System.Reflection.Emit.StringToken;System.Reflection.Emit.StringToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.Reflection.Emit.StringToken;System.Reflection.Emit.StringToken):bool">
				<signature>System.Reflection.Emit.StringToken.op_Inequality(System.Reflection.Emit.StringToken;System.Reflection.Emit.StringToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.Reflection.Emit.StringToken):bool">
				<signature>System.Reflection.Emit.StringToken.Equals(System.Reflection.Emit.StringToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Reflection.Emit.StringToken.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Reflection.Emit.StringToken.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="StringToken" uniqueID="StringToken(int):void">
				<signature>System.Reflection.Emit.StringToken.StringToken(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Token" uniqueID="get_Token():int">
				<signature>System.Reflection.Emit.StringToken.get_Token():int</signature>
			</method>
		</class>
		<class name="TypeBuilder" uniqueID="System.Reflection.Emit.TypeBuilder">
			<method accessibility="Public" methodKind="Static" name="GetConstructor" uniqueID="GetConstructor(System.Type;System.Reflection.ConstructorInfo):System.Reflection.ConstructorInfo">
				<signature>System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type;System.Reflection.ConstructorInfo):System.Reflection.ConstructorInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetField" uniqueID="GetField(System.Type;System.Reflection.FieldInfo):System.Reflection.FieldInfo">
				<signature>System.Reflection.Emit.TypeBuilder.GetField(System.Type;System.Reflection.FieldInfo):System.Reflection.FieldInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetMethod" uniqueID="GetMethod(System.Type;System.Reflection.MethodInfo):System.Reflection.MethodInfo">
				<signature>System.Reflection.Emit.TypeBuilder.GetMethod(System.Type;System.Reflection.MethodInfo):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalAddDeclarativeSecurity" uniqueID="InternalAddDeclarativeSecurity(System.Reflection.Module;int;System.Security.Permissions.SecurityAction;byte[]):void">
				<signature>System.Reflection.Emit.TypeBuilder.InternalAddDeclarativeSecurity(System.Reflection.Module;int;System.Security.Permissions.SecurityAction;byte[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalAddInterfaceImpl" uniqueID="InternalAddInterfaceImpl(int;int;System.Reflection.Module):void">
				<signature>System.Reflection.Emit.TypeBuilder.InternalAddInterfaceImpl(int;int;System.Reflection.Module):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalCreateCustomAttribute" uniqueID="InternalCreateCustomAttribute(int;int;byte[];System.Reflection.Module;bool):void">
				<signature>System.Reflection.Emit.TypeBuilder.InternalCreateCustomAttribute(int;int;byte[];System.Reflection.Module;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalCreateCustomAttribute" uniqueID="InternalCreateCustomAttribute(int;int;byte[];System.Reflection.Module;bool;bool):void">
				<signature>System.Reflection.Emit.TypeBuilder.InternalCreateCustomAttribute(int;int;byte[];System.Reflection.Module;bool;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalDefineEvent" uniqueID="InternalDefineEvent(System.Reflection.Module;int;string;int;int):int">
				<signature>System.Reflection.Emit.TypeBuilder.InternalDefineEvent(System.Reflection.Module;int;string;int;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalDefineField" uniqueID="InternalDefineField(int;string;byte[];int;System.Reflection.FieldAttributes;System.Reflection.Module):int">
				<signature>System.Reflection.Emit.TypeBuilder.InternalDefineField(int;string;byte[];int;System.Reflection.FieldAttributes;System.Reflection.Module):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalDefineMethod" uniqueID="InternalDefineMethod(int;string;byte[];int;System.Reflection.MethodAttributes;System.Reflection.Module):int">
				<signature>System.Reflection.Emit.TypeBuilder.InternalDefineMethod(int;string;byte[];int;System.Reflection.MethodAttributes;System.Reflection.Module):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalDefineMethodImpl" uniqueID="InternalDefineMethodImpl(System.Reflection.Module;int;int;int):void">
				<signature>System.Reflection.Emit.TypeBuilder.InternalDefineMethodImpl(System.Reflection.Module;int;int;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalDefineMethodSemantics" uniqueID="InternalDefineMethodSemantics(System.Reflection.Module;int;System.Reflection.MethodSemanticsAttributes;int):void">
				<signature>System.Reflection.Emit.TypeBuilder.InternalDefineMethodSemantics(System.Reflection.Module;int;System.Reflection.MethodSemanticsAttributes;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalDefineMethodSpec" uniqueID="InternalDefineMethodSpec(int;byte[];int;System.Reflection.Module):int">
				<signature>System.Reflection.Emit.TypeBuilder.InternalDefineMethodSpec(int;byte[];int;System.Reflection.Module):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalDefineProperty" uniqueID="InternalDefineProperty(System.Reflection.Module;int;string;int;byte[];int;int;int):int">
				<signature>System.Reflection.Emit.TypeBuilder.InternalDefineProperty(System.Reflection.Module;int;string;int;byte[];int;int;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalGetTokenFromSig" uniqueID="InternalGetTokenFromSig(System.Reflection.Module;byte[];int):int">
				<signature>System.Reflection.Emit.TypeBuilder.InternalGetTokenFromSig(System.Reflection.Module;byte[];int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalSetClassLayout" uniqueID="InternalSetClassLayout(System.Reflection.Module;int;System.Reflection.Emit.PackingSize;int):void">
				<signature>System.Reflection.Emit.TypeBuilder.InternalSetClassLayout(System.Reflection.Module;int;System.Reflection.Emit.PackingSize;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalSetConstantValue" uniqueID="InternalSetConstantValue(System.Reflection.Module;int;System.Variant):void">
				<signature>System.Reflection.Emit.TypeBuilder.InternalSetConstantValue(System.Reflection.Module;int;System.Variant):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalSetFieldOffset" uniqueID="InternalSetFieldOffset(System.Reflection.Module;int;int):void">
				<signature>System.Reflection.Emit.TypeBuilder.InternalSetFieldOffset(System.Reflection.Module;int;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalSetMarshalInfo" uniqueID="InternalSetMarshalInfo(System.Reflection.Module;int;byte[];int):void">
				<signature>System.Reflection.Emit.TypeBuilder.InternalSetMarshalInfo(System.Reflection.Module;int;byte[];int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalSetMethodIL" uniqueID="InternalSetMethodIL(int;bool;byte[];byte[];int;int;int;System.Reflection.Emit.__ExceptionInstance[];int[];int[];System.Reflection.Module):void">
				<signature>System.Reflection.Emit.TypeBuilder.InternalSetMethodIL(int;bool;byte[];byte[];int;int;int;System.Reflection.Emit.__ExceptionInstance[];int[];int[];System.Reflection.Module):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalSetMethodImpl" uniqueID="InternalSetMethodImpl(System.Reflection.Module;int;System.Reflection.MethodImplAttributes):void">
				<signature>System.Reflection.Emit.TypeBuilder.InternalSetMethodImpl(System.Reflection.Module;int;System.Reflection.MethodImplAttributes):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalSetPInvokeData" uniqueID="InternalSetPInvokeData(System.Reflection.Module;string;string;int;int;int):void">
				<signature>System.Reflection.Emit.TypeBuilder.InternalSetPInvokeData(System.Reflection.Module;string;string;int;int;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InternalSetParamInfo" uniqueID="InternalSetParamInfo(System.Reflection.Module;int;int;System.Reflection.ParameterAttributes;string):int">
				<signature>System.Reflection.Emit.TypeBuilder.InternalSetParamInfo(System.Reflection.Module;int;int;System.Reflection.ParameterAttributes;string):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalSetParentType" uniqueID="InternalSetParentType(int;int;System.Reflection.Module):void">
				<signature>System.Reflection.Emit.TypeBuilder.InternalSetParentType(int;int;System.Reflection.Module):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IsPublicComType" uniqueID="IsPublicComType(System.Type):bool">
				<signature>System.Reflection.Emit.TypeBuilder.IsPublicComType(System.Type):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="IsTypeEqual" uniqueID="IsTypeEqual(System.Type;System.Type):bool">
				<signature>System.Reflection.Emit.TypeBuilder.IsTypeEqual(System.Type;System.Type):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SetConstantValue" uniqueID="SetConstantValue(System.Reflection.Module;int;System.Type;object):void">
				<signature>System.Reflection.Emit.TypeBuilder.SetConstantValue(System.Reflection.Module;int;System.Type;object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_InternalAddDeclarativeSecurity" uniqueID="_InternalAddDeclarativeSecurity(System.Reflection.Module;int;System.Security.Permissions.SecurityAction;byte[]):void">
				<signature>System.Reflection.Emit.TypeBuilder._InternalAddDeclarativeSecurity(System.Reflection.Module;int;System.Security.Permissions.SecurityAction;byte[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_InternalAddInterfaceImpl" uniqueID="_InternalAddInterfaceImpl(int;int;System.Reflection.Module):void">
				<signature>System.Reflection.Emit.TypeBuilder._InternalAddInterfaceImpl(int;int;System.Reflection.Module):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_InternalCreateCustomAttribute" uniqueID="_InternalCreateCustomAttribute(int;int;byte[];System.Reflection.Module;bool;bool):void">
				<signature>System.Reflection.Emit.TypeBuilder._InternalCreateCustomAttribute(int;int;byte[];System.Reflection.Module;bool;bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_InternalDefineEvent" uniqueID="_InternalDefineEvent(System.Reflection.Module;int;string;int;int):int">
				<signature>System.Reflection.Emit.TypeBuilder._InternalDefineEvent(System.Reflection.Module;int;string;int;int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_InternalDefineField" uniqueID="_InternalDefineField(int;string;byte[];int;System.Reflection.FieldAttributes;System.Reflection.Module):int">
				<signature>System.Reflection.Emit.TypeBuilder._InternalDefineField(int;string;byte[];int;System.Reflection.FieldAttributes;System.Reflection.Module):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_InternalDefineMethod" uniqueID="_InternalDefineMethod(int;string;byte[];int;System.Reflection.MethodAttributes;System.Reflection.Module):int">
				<signature>System.Reflection.Emit.TypeBuilder._InternalDefineMethod(int;string;byte[];int;System.Reflection.MethodAttributes;System.Reflection.Module):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_InternalDefineMethodImpl" uniqueID="_InternalDefineMethodImpl(System.Reflection.Module;int;int;int):void">
				<signature>System.Reflection.Emit.TypeBuilder._InternalDefineMethodImpl(System.Reflection.Module;int;int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_InternalDefineMethodSemantics" uniqueID="_InternalDefineMethodSemantics(System.Reflection.Module;int;System.Reflection.MethodSemanticsAttributes;int):void">
				<signature>System.Reflection.Emit.TypeBuilder._InternalDefineMethodSemantics(System.Reflection.Module;int;System.Reflection.MethodSemanticsAttributes;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_InternalDefineMethodSpec" uniqueID="_InternalDefineMethodSpec(int;byte[];int;System.Reflection.Module):int">
				<signature>System.Reflection.Emit.TypeBuilder._InternalDefineMethodSpec(int;byte[];int;System.Reflection.Module):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_InternalDefineProperty" uniqueID="_InternalDefineProperty(System.Reflection.Module;int;string;int;byte[];int;int;int):int">
				<signature>System.Reflection.Emit.TypeBuilder._InternalDefineProperty(System.Reflection.Module;int;string;int;byte[];int;int;int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_InternalGetTokenFromSig" uniqueID="_InternalGetTokenFromSig(System.Reflection.Module;byte[];int):int">
				<signature>System.Reflection.Emit.TypeBuilder._InternalGetTokenFromSig(System.Reflection.Module;byte[];int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_InternalSetClassLayout" uniqueID="_InternalSetClassLayout(System.Reflection.Module;int;System.Reflection.Emit.PackingSize;int):void">
				<signature>System.Reflection.Emit.TypeBuilder._InternalSetClassLayout(System.Reflection.Module;int;System.Reflection.Emit.PackingSize;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_InternalSetConstantValue" uniqueID="_InternalSetConstantValue(System.Reflection.Module;int;System.Variant):void">
				<signature>System.Reflection.Emit.TypeBuilder._InternalSetConstantValue(System.Reflection.Module;int;System.Variant):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_InternalSetFieldOffset" uniqueID="_InternalSetFieldOffset(System.Reflection.Module;int;int):void">
				<signature>System.Reflection.Emit.TypeBuilder._InternalSetFieldOffset(System.Reflection.Module;int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_InternalSetMarshalInfo" uniqueID="_InternalSetMarshalInfo(System.Reflection.Module;int;byte[];int):void">
				<signature>System.Reflection.Emit.TypeBuilder._InternalSetMarshalInfo(System.Reflection.Module;int;byte[];int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_InternalSetMethodIL" uniqueID="_InternalSetMethodIL(int;bool;byte[];byte[];int;int;int;System.Reflection.Emit.__ExceptionInstance[];int[];int[];System.Reflection.Module):void">
				<signature>System.Reflection.Emit.TypeBuilder._InternalSetMethodIL(int;bool;byte[];byte[];int;int;int;System.Reflection.Emit.__ExceptionInstance[];int[];int[];System.Reflection.Module):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_InternalSetMethodImpl" uniqueID="_InternalSetMethodImpl(System.Reflection.Module;int;System.Reflection.MethodImplAttributes):void">
				<signature>System.Reflection.Emit.TypeBuilder._InternalSetMethodImpl(System.Reflection.Module;int;System.Reflection.MethodImplAttributes):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_InternalSetPInvokeData" uniqueID="_InternalSetPInvokeData(System.Reflection.Module;string;string;int;int;int):void">
				<signature>System.Reflection.Emit.TypeBuilder._InternalSetPInvokeData(System.Reflection.Module;string;string;int;int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_InternalSetParamInfo" uniqueID="_InternalSetParamInfo(System.Reflection.Module;int;int;System.Reflection.ParameterAttributes;string):int">
				<signature>System.Reflection.Emit.TypeBuilder._InternalSetParamInfo(System.Reflection.Module;int;int;System.Reflection.ParameterAttributes;string):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_InternalSetParentType" uniqueID="_InternalSetParentType(int;int;System.Reflection.Module):void">
				<signature>System.Reflection.Emit.TypeBuilder._InternalSetParentType(int;int;System.Reflection.Module):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddDeclarativeSecurity" uniqueID="AddDeclarativeSecurity(System.Security.Permissions.SecurityAction;System.Security.PermissionSet):void">
				<signature>System.Reflection.Emit.TypeBuilder.AddDeclarativeSecurity(System.Security.Permissions.SecurityAction;System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="AddDeclarativeSecurityNoLock" uniqueID="AddDeclarativeSecurityNoLock(System.Security.Permissions.SecurityAction;System.Security.PermissionSet):void">
				<signature>System.Reflection.Emit.TypeBuilder.AddDeclarativeSecurityNoLock(System.Security.Permissions.SecurityAction;System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddInterfaceImplementation" uniqueID="AddInterfaceImplementation(System.Type):void">
				<signature>System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckContext" uniqueID="CheckContext(System.Type[]):void">
				<signature>System.Reflection.Emit.TypeBuilder.CheckContext(System.Type[]):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckContext" uniqueID="CheckContext(System.Type[][]):void">
				<signature>System.Reflection.Emit.TypeBuilder.CheckContext(System.Type[][]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateType" uniqueID="CreateType():System.Type">
				<signature>System.Reflection.Emit.TypeBuilder.CreateType():System.Type</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CreateTypeNoLock" uniqueID="CreateTypeNoLock():System.Type">
				<signature>System.Reflection.Emit.TypeBuilder.CreateTypeNoLock():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineConstructor" uniqueID="DefineConstructor(System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type[]):System.Reflection.Emit.ConstructorBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type[]):System.Reflection.Emit.ConstructorBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineConstructor" uniqueID="DefineConstructor(System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type[];System.Type[][];System.Type[][]):System.Reflection.Emit.ConstructorBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type[];System.Type[][];System.Type[][]):System.Reflection.Emit.ConstructorBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineConstructorNoLock" uniqueID="DefineConstructorNoLock(System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type[];System.Type[][];System.Type[][]):System.Reflection.Emit.ConstructorBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineConstructorNoLock(System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type[];System.Type[][];System.Type[][]):System.Reflection.Emit.ConstructorBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineDataHelper" uniqueID="DefineDataHelper(string;byte[];int;System.Reflection.FieldAttributes):System.Reflection.Emit.FieldBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineDataHelper(string;byte[];int;System.Reflection.FieldAttributes):System.Reflection.Emit.FieldBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineDefaultConstructor" uniqueID="DefineDefaultConstructor(System.Reflection.MethodAttributes):System.Reflection.Emit.ConstructorBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes):System.Reflection.Emit.ConstructorBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineDefaultConstructorNoLock" uniqueID="DefineDefaultConstructorNoLock(System.Reflection.MethodAttributes):System.Reflection.Emit.ConstructorBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineDefaultConstructorNoLock(System.Reflection.MethodAttributes):System.Reflection.Emit.ConstructorBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineEvent" uniqueID="DefineEvent(string;System.Reflection.EventAttributes;System.Type):System.Reflection.Emit.EventBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineEvent(string;System.Reflection.EventAttributes;System.Type):System.Reflection.Emit.EventBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineEventNoLock" uniqueID="DefineEventNoLock(string;System.Reflection.EventAttributes;System.Type):System.Reflection.Emit.EventBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineEventNoLock(string;System.Reflection.EventAttributes;System.Type):System.Reflection.Emit.EventBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineField" uniqueID="DefineField(string;System.Type;System.Reflection.FieldAttributes):System.Reflection.Emit.FieldBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineField(string;System.Type;System.Reflection.FieldAttributes):System.Reflection.Emit.FieldBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineField" uniqueID="DefineField(string;System.Type;System.Type[];System.Type[];System.Reflection.FieldAttributes):System.Reflection.Emit.FieldBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineField(string;System.Type;System.Type[];System.Type[];System.Reflection.FieldAttributes):System.Reflection.Emit.FieldBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineFieldNoLock" uniqueID="DefineFieldNoLock(string;System.Type;System.Type[];System.Type[];System.Reflection.FieldAttributes):System.Reflection.Emit.FieldBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineFieldNoLock(string;System.Type;System.Type[];System.Type[];System.Reflection.FieldAttributes):System.Reflection.Emit.FieldBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineGenericParameters" uniqueID="DefineGenericParameters(string[]):System.Reflection.Emit.GenericTypeParameterBuilder[]">
				<signature>System.Reflection.Emit.TypeBuilder.DefineGenericParameters(string[]):System.Reflection.Emit.GenericTypeParameterBuilder[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineInitializedData" uniqueID="DefineInitializedData(string;byte[];System.Reflection.FieldAttributes):System.Reflection.Emit.FieldBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineInitializedData(string;byte[];System.Reflection.FieldAttributes):System.Reflection.Emit.FieldBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineInitializedDataNoLock" uniqueID="DefineInitializedDataNoLock(string;byte[];System.Reflection.FieldAttributes):System.Reflection.Emit.FieldBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineInitializedDataNoLock(string;byte[];System.Reflection.FieldAttributes):System.Reflection.Emit.FieldBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineMethod" uniqueID="DefineMethod(string;System.Reflection.MethodAttributes):System.Reflection.Emit.MethodBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineMethod(string;System.Reflection.MethodAttributes):System.Reflection.Emit.MethodBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineMethod" uniqueID="DefineMethod(string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions):System.Reflection.Emit.MethodBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineMethod(string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions):System.Reflection.Emit.MethodBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineMethod" uniqueID="DefineMethod(string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[]):System.Reflection.Emit.MethodBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineMethod(string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[]):System.Reflection.Emit.MethodBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineMethod" uniqueID="DefineMethod(string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][]):System.Reflection.Emit.MethodBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineMethod(string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][]):System.Reflection.Emit.MethodBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineMethod" uniqueID="DefineMethod(string;System.Reflection.MethodAttributes;System.Type;System.Type[]):System.Reflection.Emit.MethodBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineMethod(string;System.Reflection.MethodAttributes;System.Type;System.Type[]):System.Reflection.Emit.MethodBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineMethodNoLock" uniqueID="DefineMethodNoLock(string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][]):System.Reflection.Emit.MethodBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineMethodNoLock(string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][]):System.Reflection.Emit.MethodBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineMethodOverride" uniqueID="DefineMethodOverride(System.Reflection.MethodInfo;System.Reflection.MethodInfo):void">
				<signature>System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo;System.Reflection.MethodInfo):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineMethodOverrideNoLock" uniqueID="DefineMethodOverrideNoLock(System.Reflection.MethodInfo;System.Reflection.MethodInfo):void">
				<signature>System.Reflection.Emit.TypeBuilder.DefineMethodOverrideNoLock(System.Reflection.MethodInfo;System.Reflection.MethodInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineNestedType" uniqueID="DefineNestedType(string):System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineNestedType(string):System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineNestedType" uniqueID="DefineNestedType(string;System.Reflection.TypeAttributes):System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineNestedType(string;System.Reflection.TypeAttributes):System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineNestedType" uniqueID="DefineNestedType(string;System.Reflection.TypeAttributes;System.Type):System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineNestedType(string;System.Reflection.TypeAttributes;System.Type):System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineNestedType" uniqueID="DefineNestedType(string;System.Reflection.TypeAttributes;System.Type;System.Reflection.Emit.PackingSize):System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineNestedType(string;System.Reflection.TypeAttributes;System.Type;System.Reflection.Emit.PackingSize):System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineNestedType" uniqueID="DefineNestedType(string;System.Reflection.TypeAttributes;System.Type;System.Type[]):System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineNestedType(string;System.Reflection.TypeAttributes;System.Type;System.Type[]):System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineNestedType" uniqueID="DefineNestedType(string;System.Reflection.TypeAttributes;System.Type;int):System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineNestedType(string;System.Reflection.TypeAttributes;System.Type;int):System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineNestedTypeNoLock" uniqueID="DefineNestedTypeNoLock(string):System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineNestedTypeNoLock(string):System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineNestedTypeNoLock" uniqueID="DefineNestedTypeNoLock(string;System.Reflection.TypeAttributes):System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineNestedTypeNoLock(string;System.Reflection.TypeAttributes):System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineNestedTypeNoLock" uniqueID="DefineNestedTypeNoLock(string;System.Reflection.TypeAttributes;System.Type):System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineNestedTypeNoLock(string;System.Reflection.TypeAttributes;System.Type):System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineNestedTypeNoLock" uniqueID="DefineNestedTypeNoLock(string;System.Reflection.TypeAttributes;System.Type;System.Reflection.Emit.PackingSize):System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineNestedTypeNoLock(string;System.Reflection.TypeAttributes;System.Type;System.Reflection.Emit.PackingSize):System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineNestedTypeNoLock" uniqueID="DefineNestedTypeNoLock(string;System.Reflection.TypeAttributes;System.Type;System.Type[]):System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineNestedTypeNoLock(string;System.Reflection.TypeAttributes;System.Type;System.Type[]):System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineNestedTypeNoLock" uniqueID="DefineNestedTypeNoLock(string;System.Reflection.TypeAttributes;System.Type;int):System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineNestedTypeNoLock(string;System.Reflection.TypeAttributes;System.Type;int):System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefinePInvokeMethod" uniqueID="DefinePInvokeMethod(string;string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Runtime.InteropServices.CallingConvention;System.Runtime.InteropServices.CharSet):System.Reflection.Emit.MethodBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(string;string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Runtime.InteropServices.CallingConvention;System.Runtime.InteropServices.CharSet):System.Reflection.Emit.MethodBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefinePInvokeMethod" uniqueID="DefinePInvokeMethod(string;string;string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Runtime.InteropServices.CallingConvention;System.Runtime.InteropServices.CharSet):System.Reflection.Emit.MethodBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(string;string;string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Runtime.InteropServices.CallingConvention;System.Runtime.InteropServices.CharSet):System.Reflection.Emit.MethodBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefinePInvokeMethod" uniqueID="DefinePInvokeMethod(string;string;string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][];System.Runtime.InteropServices.CallingConvention;System.Runtime.InteropServices.CharSet):System.Reflection.Emit.MethodBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(string;string;string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][];System.Runtime.InteropServices.CallingConvention;System.Runtime.InteropServices.CharSet):System.Reflection.Emit.MethodBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefinePInvokeMethodHelper" uniqueID="DefinePInvokeMethodHelper(string;string;string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][];System.Runtime.InteropServices.CallingConvention;System.Runtime.InteropServices.CharSet):System.Reflection.Emit.MethodBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefinePInvokeMethodHelper(string;string;string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][];System.Runtime.InteropServices.CallingConvention;System.Runtime.InteropServices.CharSet):System.Reflection.Emit.MethodBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefinePInvokeMethodHelperNoLock" uniqueID="DefinePInvokeMethodHelperNoLock(string;string;string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][];System.Runtime.InteropServices.CallingConvention;System.Runtime.InteropServices.CharSet):System.Reflection.Emit.MethodBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefinePInvokeMethodHelperNoLock(string;string;string;System.Reflection.MethodAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][];System.Runtime.InteropServices.CallingConvention;System.Runtime.InteropServices.CharSet):System.Reflection.Emit.MethodBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineProperty" uniqueID="DefineProperty(string;System.Reflection.PropertyAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][]):System.Reflection.Emit.PropertyBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineProperty(string;System.Reflection.PropertyAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][]):System.Reflection.Emit.PropertyBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineProperty" uniqueID="DefineProperty(string;System.Reflection.PropertyAttributes;System.Type;System.Type[]):System.Reflection.Emit.PropertyBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineProperty(string;System.Reflection.PropertyAttributes;System.Type;System.Type[]):System.Reflection.Emit.PropertyBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineProperty" uniqueID="DefineProperty(string;System.Reflection.PropertyAttributes;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][]):System.Reflection.Emit.PropertyBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineProperty(string;System.Reflection.PropertyAttributes;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][]):System.Reflection.Emit.PropertyBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefinePropertyNoLock" uniqueID="DefinePropertyNoLock(string;System.Reflection.PropertyAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][]):System.Reflection.Emit.PropertyBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefinePropertyNoLock(string;System.Reflection.PropertyAttributes;System.Reflection.CallingConventions;System.Type;System.Type[];System.Type[];System.Type[];System.Type[][];System.Type[][]):System.Reflection.Emit.PropertyBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineTypeInitializer" uniqueID="DefineTypeInitializer():System.Reflection.Emit.ConstructorBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineTypeInitializer():System.Reflection.Emit.ConstructorBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineTypeInitializerNoLock" uniqueID="DefineTypeInitializerNoLock():System.Reflection.Emit.ConstructorBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineTypeInitializerNoLock():System.Reflection.Emit.ConstructorBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineUninitializedData" uniqueID="DefineUninitializedData(string;int;System.Reflection.FieldAttributes):System.Reflection.Emit.FieldBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineUninitializedData(string;int;System.Reflection.FieldAttributes):System.Reflection.Emit.FieldBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineUninitializedDataNoLock" uniqueID="DefineUninitializedDataNoLock(string;int;System.Reflection.FieldAttributes):System.Reflection.Emit.FieldBuilder">
				<signature>System.Reflection.Emit.TypeBuilder.DefineUninitializedDataNoLock(string;int;System.Reflection.FieldAttributes):System.Reflection.Emit.FieldBuilder</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetAttributeFlagsImpl" uniqueID="GetAttributeFlagsImpl():System.Reflection.TypeAttributes">
				<signature>System.Reflection.Emit.TypeBuilder.GetAttributeFlagsImpl():System.Reflection.TypeAttributes</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetConstructorImpl" uniqueID="GetConstructorImpl(System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.ConstructorInfo">
				<signature>System.Reflection.Emit.TypeBuilder.GetConstructorImpl(System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.ConstructorInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetConstructors" uniqueID="GetConstructors(System.Reflection.BindingFlags):System.Reflection.ConstructorInfo[]">
				<signature>System.Reflection.Emit.TypeBuilder.GetConstructors(System.Reflection.BindingFlags):System.Reflection.ConstructorInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.Reflection.Emit.TypeBuilder.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetElementType" uniqueID="GetElementType():System.Type">
				<signature>System.Reflection.Emit.TypeBuilder.GetElementType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEvent" uniqueID="GetEvent(string;System.Reflection.BindingFlags):System.Reflection.EventInfo">
				<signature>System.Reflection.Emit.TypeBuilder.GetEvent(string;System.Reflection.BindingFlags):System.Reflection.EventInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEvents" uniqueID="GetEvents():System.Reflection.EventInfo[]">
				<signature>System.Reflection.Emit.TypeBuilder.GetEvents():System.Reflection.EventInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEvents" uniqueID="GetEvents(System.Reflection.BindingFlags):System.Reflection.EventInfo[]">
				<signature>System.Reflection.Emit.TypeBuilder.GetEvents(System.Reflection.BindingFlags):System.Reflection.EventInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetField" uniqueID="GetField(string;System.Reflection.BindingFlags):System.Reflection.FieldInfo">
				<signature>System.Reflection.Emit.TypeBuilder.GetField(string;System.Reflection.BindingFlags):System.Reflection.FieldInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFields" uniqueID="GetFields(System.Reflection.BindingFlags):System.Reflection.FieldInfo[]">
				<signature>System.Reflection.Emit.TypeBuilder.GetFields(System.Reflection.BindingFlags):System.Reflection.FieldInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetGenericArguments" uniqueID="GetGenericArguments():System.Type[]">
				<signature>System.Reflection.Emit.TypeBuilder.GetGenericArguments():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetGenericTypeDefinition" uniqueID="GetGenericTypeDefinition():System.Type">
				<signature>System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetInterface" uniqueID="GetInterface(string;bool):System.Type">
				<signature>System.Reflection.Emit.TypeBuilder.GetInterface(string;bool):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetInterfaceMap" uniqueID="GetInterfaceMap(System.Type):System.Reflection.InterfaceMapping">
				<signature>System.Reflection.Emit.TypeBuilder.GetInterfaceMap(System.Type):System.Reflection.InterfaceMapping</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetInterfaces" uniqueID="GetInterfaces():System.Type[]">
				<signature>System.Reflection.Emit.TypeBuilder.GetInterfaces():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMember" uniqueID="GetMember(string;System.Reflection.MemberTypes;System.Reflection.BindingFlags):System.Reflection.MemberInfo[]">
				<signature>System.Reflection.Emit.TypeBuilder.GetMember(string;System.Reflection.MemberTypes;System.Reflection.BindingFlags):System.Reflection.MemberInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMembers" uniqueID="GetMembers(System.Reflection.BindingFlags):System.Reflection.MemberInfo[]">
				<signature>System.Reflection.Emit.TypeBuilder.GetMembers(System.Reflection.BindingFlags):System.Reflection.MemberInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMethodImpl" uniqueID="GetMethodImpl(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo">
				<signature>System.Reflection.Emit.TypeBuilder.GetMethodImpl(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethods" uniqueID="GetMethods(System.Reflection.BindingFlags):System.Reflection.MethodInfo[]">
				<signature>System.Reflection.Emit.TypeBuilder.GetMethods(System.Reflection.BindingFlags):System.Reflection.MethodInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetNestedType" uniqueID="GetNestedType(string;System.Reflection.BindingFlags):System.Type">
				<signature>System.Reflection.Emit.TypeBuilder.GetNestedType(string;System.Reflection.BindingFlags):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetNestedTypes" uniqueID="GetNestedTypes(System.Reflection.BindingFlags):System.Type[]">
				<signature>System.Reflection.Emit.TypeBuilder.GetNestedTypes(System.Reflection.BindingFlags):System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetProperties" uniqueID="GetProperties(System.Reflection.BindingFlags):System.Reflection.PropertyInfo[]">
				<signature>System.Reflection.Emit.TypeBuilder.GetProperties(System.Reflection.BindingFlags):System.Reflection.PropertyInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetPropertyImpl" uniqueID="GetPropertyImpl(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Type;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.PropertyInfo">
				<signature>System.Reflection.Emit.TypeBuilder.GetPropertyImpl(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Type;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.PropertyInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="HasElementTypeImpl" uniqueID="HasElementTypeImpl():bool">
				<signature>System.Reflection.Emit.TypeBuilder.HasElementTypeImpl():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Init" uniqueID="Init(string;System.Reflection.TypeAttributes;System.Type;System.Type[];System.Reflection.Module;System.Reflection.Emit.PackingSize;int;System.Reflection.Emit.TypeBuilder):void">
				<signature>System.Reflection.Emit.TypeBuilder.Init(string;System.Reflection.TypeAttributes;System.Type;System.Type[];System.Reflection.Module;System.Reflection.Emit.PackingSize;int;System.Reflection.Emit.TypeBuilder):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="InitAsGenericParam" uniqueID="InitAsGenericParam(string;int):void">
				<signature>System.Reflection.Emit.TypeBuilder.InitAsGenericParam(string;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="InternalDefineClass" uniqueID="InternalDefineClass(string;int;int[];System.Reflection.TypeAttributes;System.Reflection.Module;System.Guid;int;int):int">
				<signature>System.Reflection.Emit.TypeBuilder.InternalDefineClass(string;int;int[];System.Reflection.TypeAttributes;System.Reflection.Module;System.Guid;int;int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="InternalDefineGenParam" uniqueID="InternalDefineGenParam(string;int;int;int;int[];System.Reflection.Module;int):int">
				<signature>System.Reflection.Emit.TypeBuilder.InternalDefineGenParam(string;int;int;int;int[];System.Reflection.Module;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InvokeMember" uniqueID="InvokeMember(string;System.Reflection.BindingFlags;System.Reflection.Binder;object;object[];System.Reflection.ParameterModifier[];System.Globalization.CultureInfo;string[]):object">
				<signature>System.Reflection.Emit.TypeBuilder.InvokeMember(string;System.Reflection.BindingFlags;System.Reflection.Binder;object;object[];System.Reflection.ParameterModifier[];System.Globalization.CultureInfo;string[]):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsArrayImpl" uniqueID="IsArrayImpl():bool">
				<signature>System.Reflection.Emit.TypeBuilder.IsArrayImpl():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsAssignableFrom" uniqueID="IsAssignableFrom(System.Type):bool">
				<signature>System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Type):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsByRefImpl" uniqueID="IsByRefImpl():bool">
				<signature>System.Reflection.Emit.TypeBuilder.IsByRefImpl():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsCOMObjectImpl" uniqueID="IsCOMObjectImpl():bool">
				<signature>System.Reflection.Emit.TypeBuilder.IsCOMObjectImpl():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsCreated" uniqueID="IsCreated():bool">
				<signature>System.Reflection.Emit.TypeBuilder.IsCreated():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.Reflection.Emit.TypeBuilder.IsDefined(System.Type;bool):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsPointerImpl" uniqueID="IsPointerImpl():bool">
				<signature>System.Reflection.Emit.TypeBuilder.IsPointerImpl():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsPrimitiveImpl" uniqueID="IsPrimitiveImpl():bool">
				<signature>System.Reflection.Emit.TypeBuilder.IsPrimitiveImpl():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsSubclassOf" uniqueID="IsSubclassOf(System.Type):bool">
				<signature>System.Reflection.Emit.TypeBuilder.IsSubclassOf(System.Type):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakeArrayType" uniqueID="MakeArrayType():System.Type">
				<signature>System.Reflection.Emit.TypeBuilder.MakeArrayType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakeArrayType" uniqueID="MakeArrayType(int):System.Type">
				<signature>System.Reflection.Emit.TypeBuilder.MakeArrayType(int):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakeByRefType" uniqueID="MakeByRefType():System.Type">
				<signature>System.Reflection.Emit.TypeBuilder.MakeByRefType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakeGenericType" uniqueID="MakeGenericType(System.Type[]):System.Type">
				<signature>System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[]):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakePointerType" uniqueID="MakePointerType():System.Type">
				<signature>System.Reflection.Emit.TypeBuilder.MakePointerType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetCustomAttribute" uniqueID="SetCustomAttribute(System.Reflection.ConstructorInfo;byte[]):void">
				<signature>System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo;byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetCustomAttribute" uniqueID="SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder):void">
				<signature>System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetInterfaces" uniqueID="SetInterfaces(System.Type[]):void">
				<signature>System.Reflection.Emit.TypeBuilder.SetInterfaces(System.Type[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetParent" uniqueID="SetParent(System.Type):void">
				<signature>System.Reflection.Emit.TypeBuilder.SetParent(System.Type):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames" uniqueID="System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.TypeBuilder.System.Runtime.InteropServices._TypeBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._TypeBuilder.GetTypeInfo" uniqueID="System.Runtime.InteropServices._TypeBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.TypeBuilder.System.Runtime.InteropServices._TypeBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount" uniqueID="System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount(unsigned int):void">
				<signature>System.Reflection.Emit.TypeBuilder.System.Runtime.InteropServices._TypeBuilder.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._TypeBuilder.Invoke" uniqueID="System.Runtime.InteropServices._TypeBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Reflection.Emit.TypeBuilder.System.Runtime.InteropServices._TypeBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="TermCreateClass" uniqueID="TermCreateClass(int;System.Reflection.Module):System.Type">
				<signature>System.Reflection.Emit.TypeBuilder.TermCreateClass(int;System.Reflection.Module):System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ThrowIfCreated" uniqueID="ThrowIfCreated():void">
				<signature>System.Reflection.Emit.TypeBuilder.ThrowIfCreated():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ThrowIfGeneric" uniqueID="ThrowIfGeneric():void">
				<signature>System.Reflection.Emit.TypeBuilder.ThrowIfGeneric():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Reflection.Emit.TypeBuilder.ToString():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="TypeBuilder" uniqueID="TypeBuilder(System.Reflection.Emit.ModuleBuilder):void">
				<signature>System.Reflection.Emit.TypeBuilder.TypeBuilder(System.Reflection.Emit.ModuleBuilder):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="TypeBuilder" uniqueID="TypeBuilder(System.Reflection.Emit.TypeBuilder;System.Reflection.Emit.GenericTypeParameterBuilder[]):void">
				<signature>System.Reflection.Emit.TypeBuilder.TypeBuilder(System.Reflection.Emit.TypeBuilder;System.Reflection.Emit.GenericTypeParameterBuilder[]):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="TypeBuilder" uniqueID="TypeBuilder(string;System.Reflection.TypeAttributes;System.Type;System.Reflection.Module;System.Reflection.Emit.PackingSize;int;System.Reflection.Emit.TypeBuilder):void">
				<signature>System.Reflection.Emit.TypeBuilder.TypeBuilder(string;System.Reflection.TypeAttributes;System.Type;System.Reflection.Module;System.Reflection.Emit.PackingSize;int;System.Reflection.Emit.TypeBuilder):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="TypeBuilder" uniqueID="TypeBuilder(string;System.Reflection.TypeAttributes;System.Type;System.Type[];System.Reflection.Module;System.Reflection.Emit.PackingSize;System.Reflection.Emit.TypeBuilder):void">
				<signature>System.Reflection.Emit.TypeBuilder.TypeBuilder(string;System.Reflection.TypeAttributes;System.Type;System.Type[];System.Reflection.Module;System.Reflection.Emit.PackingSize;System.Reflection.Emit.TypeBuilder):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="TypeBuilder" uniqueID="TypeBuilder(string;int;System.Reflection.Emit.MethodBuilder):void">
				<signature>System.Reflection.Emit.TypeBuilder.TypeBuilder(string;int;System.Reflection.Emit.MethodBuilder):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="TypeBuilder" uniqueID="TypeBuilder(string;int;System.Reflection.Emit.TypeBuilder):void">
				<signature>System.Reflection.Emit.TypeBuilder.TypeBuilder(string;int;System.Reflection.Emit.TypeBuilder):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="VerifyTypeAttributes" uniqueID="VerifyTypeAttributes(System.Reflection.TypeAttributes):void">
				<signature>System.Reflection.Emit.TypeBuilder.VerifyTypeAttributes(System.Reflection.TypeAttributes):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_InternalDefineClass" uniqueID="_InternalDefineClass(string;int;int[];System.Reflection.TypeAttributes;System.Reflection.Module;System.Guid;int;int):int">
				<signature>System.Reflection.Emit.TypeBuilder._InternalDefineClass(string;int;int[];System.Reflection.TypeAttributes;System.Reflection.Module;System.Guid;int;int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_InternalDefineGenParam" uniqueID="_InternalDefineGenParam(string;int;int;int;int[];System.Reflection.Module;int):int">
				<signature>System.Reflection.Emit.TypeBuilder._InternalDefineGenParam(string;int;int;int;int[];System.Reflection.Module;int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_TermCreateClass" uniqueID="_TermCreateClass(int;System.Reflection.Module):System.Type">
				<signature>System.Reflection.Emit.TypeBuilder._TermCreateClass(int;System.Reflection.Module):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Assembly" uniqueID="get_Assembly():System.Reflection.Assembly">
				<signature>System.Reflection.Emit.TypeBuilder.get_Assembly():System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AssemblyQualifiedName" uniqueID="get_AssemblyQualifiedName():string">
				<signature>System.Reflection.Emit.TypeBuilder.get_AssemblyQualifiedName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_BaseType" uniqueID="get_BaseType():System.Type">
				<signature>System.Reflection.Emit.TypeBuilder.get_BaseType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringMethod" uniqueID="get_DeclaringMethod():System.Reflection.MethodBase">
				<signature>System.Reflection.Emit.TypeBuilder.get_DeclaringMethod():System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringType" uniqueID="get_DeclaringType():System.Type">
				<signature>System.Reflection.Emit.TypeBuilder.get_DeclaringType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FullName" uniqueID="get_FullName():string">
				<signature>System.Reflection.Emit.TypeBuilder.get_FullName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_GUID" uniqueID="get_GUID():System.Guid">
				<signature>System.Reflection.Emit.TypeBuilder.get_GUID():System.Guid</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_GenericParameterAttributes" uniqueID="get_GenericParameterAttributes():System.Reflection.GenericParameterAttributes">
				<signature>System.Reflection.Emit.TypeBuilder.get_GenericParameterAttributes():System.Reflection.GenericParameterAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_GenericParameterPosition" uniqueID="get_GenericParameterPosition():int">
				<signature>System.Reflection.Emit.TypeBuilder.get_GenericParameterPosition():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsGenericParameter" uniqueID="get_IsGenericParameter():bool">
				<signature>System.Reflection.Emit.TypeBuilder.get_IsGenericParameter():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsGenericType" uniqueID="get_IsGenericType():bool">
				<signature>System.Reflection.Emit.TypeBuilder.get_IsGenericType():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsGenericTypeDefinition" uniqueID="get_IsGenericTypeDefinition():bool">
				<signature>System.Reflection.Emit.TypeBuilder.get_IsGenericTypeDefinition():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_MetadataTokenInternal" uniqueID="get_MetadataTokenInternal():int">
				<signature>System.Reflection.Emit.TypeBuilder.get_MetadataTokenInternal():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Module" uniqueID="get_Module():System.Reflection.Module">
				<signature>System.Reflection.Emit.TypeBuilder.get_Module():System.Reflection.Module</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Reflection.Emit.TypeBuilder.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Namespace" uniqueID="get_Namespace():string">
				<signature>System.Reflection.Emit.TypeBuilder.get_Namespace():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PackingSize" uniqueID="get_PackingSize():System.Reflection.Emit.PackingSize">
				<signature>System.Reflection.Emit.TypeBuilder.get_PackingSize():System.Reflection.Emit.PackingSize</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReflectedType" uniqueID="get_ReflectedType():System.Type">
				<signature>System.Reflection.Emit.TypeBuilder.get_ReflectedType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Size" uniqueID="get_Size():int">
				<signature>System.Reflection.Emit.TypeBuilder.get_Size():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TypeHandle" uniqueID="get_TypeHandle():System.RuntimeTypeHandle">
				<signature>System.Reflection.Emit.TypeBuilder.get_TypeHandle():System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TypeToken" uniqueID="get_TypeToken():System.Reflection.Emit.TypeToken">
				<signature>System.Reflection.Emit.TypeBuilder.get_TypeToken():System.Reflection.Emit.TypeToken</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_UnderlyingSystemType" uniqueID="get_UnderlyingSystemType():System.Type">
				<signature>System.Reflection.Emit.TypeBuilder.get_UnderlyingSystemType():System.Type</signature>
			</method>
		</class>
		<class name="UnmanagedMarshal" uniqueID="System.Reflection.Emit.UnmanagedMarshal">
			<method accessibility="Public" methodKind="Static" name="DefineByValArray" uniqueID="DefineByValArray(int):System.Reflection.Emit.UnmanagedMarshal">
				<signature>System.Reflection.Emit.UnmanagedMarshal.DefineByValArray(int):System.Reflection.Emit.UnmanagedMarshal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="DefineByValTStr" uniqueID="DefineByValTStr(int):System.Reflection.Emit.UnmanagedMarshal">
				<signature>System.Reflection.Emit.UnmanagedMarshal.DefineByValTStr(int):System.Reflection.Emit.UnmanagedMarshal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="DefineLPArray" uniqueID="DefineLPArray(System.Runtime.InteropServices.UnmanagedType):System.Reflection.Emit.UnmanagedMarshal">
				<signature>System.Reflection.Emit.UnmanagedMarshal.DefineLPArray(System.Runtime.InteropServices.UnmanagedType):System.Reflection.Emit.UnmanagedMarshal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="DefineSafeArray" uniqueID="DefineSafeArray(System.Runtime.InteropServices.UnmanagedType):System.Reflection.Emit.UnmanagedMarshal">
				<signature>System.Reflection.Emit.UnmanagedMarshal.DefineSafeArray(System.Runtime.InteropServices.UnmanagedType):System.Reflection.Emit.UnmanagedMarshal</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="DefineUnmanagedMarshal" uniqueID="DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType):System.Reflection.Emit.UnmanagedMarshal">
				<signature>System.Reflection.Emit.UnmanagedMarshal.DefineUnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType):System.Reflection.Emit.UnmanagedMarshal</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalGetBytes" uniqueID="InternalGetBytes():byte[]">
				<signature>System.Reflection.Emit.UnmanagedMarshal.InternalGetBytes():byte[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="UnmanagedMarshal" uniqueID="UnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType;System.Guid;int;System.Runtime.InteropServices.UnmanagedType):void">
				<signature>System.Reflection.Emit.UnmanagedMarshal.UnmanagedMarshal(System.Runtime.InteropServices.UnmanagedType;System.Guid;int;System.Runtime.InteropServices.UnmanagedType):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_BaseType" uniqueID="get_BaseType():System.Runtime.InteropServices.UnmanagedType">
				<signature>System.Reflection.Emit.UnmanagedMarshal.get_BaseType():System.Runtime.InteropServices.UnmanagedType</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ElementCount" uniqueID="get_ElementCount():int">
				<signature>System.Reflection.Emit.UnmanagedMarshal.get_ElementCount():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_GetUnmanagedType" uniqueID="get_GetUnmanagedType():System.Runtime.InteropServices.UnmanagedType">
				<signature>System.Reflection.Emit.UnmanagedMarshal.get_GetUnmanagedType():System.Runtime.InteropServices.UnmanagedType</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IIDGuid" uniqueID="get_IIDGuid():System.Guid">
				<signature>System.Reflection.Emit.UnmanagedMarshal.get_IIDGuid():System.Guid</signature>
			</method>
		</class>
		<class name="AssemblyBuilder" uniqueID="System.Reflection.Emit.AssemblyBuilder">
			<method accessibility="Public" methodKind="Member" name="AddResourceFile" uniqueID="AddResourceFile(string;string):void">
				<signature>System.Reflection.Emit.AssemblyBuilder.AddResourceFile(string;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddResourceFile" uniqueID="AddResourceFile(string;string;System.Reflection.ResourceAttributes):void">
				<signature>System.Reflection.Emit.AssemblyBuilder.AddResourceFile(string;string;System.Reflection.ResourceAttributes):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="AddResourceFileNoLock" uniqueID="AddResourceFileNoLock(string;string;System.Reflection.ResourceAttributes):void">
				<signature>System.Reflection.Emit.AssemblyBuilder.AddResourceFileNoLock(string;string;System.Reflection.ResourceAttributes):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="AssemblyBuilder" uniqueID="AssemblyBuilder():void">
				<signature>System.Reflection.Emit.AssemblyBuilder.AssemblyBuilder():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AssemblyBuilder" uniqueID="AssemblyBuilder(System.Reflection.Emit.AssemblyBuilder):void">
				<signature>System.Reflection.Emit.AssemblyBuilder.AssemblyBuilder(System.Reflection.Emit.AssemblyBuilder):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckContext" uniqueID="CheckContext(System.Type[]):void">
				<signature>System.Reflection.Emit.AssemblyBuilder.CheckContext(System.Type[]):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckContext" uniqueID="CheckContext(System.Type[][]):void">
				<signature>System.Reflection.Emit.AssemblyBuilder.CheckContext(System.Type[][]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineDynamicModule" uniqueID="DefineDynamicModule(string):System.Reflection.Emit.ModuleBuilder">
				<signature>System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(string):System.Reflection.Emit.ModuleBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineDynamicModule" uniqueID="DefineDynamicModule(string;bool):System.Reflection.Emit.ModuleBuilder">
				<signature>System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(string;bool):System.Reflection.Emit.ModuleBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineDynamicModule" uniqueID="DefineDynamicModule(string;string):System.Reflection.Emit.ModuleBuilder">
				<signature>System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(string;string):System.Reflection.Emit.ModuleBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineDynamicModule" uniqueID="DefineDynamicModule(string;string;bool):System.Reflection.Emit.ModuleBuilder">
				<signature>System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(string;string;bool):System.Reflection.Emit.ModuleBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineDynamicModuleInternal" uniqueID="DefineDynamicModuleInternal(string;bool;System.Threading.StackCrawlMark):System.Reflection.Emit.ModuleBuilder">
				<signature>System.Reflection.Emit.AssemblyBuilder.DefineDynamicModuleInternal(string;bool;System.Threading.StackCrawlMark):System.Reflection.Emit.ModuleBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineDynamicModuleInternal" uniqueID="DefineDynamicModuleInternal(string;string;bool;System.Threading.StackCrawlMark):System.Reflection.Emit.ModuleBuilder">
				<signature>System.Reflection.Emit.AssemblyBuilder.DefineDynamicModuleInternal(string;string;bool;System.Threading.StackCrawlMark):System.Reflection.Emit.ModuleBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineDynamicModuleInternalNoLock" uniqueID="DefineDynamicModuleInternalNoLock(string;bool;System.Threading.StackCrawlMark):System.Reflection.Emit.ModuleBuilder">
				<signature>System.Reflection.Emit.AssemblyBuilder.DefineDynamicModuleInternalNoLock(string;bool;System.Threading.StackCrawlMark):System.Reflection.Emit.ModuleBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineDynamicModuleInternalNoLock" uniqueID="DefineDynamicModuleInternalNoLock(string;string;bool;System.Threading.StackCrawlMark):System.Reflection.Emit.ModuleBuilder">
				<signature>System.Reflection.Emit.AssemblyBuilder.DefineDynamicModuleInternalNoLock(string;string;bool;System.Threading.StackCrawlMark):System.Reflection.Emit.ModuleBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineNestedComType" uniqueID="DefineNestedComType(System.Type;int;int):int">
				<signature>System.Reflection.Emit.AssemblyBuilder.DefineNestedComType(System.Type;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineResource" uniqueID="DefineResource(string;string;string):System.Resources.IResourceWriter">
				<signature>System.Reflection.Emit.AssemblyBuilder.DefineResource(string;string;string):System.Resources.IResourceWriter</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineResource" uniqueID="DefineResource(string;string;string;System.Reflection.ResourceAttributes):System.Resources.IResourceWriter">
				<signature>System.Reflection.Emit.AssemblyBuilder.DefineResource(string;string;string;System.Reflection.ResourceAttributes):System.Resources.IResourceWriter</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineResourceNoLock" uniqueID="DefineResourceNoLock(string;string;string;System.Reflection.ResourceAttributes):System.Resources.IResourceWriter">
				<signature>System.Reflection.Emit.AssemblyBuilder.DefineResourceNoLock(string;string;string;System.Reflection.ResourceAttributes):System.Resources.IResourceWriter</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineUnmanagedResource" uniqueID="DefineUnmanagedResource(byte[]):void">
				<signature>System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource(byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineUnmanagedResource" uniqueID="DefineUnmanagedResource(string):void">
				<signature>System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResource(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineUnmanagedResourceNoLock" uniqueID="DefineUnmanagedResourceNoLock(byte[]):void">
				<signature>System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResourceNoLock(byte[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineUnmanagedResourceNoLock" uniqueID="DefineUnmanagedResourceNoLock(string):void">
				<signature>System.Reflection.Emit.AssemblyBuilder.DefineUnmanagedResourceNoLock(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineVersionInfoResource" uniqueID="DefineVersionInfoResource():void">
				<signature>System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineVersionInfoResource" uniqueID="DefineVersionInfoResource(string;string;string;string;string):void">
				<signature>System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResource(string;string;string;string;string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineVersionInfoResourceNoLock" uniqueID="DefineVersionInfoResourceNoLock():void">
				<signature>System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResourceNoLock():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DefineVersionInfoResourceNoLock" uniqueID="DefineVersionInfoResourceNoLock(string;string;string;string;string):void">
				<signature>System.Reflection.Emit.AssemblyBuilder.DefineVersionInfoResourceNoLock(string;string;string;string;string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="DemandGrantedPermission" uniqueID="DemandGrantedPermission():void">
				<signature>System.Reflection.Emit.AssemblyBuilder.DemandGrantedPermission():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetDynamicModule" uniqueID="GetDynamicModule(string):System.Reflection.Emit.ModuleBuilder">
				<signature>System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(string):System.Reflection.Emit.ModuleBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetDynamicModuleNoLock" uniqueID="GetDynamicModuleNoLock(string):System.Reflection.Emit.ModuleBuilder">
				<signature>System.Reflection.Emit.AssemblyBuilder.GetDynamicModuleNoLock(string):System.Reflection.Emit.ModuleBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetExportedTypes" uniqueID="GetExportedTypes():System.Type[]">
				<signature>System.Reflection.Emit.AssemblyBuilder.GetExportedTypes():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFile" uniqueID="GetFile(string):System.IO.FileStream">
				<signature>System.Reflection.Emit.AssemblyBuilder.GetFile(string):System.IO.FileStream</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFiles" uniqueID="GetFiles(bool):System.IO.FileStream[]">
				<signature>System.Reflection.Emit.AssemblyBuilder.GetFiles(bool):System.IO.FileStream[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetManifestResourceInfo" uniqueID="GetManifestResourceInfo(string):System.Reflection.ManifestResourceInfo">
				<signature>System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(string):System.Reflection.ManifestResourceInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetManifestResourceNames" uniqueID="GetManifestResourceNames():string[]">
				<signature>System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames():string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetManifestResourceStream" uniqueID="GetManifestResourceStream(System.Type;string):System.IO.Stream">
				<signature>System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.Type;string):System.IO.Stream</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetManifestResourceStream" uniqueID="GetManifestResourceStream(string):System.IO.Stream">
				<signature>System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(string):System.IO.Stream</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetModuleInternal" uniqueID="GetModuleInternal(string):System.Reflection.Module">
				<signature>System.Reflection.Emit.AssemblyBuilder.GetModuleInternal(string):System.Reflection.Module</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsPersistable" uniqueID="IsPersistable():bool">
				<signature>System.Reflection.Emit.AssemblyBuilder.IsPersistable():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="LoadISymWrapper" uniqueID="LoadISymWrapper():System.Reflection.Assembly">
				<signature>System.Reflection.Emit.AssemblyBuilder.LoadISymWrapper():System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Save" uniqueID="Save(string):void">
				<signature>System.Reflection.Emit.AssemblyBuilder.Save(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Save" uniqueID="Save(string;System.Reflection.PortableExecutableKinds;System.Reflection.ImageFileMachine):void">
				<signature>System.Reflection.Emit.AssemblyBuilder.Save(string;System.Reflection.PortableExecutableKinds;System.Reflection.ImageFileMachine):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SaveNoLock" uniqueID="SaveNoLock(string;System.Reflection.PortableExecutableKinds;System.Reflection.ImageFileMachine):void">
				<signature>System.Reflection.Emit.AssemblyBuilder.SaveNoLock(string;System.Reflection.PortableExecutableKinds;System.Reflection.ImageFileMachine):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetCustomAttribute" uniqueID="SetCustomAttribute(System.Reflection.ConstructorInfo;byte[]):void">
				<signature>System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo;byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetCustomAttribute" uniqueID="SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder):void">
				<signature>System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SetCustomAttributeNoLock" uniqueID="SetCustomAttributeNoLock(System.Reflection.ConstructorInfo;byte[]):void">
				<signature>System.Reflection.Emit.AssemblyBuilder.SetCustomAttributeNoLock(System.Reflection.ConstructorInfo;byte[]):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SetCustomAttributeNoLock" uniqueID="SetCustomAttributeNoLock(System.Reflection.Emit.CustomAttributeBuilder):void">
				<signature>System.Reflection.Emit.AssemblyBuilder.SetCustomAttributeNoLock(System.Reflection.Emit.CustomAttributeBuilder):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetEntryPoint" uniqueID="SetEntryPoint(System.Reflection.MethodInfo):void">
				<signature>System.Reflection.Emit.AssemblyBuilder.SetEntryPoint(System.Reflection.MethodInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetEntryPoint" uniqueID="SetEntryPoint(System.Reflection.MethodInfo;System.Reflection.Emit.PEFileKinds):void">
				<signature>System.Reflection.Emit.AssemblyBuilder.SetEntryPoint(System.Reflection.MethodInfo;System.Reflection.Emit.PEFileKinds):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SetEntryPointNoLock" uniqueID="SetEntryPointNoLock(System.Reflection.MethodInfo;System.Reflection.Emit.PEFileKinds):void">
				<signature>System.Reflection.Emit.AssemblyBuilder.SetEntryPointNoLock(System.Reflection.MethodInfo;System.Reflection.Emit.PEFileKinds):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._AssemblyBuilder.GetIDsOfNames" uniqueID="System.Runtime.InteropServices._AssemblyBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.AssemblyBuilder.System.Runtime.InteropServices._AssemblyBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfo" uniqueID="System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.AssemblyBuilder.System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfoCount" uniqueID="System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfoCount(unsigned int):void">
				<signature>System.Reflection.Emit.AssemblyBuilder.System.Runtime.InteropServices._AssemblyBuilder.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._AssemblyBuilder.Invoke" uniqueID="System.Runtime.InteropServices._AssemblyBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Reflection.Emit.AssemblyBuilder.System.Runtime.InteropServices._AssemblyBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CodeBase" uniqueID="get_CodeBase():string">
				<signature>System.Reflection.Emit.AssemblyBuilder.get_CodeBase():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_EntryPoint" uniqueID="get_EntryPoint():System.Reflection.MethodInfo">
				<signature>System.Reflection.Emit.AssemblyBuilder.get_EntryPoint():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_GrantedPermissionSet" uniqueID="get_GrantedPermissionSet():System.Security.PermissionSet">
				<signature>System.Reflection.Emit.AssemblyBuilder.get_GrantedPermissionSet():System.Security.PermissionSet</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ImageRuntimeVersion" uniqueID="get_ImageRuntimeVersion():string">
				<signature>System.Reflection.Emit.AssemblyBuilder.get_ImageRuntimeVersion():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_InternalAssembly" uniqueID="get_InternalAssembly():System.Reflection.Assembly">
				<signature>System.Reflection.Emit.AssemblyBuilder.get_InternalAssembly():System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_IsInternal" uniqueID="get_IsInternal():bool">
				<signature>System.Reflection.Emit.AssemblyBuilder.get_IsInternal():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Location" uniqueID="get_Location():string">
				<signature>System.Reflection.Emit.AssemblyBuilder.get_Location():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="nGetModules" uniqueID="nGetModules(bool;bool):System.Reflection.Module[]">
				<signature>System.Reflection.Emit.AssemblyBuilder.nGetModules(bool;bool):System.Reflection.Module[]</signature>
			</method>
		</class>
		<class name="EventToken" uniqueID="System.Reflection.Emit.EventToken">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Reflection.Emit.EventToken.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.Reflection.Emit.EventToken;System.Reflection.Emit.EventToken):bool">
				<signature>System.Reflection.Emit.EventToken.op_Equality(System.Reflection.Emit.EventToken;System.Reflection.Emit.EventToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.Reflection.Emit.EventToken;System.Reflection.Emit.EventToken):bool">
				<signature>System.Reflection.Emit.EventToken.op_Inequality(System.Reflection.Emit.EventToken;System.Reflection.Emit.EventToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.Reflection.Emit.EventToken):bool">
				<signature>System.Reflection.Emit.EventToken.Equals(System.Reflection.Emit.EventToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Reflection.Emit.EventToken.Equals(object):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EventToken" uniqueID="EventToken(int):void">
				<signature>System.Reflection.Emit.EventToken.EventToken(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Reflection.Emit.EventToken.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Token" uniqueID="get_Token():int">
				<signature>System.Reflection.Emit.EventToken.get_Token():int</signature>
			</method>
		</class>
		<class name="FieldToken" uniqueID="System.Reflection.Emit.FieldToken">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Reflection.Emit.FieldToken.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.Reflection.Emit.FieldToken;System.Reflection.Emit.FieldToken):bool">
				<signature>System.Reflection.Emit.FieldToken.op_Equality(System.Reflection.Emit.FieldToken;System.Reflection.Emit.FieldToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.Reflection.Emit.FieldToken;System.Reflection.Emit.FieldToken):bool">
				<signature>System.Reflection.Emit.FieldToken.op_Inequality(System.Reflection.Emit.FieldToken;System.Reflection.Emit.FieldToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.Reflection.Emit.FieldToken):bool">
				<signature>System.Reflection.Emit.FieldToken.Equals(System.Reflection.Emit.FieldToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Reflection.Emit.FieldToken.Equals(object):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FieldToken" uniqueID="FieldToken(int;System.Type):void">
				<signature>System.Reflection.Emit.FieldToken.FieldToken(int;System.Type):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Reflection.Emit.FieldToken.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Token" uniqueID="get_Token():int">
				<signature>System.Reflection.Emit.FieldToken.get_Token():int</signature>
			</method>
		</class>
		<class name="PropertyToken" uniqueID="System.Reflection.Emit.PropertyToken">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Reflection.Emit.PropertyToken.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.Reflection.Emit.PropertyToken;System.Reflection.Emit.PropertyToken):bool">
				<signature>System.Reflection.Emit.PropertyToken.op_Equality(System.Reflection.Emit.PropertyToken;System.Reflection.Emit.PropertyToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.Reflection.Emit.PropertyToken;System.Reflection.Emit.PropertyToken):bool">
				<signature>System.Reflection.Emit.PropertyToken.op_Inequality(System.Reflection.Emit.PropertyToken;System.Reflection.Emit.PropertyToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.Reflection.Emit.PropertyToken):bool">
				<signature>System.Reflection.Emit.PropertyToken.Equals(System.Reflection.Emit.PropertyToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Reflection.Emit.PropertyToken.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Reflection.Emit.PropertyToken.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="PropertyToken" uniqueID="PropertyToken(int):void">
				<signature>System.Reflection.Emit.PropertyToken.PropertyToken(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Token" uniqueID="get_Token():int">
				<signature>System.Reflection.Emit.PropertyToken.get_Token():int</signature>
			</method>
		</class>
		<class name="LineNumberInfo" uniqueID="System.Reflection.Emit.LineNumberInfo">
			<method accessibility="Protected" methodKind="Member" name="AddLineNumberInfo" uniqueID="AddLineNumberInfo(System.Diagnostics.SymbolStore.ISymbolDocumentWriter;int;int;int;int;int):void">
				<signature>System.Reflection.Emit.LineNumberInfo.AddLineNumberInfo(System.Diagnostics.SymbolStore.ISymbolDocumentWriter;int;int;int;int;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EmitLineNumberInfo" uniqueID="EmitLineNumberInfo(System.Diagnostics.SymbolStore.ISymbolWriter):void">
				<signature>System.Reflection.Emit.LineNumberInfo.EmitLineNumberInfo(System.Diagnostics.SymbolStore.ISymbolWriter):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EnsureCapacity" uniqueID="EnsureCapacity():void">
				<signature>System.Reflection.Emit.LineNumberInfo.EnsureCapacity():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FindDocument" uniqueID="FindDocument(System.Diagnostics.SymbolStore.ISymbolDocumentWriter):int">
				<signature>System.Reflection.Emit.LineNumberInfo.FindDocument(System.Diagnostics.SymbolStore.ISymbolDocumentWriter):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="LineNumberInfo" uniqueID="LineNumberInfo():void">
				<signature>System.Reflection.Emit.LineNumberInfo.LineNumberInfo():void</signature>
			</method>
		</class>
		<class name="NativeVersionInfo" uniqueID="System.Reflection.Emit.NativeVersionInfo">
			<method accessibility="Protected" methodKind="Member" name="NativeVersionInfo" uniqueID="NativeVersionInfo():void">
				<signature>System.Reflection.Emit.NativeVersionInfo.NativeVersionInfo():void</signature>
			</method>
		</class>
		<class name="ParameterBuilder" uniqueID="System.Reflection.Emit.ParameterBuilder">
			<method accessibility="Public" methodKind="Member" name="GetToken" uniqueID="GetToken():System.Reflection.Emit.ParameterToken">
				<signature>System.Reflection.Emit.ParameterBuilder.GetToken():System.Reflection.Emit.ParameterToken</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ParameterBuilder" uniqueID="ParameterBuilder():void">
				<signature>System.Reflection.Emit.ParameterBuilder.ParameterBuilder():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ParameterBuilder" uniqueID="ParameterBuilder(System.Reflection.Emit.MethodBuilder;int;System.Reflection.ParameterAttributes;string):void">
				<signature>System.Reflection.Emit.ParameterBuilder.ParameterBuilder(System.Reflection.Emit.MethodBuilder;int;System.Reflection.ParameterAttributes;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetConstant" uniqueID="SetConstant(object):void">
				<signature>System.Reflection.Emit.ParameterBuilder.SetConstant(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetCustomAttribute" uniqueID="SetCustomAttribute(System.Reflection.ConstructorInfo;byte[]):void">
				<signature>System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo;byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetCustomAttribute" uniqueID="SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder):void">
				<signature>System.Reflection.Emit.ParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetMarshal" uniqueID="SetMarshal(System.Reflection.Emit.UnmanagedMarshal):void">
				<signature>System.Reflection.Emit.ParameterBuilder.SetMarshal(System.Reflection.Emit.UnmanagedMarshal):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ParameterBuilder.GetIDsOfNames" uniqueID="System.Runtime.InteropServices._ParameterBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.ParameterBuilder.System.Runtime.InteropServices._ParameterBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ParameterBuilder.GetTypeInfo" uniqueID="System.Runtime.InteropServices._ParameterBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.ParameterBuilder.System.Runtime.InteropServices._ParameterBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ParameterBuilder.GetTypeInfoCount" uniqueID="System.Runtime.InteropServices._ParameterBuilder.GetTypeInfoCount(unsigned int):void">
				<signature>System.Reflection.Emit.ParameterBuilder.System.Runtime.InteropServices._ParameterBuilder.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._ParameterBuilder.Invoke" uniqueID="System.Runtime.InteropServices._ParameterBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Reflection.Emit.ParameterBuilder.System.Runtime.InteropServices._ParameterBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Attributes" uniqueID="get_Attributes():int">
				<signature>System.Reflection.Emit.ParameterBuilder.get_Attributes():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsIn" uniqueID="get_IsIn():bool">
				<signature>System.Reflection.Emit.ParameterBuilder.get_IsIn():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsOptional" uniqueID="get_IsOptional():bool">
				<signature>System.Reflection.Emit.ParameterBuilder.get_IsOptional():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsOut" uniqueID="get_IsOut():bool">
				<signature>System.Reflection.Emit.ParameterBuilder.get_IsOut():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_MetadataTokenInternal" uniqueID="get_MetadataTokenInternal():int">
				<signature>System.Reflection.Emit.ParameterBuilder.get_MetadataTokenInternal():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Reflection.Emit.ParameterBuilder.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Position" uniqueID="get_Position():int">
				<signature>System.Reflection.Emit.ParameterBuilder.get_Position():int</signature>
			</method>
		</class>
		<class name="TypeToken" uniqueID="System.Reflection.Emit.TypeToken">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Reflection.Emit.TypeToken.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.Reflection.Emit.TypeToken;System.Reflection.Emit.TypeToken):bool">
				<signature>System.Reflection.Emit.TypeToken.op_Equality(System.Reflection.Emit.TypeToken;System.Reflection.Emit.TypeToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.Reflection.Emit.TypeToken;System.Reflection.Emit.TypeToken):bool">
				<signature>System.Reflection.Emit.TypeToken.op_Inequality(System.Reflection.Emit.TypeToken;System.Reflection.Emit.TypeToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.Reflection.Emit.TypeToken):bool">
				<signature>System.Reflection.Emit.TypeToken.Equals(System.Reflection.Emit.TypeToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Reflection.Emit.TypeToken.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Reflection.Emit.TypeToken.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="TypeToken" uniqueID="TypeToken(int):void">
				<signature>System.Reflection.Emit.TypeToken.TypeToken(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Token" uniqueID="get_Token():int">
				<signature>System.Reflection.Emit.TypeToken.get_Token():int</signature>
			</method>
		</class>
		<class name="AssemblyBuilderData" uniqueID="System.Reflection.Emit.AssemblyBuilderData">
			<method accessibility="Protected" methodKind="Member" name="AddCustomAttribute" uniqueID="AddCustomAttribute(System.Reflection.ConstructorInfo;byte[]):void">
				<signature>System.Reflection.Emit.AssemblyBuilderData.AddCustomAttribute(System.Reflection.ConstructorInfo;byte[]):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AddCustomAttribute" uniqueID="AddCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder):void">
				<signature>System.Reflection.Emit.AssemblyBuilderData.AddCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AddModule" uniqueID="AddModule(System.Reflection.Emit.ModuleBuilder):void">
				<signature>System.Reflection.Emit.AssemblyBuilderData.AddModule(System.Reflection.Emit.ModuleBuilder):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AddPermissionRequests" uniqueID="AddPermissionRequests(System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet):void">
				<signature>System.Reflection.Emit.AssemblyBuilderData.AddPermissionRequests(System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AddPublicComType" uniqueID="AddPublicComType(System.Type):void">
				<signature>System.Reflection.Emit.AssemblyBuilderData.AddPublicComType(System.Type):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AddResWriter" uniqueID="AddResWriter(System.Reflection.Emit.ResWriterData):void">
				<signature>System.Reflection.Emit.AssemblyBuilderData.AddResWriter(System.Reflection.Emit.ResWriterData):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AssemblyBuilderData" uniqueID="AssemblyBuilderData(System.Reflection.Assembly;string;System.Reflection.Emit.AssemblyBuilderAccess;string):void">
				<signature>System.Reflection.Emit.AssemblyBuilderData.AssemblyBuilderData(System.Reflection.Assembly;string;System.Reflection.Emit.AssemblyBuilderAccess;string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckFileNameConflict" uniqueID="CheckFileNameConflict(string):void">
				<signature>System.Reflection.Emit.AssemblyBuilderData.CheckFileNameConflict(string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckNameConflict" uniqueID="CheckNameConflict(string):void">
				<signature>System.Reflection.Emit.AssemblyBuilderData.CheckNameConflict(string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckResNameConflict" uniqueID="CheckResNameConflict(string):void">
				<signature>System.Reflection.Emit.AssemblyBuilderData.CheckResNameConflict(string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckTypeNameConflict" uniqueID="CheckTypeNameConflict(string;System.Reflection.Emit.TypeBuilder):void">
				<signature>System.Reflection.Emit.AssemblyBuilderData.CheckTypeNameConflict(string;System.Reflection.Emit.TypeBuilder):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EnsurePublicComTypeCapacity" uniqueID="EnsurePublicComTypeCapacity():void">
				<signature>System.Reflection.Emit.AssemblyBuilderData.EnsurePublicComTypeCapacity():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FillUnmanagedVersionInfo" uniqueID="FillUnmanagedVersionInfo():void">
				<signature>System.Reflection.Emit.AssemblyBuilderData.FillUnmanagedVersionInfo():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FindModuleWithFileName" uniqueID="FindModuleWithFileName(string):System.Reflection.Emit.ModuleBuilder">
				<signature>System.Reflection.Emit.AssemblyBuilderData.FindModuleWithFileName(string):System.Reflection.Emit.ModuleBuilder</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FindModuleWithName" uniqueID="FindModuleWithName(string):System.Reflection.Emit.ModuleBuilder">
				<signature>System.Reflection.Emit.AssemblyBuilderData.FindModuleWithName(string):System.Reflection.Emit.ModuleBuilder</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetInMemoryAssemblyModule" uniqueID="GetInMemoryAssemblyModule():System.Reflection.Emit.ModuleBuilder">
				<signature>System.Reflection.Emit.AssemblyBuilderData.GetInMemoryAssemblyModule():System.Reflection.Emit.ModuleBuilder</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetOnDiskAssemblyModule" uniqueID="GetOnDiskAssemblyModule():System.Reflection.Emit.ModuleBuilder">
				<signature>System.Reflection.Emit.AssemblyBuilderData.GetOnDiskAssemblyModule():System.Reflection.Emit.ModuleBuilder</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetOnDiskAssemblyModule" uniqueID="SetOnDiskAssemblyModule(System.Reflection.Emit.ModuleBuilder):void">
				<signature>System.Reflection.Emit.AssemblyBuilderData.SetOnDiskAssemblyModule(System.Reflection.Emit.ModuleBuilder):void</signature>
			</method>
		</class>
		<class name="FieldBuilder" uniqueID="System.Reflection.Emit.FieldBuilder">
			<method accessibility="Protected" methodKind="Member" name="FieldBuilder" uniqueID="FieldBuilder(System.Reflection.Emit.TypeBuilder;string;System.Type;System.Type[];System.Type[];System.Reflection.FieldAttributes):void">
				<signature>System.Reflection.Emit.FieldBuilder.FieldBuilder(System.Reflection.Emit.TypeBuilder;string;System.Type;System.Type[];System.Type[];System.Reflection.FieldAttributes):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.Reflection.Emit.FieldBuilder.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetToken" uniqueID="GetToken():System.Reflection.Emit.FieldToken">
				<signature>System.Reflection.Emit.FieldBuilder.GetToken():System.Reflection.Emit.FieldToken</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetTypeBuilder" uniqueID="GetTypeBuilder():System.Reflection.Emit.TypeBuilder">
				<signature>System.Reflection.Emit.FieldBuilder.GetTypeBuilder():System.Reflection.Emit.TypeBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValue" uniqueID="GetValue(object):object">
				<signature>System.Reflection.Emit.FieldBuilder.GetValue(object):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.Reflection.Emit.FieldBuilder.IsDefined(System.Type;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetConstant" uniqueID="SetConstant(object):void">
				<signature>System.Reflection.Emit.FieldBuilder.SetConstant(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetCustomAttribute" uniqueID="SetCustomAttribute(System.Reflection.ConstructorInfo;byte[]):void">
				<signature>System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo;byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetCustomAttribute" uniqueID="SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder):void">
				<signature>System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetData" uniqueID="SetData(byte[];int):void">
				<signature>System.Reflection.Emit.FieldBuilder.SetData(byte[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetMarshal" uniqueID="SetMarshal(System.Reflection.Emit.UnmanagedMarshal):void">
				<signature>System.Reflection.Emit.FieldBuilder.SetMarshal(System.Reflection.Emit.UnmanagedMarshal):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetOffset" uniqueID="SetOffset(int):void">
				<signature>System.Reflection.Emit.FieldBuilder.SetOffset(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetValue" uniqueID="SetValue(object;object;System.Reflection.BindingFlags;System.Reflection.Binder;System.Globalization.CultureInfo):void">
				<signature>System.Reflection.Emit.FieldBuilder.SetValue(object;object;System.Reflection.BindingFlags;System.Reflection.Binder;System.Globalization.CultureInfo):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._FieldBuilder.GetIDsOfNames" uniqueID="System.Runtime.InteropServices._FieldBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.FieldBuilder.System.Runtime.InteropServices._FieldBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._FieldBuilder.GetTypeInfo" uniqueID="System.Runtime.InteropServices._FieldBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.FieldBuilder.System.Runtime.InteropServices._FieldBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._FieldBuilder.GetTypeInfoCount" uniqueID="System.Runtime.InteropServices._FieldBuilder.GetTypeInfoCount(unsigned int):void">
				<signature>System.Reflection.Emit.FieldBuilder.System.Runtime.InteropServices._FieldBuilder.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._FieldBuilder.Invoke" uniqueID="System.Runtime.InteropServices._FieldBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Reflection.Emit.FieldBuilder.System.Runtime.InteropServices._FieldBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Attributes" uniqueID="get_Attributes():System.Reflection.FieldAttributes">
				<signature>System.Reflection.Emit.FieldBuilder.get_Attributes():System.Reflection.FieldAttributes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringType" uniqueID="get_DeclaringType():System.Type">
				<signature>System.Reflection.Emit.FieldBuilder.get_DeclaringType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FieldHandle" uniqueID="get_FieldHandle():System.RuntimeFieldHandle">
				<signature>System.Reflection.Emit.FieldBuilder.get_FieldHandle():System.RuntimeFieldHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FieldType" uniqueID="get_FieldType():System.Type">
				<signature>System.Reflection.Emit.FieldBuilder.get_FieldType():System.Type</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_MetadataTokenInternal" uniqueID="get_MetadataTokenInternal():int">
				<signature>System.Reflection.Emit.FieldBuilder.get_MetadataTokenInternal():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Module" uniqueID="get_Module():System.Reflection.Module">
				<signature>System.Reflection.Emit.FieldBuilder.get_Module():System.Reflection.Module</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Reflection.Emit.FieldBuilder.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReflectedType" uniqueID="get_ReflectedType():System.Type">
				<signature>System.Reflection.Emit.FieldBuilder.get_ReflectedType():System.Type</signature>
			</method>
		</class>
		<class name="LocalBuilder" uniqueID="System.Reflection.Emit.LocalBuilder">
			<method accessibility="Protected" methodKind="Member" name="GetLocalIndex" uniqueID="GetLocalIndex():int">
				<signature>System.Reflection.Emit.LocalBuilder.GetLocalIndex():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMethodBuilder" uniqueID="GetMethodBuilder():System.Reflection.MethodInfo">
				<signature>System.Reflection.Emit.LocalBuilder.GetMethodBuilder():System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="LocalBuilder" uniqueID="LocalBuilder():void">
				<signature>System.Reflection.Emit.LocalBuilder.LocalBuilder():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="LocalBuilder" uniqueID="LocalBuilder(int;System.Type;System.Reflection.MethodInfo):void">
				<signature>System.Reflection.Emit.LocalBuilder.LocalBuilder(int;System.Type;System.Reflection.MethodInfo):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="LocalBuilder" uniqueID="LocalBuilder(int;System.Type;System.Reflection.MethodInfo;bool):void">
				<signature>System.Reflection.Emit.LocalBuilder.LocalBuilder(int;System.Type;System.Reflection.MethodInfo;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetLocalSymInfo" uniqueID="SetLocalSymInfo(string):void">
				<signature>System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetLocalSymInfo" uniqueID="SetLocalSymInfo(string;int;int):void">
				<signature>System.Reflection.Emit.LocalBuilder.SetLocalSymInfo(string;int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._LocalBuilder.GetIDsOfNames" uniqueID="System.Runtime.InteropServices._LocalBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.LocalBuilder.System.Runtime.InteropServices._LocalBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._LocalBuilder.GetTypeInfo" uniqueID="System.Runtime.InteropServices._LocalBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.LocalBuilder.System.Runtime.InteropServices._LocalBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._LocalBuilder.GetTypeInfoCount" uniqueID="System.Runtime.InteropServices._LocalBuilder.GetTypeInfoCount(unsigned int):void">
				<signature>System.Reflection.Emit.LocalBuilder.System.Runtime.InteropServices._LocalBuilder.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._LocalBuilder.Invoke" uniqueID="System.Runtime.InteropServices._LocalBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Reflection.Emit.LocalBuilder.System.Runtime.InteropServices._LocalBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsPinned" uniqueID="get_IsPinned():bool">
				<signature>System.Reflection.Emit.LocalBuilder.get_IsPinned():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_LocalIndex" uniqueID="get_LocalIndex():int">
				<signature>System.Reflection.Emit.LocalBuilder.get_LocalIndex():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_LocalType" uniqueID="get_LocalType():System.Type">
				<signature>System.Reflection.Emit.LocalBuilder.get_LocalType():System.Type</signature>
			</method>
		</class>
		<class name="ResWriterData" uniqueID="System.Reflection.Emit.ResWriterData">
			<method accessibility="Protected" methodKind="Member" name="ResWriterData" uniqueID="ResWriterData(System.Resources.ResourceWriter;System.IO.Stream;string;string;string;System.Reflection.ResourceAttributes):void">
				<signature>System.Reflection.Emit.ResWriterData.ResWriterData(System.Resources.ResourceWriter;System.IO.Stream;string;string;string;System.Reflection.ResourceAttributes):void</signature>
			</method>
		</class>
		<class name="EventBuilder" uniqueID="System.Reflection.Emit.EventBuilder">
			<method accessibility="Public" methodKind="Member" name="AddOtherMethod" uniqueID="AddOtherMethod(System.Reflection.Emit.MethodBuilder):void">
				<signature>System.Reflection.Emit.EventBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="EventBuilder" uniqueID="EventBuilder():void">
				<signature>System.Reflection.Emit.EventBuilder.EventBuilder():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EventBuilder" uniqueID="EventBuilder(System.Reflection.Module;string;System.Reflection.EventAttributes;int;System.Reflection.Emit.TypeBuilder;System.Reflection.Emit.EventToken):void">
				<signature>System.Reflection.Emit.EventBuilder.EventBuilder(System.Reflection.Module;string;System.Reflection.EventAttributes;int;System.Reflection.Emit.TypeBuilder;System.Reflection.Emit.EventToken):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEventToken" uniqueID="GetEventToken():System.Reflection.Emit.EventToken">
				<signature>System.Reflection.Emit.EventBuilder.GetEventToken():System.Reflection.Emit.EventToken</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetAddOnMethod" uniqueID="SetAddOnMethod(System.Reflection.Emit.MethodBuilder):void">
				<signature>System.Reflection.Emit.EventBuilder.SetAddOnMethod(System.Reflection.Emit.MethodBuilder):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetCustomAttribute" uniqueID="SetCustomAttribute(System.Reflection.ConstructorInfo;byte[]):void">
				<signature>System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo;byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetCustomAttribute" uniqueID="SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder):void">
				<signature>System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetRaiseMethod" uniqueID="SetRaiseMethod(System.Reflection.Emit.MethodBuilder):void">
				<signature>System.Reflection.Emit.EventBuilder.SetRaiseMethod(System.Reflection.Emit.MethodBuilder):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetRemoveOnMethod" uniqueID="SetRemoveOnMethod(System.Reflection.Emit.MethodBuilder):void">
				<signature>System.Reflection.Emit.EventBuilder.SetRemoveOnMethod(System.Reflection.Emit.MethodBuilder):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._EventBuilder.GetIDsOfNames" uniqueID="System.Runtime.InteropServices._EventBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.EventBuilder.System.Runtime.InteropServices._EventBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._EventBuilder.GetTypeInfo" uniqueID="System.Runtime.InteropServices._EventBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.EventBuilder.System.Runtime.InteropServices._EventBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._EventBuilder.GetTypeInfoCount" uniqueID="System.Runtime.InteropServices._EventBuilder.GetTypeInfoCount(unsigned int):void">
				<signature>System.Reflection.Emit.EventBuilder.System.Runtime.InteropServices._EventBuilder.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._EventBuilder.Invoke" uniqueID="System.Runtime.InteropServices._EventBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Reflection.Emit.EventBuilder.System.Runtime.InteropServices._EventBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
		</class>
		<class name="Label" uniqueID="System.Reflection.Emit.Label">
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.Reflection.Emit.Label;System.Reflection.Emit.Label):bool">
				<signature>System.Reflection.Emit.Label.op_Equality(System.Reflection.Emit.Label;System.Reflection.Emit.Label):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.Reflection.Emit.Label;System.Reflection.Emit.Label):bool">
				<signature>System.Reflection.Emit.Label.op_Inequality(System.Reflection.Emit.Label;System.Reflection.Emit.Label):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.Reflection.Emit.Label):bool">
				<signature>System.Reflection.Emit.Label.Equals(System.Reflection.Emit.Label):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Reflection.Emit.Label.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Reflection.Emit.Label.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetLabelValue" uniqueID="GetLabelValue():int">
				<signature>System.Reflection.Emit.Label.GetLabelValue():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Label" uniqueID="Label(int):void">
				<signature>System.Reflection.Emit.Label.Label(int):void</signature>
			</method>
		</class>
		<class name="MethodToken" uniqueID="System.Reflection.Emit.MethodToken">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Reflection.Emit.MethodToken.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Equality" uniqueID="op_Equality(System.Reflection.Emit.MethodToken;System.Reflection.Emit.MethodToken):bool">
				<signature>System.Reflection.Emit.MethodToken.op_Equality(System.Reflection.Emit.MethodToken;System.Reflection.Emit.MethodToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="op_Inequality" uniqueID="op_Inequality(System.Reflection.Emit.MethodToken;System.Reflection.Emit.MethodToken):bool">
				<signature>System.Reflection.Emit.MethodToken.op_Inequality(System.Reflection.Emit.MethodToken;System.Reflection.Emit.MethodToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(System.Reflection.Emit.MethodToken):bool">
				<signature>System.Reflection.Emit.MethodToken.Equals(System.Reflection.Emit.MethodToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Reflection.Emit.MethodToken.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Reflection.Emit.MethodToken.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MethodToken" uniqueID="MethodToken(int):void">
				<signature>System.Reflection.Emit.MethodToken.MethodToken(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Token" uniqueID="get_Token():int">
				<signature>System.Reflection.Emit.MethodToken.get_Token():int</signature>
			</method>
		</class>
		<class name="EnumBuilder" uniqueID="System.Reflection.Emit.EnumBuilder">
			<method accessibility="Public" methodKind="Member" name="CreateType" uniqueID="CreateType():System.Type">
				<signature>System.Reflection.Emit.EnumBuilder.CreateType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DefineLiteral" uniqueID="DefineLiteral(string;object):System.Reflection.Emit.FieldBuilder">
				<signature>System.Reflection.Emit.EnumBuilder.DefineLiteral(string;object):System.Reflection.Emit.FieldBuilder</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="EnumBuilder" uniqueID="EnumBuilder():void">
				<signature>System.Reflection.Emit.EnumBuilder.EnumBuilder():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EnumBuilder" uniqueID="EnumBuilder(string;System.Type;System.Reflection.TypeAttributes;System.Reflection.Module):void">
				<signature>System.Reflection.Emit.EnumBuilder.EnumBuilder(string;System.Type;System.Reflection.TypeAttributes;System.Reflection.Module):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetAttributeFlagsImpl" uniqueID="GetAttributeFlagsImpl():System.Reflection.TypeAttributes">
				<signature>System.Reflection.Emit.EnumBuilder.GetAttributeFlagsImpl():System.Reflection.TypeAttributes</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetConstructorImpl" uniqueID="GetConstructorImpl(System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.ConstructorInfo">
				<signature>System.Reflection.Emit.EnumBuilder.GetConstructorImpl(System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.ConstructorInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetConstructors" uniqueID="GetConstructors(System.Reflection.BindingFlags):System.Reflection.ConstructorInfo[]">
				<signature>System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags):System.Reflection.ConstructorInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(System.Type;bool):object[]">
				<signature>System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type;bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetCustomAttributes" uniqueID="GetCustomAttributes(bool):object[]">
				<signature>System.Reflection.Emit.EnumBuilder.GetCustomAttributes(bool):object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetElementType" uniqueID="GetElementType():System.Type">
				<signature>System.Reflection.Emit.EnumBuilder.GetElementType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEvent" uniqueID="GetEvent(string;System.Reflection.BindingFlags):System.Reflection.EventInfo">
				<signature>System.Reflection.Emit.EnumBuilder.GetEvent(string;System.Reflection.BindingFlags):System.Reflection.EventInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEvents" uniqueID="GetEvents():System.Reflection.EventInfo[]">
				<signature>System.Reflection.Emit.EnumBuilder.GetEvents():System.Reflection.EventInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEvents" uniqueID="GetEvents(System.Reflection.BindingFlags):System.Reflection.EventInfo[]">
				<signature>System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags):System.Reflection.EventInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetField" uniqueID="GetField(string;System.Reflection.BindingFlags):System.Reflection.FieldInfo">
				<signature>System.Reflection.Emit.EnumBuilder.GetField(string;System.Reflection.BindingFlags):System.Reflection.FieldInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFields" uniqueID="GetFields(System.Reflection.BindingFlags):System.Reflection.FieldInfo[]">
				<signature>System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags):System.Reflection.FieldInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetInterface" uniqueID="GetInterface(string;bool):System.Type">
				<signature>System.Reflection.Emit.EnumBuilder.GetInterface(string;bool):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetInterfaceMap" uniqueID="GetInterfaceMap(System.Type):System.Reflection.InterfaceMapping">
				<signature>System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type):System.Reflection.InterfaceMapping</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetInterfaces" uniqueID="GetInterfaces():System.Type[]">
				<signature>System.Reflection.Emit.EnumBuilder.GetInterfaces():System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMember" uniqueID="GetMember(string;System.Reflection.MemberTypes;System.Reflection.BindingFlags):System.Reflection.MemberInfo[]">
				<signature>System.Reflection.Emit.EnumBuilder.GetMember(string;System.Reflection.MemberTypes;System.Reflection.BindingFlags):System.Reflection.MemberInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMembers" uniqueID="GetMembers(System.Reflection.BindingFlags):System.Reflection.MemberInfo[]">
				<signature>System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags):System.Reflection.MemberInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetMethodImpl" uniqueID="GetMethodImpl(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo">
				<signature>System.Reflection.Emit.EnumBuilder.GetMethodImpl(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Reflection.CallingConventions;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.MethodInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMethods" uniqueID="GetMethods(System.Reflection.BindingFlags):System.Reflection.MethodInfo[]">
				<signature>System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags):System.Reflection.MethodInfo[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetNestedType" uniqueID="GetNestedType(string;System.Reflection.BindingFlags):System.Type">
				<signature>System.Reflection.Emit.EnumBuilder.GetNestedType(string;System.Reflection.BindingFlags):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetNestedTypes" uniqueID="GetNestedTypes(System.Reflection.BindingFlags):System.Type[]">
				<signature>System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags):System.Type[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetProperties" uniqueID="GetProperties(System.Reflection.BindingFlags):System.Reflection.PropertyInfo[]">
				<signature>System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags):System.Reflection.PropertyInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetPropertyImpl" uniqueID="GetPropertyImpl(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Type;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.PropertyInfo">
				<signature>System.Reflection.Emit.EnumBuilder.GetPropertyImpl(string;System.Reflection.BindingFlags;System.Reflection.Binder;System.Type;System.Type[];System.Reflection.ParameterModifier[]):System.Reflection.PropertyInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="HasElementTypeImpl" uniqueID="HasElementTypeImpl():bool">
				<signature>System.Reflection.Emit.EnumBuilder.HasElementTypeImpl():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InvokeMember" uniqueID="InvokeMember(string;System.Reflection.BindingFlags;System.Reflection.Binder;object;object[];System.Reflection.ParameterModifier[];System.Globalization.CultureInfo;string[]):object">
				<signature>System.Reflection.Emit.EnumBuilder.InvokeMember(string;System.Reflection.BindingFlags;System.Reflection.Binder;object;object[];System.Reflection.ParameterModifier[];System.Globalization.CultureInfo;string[]):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsArrayImpl" uniqueID="IsArrayImpl():bool">
				<signature>System.Reflection.Emit.EnumBuilder.IsArrayImpl():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsByRefImpl" uniqueID="IsByRefImpl():bool">
				<signature>System.Reflection.Emit.EnumBuilder.IsByRefImpl():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsCOMObjectImpl" uniqueID="IsCOMObjectImpl():bool">
				<signature>System.Reflection.Emit.EnumBuilder.IsCOMObjectImpl():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsDefined" uniqueID="IsDefined(System.Type;bool):bool">
				<signature>System.Reflection.Emit.EnumBuilder.IsDefined(System.Type;bool):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsPointerImpl" uniqueID="IsPointerImpl():bool">
				<signature>System.Reflection.Emit.EnumBuilder.IsPointerImpl():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsPrimitiveImpl" uniqueID="IsPrimitiveImpl():bool">
				<signature>System.Reflection.Emit.EnumBuilder.IsPrimitiveImpl():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsValueTypeImpl" uniqueID="IsValueTypeImpl():bool">
				<signature>System.Reflection.Emit.EnumBuilder.IsValueTypeImpl():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakeArrayType" uniqueID="MakeArrayType():System.Type">
				<signature>System.Reflection.Emit.EnumBuilder.MakeArrayType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakeArrayType" uniqueID="MakeArrayType(int):System.Type">
				<signature>System.Reflection.Emit.EnumBuilder.MakeArrayType(int):System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakeByRefType" uniqueID="MakeByRefType():System.Type">
				<signature>System.Reflection.Emit.EnumBuilder.MakeByRefType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakePointerType" uniqueID="MakePointerType():System.Type">
				<signature>System.Reflection.Emit.EnumBuilder.MakePointerType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetCustomAttribute" uniqueID="SetCustomAttribute(System.Reflection.ConstructorInfo;byte[]):void">
				<signature>System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo;byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetCustomAttribute" uniqueID="SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder):void">
				<signature>System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._EnumBuilder.GetIDsOfNames" uniqueID="System.Runtime.InteropServices._EnumBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.EnumBuilder.System.Runtime.InteropServices._EnumBuilder.GetIDsOfNames(System.Guid;native signed int;unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._EnumBuilder.GetTypeInfo" uniqueID="System.Runtime.InteropServices._EnumBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void">
				<signature>System.Reflection.Emit.EnumBuilder.System.Runtime.InteropServices._EnumBuilder.GetTypeInfo(unsigned int;unsigned int;native signed int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._EnumBuilder.GetTypeInfoCount" uniqueID="System.Runtime.InteropServices._EnumBuilder.GetTypeInfoCount(unsigned int):void">
				<signature>System.Reflection.Emit.EnumBuilder.System.Runtime.InteropServices._EnumBuilder.GetTypeInfoCount(unsigned int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.InteropServices._EnumBuilder.Invoke" uniqueID="System.Runtime.InteropServices._EnumBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void">
				<signature>System.Reflection.Emit.EnumBuilder.System.Runtime.InteropServices._EnumBuilder.Invoke(unsigned int;System.Guid;unsigned int;short;native signed int;native signed int;native signed int;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Assembly" uniqueID="get_Assembly():System.Reflection.Assembly">
				<signature>System.Reflection.Emit.EnumBuilder.get_Assembly():System.Reflection.Assembly</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AssemblyQualifiedName" uniqueID="get_AssemblyQualifiedName():string">
				<signature>System.Reflection.Emit.EnumBuilder.get_AssemblyQualifiedName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_BaseType" uniqueID="get_BaseType():System.Type">
				<signature>System.Reflection.Emit.EnumBuilder.get_BaseType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DeclaringType" uniqueID="get_DeclaringType():System.Type">
				<signature>System.Reflection.Emit.EnumBuilder.get_DeclaringType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FullName" uniqueID="get_FullName():string">
				<signature>System.Reflection.Emit.EnumBuilder.get_FullName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_GUID" uniqueID="get_GUID():System.Guid">
				<signature>System.Reflection.Emit.EnumBuilder.get_GUID():System.Guid</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_MetadataTokenInternal" uniqueID="get_MetadataTokenInternal():int">
				<signature>System.Reflection.Emit.EnumBuilder.get_MetadataTokenInternal():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Module" uniqueID="get_Module():System.Reflection.Module">
				<signature>System.Reflection.Emit.EnumBuilder.get_Module():System.Reflection.Module</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Reflection.Emit.EnumBuilder.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Namespace" uniqueID="get_Namespace():string">
				<signature>System.Reflection.Emit.EnumBuilder.get_Namespace():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReflectedType" uniqueID="get_ReflectedType():System.Type">
				<signature>System.Reflection.Emit.EnumBuilder.get_ReflectedType():System.Type</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TypeHandle" uniqueID="get_TypeHandle():System.RuntimeTypeHandle">
				<signature>System.Reflection.Emit.EnumBuilder.get_TypeHandle():System.RuntimeTypeHandle</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TypeToken" uniqueID="get_TypeToken():System.Reflection.Emit.TypeToken">
				<signature>System.Reflection.Emit.EnumBuilder.get_TypeToken():System.Reflection.Emit.TypeToken</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_UnderlyingField" uniqueID="get_UnderlyingField():System.Reflection.Emit.FieldBuilder">
				<signature>System.Reflection.Emit.EnumBuilder.get_UnderlyingField():System.Reflection.Emit.FieldBuilder</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_UnderlyingSystemType" uniqueID="get_UnderlyingSystemType():System.Type">
				<signature>System.Reflection.Emit.EnumBuilder.get_UnderlyingSystemType():System.Type</signature>
			</method>
		</class>
	</package>
	<package name="System.Runtime.Remoting.Contexts">
		<class name="ContextAttribute" uniqueID="System.Runtime.Remoting.Contexts.ContextAttribute">
			<method accessibility="Public" methodKind="Member" name="ContextAttribute" uniqueID="ContextAttribute(string):void">
				<signature>System.Runtime.Remoting.Contexts.ContextAttribute.ContextAttribute(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Runtime.Remoting.Contexts.ContextAttribute.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Freeze" uniqueID="Freeze(System.Runtime.Remoting.Contexts.Context):void">
				<signature>System.Runtime.Remoting.Contexts.ContextAttribute.Freeze(System.Runtime.Remoting.Contexts.Context):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Runtime.Remoting.Contexts.ContextAttribute.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetPropertiesForNewContext" uniqueID="GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage):void">
				<signature>System.Runtime.Remoting.Contexts.ContextAttribute.GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsContextOK" uniqueID="IsContextOK(System.Runtime.Remoting.Contexts.Context;System.Runtime.Remoting.Activation.IConstructionCallMessage):bool">
				<signature>System.Runtime.Remoting.Contexts.ContextAttribute.IsContextOK(System.Runtime.Remoting.Contexts.Context;System.Runtime.Remoting.Activation.IConstructionCallMessage):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsNewContextOK" uniqueID="IsNewContextOK(System.Runtime.Remoting.Contexts.Context):bool">
				<signature>System.Runtime.Remoting.Contexts.ContextAttribute.IsNewContextOK(System.Runtime.Remoting.Contexts.Context):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Runtime.Remoting.Contexts.ContextAttribute.get_Name():string</signature>
			</method>
		</class>
		<class name="IContextAttribute" uniqueID="System.Runtime.Remoting.Contexts.IContextAttribute">
			<method accessibility="Public" methodKind="Member" name="GetPropertiesForNewContext" uniqueID="GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage):void">
				<signature>System.Runtime.Remoting.Contexts.IContextAttribute.GetPropertiesForNewContext(System.Runtime.Remoting.Activation.IConstructionCallMessage):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsContextOK" uniqueID="IsContextOK(System.Runtime.Remoting.Contexts.Context;System.Runtime.Remoting.Activation.IConstructionCallMessage):bool">
				<signature>System.Runtime.Remoting.Contexts.IContextAttribute.IsContextOK(System.Runtime.Remoting.Contexts.Context;System.Runtime.Remoting.Activation.IConstructionCallMessage):bool</signature>
			</method>
		</class>
		<class name="IContextProperty" uniqueID="System.Runtime.Remoting.Contexts.IContextProperty">
			<method accessibility="Public" methodKind="Member" name="Freeze" uniqueID="Freeze(System.Runtime.Remoting.Contexts.Context):void">
				<signature>System.Runtime.Remoting.Contexts.IContextProperty.Freeze(System.Runtime.Remoting.Contexts.Context):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsNewContextOK" uniqueID="IsNewContextOK(System.Runtime.Remoting.Contexts.Context):bool">
				<signature>System.Runtime.Remoting.Contexts.IContextProperty.IsNewContextOK(System.Runtime.Remoting.Contexts.Context):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Runtime.Remoting.Contexts.IContextProperty.get_Name():string</signature>
			</method>
		</class>
		<class name="CrossContextDelegate" uniqueID="System.Runtime.Remoting.Contexts.CrossContextDelegate">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Runtime.Remoting.Contexts.CrossContextDelegate.BeginInvoke(System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CrossContextDelegate" uniqueID="CrossContextDelegate(object;native signed int):void">
				<signature>System.Runtime.Remoting.Contexts.CrossContextDelegate.CrossContextDelegate(object;native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):void">
				<signature>System.Runtime.Remoting.Contexts.CrossContextDelegate.EndInvoke(System.IAsyncResult):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke():void">
				<signature>System.Runtime.Remoting.Contexts.CrossContextDelegate.Invoke():void</signature>
			</method>
		</class>
		<class name="DynamicPropertyHolder" uniqueID="System.Runtime.Remoting.Contexts.DynamicPropertyHolder">
			<method accessibility="Protected" methodKind="Static" name="CheckPropertyNameClash" uniqueID="CheckPropertyNameClash(string;System.Runtime.Remoting.Contexts.IDynamicProperty[];int):void">
				<signature>System.Runtime.Remoting.Contexts.DynamicPropertyHolder.CheckPropertyNameClash(string;System.Runtime.Remoting.Contexts.IDynamicProperty[];int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GrowDynamicSinksArray" uniqueID="GrowDynamicSinksArray(System.Runtime.Remoting.Contexts.IDynamicMessageSink[]):System.Runtime.Remoting.Contexts.IDynamicMessageSink[]">
				<signature>System.Runtime.Remoting.Contexts.DynamicPropertyHolder.GrowDynamicSinksArray(System.Runtime.Remoting.Contexts.IDynamicMessageSink[]):System.Runtime.Remoting.Contexts.IDynamicMessageSink[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GrowPropertiesArray" uniqueID="GrowPropertiesArray(System.Runtime.Remoting.Contexts.IDynamicProperty[]):System.Runtime.Remoting.Contexts.IDynamicProperty[]">
				<signature>System.Runtime.Remoting.Contexts.DynamicPropertyHolder.GrowPropertiesArray(System.Runtime.Remoting.Contexts.IDynamicProperty[]):System.Runtime.Remoting.Contexts.IDynamicProperty[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="NotifyDynamicSinks" uniqueID="NotifyDynamicSinks(System.Runtime.Remoting.Messaging.IMessage;System.Runtime.Remoting.Contexts.ArrayWithSize;bool;bool;bool):void">
				<signature>System.Runtime.Remoting.Contexts.DynamicPropertyHolder.NotifyDynamicSinks(System.Runtime.Remoting.Messaging.IMessage;System.Runtime.Remoting.Contexts.ArrayWithSize;bool;bool;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AddDynamicProperty" uniqueID="AddDynamicProperty(System.Runtime.Remoting.Contexts.IDynamicProperty):bool">
				<signature>System.Runtime.Remoting.Contexts.DynamicPropertyHolder.AddDynamicProperty(System.Runtime.Remoting.Contexts.IDynamicProperty):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DynamicPropertyHolder" uniqueID="DynamicPropertyHolder():void">
				<signature>System.Runtime.Remoting.Contexts.DynamicPropertyHolder.DynamicPropertyHolder():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RemoveDynamicProperty" uniqueID="RemoveDynamicProperty(string):bool">
				<signature>System.Runtime.Remoting.Contexts.DynamicPropertyHolder.RemoveDynamicProperty(string):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_DynamicProperties" uniqueID="get_DynamicProperties():System.Runtime.Remoting.Contexts.IDynamicProperty[]">
				<signature>System.Runtime.Remoting.Contexts.DynamicPropertyHolder.get_DynamicProperties():System.Runtime.Remoting.Contexts.IDynamicProperty[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_DynamicSinks" uniqueID="get_DynamicSinks():System.Runtime.Remoting.Contexts.ArrayWithSize">
				<signature>System.Runtime.Remoting.Contexts.DynamicPropertyHolder.get_DynamicSinks():System.Runtime.Remoting.Contexts.ArrayWithSize</signature>
			</method>
		</class>
		<class name="IDynamicMessageSink" uniqueID="System.Runtime.Remoting.Contexts.IDynamicMessageSink">
			<method accessibility="Public" methodKind="Member" name="ProcessMessageFinish" uniqueID="ProcessMessageFinish(System.Runtime.Remoting.Messaging.IMessage;bool;bool):void">
				<signature>System.Runtime.Remoting.Contexts.IDynamicMessageSink.ProcessMessageFinish(System.Runtime.Remoting.Messaging.IMessage;bool;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ProcessMessageStart" uniqueID="ProcessMessageStart(System.Runtime.Remoting.Messaging.IMessage;bool;bool):void">
				<signature>System.Runtime.Remoting.Contexts.IDynamicMessageSink.ProcessMessageStart(System.Runtime.Remoting.Messaging.IMessage;bool;bool):void</signature>
			</method>
		</class>
		<class name="ArrayWithSize" uniqueID="System.Runtime.Remoting.Contexts.ArrayWithSize">
			<method accessibility="Protected" methodKind="Member" name="ArrayWithSize" uniqueID="ArrayWithSize(System.Runtime.Remoting.Contexts.IDynamicMessageSink[];int):void">
				<signature>System.Runtime.Remoting.Contexts.ArrayWithSize.ArrayWithSize(System.Runtime.Remoting.Contexts.IDynamicMessageSink[];int):void</signature>
			</method>
		</class>
		<class name="Context" uniqueID="System.Runtime.Remoting.Contexts.Context">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Runtime.Remoting.Contexts.Context.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="AddDynamicProperty" uniqueID="AddDynamicProperty(System.Runtime.Remoting.Contexts.Context;System.Runtime.Remoting.Contexts.IDynamicProperty):bool">
				<signature>System.Runtime.Remoting.Contexts.Context.AddDynamicProperty(System.Runtime.Remoting.Contexts.Context;System.Runtime.Remoting.Contexts.IDynamicProperty):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="AddGlobalDynamicProperty" uniqueID="AddGlobalDynamicProperty(System.Runtime.Remoting.Contexts.IDynamicProperty):bool">
				<signature>System.Runtime.Remoting.Contexts.Context.AddGlobalDynamicProperty(System.Runtime.Remoting.Contexts.IDynamicProperty):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="AllocateDataSlot" uniqueID="AllocateDataSlot():System.LocalDataStoreSlot">
				<signature>System.Runtime.Remoting.Contexts.Context.AllocateDataSlot():System.LocalDataStoreSlot</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="AllocateNamedDataSlot" uniqueID="AllocateNamedDataSlot(string):System.LocalDataStoreSlot">
				<signature>System.Runtime.Remoting.Contexts.Context.AllocateNamedDataSlot(string):System.LocalDataStoreSlot</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CheckPropertyNameClash" uniqueID="CheckPropertyNameClash(string;System.Runtime.Remoting.Contexts.IContextProperty[];int):void">
				<signature>System.Runtime.Remoting.Contexts.Context.CheckPropertyNameClash(string;System.Runtime.Remoting.Contexts.IContextProperty[];int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CreateDefaultContext" uniqueID="CreateDefaultContext():System.Runtime.Remoting.Contexts.Context">
				<signature>System.Runtime.Remoting.Contexts.Context.CreateDefaultContext():System.Runtime.Remoting.Contexts.Context</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="DoCallBackFromEE" uniqueID="DoCallBackFromEE(native signed int;native signed int;int):void">
				<signature>System.Runtime.Remoting.Contexts.Context.DoCallBackFromEE(native signed int;native signed int;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ExecuteCallBackInEE" uniqueID="ExecuteCallBackInEE(native signed int):void">
				<signature>System.Runtime.Remoting.Contexts.Context.ExecuteCallBackInEE(native signed int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="FreeNamedDataSlot" uniqueID="FreeNamedDataSlot(string):void">
				<signature>System.Runtime.Remoting.Contexts.Context.FreeNamedDataSlot(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetData" uniqueID="GetData(System.LocalDataStoreSlot):object">
				<signature>System.Runtime.Remoting.Contexts.Context.GetData(System.LocalDataStoreSlot):object</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetNamedDataSlot" uniqueID="GetNamedDataSlot(string):System.LocalDataStoreSlot">
				<signature>System.Runtime.Remoting.Contexts.Context.GetNamedDataSlot(string):System.LocalDataStoreSlot</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GrowPropertiesArray" uniqueID="GrowPropertiesArray(System.Runtime.Remoting.Contexts.IContextProperty[]):System.Runtime.Remoting.Contexts.IContextProperty[]">
				<signature>System.Runtime.Remoting.Contexts.Context.GrowPropertiesArray(System.Runtime.Remoting.Contexts.IContextProperty[]):System.Runtime.Remoting.Contexts.IContextProperty[]</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="RegisterDynamicProperty" uniqueID="RegisterDynamicProperty(System.Runtime.Remoting.Contexts.IDynamicProperty;System.ContextBoundObject;System.Runtime.Remoting.Contexts.Context):bool">
				<signature>System.Runtime.Remoting.Contexts.Context.RegisterDynamicProperty(System.Runtime.Remoting.Contexts.IDynamicProperty;System.ContextBoundObject;System.Runtime.Remoting.Contexts.Context):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="RemoveDynamicProperty" uniqueID="RemoveDynamicProperty(System.Runtime.Remoting.Contexts.Context;string):bool">
				<signature>System.Runtime.Remoting.Contexts.Context.RemoveDynamicProperty(System.Runtime.Remoting.Contexts.Context;string):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="RemoveGlobalDynamicProperty" uniqueID="RemoveGlobalDynamicProperty(string):bool">
				<signature>System.Runtime.Remoting.Contexts.Context.RemoveGlobalDynamicProperty(string):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="SetData" uniqueID="SetData(System.LocalDataStoreSlot;object):void">
				<signature>System.Runtime.Remoting.Contexts.Context.SetData(System.LocalDataStoreSlot;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="UnregisterDynamicProperty" uniqueID="UnregisterDynamicProperty(string;System.ContextBoundObject;System.Runtime.Remoting.Contexts.Context):bool">
				<signature>System.Runtime.Remoting.Contexts.Context.UnregisterDynamicProperty(string;System.ContextBoundObject;System.Runtime.Remoting.Contexts.Context):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_DefaultContext" uniqueID="get_DefaultContext():System.Runtime.Remoting.Contexts.Context">
				<signature>System.Runtime.Remoting.Contexts.Context.get_DefaultContext():System.Runtime.Remoting.Contexts.Context</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_GlobalDynamicSinks" uniqueID="get_GlobalDynamicSinks():System.Runtime.Remoting.Contexts.ArrayWithSize">
				<signature>System.Runtime.Remoting.Contexts.Context.get_GlobalDynamicSinks():System.Runtime.Remoting.Contexts.ArrayWithSize</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="AddPerContextDynamicProperty" uniqueID="AddPerContextDynamicProperty(System.Runtime.Remoting.Contexts.IDynamicProperty):bool">
				<signature>System.Runtime.Remoting.Contexts.Context.AddPerContextDynamicProperty(System.Runtime.Remoting.Contexts.IDynamicProperty):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CleanupInternalContext" uniqueID="CleanupInternalContext():void">
				<signature>System.Runtime.Remoting.Contexts.Context.CleanupInternalContext():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Context" uniqueID="Context():void">
				<signature>System.Runtime.Remoting.Contexts.Context.Context():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Context" uniqueID="Context(int):void">
				<signature>System.Runtime.Remoting.Contexts.Context.Context(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CreateEnvoyChain" uniqueID="CreateEnvoyChain(System.MarshalByRefObject):System.Runtime.Remoting.Messaging.IMessageSink">
				<signature>System.Runtime.Remoting.Contexts.Context.CreateEnvoyChain(System.MarshalByRefObject):System.Runtime.Remoting.Messaging.IMessageSink</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CreateServerObjectChain" uniqueID="CreateServerObjectChain(System.MarshalByRefObject):System.Runtime.Remoting.Messaging.IMessageSink">
				<signature>System.Runtime.Remoting.Contexts.Context.CreateServerObjectChain(System.MarshalByRefObject):System.Runtime.Remoting.Messaging.IMessageSink</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DoCallBack" uniqueID="DoCallBack(System.Runtime.Remoting.Contexts.CrossContextDelegate):void">
				<signature>System.Runtime.Remoting.Contexts.Context.DoCallBack(System.Runtime.Remoting.Contexts.CrossContextDelegate):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="DoCallBackGeneric" uniqueID="DoCallBackGeneric(native signed int;System.Runtime.Remoting.Contexts.CrossContextDelegate):void">
				<signature>System.Runtime.Remoting.Contexts.Context.DoCallBackGeneric(native signed int;System.Runtime.Remoting.Contexts.CrossContextDelegate):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Finalize" uniqueID="Finalize():void">
				<signature>System.Runtime.Remoting.Contexts.Context.Finalize():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Freeze" uniqueID="Freeze():void">
				<signature>System.Runtime.Remoting.Contexts.Context.Freeze():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetClientContextChain" uniqueID="GetClientContextChain():System.Runtime.Remoting.Messaging.IMessageSink">
				<signature>System.Runtime.Remoting.Contexts.Context.GetClientContextChain():System.Runtime.Remoting.Messaging.IMessageSink</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetProperty" uniqueID="GetProperty(string):System.Runtime.Remoting.Contexts.IContextProperty">
				<signature>System.Runtime.Remoting.Contexts.Context.GetProperty(string):System.Runtime.Remoting.Contexts.IContextProperty</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetServerContextChain" uniqueID="GetServerContextChain():System.Runtime.Remoting.Messaging.IMessageSink">
				<signature>System.Runtime.Remoting.Contexts.Context.GetServerContextChain():System.Runtime.Remoting.Messaging.IMessageSink</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalFreeze" uniqueID="InternalFreeze():void">
				<signature>System.Runtime.Remoting.Contexts.Context.InternalFreeze():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="NotifyActivatorProperties" uniqueID="NotifyActivatorProperties(System.Runtime.Remoting.Messaging.IMessage;bool):System.Runtime.Remoting.Messaging.IMessage">
				<signature>System.Runtime.Remoting.Contexts.Context.NotifyActivatorProperties(System.Runtime.Remoting.Messaging.IMessage;bool):System.Runtime.Remoting.Messaging.IMessage</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="NotifyDynamicSinks" uniqueID="NotifyDynamicSinks(System.Runtime.Remoting.Messaging.IMessage;bool;bool;bool;bool):bool">
				<signature>System.Runtime.Remoting.Contexts.Context.NotifyDynamicSinks(System.Runtime.Remoting.Messaging.IMessage;bool;bool;bool;bool):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="RemovePerContextDynamicProperty" uniqueID="RemovePerContextDynamicProperty(string):bool">
				<signature>System.Runtime.Remoting.Contexts.Context.RemovePerContextDynamicProperty(string):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ReserveSlot" uniqueID="ReserveSlot():int">
				<signature>System.Runtime.Remoting.Contexts.Context.ReserveSlot():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetProperty" uniqueID="SetProperty(System.Runtime.Remoting.Contexts.IContextProperty):void">
				<signature>System.Runtime.Remoting.Contexts.Context.SetProperty(System.Runtime.Remoting.Contexts.IContextProperty):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetThreadPoolAware" uniqueID="SetThreadPoolAware():void">
				<signature>System.Runtime.Remoting.Contexts.Context.SetThreadPoolAware():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SetupInternalContext" uniqueID="SetupInternalContext(bool):void">
				<signature>System.Runtime.Remoting.Contexts.Context.SetupInternalContext(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Runtime.Remoting.Contexts.Context.ToString():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_AppDomain" uniqueID="get_AppDomain():System.AppDomain">
				<signature>System.Runtime.Remoting.Contexts.Context.get_AppDomain():System.AppDomain</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ContextID" uniqueID="get_ContextID():int">
				<signature>System.Runtime.Remoting.Contexts.Context.get_ContextID():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ContextProperties" uniqueID="get_ContextProperties():System.Runtime.Remoting.Contexts.IContextProperty[]">
				<signature>System.Runtime.Remoting.Contexts.Context.get_ContextProperties():System.Runtime.Remoting.Contexts.IContextProperty[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_DynamicSinks" uniqueID="get_DynamicSinks():System.Runtime.Remoting.Contexts.ArrayWithSize">
				<signature>System.Runtime.Remoting.Contexts.Context.get_DynamicSinks():System.Runtime.Remoting.Contexts.ArrayWithSize</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_InternalContextID" uniqueID="get_InternalContextID():native signed int">
				<signature>System.Runtime.Remoting.Contexts.Context.get_InternalContextID():native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IsDefaultContext" uniqueID="get_IsDefaultContext():bool">
				<signature>System.Runtime.Remoting.Contexts.Context.get_IsDefaultContext():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IsThreadPoolAware" uniqueID="get_IsThreadPoolAware():bool">
				<signature>System.Runtime.Remoting.Contexts.Context.get_IsThreadPoolAware():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_MyLocalStore" uniqueID="get_MyLocalStore():System.LocalDataStore">
				<signature>System.Runtime.Remoting.Contexts.Context.get_MyLocalStore():System.LocalDataStore</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_PerContextDynamicProperties" uniqueID="get_PerContextDynamicProperties():System.Runtime.Remoting.Contexts.IDynamicProperty[]">
				<signature>System.Runtime.Remoting.Contexts.Context.get_PerContextDynamicProperties():System.Runtime.Remoting.Contexts.IDynamicProperty[]</signature>
			</method>
		</class>
		<class name="IDynamicProperty" uniqueID="System.Runtime.Remoting.Contexts.IDynamicProperty">
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Runtime.Remoting.Contexts.IDynamicProperty.get_Name():string</signature>
			</method>
		</class>
	</package>
	<package name="System.Security">
		<class name="IEvidenceFactory" uniqueID="System.Security.IEvidenceFactory">
			<method accessibility="Public" methodKind="Member" name="get_Evidence" uniqueID="get_Evidence():System.Security.Policy.Evidence">
				<signature>System.Security.IEvidenceFactory.get_Evidence():System.Security.Policy.Evidence</signature>
			</method>
		</class>
		<class name="IStackWalk" uniqueID="System.Security.IStackWalk">
			<method accessibility="Public" methodKind="Member" name="Assert" uniqueID="Assert():void">
				<signature>System.Security.IStackWalk.Assert():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Demand" uniqueID="Demand():void">
				<signature>System.Security.IStackWalk.Demand():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Deny" uniqueID="Deny():void">
				<signature>System.Security.IStackWalk.Deny():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="PermitOnly" uniqueID="PermitOnly():void">
				<signature>System.Security.IStackWalk.PermitOnly():void</signature>
			</method>
		</class>
		<class name="PermissionSetEnumeratorInternal" uniqueID="System.Security.PermissionSetEnumeratorInternal">
			<method accessibility="Public" methodKind="Member" name="GetCurrentIndex" uniqueID="GetCurrentIndex():int">
				<signature>System.Security.PermissionSetEnumeratorInternal.GetCurrentIndex():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MoveNext" uniqueID="MoveNext():bool">
				<signature>System.Security.PermissionSetEnumeratorInternal.MoveNext():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="PermissionSetEnumeratorInternal" uniqueID="PermissionSetEnumeratorInternal(System.Security.PermissionSet):void">
				<signature>System.Security.PermissionSetEnumeratorInternal.PermissionSetEnumeratorInternal(System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Reset" uniqueID="Reset():void">
				<signature>System.Security.PermissionSetEnumeratorInternal.Reset():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Current" uniqueID="get_Current():object">
				<signature>System.Security.PermissionSetEnumeratorInternal.get_Current():object</signature>
			</method>
		</class>
		<class name="ISecurityPolicyEncodable" uniqueID="System.Security.ISecurityPolicyEncodable">
			<method accessibility="Public" methodKind="Member" name="FromXml" uniqueID="FromXml(System.Security.SecurityElement;System.Security.Policy.PolicyLevel):void">
				<signature>System.Security.ISecurityPolicyEncodable.FromXml(System.Security.SecurityElement;System.Security.Policy.PolicyLevel):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToXml" uniqueID="ToXml(System.Security.Policy.PolicyLevel):System.Security.SecurityElement">
				<signature>System.Security.ISecurityPolicyEncodable.ToXml(System.Security.Policy.PolicyLevel):System.Security.SecurityElement</signature>
			</method>
		</class>
		<class name="PermissionSet" uniqueID="System.Security.PermissionSet">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Security.PermissionSet.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ConvertPermissionSet" uniqueID="ConvertPermissionSet(string;byte[];string):byte[]">
				<signature>System.Security.PermissionSet.ConvertPermissionSet(string;byte[];string):byte[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CreateEmptyPermissionSetXml" uniqueID="CreateEmptyPermissionSetXml():System.Security.SecurityElement">
				<signature>System.Security.PermissionSet.CreateEmptyPermissionSetXml():System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CreatePerm" uniqueID="CreatePerm(object;bool):System.Security.IPermission">
				<signature>System.Security.PermissionSet.CreatePerm(object;bool):System.Security.IPermission</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CreateSerialized" uniqueID="CreateSerialized(object[];bool;byte[];System.Security.PermissionSet;System.Security.Permissions.HostProtectionResource):byte[]">
				<signature>System.Security.PermissionSet.CreateSerialized(object[];bool;byte[];System.Security.PermissionSet;System.Security.Permissions.HostProtectionResource):byte[]</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="DEBUG_COND_WRITE" uniqueID="DEBUG_COND_WRITE(bool;string):void">
				<signature>System.Security.PermissionSet.DEBUG_COND_WRITE(bool;string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="DEBUG_PRINTSTACK" uniqueID="DEBUG_PRINTSTACK(System.Exception):void">
				<signature>System.Security.PermissionSet.DEBUG_PRINTSTACK(System.Exception):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="DEBUG_WRITE" uniqueID="DEBUG_WRITE(string):void">
				<signature>System.Security.PermissionSet.DEBUG_WRITE(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetPermissionElement" uniqueID="GetPermissionElement(System.Security.SecurityElement):System.Security.SecurityElement">
				<signature>System.Security.PermissionSet.GetPermissionElement(System.Security.SecurityElement):System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="IsIntersectingAssertedPermissions" uniqueID="IsIntersectingAssertedPermissions(System.Security.PermissionSet;System.Security.PermissionSet):bool">
				<signature>System.Security.PermissionSet.IsIntersectingAssertedPermissions(System.Security.PermissionSet;System.Security.PermissionSet):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="IsPermissionTag" uniqueID="IsPermissionTag(string;bool):bool">
				<signature>System.Security.PermissionSet.IsPermissionTag(string;bool):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="MergePermission" uniqueID="MergePermission(System.Security.IPermission;bool;System.Security.PermissionSet;System.Security.PermissionSet):void">
				<signature>System.Security.PermissionSet.MergePermission(System.Security.IPermission;bool;System.Security.PermissionSet;System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="RemoveAssertedPermissionSet" uniqueID="RemoveAssertedPermissionSet(System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet):void">
				<signature>System.Security.PermissionSet.RemoveAssertedPermissionSet(System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="RemoveRefusedPermissionSet" uniqueID="RemoveRefusedPermissionSet(System.Security.PermissionSet;System.Security.PermissionSet;bool):System.Security.PermissionSet">
				<signature>System.Security.PermissionSet.RemoveRefusedPermissionSet(System.Security.PermissionSet;System.Security.PermissionSet;bool):System.Security.PermissionSet</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="RevertAssert" uniqueID="RevertAssert():void">
				<signature>System.Security.PermissionSet.RevertAssert():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="SafeChildAdd" uniqueID="SafeChildAdd(System.Security.SecurityElement;System.Security.ISecurityElementFactory;bool):void">
				<signature>System.Security.PermissionSet.SafeChildAdd(System.Security.SecurityElement;System.Security.ISecurityElementFactory;bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="SetupSecurity" uniqueID="SetupSecurity():void">
				<signature>System.Security.PermissionSet.SetupSecurity():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddPermission" uniqueID="AddPermission(System.Security.IPermission):System.Security.IPermission">
				<signature>System.Security.PermissionSet.AddPermission(System.Security.IPermission):System.Security.IPermission</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Assert" uniqueID="Assert():void">
				<signature>System.Security.PermissionSet.Assert():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CanUnrestrictedOverride" uniqueID="CanUnrestrictedOverride():bool">
				<signature>System.Security.PermissionSet.CanUnrestrictedOverride():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckAssertion" uniqueID="CheckAssertion(System.Security.PermissionSet):bool">
				<signature>System.Security.PermissionSet.CheckAssertion(System.Security.PermissionSet):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckDecoded" uniqueID="CheckDecoded(System.Security.CodeAccessPermission;System.Security.PermissionToken):void">
				<signature>System.Security.PermissionSet.CheckDecoded(System.Security.CodeAccessPermission;System.Security.PermissionToken):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckDecoded" uniqueID="CheckDecoded(System.Security.PermissionSet):void">
				<signature>System.Security.PermissionSet.CheckDecoded(System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckDecoded" uniqueID="CheckDecoded(int):void">
				<signature>System.Security.PermissionSet.CheckDecoded(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckDemand" uniqueID="CheckDemand(System.Security.PermissionSet;System.Security.IPermission):bool">
				<signature>System.Security.PermissionSet.CheckDemand(System.Security.PermissionSet;System.Security.IPermission):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckDeny" uniqueID="CheckDeny(System.Security.PermissionSet;System.Security.IPermission):bool">
				<signature>System.Security.PermissionSet.CheckDeny(System.Security.PermissionSet;System.Security.IPermission):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckPermitOnly" uniqueID="CheckPermitOnly(System.Security.PermissionSet;System.Security.IPermission):bool">
				<signature>System.Security.PermissionSet.CheckPermitOnly(System.Security.PermissionSet;System.Security.IPermission):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckSet" uniqueID="CheckSet():void">
				<signature>System.Security.PermissionSet.CheckSet():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Contains" uniqueID="Contains(System.Security.IPermission):bool">
				<signature>System.Security.PermissionSet.Contains(System.Security.IPermission):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ContainsNonCodeAccessPermissions" uniqueID="ContainsNonCodeAccessPermissions():bool">
				<signature>System.Security.PermissionSet.ContainsNonCodeAccessPermissions():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Copy" uniqueID="Copy():System.Security.PermissionSet">
				<signature>System.Security.PermissionSet.Copy():System.Security.PermissionSet</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Array;int):void">
				<signature>System.Security.PermissionSet.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CopyWithNoIdentityPermissions" uniqueID="CopyWithNoIdentityPermissions():System.Security.PermissionSet">
				<signature>System.Security.PermissionSet.CopyWithNoIdentityPermissions():System.Security.PermissionSet</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CreatePerm" uniqueID="CreatePerm(object):System.Security.IPermission">
				<signature>System.Security.PermissionSet.CreatePerm(object):System.Security.IPermission</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CreatePermission" uniqueID="CreatePermission(object;int):System.Security.IPermission">
				<signature>System.Security.PermissionSet.CreatePermission(object;int):System.Security.IPermission</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DecodeAllPermissions" uniqueID="DecodeAllPermissions():void">
				<signature>System.Security.PermissionSet.DecodeAllPermissions():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DecodeUsingSerialization" uniqueID="DecodeUsingSerialization(byte[]):bool">
				<signature>System.Security.PermissionSet.DecodeUsingSerialization(byte[]):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="DecodeXml" uniqueID="DecodeXml(byte[];System.Security.Permissions.HostProtectionResource;System.Security.Permissions.HostProtectionResource):bool">
				<signature>System.Security.PermissionSet.DecodeXml(byte[];System.Security.Permissions.HostProtectionResource;System.Security.Permissions.HostProtectionResource):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Demand" uniqueID="Demand():void">
				<signature>System.Security.PermissionSet.Demand():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="DemandNonCAS" uniqueID="DemandNonCAS():void">
				<signature>System.Security.PermissionSet.DemandNonCAS():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Deny" uniqueID="Deny():void">
				<signature>System.Security.PermissionSet.Deny():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EncodeUsingSerialization" uniqueID="EncodeUsingSerialization():byte[]">
				<signature>System.Security.PermissionSet.EncodeUsingSerialization():byte[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EncodeXml" uniqueID="EncodeXml():byte[]">
				<signature>System.Security.PermissionSet.EncodeXml():byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Security.PermissionSet.Equals(object):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FastIsEmpty" uniqueID="FastIsEmpty():bool">
				<signature>System.Security.PermissionSet.FastIsEmpty():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FilterHostProtectionPermissions" uniqueID="FilterHostProtectionPermissions(System.Security.Permissions.HostProtectionResource;System.Security.Permissions.HostProtectionResource):void">
				<signature>System.Security.PermissionSet.FilterHostProtectionPermissions(System.Security.Permissions.HostProtectionResource;System.Security.Permissions.HostProtectionResource):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FromXml" uniqueID="FromXml(System.Security.SecurityDocument;int;bool):void">
				<signature>System.Security.PermissionSet.FromXml(System.Security.SecurityDocument;int;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FromXml" uniqueID="FromXml(System.Security.SecurityElement):void">
				<signature>System.Security.PermissionSet.FromXml(System.Security.SecurityElement):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FromXml" uniqueID="FromXml(System.Security.SecurityElement;bool;bool):void">
				<signature>System.Security.PermissionSet.FromXml(System.Security.SecurityElement;bool;bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetCasOnlySet" uniqueID="GetCasOnlySet():System.Security.PermissionSet">
				<signature>System.Security.PermissionSet.GetCasOnlySet():System.Security.PermissionSet</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Security.PermissionSet.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetEnumeratorInternal" uniqueID="GetEnumeratorInternal():System.Security.PermissionSetEnumeratorInternal">
				<signature>System.Security.PermissionSet.GetEnumeratorInternal():System.Security.PermissionSetEnumeratorInternal</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetFirstPerm" uniqueID="GetFirstPerm():System.Security.IPermission">
				<signature>System.Security.PermissionSet.GetFirstPerm():System.Security.IPermission</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Security.PermissionSet.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetPermission" uniqueID="GetPermission(System.Security.IPermission):System.Security.IPermission">
				<signature>System.Security.PermissionSet.GetPermission(System.Security.IPermission):System.Security.IPermission</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetPermission" uniqueID="GetPermission(System.Security.PermissionToken):System.Security.IPermission">
				<signature>System.Security.PermissionSet.GetPermission(System.Security.PermissionToken):System.Security.IPermission</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetPermission" uniqueID="GetPermission(System.Type):System.Security.IPermission">
				<signature>System.Security.PermissionSet.GetPermission(System.Type):System.Security.IPermission</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetPermission" uniqueID="GetPermission(int):System.Security.IPermission">
				<signature>System.Security.PermissionSet.GetPermission(int):System.Security.IPermission</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InplaceIntersect" uniqueID="InplaceIntersect(System.Security.PermissionSet):void">
				<signature>System.Security.PermissionSet.InplaceIntersect(System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InplaceUnion" uniqueID="InplaceUnion(System.Security.PermissionSet):void">
				<signature>System.Security.PermissionSet.InplaceUnion(System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalToXml" uniqueID="InternalToXml():System.Security.SecurityElement">
				<signature>System.Security.PermissionSet.InternalToXml():System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Intersect" uniqueID="Intersect(System.Security.PermissionSet):System.Security.PermissionSet">
				<signature>System.Security.PermissionSet.Intersect(System.Security.PermissionSet):System.Security.PermissionSet</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsEmpty" uniqueID="IsEmpty():bool">
				<signature>System.Security.PermissionSet.IsEmpty():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsSubsetOf" uniqueID="IsSubsetOf(System.Security.PermissionSet):bool">
				<signature>System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsSubsetOfHelper" uniqueID="IsSubsetOfHelper(System.Security.PermissionSet;System.Security.PermissionSet+IsSubsetOfType;System.Security.IPermission;bool):bool">
				<signature>System.Security.PermissionSet.IsSubsetOfHelper(System.Security.PermissionSet;System.Security.PermissionSet+IsSubsetOfType;System.Security.IPermission;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsUnrestricted" uniqueID="IsUnrestricted():bool">
				<signature>System.Security.PermissionSet.IsUnrestricted():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="MergeDeniedSet" uniqueID="MergeDeniedSet(System.Security.PermissionSet):void">
				<signature>System.Security.PermissionSet.MergeDeniedSet(System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="NormalizePermissionSet" uniqueID="NormalizePermissionSet():void">
				<signature>System.Security.PermissionSet.NormalizePermissionSet():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnDeserialized" uniqueID="OnDeserialized(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Security.PermissionSet.OnDeserialized(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnDeserializing" uniqueID="OnDeserializing(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Security.PermissionSet.OnDeserializing(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnSerialized" uniqueID="OnSerialized(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Security.PermissionSet.OnSerialized(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnSerializing" uniqueID="OnSerializing(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Security.PermissionSet.OnSerializing(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="PermissionSet" uniqueID="PermissionSet():void">
				<signature>System.Security.PermissionSet.PermissionSet():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="PermissionSet" uniqueID="PermissionSet(System.Security.PermissionSet):void">
				<signature>System.Security.PermissionSet.PermissionSet(System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="PermissionSet" uniqueID="PermissionSet(System.Security.Permissions.PermissionState):void">
				<signature>System.Security.PermissionSet.PermissionSet(System.Security.Permissions.PermissionState):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="PermissionSet" uniqueID="PermissionSet(bool):void">
				<signature>System.Security.PermissionSet.PermissionSet(bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="PermissionSet" uniqueID="PermissionSet(object;object):void">
				<signature>System.Security.PermissionSet.PermissionSet(object;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="PermitOnly" uniqueID="PermitOnly():void">
				<signature>System.Security.PermissionSet.PermitOnly():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RemovePermission" uniqueID="RemovePermission(System.Security.PermissionToken):System.Security.IPermission">
				<signature>System.Security.PermissionSet.RemovePermission(System.Security.PermissionToken):System.Security.IPermission</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemovePermission" uniqueID="RemovePermission(System.Type):System.Security.IPermission">
				<signature>System.Security.PermissionSet.RemovePermission(System.Type):System.Security.IPermission</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RemovePermission" uniqueID="RemovePermission(int):System.Security.IPermission">
				<signature>System.Security.PermissionSet.RemovePermission(int):System.Security.IPermission</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Reset" uniqueID="Reset():void">
				<signature>System.Security.PermissionSet.Reset():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetPermission" uniqueID="SetPermission(System.Security.IPermission):System.Security.IPermission">
				<signature>System.Security.PermissionSet.SetPermission(System.Security.IPermission):System.Security.IPermission</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetPermission" uniqueID="SetPermission(System.Security.IPermission;bool):System.Security.IPermission">
				<signature>System.Security.PermissionSet.SetPermission(System.Security.IPermission;bool):System.Security.IPermission</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetUnrestricted" uniqueID="SetUnrestricted(bool):void">
				<signature>System.Security.PermissionSet.SetUnrestricted(bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization" uniqueID="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object):void">
				<signature>System.Security.PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Security.PermissionSet.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToXml" uniqueID="ToXml():System.Security.SecurityElement">
				<signature>System.Security.PermissionSet.ToXml():System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ToXml" uniqueID="ToXml(string):System.Security.SecurityElement">
				<signature>System.Security.PermissionSet.ToXml(string):System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Union" uniqueID="Union(System.Security.PermissionSet):System.Security.PermissionSet">
				<signature>System.Security.PermissionSet.Union(System.Security.PermissionSet):System.Security.PermissionSet</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Security.PermissionSet.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsReadOnly" uniqueID="get_IsReadOnly():bool">
				<signature>System.Security.PermissionSet.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsSynchronized" uniqueID="get_IsSynchronized():bool">
				<signature>System.Security.PermissionSet.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SyncRoot" uniqueID="get_SyncRoot():object">
				<signature>System.Security.PermissionSet.get_SyncRoot():object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_IgnoreTypeLoadFailures" uniqueID="set_IgnoreTypeLoadFailures(bool):void">
				<signature>System.Security.PermissionSet.set_IgnoreTypeLoadFailures(bool):void</signature>
			</method>
		</class>
		<class name="PermissionToken" uniqueID="System.Security.PermissionToken">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Security.PermissionToken.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="FindToken" uniqueID="FindToken(System.Type):System.Security.PermissionToken">
				<signature>System.Security.PermissionToken.FindToken(System.Type):System.Security.PermissionToken</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="FindTokenByIndex" uniqueID="FindTokenByIndex(int):System.Security.PermissionToken">
				<signature>System.Security.PermissionToken.FindTokenByIndex(int):System.Security.PermissionToken</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetToken" uniqueID="GetToken(System.Security.IPermission):System.Security.PermissionToken">
				<signature>System.Security.PermissionToken.GetToken(System.Security.IPermission):System.Security.PermissionToken</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetToken" uniqueID="GetToken(System.Type):System.Security.PermissionToken">
				<signature>System.Security.PermissionToken.GetToken(System.Type):System.Security.PermissionToken</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetToken" uniqueID="GetToken(string):System.Security.PermissionToken">
				<signature>System.Security.PermissionToken.GetToken(string):System.Security.PermissionToken</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetToken" uniqueID="GetToken(string;bool):System.Security.PermissionToken">
				<signature>System.Security.PermissionToken.GetToken(string;bool):System.Security.PermissionToken</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="IsMscorlibClassName" uniqueID="IsMscorlibClassName(string):bool">
				<signature>System.Security.PermissionToken.IsMscorlibClassName(string):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsTokenProperlyAssigned" uniqueID="IsTokenProperlyAssigned(System.Security.IPermission;System.Security.PermissionToken):bool">
				<signature>System.Security.PermissionToken.IsTokenProperlyAssigned(System.Security.IPermission;System.Security.PermissionToken):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FromXml" uniqueID="FromXml(System.Security.SecurityElement):void">
				<signature>System.Security.PermissionToken.FromXml(System.Security.SecurityElement):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="PermissionToken" uniqueID="PermissionToken():void">
				<signature>System.Security.PermissionToken.PermissionToken():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="PermissionToken" uniqueID="PermissionToken(int;System.Security.PermissionTokenType;string):void">
				<signature>System.Security.PermissionToken.PermissionToken(int;System.Security.PermissionTokenType;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToXml" uniqueID="ToXml():System.Security.SecurityElement">
				<signature>System.Security.PermissionToken.ToXml():System.Security.SecurityElement</signature>
			</method>
		</class>
		<class name="HostSecurityManager" uniqueID="System.Security.HostSecurityManager">
			<method accessibility="Public" methodKind="Member" name="DetermineApplicationTrust" uniqueID="DetermineApplicationTrust(System.Security.Policy.Evidence;System.Security.Policy.Evidence;System.Security.Policy.TrustManagerContext):System.Security.Policy.ApplicationTrust">
				<signature>System.Security.HostSecurityManager.DetermineApplicationTrust(System.Security.Policy.Evidence;System.Security.Policy.Evidence;System.Security.Policy.TrustManagerContext):System.Security.Policy.ApplicationTrust</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="HostSecurityManager" uniqueID="HostSecurityManager():void">
				<signature>System.Security.HostSecurityManager.HostSecurityManager():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ProvideAppDomainEvidence" uniqueID="ProvideAppDomainEvidence(System.Security.Policy.Evidence):System.Security.Policy.Evidence">
				<signature>System.Security.HostSecurityManager.ProvideAppDomainEvidence(System.Security.Policy.Evidence):System.Security.Policy.Evidence</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ProvideAssemblyEvidence" uniqueID="ProvideAssemblyEvidence(System.Reflection.Assembly;System.Security.Policy.Evidence):System.Security.Policy.Evidence">
				<signature>System.Security.HostSecurityManager.ProvideAssemblyEvidence(System.Reflection.Assembly;System.Security.Policy.Evidence):System.Security.Policy.Evidence</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ResolvePolicy" uniqueID="ResolvePolicy(System.Security.Policy.Evidence):System.Security.PermissionSet">
				<signature>System.Security.HostSecurityManager.ResolvePolicy(System.Security.Policy.Evidence):System.Security.PermissionSet</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DomainPolicy" uniqueID="get_DomainPolicy():System.Security.Policy.PolicyLevel">
				<signature>System.Security.HostSecurityManager.get_DomainPolicy():System.Security.Policy.PolicyLevel</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Flags" uniqueID="get_Flags():System.Security.HostSecurityManagerOptions">
				<signature>System.Security.HostSecurityManager.get_Flags():System.Security.HostSecurityManagerOptions</signature>
			</method>
		</class>
		<class name="IPermission" uniqueID="System.Security.IPermission">
			<method accessibility="Public" methodKind="Member" name="Copy" uniqueID="Copy():System.Security.IPermission">
				<signature>System.Security.IPermission.Copy():System.Security.IPermission</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Demand" uniqueID="Demand():void">
				<signature>System.Security.IPermission.Demand():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Intersect" uniqueID="Intersect(System.Security.IPermission):System.Security.IPermission">
				<signature>System.Security.IPermission.Intersect(System.Security.IPermission):System.Security.IPermission</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsSubsetOf" uniqueID="IsSubsetOf(System.Security.IPermission):bool">
				<signature>System.Security.IPermission.IsSubsetOf(System.Security.IPermission):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Union" uniqueID="Union(System.Security.IPermission):System.Security.IPermission">
				<signature>System.Security.IPermission.Union(System.Security.IPermission):System.Security.IPermission</signature>
			</method>
		</class>
		<class name="ISecurityEncodable" uniqueID="System.Security.ISecurityEncodable">
			<method accessibility="Public" methodKind="Member" name="FromXml" uniqueID="FromXml(System.Security.SecurityElement):void">
				<signature>System.Security.ISecurityEncodable.FromXml(System.Security.SecurityElement):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToXml" uniqueID="ToXml():System.Security.SecurityElement">
				<signature>System.Security.ISecurityEncodable.ToXml():System.Security.SecurityElement</signature>
			</method>
		</class>
		<class name="NamedPermissionSet" uniqueID="System.Security.NamedPermissionSet">
			<method accessibility="Private" methodKind="Static" name="CheckName" uniqueID="CheckName(string):void">
				<signature>System.Security.NamedPermissionSet.CheckName(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Copy" uniqueID="Copy():System.Security.PermissionSet">
				<signature>System.Security.NamedPermissionSet.Copy():System.Security.PermissionSet</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Copy" uniqueID="Copy(string):System.Security.NamedPermissionSet">
				<signature>System.Security.NamedPermissionSet.Copy(string):System.Security.NamedPermissionSet</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Security.NamedPermissionSet.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FromXml" uniqueID="FromXml(System.Security.SecurityElement):void">
				<signature>System.Security.NamedPermissionSet.FromXml(System.Security.SecurityElement):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FromXml" uniqueID="FromXml(System.Security.SecurityElement;bool;bool):void">
				<signature>System.Security.NamedPermissionSet.FromXml(System.Security.SecurityElement;bool;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FromXmlNameOnly" uniqueID="FromXmlNameOnly(System.Security.SecurityElement):void">
				<signature>System.Security.NamedPermissionSet.FromXmlNameOnly(System.Security.SecurityElement):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Security.NamedPermissionSet.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="NamedPermissionSet" uniqueID="NamedPermissionSet():void">
				<signature>System.Security.NamedPermissionSet.NamedPermissionSet():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="NamedPermissionSet" uniqueID="NamedPermissionSet(System.Security.NamedPermissionSet):void">
				<signature>System.Security.NamedPermissionSet.NamedPermissionSet(System.Security.NamedPermissionSet):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="NamedPermissionSet" uniqueID="NamedPermissionSet(string):void">
				<signature>System.Security.NamedPermissionSet.NamedPermissionSet(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="NamedPermissionSet" uniqueID="NamedPermissionSet(string;System.Security.PermissionSet):void">
				<signature>System.Security.NamedPermissionSet.NamedPermissionSet(string;System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="NamedPermissionSet" uniqueID="NamedPermissionSet(string;System.Security.Permissions.PermissionState):void">
				<signature>System.Security.NamedPermissionSet.NamedPermissionSet(string;System.Security.Permissions.PermissionState):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToXml" uniqueID="ToXml():System.Security.SecurityElement">
				<signature>System.Security.NamedPermissionSet.ToXml():System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Description" uniqueID="get_Description():string">
				<signature>System.Security.NamedPermissionSet.get_Description():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Security.NamedPermissionSet.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Description" uniqueID="set_Description(string):void">
				<signature>System.Security.NamedPermissionSet.set_Description(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Name" uniqueID="set_Name(string):void">
				<signature>System.Security.NamedPermissionSet.set_Name(string):void</signature>
			</method>
		</class>
		<class name="SecurityElement+ToStringHelperFunc" uniqueID="System.Security.SecurityElement+ToStringHelperFunc">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(object;string;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.Security.SecurityElement+ToStringHelperFunc.BeginInvoke(object;string;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):void">
				<signature>System.Security.SecurityElement+ToStringHelperFunc.EndInvoke(System.IAsyncResult):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(object;string):void">
				<signature>System.Security.SecurityElement+ToStringHelperFunc.Invoke(object;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SecurityElement+ToStringHelperFunc" uniqueID="SecurityElement+ToStringHelperFunc(object;native signed int):void">
				<signature>System.Security.SecurityElement+ToStringHelperFunc.SecurityElement+ToStringHelperFunc(object;native signed int):void</signature>
			</method>
		</class>
		<class name="FrameSecurityDescriptor" uniqueID="System.Security.FrameSecurityDescriptor">
			<method accessibility="Private" methodKind="Static" name="DecrementAssertCount" uniqueID="DecrementAssertCount():void">
				<signature>System.Security.FrameSecurityDescriptor.DecrementAssertCount():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="DecrementOverridesCount" uniqueID="DecrementOverridesCount():void">
				<signature>System.Security.FrameSecurityDescriptor.DecrementOverridesCount():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IncrementAssertCount" uniqueID="IncrementAssertCount():void">
				<signature>System.Security.FrameSecurityDescriptor.IncrementAssertCount():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IncrementOverridesCount" uniqueID="IncrementOverridesCount():void">
				<signature>System.Security.FrameSecurityDescriptor.IncrementOverridesCount():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckDemand" uniqueID="CheckDemand(System.Security.CodeAccessPermission;System.Security.PermissionToken;System.RuntimeMethodHandle):bool">
				<signature>System.Security.FrameSecurityDescriptor.CheckDemand(System.Security.CodeAccessPermission;System.Security.PermissionToken;System.RuntimeMethodHandle):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckDemand2" uniqueID="CheckDemand2(System.Security.CodeAccessPermission;System.Security.PermissionToken;System.RuntimeMethodHandle;bool):bool">
				<signature>System.Security.FrameSecurityDescriptor.CheckDemand2(System.Security.CodeAccessPermission;System.Security.PermissionToken;System.RuntimeMethodHandle;bool):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckSetDemand" uniqueID="CheckSetDemand(System.Security.PermissionSet;System.Security.PermissionSet;System.RuntimeMethodHandle):bool">
				<signature>System.Security.FrameSecurityDescriptor.CheckSetDemand(System.Security.PermissionSet;System.Security.PermissionSet;System.RuntimeMethodHandle):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckSetDemand2" uniqueID="CheckSetDemand2(System.Security.PermissionSet;System.Security.PermissionSet;System.RuntimeMethodHandle;bool):bool">
				<signature>System.Security.FrameSecurityDescriptor.CheckSetDemand2(System.Security.PermissionSet;System.Security.PermissionSet;System.RuntimeMethodHandle;bool):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CreateSingletonSet" uniqueID="CreateSingletonSet(System.Security.IPermission):System.Security.PermissionSet">
				<signature>System.Security.FrameSecurityDescriptor.CreateSingletonSet(System.Security.IPermission):System.Security.PermissionSet</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="FrameSecurityDescriptor" uniqueID="FrameSecurityDescriptor():void">
				<signature>System.Security.FrameSecurityDescriptor.FrameSecurityDescriptor():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetAssertAllPossible" uniqueID="GetAssertAllPossible():bool">
				<signature>System.Security.FrameSecurityDescriptor.GetAssertAllPossible():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetAssertions" uniqueID="GetAssertions(bool):System.Security.PermissionSet">
				<signature>System.Security.FrameSecurityDescriptor.GetAssertions(bool):System.Security.PermissionSet</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetDenials" uniqueID="GetDenials(bool):System.Security.PermissionSet">
				<signature>System.Security.FrameSecurityDescriptor.GetDenials(bool):System.Security.PermissionSet</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetPermitOnly" uniqueID="GetPermitOnly(bool):System.Security.PermissionSet">
				<signature>System.Security.FrameSecurityDescriptor.GetPermitOnly(bool):System.Security.PermissionSet</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="HasImperativeAsserts" uniqueID="HasImperativeAsserts():bool">
				<signature>System.Security.FrameSecurityDescriptor.HasImperativeAsserts():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="HasImperativeDenials" uniqueID="HasImperativeDenials():bool">
				<signature>System.Security.FrameSecurityDescriptor.HasImperativeDenials():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="HasImperativeRestrictions" uniqueID="HasImperativeRestrictions():bool">
				<signature>System.Security.FrameSecurityDescriptor.HasImperativeRestrictions():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RevertAll" uniqueID="RevertAll():void">
				<signature>System.Security.FrameSecurityDescriptor.RevertAll():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RevertAssert" uniqueID="RevertAssert():void">
				<signature>System.Security.FrameSecurityDescriptor.RevertAssert():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RevertAssertAllPossible" uniqueID="RevertAssertAllPossible():void">
				<signature>System.Security.FrameSecurityDescriptor.RevertAssertAllPossible():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RevertDeny" uniqueID="RevertDeny():void">
				<signature>System.Security.FrameSecurityDescriptor.RevertDeny():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RevertPermitOnly" uniqueID="RevertPermitOnly():void">
				<signature>System.Security.FrameSecurityDescriptor.RevertPermitOnly():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetAssert" uniqueID="SetAssert(System.Security.IPermission):void">
				<signature>System.Security.FrameSecurityDescriptor.SetAssert(System.Security.IPermission):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetAssert" uniqueID="SetAssert(System.Security.PermissionSet):void">
				<signature>System.Security.FrameSecurityDescriptor.SetAssert(System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetAssertAllPossible" uniqueID="SetAssertAllPossible():void">
				<signature>System.Security.FrameSecurityDescriptor.SetAssertAllPossible():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetDeny" uniqueID="SetDeny(System.Security.IPermission):void">
				<signature>System.Security.FrameSecurityDescriptor.SetDeny(System.Security.IPermission):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetDeny" uniqueID="SetDeny(System.Security.PermissionSet):void">
				<signature>System.Security.FrameSecurityDescriptor.SetDeny(System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetPermitOnly" uniqueID="SetPermitOnly(System.Security.IPermission):void">
				<signature>System.Security.FrameSecurityDescriptor.SetPermitOnly(System.Security.IPermission):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetPermitOnly" uniqueID="SetPermitOnly(System.Security.PermissionSet):void">
				<signature>System.Security.FrameSecurityDescriptor.SetPermitOnly(System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetTokenHandles" uniqueID="SetTokenHandles(Microsoft.Win32.SafeHandles.SafeTokenHandle;Microsoft.Win32.SafeHandles.SafeTokenHandle):void">
				<signature>System.Security.FrameSecurityDescriptor.SetTokenHandles(Microsoft.Win32.SafeHandles.SafeTokenHandle;Microsoft.Win32.SafeHandles.SafeTokenHandle):void</signature>
			</method>
		</class>
		<class name="SecureString" uniqueID="System.Security.SecureString">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Security.SecureString.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="EncryptionSupported" uniqueID="EncryptionSupported():bool">
				<signature>System.Security.SecureString.EncryptionSupported():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetAlignedSize" uniqueID="GetAlignedSize(int):unsigned int">
				<signature>System.Security.SecureString.GetAlignedSize(int):unsigned int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="AllocateBuffer" uniqueID="AllocateBuffer(int):void">
				<signature>System.Security.SecureString.AllocateBuffer(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AppendChar" uniqueID="AppendChar(char):void">
				<signature>System.Security.SecureString.AppendChar(char):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CheckSupportedOnCurrentPlatform" uniqueID="CheckSupportedOnCurrentPlatform():void">
				<signature>System.Security.SecureString.CheckSupportedOnCurrentPlatform():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Security.SecureString.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Copy" uniqueID="Copy():System.Security.SecureString">
				<signature>System.Security.SecureString.Copy():System.Security.SecureString</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Dispose" uniqueID="Dispose():void">
				<signature>System.Security.SecureString.Dispose():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="EnsureCapacity" uniqueID="EnsureCapacity(int):void">
				<signature>System.Security.SecureString.EnsureCapacity(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="EnsureNotDisposed" uniqueID="EnsureNotDisposed():void">
				<signature>System.Security.SecureString.EnsureNotDisposed():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="EnsureNotReadOnly" uniqueID="EnsureNotReadOnly():void">
				<signature>System.Security.SecureString.EnsureNotReadOnly():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetAnsiByteCount" uniqueID="GetAnsiByteCount():int">
				<signature>System.Security.SecureString.GetAnsiByteCount():int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetAnsiBytes" uniqueID="GetAnsiBytes(byte;int):void">
				<signature>System.Security.SecureString.GetAnsiBytes(byte;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InsertAt" uniqueID="InsertAt(int;char):void">
				<signature>System.Security.SecureString.InsertAt(int;char):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsReadOnly" uniqueID="IsReadOnly():bool">
				<signature>System.Security.SecureString.IsReadOnly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="MakeReadOnly" uniqueID="MakeReadOnly():void">
				<signature>System.Security.SecureString.MakeReadOnly():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ProtectMemory" uniqueID="ProtectMemory():void">
				<signature>System.Security.SecureString.ProtectMemory():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="RemoveAt" uniqueID="RemoveAt(int):void">
				<signature>System.Security.SecureString.RemoveAt(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SecureString" uniqueID="SecureString():void">
				<signature>System.Security.SecureString.SecureString():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SecureString" uniqueID="SecureString(System.Security.SecureString):void">
				<signature>System.Security.SecureString.SecureString(System.Security.SecureString):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SecureString" uniqueID="SecureString(char;int):void">
				<signature>System.Security.SecureString.SecureString(char;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetAt" uniqueID="SetAt(int;char):void">
				<signature>System.Security.SecureString.SetAt(int;char):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ToAnsiStr" uniqueID="ToAnsiStr(bool):native signed int">
				<signature>System.Security.SecureString.ToAnsiStr(bool):native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ToBSTR" uniqueID="ToBSTR():native signed int">
				<signature>System.Security.SecureString.ToBSTR():native signed int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ToUniStr" uniqueID="ToUniStr(bool):native signed int">
				<signature>System.Security.SecureString.ToUniStr(bool):native signed int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="UnProtectMemory" uniqueID="UnProtectMemory():void">
				<signature>System.Security.SecureString.UnProtectMemory():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_BufferLength" uniqueID="get_BufferLength():int">
				<signature>System.Security.SecureString.get_BufferLength():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Length" uniqueID="get_Length():int">
				<signature>System.Security.SecureString.get_Length():int</signature>
			</method>
		</class>
		<class name="CodeAccessPermission" uniqueID="System.Security.CodeAccessPermission">
			<method accessibility="Protected" methodKind="Static" name="AssertAllPossible" uniqueID="AssertAllPossible():void">
				<signature>System.Security.CodeAccessPermission.AssertAllPossible():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CanUnrestrictedOverride" uniqueID="CanUnrestrictedOverride(System.Security.IPermission):bool">
				<signature>System.Security.CodeAccessPermission.CanUnrestrictedOverride(System.Security.IPermission):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CreatePermissionElement" uniqueID="CreatePermissionElement(System.Security.IPermission;string):System.Security.SecurityElement">
				<signature>System.Security.CodeAccessPermission.CreatePermissionElement(System.Security.IPermission;string):System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="DemandInternal" uniqueID="DemandInternal(System.Security.PermissionType):void">
				<signature>System.Security.CodeAccessPermission.DemandInternal(System.Security.PermissionType):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="RevertAll" uniqueID="RevertAll():void">
				<signature>System.Security.CodeAccessPermission.RevertAll():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="RevertAssert" uniqueID="RevertAssert():void">
				<signature>System.Security.CodeAccessPermission.RevertAssert():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="RevertDeny" uniqueID="RevertDeny():void">
				<signature>System.Security.CodeAccessPermission.RevertDeny():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="RevertPermitOnly" uniqueID="RevertPermitOnly():void">
				<signature>System.Security.CodeAccessPermission.RevertPermitOnly():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ValidateElement" uniqueID="ValidateElement(System.Security.SecurityElement;System.Security.IPermission):void">
				<signature>System.Security.CodeAccessPermission.ValidateElement(System.Security.SecurityElement;System.Security.IPermission):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Assert" uniqueID="Assert():void">
				<signature>System.Security.CodeAccessPermission.Assert():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CanUnrestrictedOverride" uniqueID="CanUnrestrictedOverride():bool">
				<signature>System.Security.CodeAccessPermission.CanUnrestrictedOverride():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckAssert" uniqueID="CheckAssert(System.Security.CodeAccessPermission):bool">
				<signature>System.Security.CodeAccessPermission.CheckAssert(System.Security.CodeAccessPermission):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckDemand" uniqueID="CheckDemand(System.Security.CodeAccessPermission):bool">
				<signature>System.Security.CodeAccessPermission.CheckDemand(System.Security.CodeAccessPermission):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckDeny" uniqueID="CheckDeny(System.Security.CodeAccessPermission):bool">
				<signature>System.Security.CodeAccessPermission.CheckDeny(System.Security.CodeAccessPermission):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckPermitOnly" uniqueID="CheckPermitOnly(System.Security.CodeAccessPermission):bool">
				<signature>System.Security.CodeAccessPermission.CheckPermitOnly(System.Security.CodeAccessPermission):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CodeAccessPermission" uniqueID="CodeAccessPermission():void">
				<signature>System.Security.CodeAccessPermission.CodeAccessPermission():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Copy" uniqueID="Copy():System.Security.IPermission">
				<signature>System.Security.CodeAccessPermission.Copy():System.Security.IPermission</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Demand" uniqueID="Demand():void">
				<signature>System.Security.CodeAccessPermission.Demand():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Deny" uniqueID="Deny():void">
				<signature>System.Security.CodeAccessPermission.Deny():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Security.CodeAccessPermission.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FromXml" uniqueID="FromXml(System.Security.SecurityElement):void">
				<signature>System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Security.CodeAccessPermission.GetHashCode():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Intersect" uniqueID="Intersect(System.Security.IPermission):System.Security.IPermission">
				<signature>System.Security.CodeAccessPermission.Intersect(System.Security.IPermission):System.Security.IPermission</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsSubsetOf" uniqueID="IsSubsetOf(System.Security.IPermission):bool">
				<signature>System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="PermitOnly" uniqueID="PermitOnly():void">
				<signature>System.Security.CodeAccessPermission.PermitOnly():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Security.CodeAccessPermission.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToXml" uniqueID="ToXml():System.Security.SecurityElement">
				<signature>System.Security.CodeAccessPermission.ToXml():System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Union" uniqueID="Union(System.Security.IPermission):System.Security.IPermission">
				<signature>System.Security.CodeAccessPermission.Union(System.Security.IPermission):System.Security.IPermission</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="VerifyType" uniqueID="VerifyType(System.Security.IPermission):bool">
				<signature>System.Security.CodeAccessPermission.VerifyType(System.Security.IPermission):bool</signature>
			</method>
		</class>
		<class name="ISecurityElementFactory" uniqueID="System.Security.ISecurityElementFactory">
			<method accessibility="Public" methodKind="Member" name="Attribute" uniqueID="Attribute(string):string">
				<signature>System.Security.ISecurityElementFactory.Attribute(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Copy" uniqueID="Copy():object">
				<signature>System.Security.ISecurityElementFactory.Copy():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CreateSecurityElement" uniqueID="CreateSecurityElement():System.Security.SecurityElement">
				<signature>System.Security.ISecurityElementFactory.CreateSecurityElement():System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTag" uniqueID="GetTag():string">
				<signature>System.Security.ISecurityElementFactory.GetTag():string</signature>
			</method>
		</class>
		<class name="PermissionListSet" uniqueID="System.Security.PermissionListSet">
			<method accessibility="Protected" methodKind="Static" name="CreateCompressedState" uniqueID="CreateCompressedState(System.Threading.CompressedStack;System.Threading.CompressedStack):System.Security.PermissionListSet">
				<signature>System.Security.PermissionListSet.CreateCompressedState(System.Threading.CompressedStack;System.Threading.CompressedStack):System.Security.PermissionListSet</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CreateCompressedState" uniqueID="CreateCompressedState(native signed int;bool):System.Security.PermissionListSet">
				<signature>System.Security.PermissionListSet.CreateCompressedState(native signed int;bool):System.Security.PermissionListSet</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CreateCompressedState_HG" uniqueID="CreateCompressedState_HG():System.Security.PermissionListSet">
				<signature>System.Security.PermissionListSet.CreateCompressedState_HG():System.Security.PermissionListSet</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="UpdateArrayList" uniqueID="UpdateArrayList(System.Collections.ArrayList;System.Collections.ArrayList):void">
				<signature>System.Security.PermissionListSet.UpdateArrayList(System.Collections.ArrayList;System.Collections.ArrayList):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="AppendZoneOrigin" uniqueID="AppendZoneOrigin(System.Security.Permissions.ZoneIdentityPermission;System.Security.Permissions.UrlIdentityPermission):void">
				<signature>System.Security.PermissionListSet.AppendZoneOrigin(System.Security.Permissions.ZoneIdentityPermission;System.Security.Permissions.UrlIdentityPermission):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckDemand" uniqueID="CheckDemand(System.Security.CodeAccessPermission;System.Security.PermissionToken;System.RuntimeMethodHandle):bool">
				<signature>System.Security.PermissionListSet.CheckDemand(System.Security.CodeAccessPermission;System.Security.PermissionToken;System.RuntimeMethodHandle):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckDemandNoThrow" uniqueID="CheckDemandNoThrow(System.Security.CodeAccessPermission):bool">
				<signature>System.Security.PermissionListSet.CheckDemandNoThrow(System.Security.CodeAccessPermission):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CheckFlags" uniqueID="CheckFlags(int):bool">
				<signature>System.Security.PermissionListSet.CheckFlags(int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckSetDemand" uniqueID="CheckSetDemand(System.Security.PermissionSet;System.RuntimeMethodHandle):bool">
				<signature>System.Security.PermissionListSet.CheckSetDemand(System.Security.PermissionSet;System.RuntimeMethodHandle):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckSetDemandNoThrow" uniqueID="CheckSetDemandNoThrow(System.Security.PermissionSet):bool">
				<signature>System.Security.PermissionListSet.CheckSetDemandNoThrow(System.Security.PermissionSet):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="DemandFlagsOrGrantSet" uniqueID="DemandFlagsOrGrantSet(int;System.Security.PermissionSet):void">
				<signature>System.Security.PermissionListSet.DemandFlagsOrGrantSet(int;System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="EnsureTriplesListCreated" uniqueID="EnsureTriplesListCreated():void">
				<signature>System.Security.PermissionListSet.EnsureTriplesListCreated():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetZoneAndOrigin" uniqueID="GetZoneAndOrigin(System.Collections.ArrayList;System.Collections.ArrayList;System.Security.PermissionToken;System.Security.PermissionToken):void">
				<signature>System.Security.PermissionListSet.GetZoneAndOrigin(System.Collections.ArrayList;System.Collections.ArrayList;System.Security.PermissionToken;System.Security.PermissionToken):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="PermissionListSet" uniqueID="PermissionListSet():void">
				<signature>System.Security.PermissionListSet.PermissionListSet():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Terminate" uniqueID="Terminate(System.Security.PermissionSetTriple):void">
				<signature>System.Security.PermissionListSet.Terminate(System.Security.PermissionSetTriple):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Terminate" uniqueID="Terminate(System.Security.PermissionSetTriple;System.Security.PermissionListSet):void">
				<signature>System.Security.PermissionListSet.Terminate(System.Security.PermissionSetTriple;System.Security.PermissionListSet):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Update" uniqueID="Update(System.Security.PermissionSet):void">
				<signature>System.Security.PermissionListSet.Update(System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Update" uniqueID="Update(System.Security.PermissionSetTriple;System.Security.FrameSecurityDescriptor):bool">
				<signature>System.Security.PermissionListSet.Update(System.Security.PermissionSetTriple;System.Security.FrameSecurityDescriptor):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Update" uniqueID="Update(System.Security.PermissionSetTriple;System.Security.PermissionListSet):bool">
				<signature>System.Security.PermissionListSet.Update(System.Security.PermissionSetTriple;System.Security.PermissionListSet):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Update" uniqueID="Update(System.Security.PermissionSetTriple;System.Security.PermissionSet;System.Security.PermissionSet):void">
				<signature>System.Security.PermissionListSet.Update(System.Security.PermissionSetTriple;System.Security.PermissionSet;System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Update2" uniqueID="Update2(System.Security.PermissionSetTriple;System.Security.FrameSecurityDescriptor;bool):bool">
				<signature>System.Security.PermissionListSet.Update2(System.Security.PermissionSetTriple;System.Security.FrameSecurityDescriptor;bool):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="UpdateDomainPLS" uniqueID="UpdateDomainPLS(System.Security.PermissionListSet):void">
				<signature>System.Security.PermissionListSet.UpdateDomainPLS(System.Security.PermissionListSet):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="UpdateDomainPLS" uniqueID="UpdateDomainPLS(System.Security.PermissionSet;System.Security.PermissionSet):void">
				<signature>System.Security.PermissionListSet.UpdateDomainPLS(System.Security.PermissionSet;System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="UpdatePermissions" uniqueID="UpdatePermissions(System.Security.PermissionSetTriple;System.Security.PermissionListSet):bool">
				<signature>System.Security.PermissionListSet.UpdatePermissions(System.Security.PermissionSetTriple;System.Security.PermissionListSet):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="UpdateTripleListAndCreateNewTriple" uniqueID="UpdateTripleListAndCreateNewTriple(System.Security.PermissionSetTriple;System.Collections.ArrayList):void">
				<signature>System.Security.PermissionListSet.UpdateTripleListAndCreateNewTriple(System.Security.PermissionSetTriple;System.Collections.ArrayList):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="UpdateZoneAndOrigin" uniqueID="UpdateZoneAndOrigin(System.Security.PermissionListSet):void">
				<signature>System.Security.PermissionListSet.UpdateZoneAndOrigin(System.Security.PermissionListSet):void</signature>
			</method>
		</class>
		<class name="PermissionSetTriple" uniqueID="System.Security.PermissionSetTriple">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Security.PermissionSetTriple.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CheckAssert" uniqueID="CheckAssert(System.Security.PermissionSet;System.Security.CodeAccessPermission;System.Security.PermissionToken):bool">
				<signature>System.Security.PermissionSetTriple.CheckAssert(System.Security.PermissionSet;System.Security.CodeAccessPermission;System.Security.PermissionToken):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CheckAssert" uniqueID="CheckAssert(System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet):bool">
				<signature>System.Security.PermissionSetTriple.CheckAssert(System.Security.PermissionSet;System.Security.PermissionSet;System.Security.PermissionSet):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckDemand" uniqueID="CheckDemand(System.Security.CodeAccessPermission;System.Security.PermissionToken;System.RuntimeMethodHandle):bool">
				<signature>System.Security.PermissionSetTriple.CheckDemand(System.Security.CodeAccessPermission;System.Security.PermissionToken;System.RuntimeMethodHandle):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckDemandNoThrow" uniqueID="CheckDemandNoThrow(System.Security.CodeAccessPermission;System.Security.PermissionToken):bool">
				<signature>System.Security.PermissionSetTriple.CheckDemandNoThrow(System.Security.CodeAccessPermission;System.Security.PermissionToken):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckFlags" uniqueID="CheckFlags(int):bool">
				<signature>System.Security.PermissionSetTriple.CheckFlags(int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckSetDemand" uniqueID="CheckSetDemand(System.Security.PermissionSet;System.Security.PermissionSet;System.RuntimeMethodHandle):bool">
				<signature>System.Security.PermissionSetTriple.CheckSetDemand(System.Security.PermissionSet;System.Security.PermissionSet;System.RuntimeMethodHandle):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckSetDemandNoThrow" uniqueID="CheckSetDemandNoThrow(System.Security.PermissionSet):bool">
				<signature>System.Security.PermissionSetTriple.CheckSetDemandNoThrow(System.Security.PermissionSet):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsEmpty" uniqueID="IsEmpty():bool">
				<signature>System.Security.PermissionSetTriple.IsEmpty():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="PermissionSetTriple" uniqueID="PermissionSetTriple():void">
				<signature>System.Security.PermissionSetTriple.PermissionSetTriple():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="PermissionSetTriple" uniqueID="PermissionSetTriple(System.Security.PermissionSetTriple):void">
				<signature>System.Security.PermissionSetTriple.PermissionSetTriple(System.Security.PermissionSetTriple):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Reset" uniqueID="Reset():void">
				<signature>System.Security.PermissionSetTriple.Reset():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Update" uniqueID="Update(System.Security.PermissionSetTriple;System.Security.PermissionSetTriple):bool">
				<signature>System.Security.PermissionSetTriple.Update(System.Security.PermissionSetTriple;System.Security.PermissionSetTriple):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="UpdateAssert" uniqueID="UpdateAssert(System.Security.PermissionSet):System.Security.PermissionSetTriple">
				<signature>System.Security.PermissionSetTriple.UpdateAssert(System.Security.PermissionSet):System.Security.PermissionSetTriple</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="UpdateGrant" uniqueID="UpdateGrant(System.Security.PermissionSet):void">
				<signature>System.Security.PermissionSetTriple.UpdateGrant(System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="UpdateGrant" uniqueID="UpdateGrant(System.Security.PermissionSet;System.Security.Permissions.ZoneIdentityPermission;System.Security.Permissions.UrlIdentityPermission):void">
				<signature>System.Security.PermissionSetTriple.UpdateGrant(System.Security.PermissionSet;System.Security.Permissions.ZoneIdentityPermission;System.Security.Permissions.UrlIdentityPermission):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="UpdateRefused" uniqueID="UpdateRefused(System.Security.PermissionSet):void">
				<signature>System.Security.PermissionSetTriple.UpdateRefused(System.Security.PermissionSet):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_UrlToken" uniqueID="get_UrlToken():System.Security.PermissionToken">
				<signature>System.Security.PermissionSetTriple.get_UrlToken():System.Security.PermissionToken</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_ZoneToken" uniqueID="get_ZoneToken():System.Security.PermissionToken">
				<signature>System.Security.PermissionSetTriple.get_ZoneToken():System.Security.PermissionToken</signature>
			</method>
		</class>
		<class name="SafeBSTRHandle" uniqueID="System.Security.SafeBSTRHandle">
			<method accessibility="Protected" methodKind="Static" name="Allocate" uniqueID="Allocate(string;unsigned int):System.Security.SafeBSTRHandle">
				<signature>System.Security.SafeBSTRHandle.Allocate(string;unsigned int):System.Security.SafeBSTRHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="Copy" uniqueID="Copy(System.Security.SafeBSTRHandle;System.Security.SafeBSTRHandle):void">
				<signature>System.Security.SafeBSTRHandle.Copy(System.Security.SafeBSTRHandle;System.Security.SafeBSTRHandle):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="SysAllocStringLen" uniqueID="SysAllocStringLen(string;unsigned int):System.Security.SafeBSTRHandle">
				<signature>System.Security.SafeBSTRHandle.SysAllocStringLen(string;unsigned int):System.Security.SafeBSTRHandle</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ClearBuffer" uniqueID="ClearBuffer():void">
				<signature>System.Security.SafeBSTRHandle.ClearBuffer():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ReleaseHandle" uniqueID="ReleaseHandle():bool">
				<signature>System.Security.SafeBSTRHandle.ReleaseHandle():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SafeBSTRHandle" uniqueID="SafeBSTRHandle():void">
				<signature>System.Security.SafeBSTRHandle.SafeBSTRHandle():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Length" uniqueID="get_Length():int">
				<signature>System.Security.SafeBSTRHandle.get_Length():int</signature>
			</method>
		</class>
		<class name="SecurityDocument" uniqueID="System.Security.SecurityDocument">
			<method accessibility="Public" methodKind="Static" name="EncodedStringSize" uniqueID="EncodedStringSize(string):int">
				<signature>System.Security.SecurityDocument.EncodedStringSize(string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddString" uniqueID="AddString(string;int):void">
				<signature>System.Security.SecurityDocument.AddString(string;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddToken" uniqueID="AddToken(byte;int):void">
				<signature>System.Security.SecurityDocument.AddToken(byte;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AppendString" uniqueID="AppendString(string;int):void">
				<signature>System.Security.SecurityDocument.AppendString(string;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ConvertElement" uniqueID="ConvertElement(System.Security.SecurityElement;int):void">
				<signature>System.Security.SecurityDocument.ConvertElement(System.Security.SecurityElement;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAttributeForElement" uniqueID="GetAttributeForElement(int;string):string">
				<signature>System.Security.SecurityDocument.GetAttributeForElement(int;string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetChildrenPositionForElement" uniqueID="GetChildrenPositionForElement(int):System.Collections.ArrayList">
				<signature>System.Security.SecurityDocument.GetChildrenPositionForElement(int):System.Collections.ArrayList</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetElement" uniqueID="GetElement(int;bool):System.Security.SecurityElement">
				<signature>System.Security.SecurityDocument.GetElement(int;bool):System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetRootElement" uniqueID="GetRootElement():System.Security.SecurityElement">
				<signature>System.Security.SecurityDocument.GetRootElement():System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetString" uniqueID="GetString(int):string">
				<signature>System.Security.SecurityDocument.GetString(int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetString" uniqueID="GetString(int;bool):string">
				<signature>System.Security.SecurityDocument.GetString(int;bool):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetTagForElement" uniqueID="GetTagForElement(int):string">
				<signature>System.Security.SecurityDocument.GetTagForElement(int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GuaranteeSize" uniqueID="GuaranteeSize(int):void">
				<signature>System.Security.SecurityDocument.GuaranteeSize(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalGetElement" uniqueID="InternalGetElement(int;bool):System.Security.SecurityElement">
				<signature>System.Security.SecurityDocument.InternalGetElement(int;bool):System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SecurityDocument" uniqueID="SecurityDocument(System.Security.SecurityElement):void">
				<signature>System.Security.SecurityDocument.SecurityDocument(System.Security.SecurityElement):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SecurityDocument" uniqueID="SecurityDocument(byte[]):void">
				<signature>System.Security.SecurityDocument.SecurityDocument(byte[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SecurityDocument" uniqueID="SecurityDocument(int):void">
				<signature>System.Security.SecurityDocument.SecurityDocument(int):void</signature>
			</method>
		</class>
		<class name="SecurityState" uniqueID="System.Security.SecurityState">
			<method accessibility="Public" methodKind="Member" name="EnsureState" uniqueID="EnsureState():void">
				<signature>System.Security.SecurityState.EnsureState():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsStateAvailable" uniqueID="IsStateAvailable():bool">
				<signature>System.Security.SecurityState.IsStateAvailable():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SecurityState" uniqueID="SecurityState():void">
				<signature>System.Security.SecurityState.SecurityState():void</signature>
			</method>
		</class>
		<class name="SecurityElement" uniqueID="System.Security.SecurityElement">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Security.SecurityElement.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="Escape" uniqueID="Escape(string):string">
				<signature>System.Security.SecurityElement.Escape(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="FromString" uniqueID="FromString(string):System.Security.SecurityElement">
				<signature>System.Security.SecurityElement.FromString(string):System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetEscapeSequence" uniqueID="GetEscapeSequence(char):string">
				<signature>System.Security.SecurityElement.GetEscapeSequence(char):string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetUnescapeSequence" uniqueID="GetUnescapeSequence(string;int;int):string">
				<signature>System.Security.SecurityElement.GetUnescapeSequence(string;int;int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsValidAttributeName" uniqueID="IsValidAttributeName(string):bool">
				<signature>System.Security.SecurityElement.IsValidAttributeName(string):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsValidAttributeValue" uniqueID="IsValidAttributeValue(string):bool">
				<signature>System.Security.SecurityElement.IsValidAttributeValue(string):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsValidTag" uniqueID="IsValidTag(string):bool">
				<signature>System.Security.SecurityElement.IsValidTag(string):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsValidText" uniqueID="IsValidText(string):bool">
				<signature>System.Security.SecurityElement.IsValidText(string):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ToStringHelperStreamWriter" uniqueID="ToStringHelperStreamWriter(object;string):void">
				<signature>System.Security.SecurityElement.ToStringHelperStreamWriter(object;string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ToStringHelperStringBuilder" uniqueID="ToStringHelperStringBuilder(object;string):void">
				<signature>System.Security.SecurityElement.ToStringHelperStringBuilder(object;string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="Unescape" uniqueID="Unescape(string):string">
				<signature>System.Security.SecurityElement.Unescape(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddAttribute" uniqueID="AddAttribute(string;string):void">
				<signature>System.Security.SecurityElement.AddAttribute(string;string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AddAttributeSafe" uniqueID="AddAttributeSafe(string;string):void">
				<signature>System.Security.SecurityElement.AddAttributeSafe(string;string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AddChild" uniqueID="AddChild(System.Security.ISecurityElementFactory):void">
				<signature>System.Security.SecurityElement.AddChild(System.Security.ISecurityElementFactory):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddChild" uniqueID="AddChild(System.Security.SecurityElement):void">
				<signature>System.Security.SecurityElement.AddChild(System.Security.SecurityElement):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AddChildNoDuplicates" uniqueID="AddChildNoDuplicates(System.Security.ISecurityElementFactory):void">
				<signature>System.Security.SecurityElement.AddChildNoDuplicates(System.Security.ISecurityElementFactory):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Attribute" uniqueID="Attribute(string):string">
				<signature>System.Security.SecurityElement.Attribute(string):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ConvertSecurityElementFactories" uniqueID="ConvertSecurityElementFactories():void">
				<signature>System.Security.SecurityElement.ConvertSecurityElementFactories():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Copy" uniqueID="Copy():System.Security.SecurityElement">
				<signature>System.Security.SecurityElement.Copy():System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equal" uniqueID="Equal(System.Security.SecurityElement):bool">
				<signature>System.Security.SecurityElement.Equal(System.Security.SecurityElement):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SearchForChildByTag" uniqueID="SearchForChildByTag(string):System.Security.SecurityElement">
				<signature>System.Security.SecurityElement.SearchForChildByTag(string):System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SearchForTextOfLocalName" uniqueID="SearchForTextOfLocalName(string):string">
				<signature>System.Security.SecurityElement.SearchForTextOfLocalName(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SearchForTextOfTag" uniqueID="SearchForTextOfTag(string):string">
				<signature>System.Security.SecurityElement.SearchForTextOfTag(string):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SecurityElement" uniqueID="SecurityElement():void">
				<signature>System.Security.SecurityElement.SecurityElement():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SecurityElement" uniqueID="SecurityElement(string):void">
				<signature>System.Security.SecurityElement.SecurityElement(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SecurityElement" uniqueID="SecurityElement(string;string):void">
				<signature>System.Security.SecurityElement.SecurityElement(string;string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Security.ISecurityElementFactory.Attribute" uniqueID="System.Security.ISecurityElementFactory.Attribute(string):string">
				<signature>System.Security.SecurityElement.System.Security.ISecurityElementFactory.Attribute(string):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Security.ISecurityElementFactory.Copy" uniqueID="System.Security.ISecurityElementFactory.Copy():object">
				<signature>System.Security.SecurityElement.System.Security.ISecurityElementFactory.Copy():object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Security.ISecurityElementFactory.CreateSecurityElement" uniqueID="System.Security.ISecurityElementFactory.CreateSecurityElement():System.Security.SecurityElement">
				<signature>System.Security.SecurityElement.System.Security.ISecurityElementFactory.CreateSecurityElement():System.Security.SecurityElement</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Security.ISecurityElementFactory.GetTag" uniqueID="System.Security.ISecurityElementFactory.GetTag():string">
				<signature>System.Security.SecurityElement.System.Security.ISecurityElementFactory.GetTag():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ToPermission" uniqueID="ToPermission(bool):System.Security.IPermission">
				<signature>System.Security.SecurityElement.ToPermission(bool):System.Security.IPermission</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ToSecurityObject" uniqueID="ToSecurityObject():object">
				<signature>System.Security.SecurityElement.ToSecurityObject():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Security.SecurityElement.ToString():string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ToString" uniqueID="ToString(string;object;System.Security.SecurityElement+ToStringHelperFunc):void">
				<signature>System.Security.SecurityElement.ToString(string;object;System.Security.SecurityElement+ToStringHelperFunc):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ToWriter" uniqueID="ToWriter(System.IO.StreamWriter):void">
				<signature>System.Security.SecurityElement.ToWriter(System.IO.StreamWriter):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Attributes" uniqueID="get_Attributes():System.Collections.Hashtable">
				<signature>System.Security.SecurityElement.get_Attributes():System.Collections.Hashtable</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Children" uniqueID="get_Children():System.Collections.ArrayList">
				<signature>System.Security.SecurityElement.get_Children():System.Collections.ArrayList</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_InternalChildren" uniqueID="get_InternalChildren():System.Collections.ArrayList">
				<signature>System.Security.SecurityElement.get_InternalChildren():System.Collections.ArrayList</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Tag" uniqueID="get_Tag():string">
				<signature>System.Security.SecurityElement.get_Tag():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Text" uniqueID="get_Text():string">
				<signature>System.Security.SecurityElement.get_Text():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Attributes" uniqueID="set_Attributes(System.Collections.Hashtable):void">
				<signature>System.Security.SecurityElement.set_Attributes(System.Collections.Hashtable):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Children" uniqueID="set_Children(System.Collections.ArrayList):void">
				<signature>System.Security.SecurityElement.set_Children(System.Collections.ArrayList):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Tag" uniqueID="set_Tag(string):void">
				<signature>System.Security.SecurityElement.set_Tag(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Text" uniqueID="set_Text(string):void">
				<signature>System.Security.SecurityElement.set_Text(string):void</signature>
			</method>
		</class>
	</package>
	<package name="System.Runtime.Remoting.Lifetime">
		<class name="ILease" uniqueID="System.Runtime.Remoting.Lifetime.ILease">
			<method accessibility="Public" methodKind="Member" name="Register" uniqueID="Register(System.Runtime.Remoting.Lifetime.ISponsor):void">
				<signature>System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Register" uniqueID="Register(System.Runtime.Remoting.Lifetime.ISponsor;System.TimeSpan):void">
				<signature>System.Runtime.Remoting.Lifetime.ILease.Register(System.Runtime.Remoting.Lifetime.ISponsor;System.TimeSpan):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Renew" uniqueID="Renew(System.TimeSpan):System.TimeSpan">
				<signature>System.Runtime.Remoting.Lifetime.ILease.Renew(System.TimeSpan):System.TimeSpan</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Unregister" uniqueID="Unregister(System.Runtime.Remoting.Lifetime.ISponsor):void">
				<signature>System.Runtime.Remoting.Lifetime.ILease.Unregister(System.Runtime.Remoting.Lifetime.ISponsor):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CurrentLeaseTime" uniqueID="get_CurrentLeaseTime():System.TimeSpan">
				<signature>System.Runtime.Remoting.Lifetime.ILease.get_CurrentLeaseTime():System.TimeSpan</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CurrentState" uniqueID="get_CurrentState():System.Runtime.Remoting.Lifetime.LeaseState">
				<signature>System.Runtime.Remoting.Lifetime.ILease.get_CurrentState():System.Runtime.Remoting.Lifetime.LeaseState</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_InitialLeaseTime" uniqueID="get_InitialLeaseTime():System.TimeSpan">
				<signature>System.Runtime.Remoting.Lifetime.ILease.get_InitialLeaseTime():System.TimeSpan</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_RenewOnCallTime" uniqueID="get_RenewOnCallTime():System.TimeSpan">
				<signature>System.Runtime.Remoting.Lifetime.ILease.get_RenewOnCallTime():System.TimeSpan</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SponsorshipTimeout" uniqueID="get_SponsorshipTimeout():System.TimeSpan">
				<signature>System.Runtime.Remoting.Lifetime.ILease.get_SponsorshipTimeout():System.TimeSpan</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_InitialLeaseTime" uniqueID="set_InitialLeaseTime(System.TimeSpan):void">
				<signature>System.Runtime.Remoting.Lifetime.ILease.set_InitialLeaseTime(System.TimeSpan):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_RenewOnCallTime" uniqueID="set_RenewOnCallTime(System.TimeSpan):void">
				<signature>System.Runtime.Remoting.Lifetime.ILease.set_RenewOnCallTime(System.TimeSpan):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_SponsorshipTimeout" uniqueID="set_SponsorshipTimeout(System.TimeSpan):void">
				<signature>System.Runtime.Remoting.Lifetime.ILease.set_SponsorshipTimeout(System.TimeSpan):void</signature>
			</method>
		</class>
		<class name="ISponsor" uniqueID="System.Runtime.Remoting.Lifetime.ISponsor">
			<method accessibility="Public" methodKind="Member" name="Renewal" uniqueID="Renewal(System.Runtime.Remoting.Lifetime.ILease):System.TimeSpan">
				<signature>System.Runtime.Remoting.Lifetime.ISponsor.Renewal(System.Runtime.Remoting.Lifetime.ILease):System.TimeSpan</signature>
			</method>
		</class>
		<class name="Lease" uniqueID="System.Runtime.Remoting.Lifetime.Lease">
			<method accessibility="Protected" methodKind="Member" name="ActivateLease" uniqueID="ActivateLease():void">
				<signature>System.Runtime.Remoting.Lifetime.Lease.ActivateLease():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="AddTime" uniqueID="AddTime(System.TimeSpan):void">
				<signature>System.Runtime.Remoting.Lifetime.Lease.AddTime(System.TimeSpan):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Cancel" uniqueID="Cancel():void">
				<signature>System.Runtime.Remoting.Lifetime.Lease.Cancel():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetSponsorFromId" uniqueID="GetSponsorFromId(object):System.Runtime.Remoting.Lifetime.ISponsor">
				<signature>System.Runtime.Remoting.Lifetime.Lease.GetSponsorFromId(object):System.Runtime.Remoting.Lifetime.ISponsor</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetSponsorId" uniqueID="GetSponsorId(System.Runtime.Remoting.Lifetime.ISponsor):object">
				<signature>System.Runtime.Remoting.Lifetime.Lease.GetSponsorId(System.Runtime.Remoting.Lifetime.ISponsor):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InitializeLifetimeService" uniqueID="InitializeLifetimeService():object">
				<signature>System.Runtime.Remoting.Lifetime.Lease.InitializeLifetimeService():object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Lease" uniqueID="Lease(System.TimeSpan;System.TimeSpan;System.TimeSpan;System.MarshalByRefObject):void">
				<signature>System.Runtime.Remoting.Lifetime.Lease.Lease(System.TimeSpan;System.TimeSpan;System.TimeSpan;System.MarshalByRefObject):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="LeaseExpired" uniqueID="LeaseExpired(System.DateTime):void">
				<signature>System.Runtime.Remoting.Lifetime.Lease.LeaseExpired(System.DateTime):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ProcessNextSponsor" uniqueID="ProcessNextSponsor():void">
				<signature>System.Runtime.Remoting.Lifetime.Lease.ProcessNextSponsor():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Register" uniqueID="Register(System.Runtime.Remoting.Lifetime.ISponsor):void">
				<signature>System.Runtime.Remoting.Lifetime.Lease.Register(System.Runtime.Remoting.Lifetime.ISponsor):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Register" uniqueID="Register(System.Runtime.Remoting.Lifetime.ISponsor;System.TimeSpan):void">
				<signature>System.Runtime.Remoting.Lifetime.Lease.Register(System.Runtime.Remoting.Lifetime.ISponsor;System.TimeSpan):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Remove" uniqueID="Remove():void">
				<signature>System.Runtime.Remoting.Lifetime.Lease.Remove():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Renew" uniqueID="Renew(System.TimeSpan):System.TimeSpan">
				<signature>System.Runtime.Remoting.Lifetime.Lease.Renew(System.TimeSpan):System.TimeSpan</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RenewInternal" uniqueID="RenewInternal(System.TimeSpan):System.TimeSpan">
				<signature>System.Runtime.Remoting.Lifetime.Lease.RenewInternal(System.TimeSpan):System.TimeSpan</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RenewOnCall" uniqueID="RenewOnCall():void">
				<signature>System.Runtime.Remoting.Lifetime.Lease.RenewOnCall():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SponsorCall" uniqueID="SponsorCall(System.Runtime.Remoting.Lifetime.ISponsor):void">
				<signature>System.Runtime.Remoting.Lifetime.Lease.SponsorCall(System.Runtime.Remoting.Lifetime.ISponsor):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SponsorCallback" uniqueID="SponsorCallback(System.IAsyncResult):void">
				<signature>System.Runtime.Remoting.Lifetime.Lease.SponsorCallback(System.IAsyncResult):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SponsorCallback" uniqueID="SponsorCallback(object):void">
				<signature>System.Runtime.Remoting.Lifetime.Lease.SponsorCallback(object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SponsorTimeout" uniqueID="SponsorTimeout(object):void">
				<signature>System.Runtime.Remoting.Lifetime.Lease.SponsorTimeout(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Unregister" uniqueID="Unregister(System.Runtime.Remoting.Lifetime.ISponsor):void">
				<signature>System.Runtime.Remoting.Lifetime.Lease.Unregister(System.Runtime.Remoting.Lifetime.ISponsor):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CurrentLeaseTime" uniqueID="get_CurrentLeaseTime():System.TimeSpan">
				<signature>System.Runtime.Remoting.Lifetime.Lease.get_CurrentLeaseTime():System.TimeSpan</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CurrentState" uniqueID="get_CurrentState():System.Runtime.Remoting.Lifetime.LeaseState">
				<signature>System.Runtime.Remoting.Lifetime.Lease.get_CurrentState():System.Runtime.Remoting.Lifetime.LeaseState</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_InitialLeaseTime" uniqueID="get_InitialLeaseTime():System.TimeSpan">
				<signature>System.Runtime.Remoting.Lifetime.Lease.get_InitialLeaseTime():System.TimeSpan</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_RenewOnCallTime" uniqueID="get_RenewOnCallTime():System.TimeSpan">
				<signature>System.Runtime.Remoting.Lifetime.Lease.get_RenewOnCallTime():System.TimeSpan</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SponsorshipTimeout" uniqueID="get_SponsorshipTimeout():System.TimeSpan">
				<signature>System.Runtime.Remoting.Lifetime.Lease.get_SponsorshipTimeout():System.TimeSpan</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_InitialLeaseTime" uniqueID="set_InitialLeaseTime(System.TimeSpan):void">
				<signature>System.Runtime.Remoting.Lifetime.Lease.set_InitialLeaseTime(System.TimeSpan):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_RenewOnCallTime" uniqueID="set_RenewOnCallTime(System.TimeSpan):void">
				<signature>System.Runtime.Remoting.Lifetime.Lease.set_RenewOnCallTime(System.TimeSpan):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_SponsorshipTimeout" uniqueID="set_SponsorshipTimeout(System.TimeSpan):void">
				<signature>System.Runtime.Remoting.Lifetime.Lease.set_SponsorshipTimeout(System.TimeSpan):void</signature>
			</method>
		</class>
		<class name="LeaseManager" uniqueID="System.Runtime.Remoting.Lifetime.LeaseManager">
			<method accessibility="Protected" methodKind="Static" name="GetLeaseManager" uniqueID="GetLeaseManager():System.Runtime.Remoting.Lifetime.LeaseManager">
				<signature>System.Runtime.Remoting.Lifetime.LeaseManager.GetLeaseManager():System.Runtime.Remoting.Lifetime.LeaseManager</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetLeaseManager" uniqueID="GetLeaseManager(System.TimeSpan):System.Runtime.Remoting.Lifetime.LeaseManager">
				<signature>System.Runtime.Remoting.Lifetime.LeaseManager.GetLeaseManager(System.TimeSpan):System.Runtime.Remoting.Lifetime.LeaseManager</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="IsInitialized" uniqueID="IsInitialized():bool">
				<signature>System.Runtime.Remoting.Lifetime.LeaseManager.IsInitialized():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ActivateLease" uniqueID="ActivateLease(System.Runtime.Remoting.Lifetime.Lease):void">
				<signature>System.Runtime.Remoting.Lifetime.LeaseManager.ActivateLease(System.Runtime.Remoting.Lifetime.Lease):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ChangePollTime" uniqueID="ChangePollTime(System.TimeSpan):void">
				<signature>System.Runtime.Remoting.Lifetime.LeaseManager.ChangePollTime(System.TimeSpan):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ChangedLeaseTime" uniqueID="ChangedLeaseTime(System.Runtime.Remoting.Lifetime.Lease;System.DateTime):void">
				<signature>System.Runtime.Remoting.Lifetime.LeaseManager.ChangedLeaseTime(System.Runtime.Remoting.Lifetime.Lease;System.DateTime):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="DeleteLease" uniqueID="DeleteLease(System.Runtime.Remoting.Lifetime.Lease):void">
				<signature>System.Runtime.Remoting.Lifetime.LeaseManager.DeleteLease(System.Runtime.Remoting.Lifetime.Lease):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="DeleteSponsor" uniqueID="DeleteSponsor(object):void">
				<signature>System.Runtime.Remoting.Lifetime.LeaseManager.DeleteSponsor(object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="DumpLeases" uniqueID="DumpLeases(System.Runtime.Remoting.Lifetime.Lease[]):void">
				<signature>System.Runtime.Remoting.Lifetime.LeaseManager.DumpLeases(System.Runtime.Remoting.Lifetime.Lease[]):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetLease" uniqueID="GetLease(System.MarshalByRefObject):System.Runtime.Remoting.Lifetime.ILease">
				<signature>System.Runtime.Remoting.Lifetime.LeaseManager.GetLease(System.MarshalByRefObject):System.Runtime.Remoting.Lifetime.ILease</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="LeaseManager" uniqueID="LeaseManager(System.TimeSpan):void">
				<signature>System.Runtime.Remoting.Lifetime.LeaseManager.LeaseManager(System.TimeSpan):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="LeaseTimeAnalyzer" uniqueID="LeaseTimeAnalyzer(object):void">
				<signature>System.Runtime.Remoting.Lifetime.LeaseManager.LeaseTimeAnalyzer(object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RegisterSponsorCall" uniqueID="RegisterSponsorCall(System.Runtime.Remoting.Lifetime.Lease;object;System.TimeSpan):void">
				<signature>System.Runtime.Remoting.Lifetime.LeaseManager.RegisterSponsorCall(System.Runtime.Remoting.Lifetime.Lease;object;System.TimeSpan):void</signature>
			</method>
		</class>
	</package>
	<package name="System.Runtime.Remoting.Messaging">
		<class name="CallContextRemotingData" uniqueID="System.Runtime.Remoting.Messaging.CallContextRemotingData">
			<method accessibility="Public" methodKind="Member" name="CallContextRemotingData" uniqueID="CallContextRemotingData():void">
				<signature>System.Runtime.Remoting.Messaging.CallContextRemotingData.CallContextRemotingData():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone():object">
				<signature>System.Runtime.Remoting.Messaging.CallContextRemotingData.Clone():object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_HasInfo" uniqueID="get_HasInfo():bool">
				<signature>System.Runtime.Remoting.Messaging.CallContextRemotingData.get_HasInfo():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_LogicalCallID" uniqueID="get_LogicalCallID():string">
				<signature>System.Runtime.Remoting.Messaging.CallContextRemotingData.get_LogicalCallID():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_LogicalCallID" uniqueID="set_LogicalCallID(string):void">
				<signature>System.Runtime.Remoting.Messaging.CallContextRemotingData.set_LogicalCallID(string):void</signature>
			</method>
		</class>
		<class name="Header" uniqueID="System.Runtime.Remoting.Messaging.Header">
			<method accessibility="Public" methodKind="Member" name="Header" uniqueID="Header(string;object):void">
				<signature>System.Runtime.Remoting.Messaging.Header.Header(string;object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Header" uniqueID="Header(string;object;bool):void">
				<signature>System.Runtime.Remoting.Messaging.Header.Header(string;object;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Header" uniqueID="Header(string;object;bool;string):void">
				<signature>System.Runtime.Remoting.Messaging.Header.Header(string;object;bool;string):void</signature>
			</method>
		</class>
		<class name="IMessageCtrl" uniqueID="System.Runtime.Remoting.Messaging.IMessageCtrl">
			<method accessibility="Public" methodKind="Member" name="Cancel" uniqueID="Cancel(int):void">
				<signature>System.Runtime.Remoting.Messaging.IMessageCtrl.Cancel(int):void</signature>
			</method>
		</class>
		<class name="IMethodCallMessage" uniqueID="System.Runtime.Remoting.Messaging.IMethodCallMessage">
			<method accessibility="Public" methodKind="Member" name="GetInArg" uniqueID="GetInArg(int):object">
				<signature>System.Runtime.Remoting.Messaging.IMethodCallMessage.GetInArg(int):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetInArgName" uniqueID="GetInArgName(int):string">
				<signature>System.Runtime.Remoting.Messaging.IMethodCallMessage.GetInArgName(int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_InArgCount" uniqueID="get_InArgCount():int">
				<signature>System.Runtime.Remoting.Messaging.IMethodCallMessage.get_InArgCount():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_InArgs" uniqueID="get_InArgs():object[]">
				<signature>System.Runtime.Remoting.Messaging.IMethodCallMessage.get_InArgs():object[]</signature>
			</method>
		</class>
		<class name="IMethodMessage" uniqueID="System.Runtime.Remoting.Messaging.IMethodMessage">
			<method accessibility="Public" methodKind="Member" name="GetArg" uniqueID="GetArg(int):object">
				<signature>System.Runtime.Remoting.Messaging.IMethodMessage.GetArg(int):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetArgName" uniqueID="GetArgName(int):string">
				<signature>System.Runtime.Remoting.Messaging.IMethodMessage.GetArgName(int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ArgCount" uniqueID="get_ArgCount():int">
				<signature>System.Runtime.Remoting.Messaging.IMethodMessage.get_ArgCount():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Args" uniqueID="get_Args():object[]">
				<signature>System.Runtime.Remoting.Messaging.IMethodMessage.get_Args():object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_HasVarArgs" uniqueID="get_HasVarArgs():bool">
				<signature>System.Runtime.Remoting.Messaging.IMethodMessage.get_HasVarArgs():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_LogicalCallContext" uniqueID="get_LogicalCallContext():System.Runtime.Remoting.Messaging.LogicalCallContext">
				<signature>System.Runtime.Remoting.Messaging.IMethodMessage.get_LogicalCallContext():System.Runtime.Remoting.Messaging.LogicalCallContext</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MethodBase" uniqueID="get_MethodBase():System.Reflection.MethodBase">
				<signature>System.Runtime.Remoting.Messaging.IMethodMessage.get_MethodBase():System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MethodName" uniqueID="get_MethodName():string">
				<signature>System.Runtime.Remoting.Messaging.IMethodMessage.get_MethodName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MethodSignature" uniqueID="get_MethodSignature():object">
				<signature>System.Runtime.Remoting.Messaging.IMethodMessage.get_MethodSignature():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TypeName" uniqueID="get_TypeName():string">
				<signature>System.Runtime.Remoting.Messaging.IMethodMessage.get_TypeName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Uri" uniqueID="get_Uri():string">
				<signature>System.Runtime.Remoting.Messaging.IMethodMessage.get_Uri():string</signature>
			</method>
		</class>
		<class name="LogicalCallContext" uniqueID="System.Runtime.Remoting.Messaging.LogicalCallContext">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Runtime.Remoting.Messaging.LogicalCallContext.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetPropertyKeyForHeader" uniqueID="GetPropertyKeyForHeader(System.Runtime.Remoting.Messaging.Header):string">
				<signature>System.Runtime.Remoting.Messaging.LogicalCallContext.GetPropertyKeyForHeader(System.Runtime.Remoting.Messaging.Header):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone():object">
				<signature>System.Runtime.Remoting.Messaging.LogicalCallContext.Clone():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="FreeNamedDataSlot" uniqueID="FreeNamedDataSlot(string):void">
				<signature>System.Runtime.Remoting.Messaging.LogicalCallContext.FreeNamedDataSlot(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetData" uniqueID="GetData(string):object">
				<signature>System.Runtime.Remoting.Messaging.LogicalCallContext.GetData(string):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetObjectData" uniqueID="GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Runtime.Remoting.Messaging.LogicalCallContext.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalGetHeaders" uniqueID="InternalGetHeaders():System.Runtime.Remoting.Messaging.Header[]">
				<signature>System.Runtime.Remoting.Messaging.LogicalCallContext.InternalGetHeaders():System.Runtime.Remoting.Messaging.Header[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="InternalGetOutgoingHeaders" uniqueID="InternalGetOutgoingHeaders():System.Runtime.Remoting.Messaging.Header[]">
				<signature>System.Runtime.Remoting.Messaging.LogicalCallContext.InternalGetOutgoingHeaders():System.Runtime.Remoting.Messaging.Header[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalSetHeaders" uniqueID="InternalSetHeaders(System.Runtime.Remoting.Messaging.Header[]):void">
				<signature>System.Runtime.Remoting.Messaging.LogicalCallContext.InternalSetHeaders(System.Runtime.Remoting.Messaging.Header[]):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="LogicalCallContext" uniqueID="LogicalCallContext():void">
				<signature>System.Runtime.Remoting.Messaging.LogicalCallContext.LogicalCallContext():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="LogicalCallContext" uniqueID="LogicalCallContext(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Runtime.Remoting.Messaging.LogicalCallContext.LogicalCallContext(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Merge" uniqueID="Merge(System.Runtime.Remoting.Messaging.LogicalCallContext):void">
				<signature>System.Runtime.Remoting.Messaging.LogicalCallContext.Merge(System.Runtime.Remoting.Messaging.LogicalCallContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="PropagateIncomingHeadersToCallContext" uniqueID="PropagateIncomingHeadersToCallContext(System.Runtime.Remoting.Messaging.IMessage):void">
				<signature>System.Runtime.Remoting.Messaging.LogicalCallContext.PropagateIncomingHeadersToCallContext(System.Runtime.Remoting.Messaging.IMessage):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="PropagateOutgoingHeadersToMessage" uniqueID="PropagateOutgoingHeadersToMessage(System.Runtime.Remoting.Messaging.IMessage):void">
				<signature>System.Runtime.Remoting.Messaging.LogicalCallContext.PropagateOutgoingHeadersToMessage(System.Runtime.Remoting.Messaging.IMessage):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="RemovePrincipalIfNotSerializable" uniqueID="RemovePrincipalIfNotSerializable():System.Security.Principal.IPrincipal">
				<signature>System.Runtime.Remoting.Messaging.LogicalCallContext.RemovePrincipalIfNotSerializable():System.Security.Principal.IPrincipal</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetData" uniqueID="SetData(string;object):void">
				<signature>System.Runtime.Remoting.Messaging.LogicalCallContext.SetData(string;object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_Datastore" uniqueID="get_Datastore():System.Collections.Hashtable">
				<signature>System.Runtime.Remoting.Messaging.LogicalCallContext.get_Datastore():System.Collections.Hashtable</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_HasInfo" uniqueID="get_HasInfo():bool">
				<signature>System.Runtime.Remoting.Messaging.LogicalCallContext.get_HasInfo():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_HasUserData" uniqueID="get_HasUserData():bool">
				<signature>System.Runtime.Remoting.Messaging.LogicalCallContext.get_HasUserData():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_HostContext" uniqueID="get_HostContext():object">
				<signature>System.Runtime.Remoting.Messaging.LogicalCallContext.get_HostContext():object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Principal" uniqueID="get_Principal():System.Security.Principal.IPrincipal">
				<signature>System.Runtime.Remoting.Messaging.LogicalCallContext.get_Principal():System.Security.Principal.IPrincipal</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_RemotingData" uniqueID="get_RemotingData():System.Runtime.Remoting.Messaging.CallContextRemotingData">
				<signature>System.Runtime.Remoting.Messaging.LogicalCallContext.get_RemotingData():System.Runtime.Remoting.Messaging.CallContextRemotingData</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SecurityData" uniqueID="get_SecurityData():System.Runtime.Remoting.Messaging.CallContextSecurityData">
				<signature>System.Runtime.Remoting.Messaging.LogicalCallContext.get_SecurityData():System.Runtime.Remoting.Messaging.CallContextSecurityData</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_HostContext" uniqueID="set_HostContext(object):void">
				<signature>System.Runtime.Remoting.Messaging.LogicalCallContext.set_HostContext(object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_Principal" uniqueID="set_Principal(System.Security.Principal.IPrincipal):void">
				<signature>System.Runtime.Remoting.Messaging.LogicalCallContext.set_Principal(System.Security.Principal.IPrincipal):void</signature>
			</method>
		</class>
		<class name="StackBuilderSink" uniqueID="System.Runtime.Remoting.Messaging.StackBuilderSink">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Runtime.Remoting.Messaging.StackBuilderSink.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetMethodBase" uniqueID="GetMethodBase(System.Runtime.Remoting.Messaging.IMethodMessage):System.Reflection.MethodBase">
				<signature>System.Runtime.Remoting.Messaging.StackBuilderSink.GetMethodBase(System.Runtime.Remoting.Messaging.IMethodMessage):System.Reflection.MethodBase</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="PreserveThreadPrincipalIfNecessary" uniqueID="PreserveThreadPrincipalIfNecessary(System.Runtime.Remoting.Messaging.LogicalCallContext;System.Runtime.Remoting.Messaging.LogicalCallContext):void">
				<signature>System.Runtime.Remoting.Messaging.StackBuilderSink.PreserveThreadPrincipalIfNecessary(System.Runtime.Remoting.Messaging.LogicalCallContext;System.Runtime.Remoting.Messaging.LogicalCallContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="VerifyIsOkToCallMethod" uniqueID="VerifyIsOkToCallMethod(object;System.Runtime.Remoting.Messaging.IMethodMessage):void">
				<signature>System.Runtime.Remoting.Messaging.StackBuilderSink.VerifyIsOkToCallMethod(object;System.Runtime.Remoting.Messaging.IMethodMessage):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="VerifyNotIRemoteDispatch" uniqueID="VerifyNotIRemoteDispatch(System.Type):void">
				<signature>System.Runtime.Remoting.Messaging.StackBuilderSink.VerifyNotIRemoteDispatch(System.Type):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AsyncProcessMessage" uniqueID="AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage;System.Runtime.Remoting.Messaging.IMessageSink):System.Runtime.Remoting.Messaging.IMessageCtrl">
				<signature>System.Runtime.Remoting.Messaging.StackBuilderSink.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage;System.Runtime.Remoting.Messaging.IMessageSink):System.Runtime.Remoting.Messaging.IMessageCtrl</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CopyNonByrefOutArgsFromOriginalArgs" uniqueID="CopyNonByrefOutArgsFromOriginalArgs(System.Runtime.Remoting.Metadata.RemotingMethodCachedData;object[];object[]):void">
				<signature>System.Runtime.Remoting.Messaging.StackBuilderSink.CopyNonByrefOutArgsFromOriginalArgs(System.Runtime.Remoting.Metadata.RemotingMethodCachedData;object[];object[]):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsOKToStackBlt" uniqueID="IsOKToStackBlt(System.Runtime.Remoting.Messaging.IMethodMessage;object):bool">
				<signature>System.Runtime.Remoting.Messaging.StackBuilderSink.IsOKToStackBlt(System.Runtime.Remoting.Messaging.IMethodMessage;object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="PrivateProcessMessage" uniqueID="PrivateProcessMessage(System.RuntimeMethodHandle;object[];object;int;bool;object[]):object">
				<signature>System.Runtime.Remoting.Messaging.StackBuilderSink.PrivateProcessMessage(System.RuntimeMethodHandle;object[];object;int;bool;object[]):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StackBuilderSink" uniqueID="StackBuilderSink(System.MarshalByRefObject):void">
				<signature>System.Runtime.Remoting.Messaging.StackBuilderSink.StackBuilderSink(System.MarshalByRefObject):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="StackBuilderSink" uniqueID="StackBuilderSink(object):void">
				<signature>System.Runtime.Remoting.Messaging.StackBuilderSink.StackBuilderSink(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SyncProcessMessage" uniqueID="SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage):System.Runtime.Remoting.Messaging.IMessage">
				<signature>System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage):System.Runtime.Remoting.Messaging.IMessage</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SyncProcessMessage" uniqueID="SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage;int;bool):System.Runtime.Remoting.Messaging.IMessage">
				<signature>System.Runtime.Remoting.Messaging.StackBuilderSink.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage;int;bool):System.Runtime.Remoting.Messaging.IMessage</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="_PrivateProcessMessage" uniqueID="_PrivateProcessMessage(native signed int;object[];object;int;bool;object[]):object">
				<signature>System.Runtime.Remoting.Messaging.StackBuilderSink._PrivateProcessMessage(native signed int;object[];object;int;bool;object[]):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_NextSink" uniqueID="get_NextSink():System.Runtime.Remoting.Messaging.IMessageSink">
				<signature>System.Runtime.Remoting.Messaging.StackBuilderSink.get_NextSink():System.Runtime.Remoting.Messaging.IMessageSink</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ServerObject" uniqueID="get_ServerObject():object">
				<signature>System.Runtime.Remoting.Messaging.StackBuilderSink.get_ServerObject():object</signature>
			</method>
		</class>
		<class name="CallContextSecurityData" uniqueID="System.Runtime.Remoting.Messaging.CallContextSecurityData">
			<method accessibility="Public" methodKind="Member" name="CallContextSecurityData" uniqueID="CallContextSecurityData():void">
				<signature>System.Runtime.Remoting.Messaging.CallContextSecurityData.CallContextSecurityData():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone():object">
				<signature>System.Runtime.Remoting.Messaging.CallContextSecurityData.Clone():object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_HasInfo" uniqueID="get_HasInfo():bool">
				<signature>System.Runtime.Remoting.Messaging.CallContextSecurityData.get_HasInfo():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Principal" uniqueID="get_Principal():System.Security.Principal.IPrincipal">
				<signature>System.Runtime.Remoting.Messaging.CallContextSecurityData.get_Principal():System.Security.Principal.IPrincipal</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_Principal" uniqueID="set_Principal(System.Security.Principal.IPrincipal):void">
				<signature>System.Runtime.Remoting.Messaging.CallContextSecurityData.set_Principal(System.Security.Principal.IPrincipal):void</signature>
			</method>
		</class>
		<class name="IMessage" uniqueID="System.Runtime.Remoting.Messaging.IMessage">
			<method accessibility="Public" methodKind="Member" name="get_Properties" uniqueID="get_Properties():System.Collections.IDictionary">
				<signature>System.Runtime.Remoting.Messaging.IMessage.get_Properties():System.Collections.IDictionary</signature>
			</method>
		</class>
		<class name="IMessageSink" uniqueID="System.Runtime.Remoting.Messaging.IMessageSink">
			<method accessibility="Public" methodKind="Member" name="AsyncProcessMessage" uniqueID="AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage;System.Runtime.Remoting.Messaging.IMessageSink):System.Runtime.Remoting.Messaging.IMessageCtrl">
				<signature>System.Runtime.Remoting.Messaging.IMessageSink.AsyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage;System.Runtime.Remoting.Messaging.IMessageSink):System.Runtime.Remoting.Messaging.IMessageCtrl</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SyncProcessMessage" uniqueID="SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage):System.Runtime.Remoting.Messaging.IMessage">
				<signature>System.Runtime.Remoting.Messaging.IMessageSink.SyncProcessMessage(System.Runtime.Remoting.Messaging.IMessage):System.Runtime.Remoting.Messaging.IMessage</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_NextSink" uniqueID="get_NextSink():System.Runtime.Remoting.Messaging.IMessageSink">
				<signature>System.Runtime.Remoting.Messaging.IMessageSink.get_NextSink():System.Runtime.Remoting.Messaging.IMessageSink</signature>
			</method>
		</class>
		<class name="IMethodReturnMessage" uniqueID="System.Runtime.Remoting.Messaging.IMethodReturnMessage">
			<method accessibility="Public" methodKind="Member" name="GetOutArg" uniqueID="GetOutArg(int):object">
				<signature>System.Runtime.Remoting.Messaging.IMethodReturnMessage.GetOutArg(int):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetOutArgName" uniqueID="GetOutArgName(int):string">
				<signature>System.Runtime.Remoting.Messaging.IMethodReturnMessage.GetOutArgName(int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Exception" uniqueID="get_Exception():System.Exception">
				<signature>System.Runtime.Remoting.Messaging.IMethodReturnMessage.get_Exception():System.Exception</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_OutArgCount" uniqueID="get_OutArgCount():int">
				<signature>System.Runtime.Remoting.Messaging.IMethodReturnMessage.get_OutArgCount():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_OutArgs" uniqueID="get_OutArgs():object[]">
				<signature>System.Runtime.Remoting.Messaging.IMethodReturnMessage.get_OutArgs():object[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ReturnValue" uniqueID="get_ReturnValue():object">
				<signature>System.Runtime.Remoting.Messaging.IMethodReturnMessage.get_ReturnValue():object</signature>
			</method>
		</class>
		<class name="InternalSink" uniqueID="System.Runtime.Remoting.Messaging.InternalSink">
			<method accessibility="Protected" methodKind="Static" name="DisallowAsyncActivation" uniqueID="DisallowAsyncActivation(System.Runtime.Remoting.Messaging.IMessage):System.Runtime.Remoting.Messaging.IMessage">
				<signature>System.Runtime.Remoting.Messaging.InternalSink.DisallowAsyncActivation(System.Runtime.Remoting.Messaging.IMessage):System.Runtime.Remoting.Messaging.IMessage</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetIdentity" uniqueID="GetIdentity(System.Runtime.Remoting.Messaging.IMessage):System.Runtime.Remoting.Identity">
				<signature>System.Runtime.Remoting.Messaging.InternalSink.GetIdentity(System.Runtime.Remoting.Messaging.IMessage):System.Runtime.Remoting.Identity</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetServerIdentity" uniqueID="GetServerIdentity(System.Runtime.Remoting.Messaging.IMessage):System.Runtime.Remoting.ServerIdentity">
				<signature>System.Runtime.Remoting.Messaging.InternalSink.GetServerIdentity(System.Runtime.Remoting.Messaging.IMessage):System.Runtime.Remoting.ServerIdentity</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetURI" uniqueID="GetURI(System.Runtime.Remoting.Messaging.IMessage):string">
				<signature>System.Runtime.Remoting.Messaging.InternalSink.GetURI(System.Runtime.Remoting.Messaging.IMessage):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ValidateMessage" uniqueID="ValidateMessage(System.Runtime.Remoting.Messaging.IMessage):System.Runtime.Remoting.Messaging.IMessage">
				<signature>System.Runtime.Remoting.Messaging.InternalSink.ValidateMessage(System.Runtime.Remoting.Messaging.IMessage):System.Runtime.Remoting.Messaging.IMessage</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="InternalSink" uniqueID="InternalSink():void">
				<signature>System.Runtime.Remoting.Messaging.InternalSink.InternalSink():void</signature>
			</method>
		</class>
	</package>
	<package name="SimpleIOT.Properties">
		<class name="Settings" uniqueID="SimpleIOT.Properties.Settings">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>SimpleIOT.Properties.Settings.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_Default" uniqueID="get_Default():SimpleIOT.Properties.Settings">
				<signature>SimpleIOT.Properties.Settings.get_Default():SimpleIOT.Properties.Settings</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Settings" uniqueID="Settings():void">
				<signature>SimpleIOT.Properties.Settings.Settings():void</signature>
			</method>
		</class>
	</package>
	<package name="System.Collections.Specialized">
		<class name="NameObjectCollectionBase" uniqueID="System.Collections.Specialized.NameObjectCollectionBase">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="BaseAdd" uniqueID="BaseAdd(string;object):void">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(string;object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="BaseClear" uniqueID="BaseClear():void">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.BaseClear():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="BaseGet" uniqueID="BaseGet(int):object">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.BaseGet(int):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="BaseGet" uniqueID="BaseGet(string):object">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.BaseGet(string):object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="BaseGetAllKeys" uniqueID="BaseGetAllKeys():string[]">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="BaseGetAllValues" uniqueID="BaseGetAllValues():object[]">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues():object[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="BaseGetAllValues" uniqueID="BaseGetAllValues(System.Type):object[]">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type):object[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="BaseGetKey" uniqueID="BaseGetKey(int):string">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(int):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="BaseHasKeys" uniqueID="BaseHasKeys():bool">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="BaseRemove" uniqueID="BaseRemove(string):void">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="BaseRemoveAt" uniqueID="BaseRemoveAt(int):void">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="BaseSet" uniqueID="BaseSet(int;object):void">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.BaseSet(int;object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="BaseSet" uniqueID="BaseSet(string;object):void">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.BaseSet(string;object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="FindEntry" uniqueID="FindEntry(string):System.Collections.Specialized.NameObjectCollectionBase+NameObjectEntry">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.FindEntry(string):System.Collections.Specialized.NameObjectCollectionBase+NameObjectEntry</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetObjectData" uniqueID="GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.GetObjectData(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="NameObjectCollectionBase" uniqueID="NameObjectCollectionBase():void">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="NameObjectCollectionBase" uniqueID="NameObjectCollectionBase(System.Collections.IEqualityComparer):void">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(System.Collections.IEqualityComparer):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="NameObjectCollectionBase" uniqueID="NameObjectCollectionBase(System.Collections.IHashCodeProvider;System.Collections.IComparer):void">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(System.Collections.IHashCodeProvider;System.Collections.IComparer):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="NameObjectCollectionBase" uniqueID="NameObjectCollectionBase(System.DBNull):void">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(System.DBNull):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="NameObjectCollectionBase" uniqueID="NameObjectCollectionBase(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="NameObjectCollectionBase" uniqueID="NameObjectCollectionBase(int):void">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="NameObjectCollectionBase" uniqueID="NameObjectCollectionBase(int;System.Collections.IEqualityComparer):void">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(int;System.Collections.IEqualityComparer):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="NameObjectCollectionBase" uniqueID="NameObjectCollectionBase(int;System.Collections.IHashCodeProvider;System.Collections.IComparer):void">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(int;System.Collections.IHashCodeProvider;System.Collections.IComparer):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="OnDeserialization" uniqueID="OnDeserialization(object):void">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.OnDeserialization(object):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Reset" uniqueID="Reset():void">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.Reset():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="Reset" uniqueID="Reset(int):void">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.Reset(int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.CopyTo" uniqueID="System.Collections.ICollection.CopyTo(System.Array;int):void">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_IsSynchronized" uniqueID="System.Collections.ICollection.get_IsSynchronized():bool">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_SyncRoot" uniqueID="System.Collections.ICollection.get_SyncRoot():object">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.get_SyncRoot():object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_Comparer" uniqueID="get_Comparer():System.Collections.IEqualityComparer">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.get_Comparer():System.Collections.IEqualityComparer</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.get_Count():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IsReadOnly" uniqueID="get_IsReadOnly():bool">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Keys" uniqueID="get_Keys():System.Collections.Specialized.NameObjectCollectionBase+KeysCollection">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.get_Keys():System.Collections.Specialized.NameObjectCollectionBase+KeysCollection</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_Comparer" uniqueID="set_Comparer(System.Collections.IEqualityComparer):void">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.set_Comparer(System.Collections.IEqualityComparer):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_IsReadOnly" uniqueID="set_IsReadOnly(bool):void">
				<signature>System.Collections.Specialized.NameObjectCollectionBase.set_IsReadOnly(bool):void</signature>
			</method>
		</class>
		<class name="NameObjectCollectionBase+KeysCollection" uniqueID="System.Collections.Specialized.NameObjectCollectionBase+KeysCollection">
			<method accessibility="Public" methodKind="Member" name="Get" uniqueID="Get(int):string">
				<signature>System.Collections.Specialized.NameObjectCollectionBase+KeysCollection.Get(int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEnumerator" uniqueID="GetEnumerator():System.Collections.IEnumerator">
				<signature>System.Collections.Specialized.NameObjectCollectionBase+KeysCollection.GetEnumerator():System.Collections.IEnumerator</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="NameObjectCollectionBase+KeysCollection" uniqueID="NameObjectCollectionBase+KeysCollection(System.Collections.Specialized.NameObjectCollectionBase):void">
				<signature>System.Collections.Specialized.NameObjectCollectionBase+KeysCollection.NameObjectCollectionBase+KeysCollection(System.Collections.Specialized.NameObjectCollectionBase):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.CopyTo" uniqueID="System.Collections.ICollection.CopyTo(System.Array;int):void">
				<signature>System.Collections.Specialized.NameObjectCollectionBase+KeysCollection.System.Collections.ICollection.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_IsSynchronized" uniqueID="System.Collections.ICollection.get_IsSynchronized():bool">
				<signature>System.Collections.Specialized.NameObjectCollectionBase+KeysCollection.System.Collections.ICollection.get_IsSynchronized():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Collections.ICollection.get_SyncRoot" uniqueID="System.Collections.ICollection.get_SyncRoot():object">
				<signature>System.Collections.Specialized.NameObjectCollectionBase+KeysCollection.System.Collections.ICollection.get_SyncRoot():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Count" uniqueID="get_Count():int">
				<signature>System.Collections.Specialized.NameObjectCollectionBase+KeysCollection.get_Count():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):string">
				<signature>System.Collections.Specialized.NameObjectCollectionBase+KeysCollection.get_Item(int):string</signature>
			</method>
		</class>
		<class name="NameObjectCollectionBase+NameObjectEntry" uniqueID="System.Collections.Specialized.NameObjectCollectionBase+NameObjectEntry">
			<method accessibility="Protected" methodKind="Member" name="NameObjectCollectionBase+NameObjectEntry" uniqueID="NameObjectCollectionBase+NameObjectEntry(string;object):void">
				<signature>System.Collections.Specialized.NameObjectCollectionBase+NameObjectEntry.NameObjectCollectionBase+NameObjectEntry(string;object):void</signature>
			</method>
		</class>
		<class name="NameValueCollection" uniqueID="System.Collections.Specialized.NameValueCollection">
			<method accessibility="Private" methodKind="Static" name="GetAsOneString" uniqueID="GetAsOneString(System.Collections.ArrayList):string">
				<signature>System.Collections.Specialized.NameValueCollection.GetAsOneString(System.Collections.ArrayList):string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetAsStringArray" uniqueID="GetAsStringArray(System.Collections.ArrayList):string[]">
				<signature>System.Collections.Specialized.NameValueCollection.GetAsStringArray(System.Collections.ArrayList):string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(System.Collections.Specialized.NameValueCollection):void">
				<signature>System.Collections.Specialized.NameValueCollection.Add(System.Collections.Specialized.NameValueCollection):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(string;string):void">
				<signature>System.Collections.Specialized.NameValueCollection.Add(string;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clear" uniqueID="Clear():void">
				<signature>System.Collections.Specialized.NameValueCollection.Clear():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.Array;int):void">
				<signature>System.Collections.Specialized.NameValueCollection.CopyTo(System.Array;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Get" uniqueID="Get(int):string">
				<signature>System.Collections.Specialized.NameValueCollection.Get(int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Get" uniqueID="Get(string):string">
				<signature>System.Collections.Specialized.NameValueCollection.Get(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetKey" uniqueID="GetKey(int):string">
				<signature>System.Collections.Specialized.NameValueCollection.GetKey(int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValues" uniqueID="GetValues(int):string[]">
				<signature>System.Collections.Specialized.NameValueCollection.GetValues(int):string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetValues" uniqueID="GetValues(string):string[]">
				<signature>System.Collections.Specialized.NameValueCollection.GetValues(string):string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="HasKeys" uniqueID="HasKeys():bool">
				<signature>System.Collections.Specialized.NameValueCollection.HasKeys():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InternalHasKeys" uniqueID="InternalHasKeys():bool">
				<signature>System.Collections.Specialized.NameValueCollection.InternalHasKeys():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InvalidateCachedArrays" uniqueID="InvalidateCachedArrays():void">
				<signature>System.Collections.Specialized.NameValueCollection.InvalidateCachedArrays():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="NameValueCollection" uniqueID="NameValueCollection():void">
				<signature>System.Collections.Specialized.NameValueCollection.NameValueCollection():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="NameValueCollection" uniqueID="NameValueCollection(System.Collections.IEqualityComparer):void">
				<signature>System.Collections.Specialized.NameValueCollection.NameValueCollection(System.Collections.IEqualityComparer):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="NameValueCollection" uniqueID="NameValueCollection(System.Collections.IHashCodeProvider;System.Collections.IComparer):void">
				<signature>System.Collections.Specialized.NameValueCollection.NameValueCollection(System.Collections.IHashCodeProvider;System.Collections.IComparer):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="NameValueCollection" uniqueID="NameValueCollection(System.Collections.Specialized.NameValueCollection):void">
				<signature>System.Collections.Specialized.NameValueCollection.NameValueCollection(System.Collections.Specialized.NameValueCollection):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="NameValueCollection" uniqueID="NameValueCollection(System.DBNull):void">
				<signature>System.Collections.Specialized.NameValueCollection.NameValueCollection(System.DBNull):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="NameValueCollection" uniqueID="NameValueCollection(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Collections.Specialized.NameValueCollection.NameValueCollection(System.Runtime.Serialization.SerializationInfo;System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="NameValueCollection" uniqueID="NameValueCollection(int):void">
				<signature>System.Collections.Specialized.NameValueCollection.NameValueCollection(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="NameValueCollection" uniqueID="NameValueCollection(int;System.Collections.IEqualityComparer):void">
				<signature>System.Collections.Specialized.NameValueCollection.NameValueCollection(int;System.Collections.IEqualityComparer):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="NameValueCollection" uniqueID="NameValueCollection(int;System.Collections.IHashCodeProvider;System.Collections.IComparer):void">
				<signature>System.Collections.Specialized.NameValueCollection.NameValueCollection(int;System.Collections.IHashCodeProvider;System.Collections.IComparer):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="NameValueCollection" uniqueID="NameValueCollection(int;System.Collections.Specialized.NameValueCollection):void">
				<signature>System.Collections.Specialized.NameValueCollection.NameValueCollection(int;System.Collections.Specialized.NameValueCollection):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(string):void">
				<signature>System.Collections.Specialized.NameValueCollection.Remove(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Set" uniqueID="Set(string;string):void">
				<signature>System.Collections.Specialized.NameValueCollection.Set(string;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AllKeys" uniqueID="get_AllKeys():string[]">
				<signature>System.Collections.Specialized.NameValueCollection.get_AllKeys():string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):string">
				<signature>System.Collections.Specialized.NameValueCollection.get_Item(int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(string):string">
				<signature>System.Collections.Specialized.NameValueCollection.get_Item(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Item" uniqueID="set_Item(string;string):void">
				<signature>System.Collections.Specialized.NameValueCollection.set_Item(string;string):void</signature>
			</method>
		</class>
	</package>
	<package name="System.Runtime.ConstrainedExecution">
		<class name="CriticalFinalizerObject" uniqueID="System.Runtime.ConstrainedExecution.CriticalFinalizerObject">
			<method accessibility="Protected" methodKind="Member" name="CriticalFinalizerObject" uniqueID="CriticalFinalizerObject():void">
				<signature>System.Runtime.ConstrainedExecution.CriticalFinalizerObject.CriticalFinalizerObject():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Finalize" uniqueID="Finalize():void">
				<signature>System.Runtime.ConstrainedExecution.CriticalFinalizerObject.Finalize():void</signature>
			</method>
		</class>
	</package>
	<package name="System.ComponentModel">
		<class name="CancelEventArgs" uniqueID="System.ComponentModel.CancelEventArgs">
			<method accessibility="Public" methodKind="Member" name="CancelEventArgs" uniqueID="CancelEventArgs():void">
				<signature>System.ComponentModel.CancelEventArgs.CancelEventArgs():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CancelEventArgs" uniqueID="CancelEventArgs(bool):void">
				<signature>System.ComponentModel.CancelEventArgs.CancelEventArgs(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Cancel" uniqueID="get_Cancel():bool">
				<signature>System.ComponentModel.CancelEventArgs.get_Cancel():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Cancel" uniqueID="set_Cancel(bool):void">
				<signature>System.ComponentModel.CancelEventArgs.set_Cancel(bool):void</signature>
			</method>
		</class>
		<class name="IContainer" uniqueID="System.ComponentModel.IContainer">
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(System.ComponentModel.IComponent):void">
				<signature>System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Add" uniqueID="Add(System.ComponentModel.IComponent;string):void">
				<signature>System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Remove" uniqueID="Remove(System.ComponentModel.IComponent):void">
				<signature>System.ComponentModel.IContainer.Remove(System.ComponentModel.IComponent):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Components" uniqueID="get_Components():System.ComponentModel.ComponentCollection">
				<signature>System.ComponentModel.IContainer.get_Components():System.ComponentModel.ComponentCollection</signature>
			</method>
		</class>
		<class name="PropertyChangedEventArgs" uniqueID="System.ComponentModel.PropertyChangedEventArgs">
			<method accessibility="Public" methodKind="Member" name="PropertyChangedEventArgs" uniqueID="PropertyChangedEventArgs(string):void">
				<signature>System.ComponentModel.PropertyChangedEventArgs.PropertyChangedEventArgs(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PropertyName" uniqueID="get_PropertyName():string">
				<signature>System.ComponentModel.PropertyChangedEventArgs.get_PropertyName():string</signature>
			</method>
		</class>
		<class name="ComponentCollection" uniqueID="System.ComponentModel.ComponentCollection">
			<method accessibility="Public" methodKind="Member" name="ComponentCollection" uniqueID="ComponentCollection(System.ComponentModel.IComponent[]):void">
				<signature>System.ComponentModel.ComponentCollection.ComponentCollection(System.ComponentModel.IComponent[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CopyTo" uniqueID="CopyTo(System.ComponentModel.IComponent[];int):void">
				<signature>System.ComponentModel.ComponentCollection.CopyTo(System.ComponentModel.IComponent[];int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(int):System.ComponentModel.IComponent">
				<signature>System.ComponentModel.ComponentCollection.get_Item(int):System.ComponentModel.IComponent</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Item" uniqueID="get_Item(string):System.ComponentModel.IComponent">
				<signature>System.ComponentModel.ComponentCollection.get_Item(string):System.ComponentModel.IComponent</signature>
			</method>
		</class>
		<class name="IComponent" uniqueID="System.ComponentModel.IComponent">
			<method accessibility="Public" methodKind="Member" name="add_Disposed" uniqueID="add_Disposed(System.EventHandler):void">
				<signature>System.ComponentModel.IComponent.add_Disposed(System.EventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Site" uniqueID="get_Site():System.ComponentModel.ISite">
				<signature>System.ComponentModel.IComponent.get_Site():System.ComponentModel.ISite</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="remove_Disposed" uniqueID="remove_Disposed(System.EventHandler):void">
				<signature>System.ComponentModel.IComponent.remove_Disposed(System.EventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Site" uniqueID="set_Site(System.ComponentModel.ISite):void">
				<signature>System.ComponentModel.IComponent.set_Site(System.ComponentModel.ISite):void</signature>
			</method>
		</class>
		<class name="INotifyPropertyChanged" uniqueID="System.ComponentModel.INotifyPropertyChanged">
			<method accessibility="Public" methodKind="Member" name="add_PropertyChanged" uniqueID="add_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler):void">
				<signature>System.ComponentModel.INotifyPropertyChanged.add_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="remove_PropertyChanged" uniqueID="remove_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler):void">
				<signature>System.ComponentModel.INotifyPropertyChanged.remove_PropertyChanged(System.ComponentModel.PropertyChangedEventHandler):void</signature>
			</method>
		</class>
		<class name="ISite" uniqueID="System.ComponentModel.ISite">
			<method accessibility="Public" methodKind="Member" name="get_Component" uniqueID="get_Component():System.ComponentModel.IComponent">
				<signature>System.ComponentModel.ISite.get_Component():System.ComponentModel.IComponent</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Container" uniqueID="get_Container():System.ComponentModel.IContainer">
				<signature>System.ComponentModel.ISite.get_Container():System.ComponentModel.IContainer</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DesignMode" uniqueID="get_DesignMode():bool">
				<signature>System.ComponentModel.ISite.get_DesignMode():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.ComponentModel.ISite.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Name" uniqueID="set_Name(string):void">
				<signature>System.ComponentModel.ISite.set_Name(string):void</signature>
			</method>
		</class>
		<class name="PropertyChangedEventHandler" uniqueID="System.ComponentModel.PropertyChangedEventHandler">
			<method accessibility="Public" methodKind="Member" name="BeginInvoke" uniqueID="BeginInvoke(object;System.ComponentModel.PropertyChangedEventArgs;System.AsyncCallback;object):System.IAsyncResult">
				<signature>System.ComponentModel.PropertyChangedEventHandler.BeginInvoke(object;System.ComponentModel.PropertyChangedEventArgs;System.AsyncCallback;object):System.IAsyncResult</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="EndInvoke" uniqueID="EndInvoke(System.IAsyncResult):void">
				<signature>System.ComponentModel.PropertyChangedEventHandler.EndInvoke(System.IAsyncResult):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Invoke" uniqueID="Invoke(object;System.ComponentModel.PropertyChangedEventArgs):void">
				<signature>System.ComponentModel.PropertyChangedEventHandler.Invoke(object;System.ComponentModel.PropertyChangedEventArgs):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="PropertyChangedEventHandler" uniqueID="PropertyChangedEventHandler(object;native signed int):void">
				<signature>System.ComponentModel.PropertyChangedEventHandler.PropertyChangedEventHandler(object;native signed int):void</signature>
			</method>
		</class>
	</package>
	<package name="System.Globalization">
		<class name="CodePageDataItem" uniqueID="System.Globalization.CodePageDataItem">
			<method accessibility="Protected" methodKind="Member" name="CodePageDataItem" uniqueID="CodePageDataItem(int):void">
				<signature>System.Globalization.CodePageDataItem.CodePageDataItem(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_BodyName" uniqueID="get_BodyName():string">
				<signature>System.Globalization.CodePageDataItem.get_BodyName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Flags" uniqueID="get_Flags():unsigned int">
				<signature>System.Globalization.CodePageDataItem.get_Flags():unsigned int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_HeaderName" uniqueID="get_HeaderName():string">
				<signature>System.Globalization.CodePageDataItem.get_HeaderName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_UIFamilyCodePage" uniqueID="get_UIFamilyCodePage():int">
				<signature>System.Globalization.CodePageDataItem.get_UIFamilyCodePage():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_WebName" uniqueID="get_WebName():string">
				<signature>System.Globalization.CodePageDataItem.get_WebName():string</signature>
			</method>
		</class>
		<class name="CultureTable" uniqueID="System.Globalization.CultureTable">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Globalization.CultureTable.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CheckAndGetTheString" uniqueID="CheckAndGetTheString(unsigned short;unsigned int;int):string">
				<signature>System.Globalization.CultureTable.CheckAndGetTheString(unsigned short;unsigned int;int):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="IsInstalledLCID" uniqueID="IsInstalledLCID(int):bool">
				<signature>System.Globalization.CultureTable.IsInstalledLCID(int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="IsNewNeutralChineseCulture" uniqueID="IsNewNeutralChineseCulture(System.Globalization.CultureInfo):bool">
				<signature>System.Globalization.CultureTable.IsNewNeutralChineseCulture(System.Globalization.CultureInfo):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="IsOldNeutralChineseCulture" uniqueID="IsOldNeutralChineseCulture(System.Globalization.CultureInfo):bool">
				<signature>System.Globalization.CultureTable.IsOldNeutralChineseCulture(System.Globalization.CultureInfo):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IsValidLcid" uniqueID="IsValidLcid(int;bool):bool">
				<signature>System.Globalization.CultureTable.IsValidLcid(int;bool):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ValidateString" uniqueID="ValidateString(unsigned short;unsigned int;int):bool">
				<signature>System.Globalization.CultureTable.ValidateString(unsigned short;unsigned int;int):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ValidateStringArray" uniqueID="ValidateStringArray(unsigned short;unsigned int;int):bool">
				<signature>System.Globalization.CultureTable.ValidateStringArray(unsigned short;unsigned int;int):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ValidateUintArray" uniqueID="ValidateUintArray(unsigned short;unsigned int;int):bool">
				<signature>System.Globalization.CultureTable.ValidateUintArray(unsigned short;unsigned int;int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_Default" uniqueID="get_Default():System.Globalization.CultureTable">
				<signature>System.Globalization.CultureTable.get_Default():System.Globalization.CultureTable</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CultureTable" uniqueID="CultureTable(string;bool):void">
				<signature>System.Globalization.CultureTable.CultureTable(string;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetCultures" uniqueID="GetCultures(System.Globalization.CultureTypes):System.Globalization.CultureInfo[]">
				<signature>System.Globalization.CultureTable.GetCultures(System.Globalization.CultureTypes):System.Globalization.CultureInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetDataItemFromCultureID" uniqueID="GetDataItemFromCultureID(int;string):int">
				<signature>System.Globalization.CultureTable.GetDataItemFromCultureID(int;string):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetDataItemFromCultureName" uniqueID="GetDataItemFromCultureName(string;int;string):int">
				<signature>System.Globalization.CultureTable.GetDataItemFromCultureName(string;int;string):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetDataItemFromRegionName" uniqueID="GetDataItemFromRegionName(string):int">
				<signature>System.Globalization.CultureTable.GetDataItemFromRegionName(string):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsExistingCulture" uniqueID="IsExistingCulture(int):bool">
				<signature>System.Globalization.CultureTable.IsExistingCulture(int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetDataItemPointers" uniqueID="SetDataItemPointers():void">
				<signature>System.Globalization.CultureTable.SetDataItemPointers():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Validate" uniqueID="Validate():bool">
				<signature>System.Globalization.CultureTable.Validate():bool</signature>
			</method>
		</class>
		<class name="DateTimeFormatInfo" uniqueID="System.Globalization.DateTimeFormatInfo">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Globalization.DateTimeFormatInfo.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CalendarIdToCultureId" uniqueID="CalendarIdToCultureId(int):int">
				<signature>System.Globalization.DateTimeFormatInfo.CalendarIdToCultureId(int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetCalendarInfo" uniqueID="GetCalendarInfo(int;int;int):string">
				<signature>System.Globalization.DateTimeFormatInfo.GetCalendarInfo(int;int;int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetInstance" uniqueID="GetInstance(System.IFormatProvider):System.Globalization.DateTimeFormatInfo">
				<signature>System.Globalization.DateTimeFormatInfo.GetInstance(System.IFormatProvider):System.Globalization.DateTimeFormatInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetJapaneseCalendarDTFI" uniqueID="GetJapaneseCalendarDTFI():System.Globalization.DateTimeFormatInfo">
				<signature>System.Globalization.DateTimeFormatInfo.GetJapaneseCalendarDTFI():System.Globalization.DateTimeFormatInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetTaiwanCalendarDTFI" uniqueID="GetTaiwanCalendarDTFI():System.Globalization.DateTimeFormatInfo">
				<signature>System.Globalization.DateTimeFormatInfo.GetTaiwanCalendarDTFI():System.Globalization.DateTimeFormatInfo</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IsHebrewChar" uniqueID="IsHebrewChar(char):bool">
				<signature>System.Globalization.DateTimeFormatInfo.IsHebrewChar(char):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ReadOnly" uniqueID="ReadOnly(System.Globalization.DateTimeFormatInfo):System.Globalization.DateTimeFormatInfo">
				<signature>System.Globalization.DateTimeFormatInfo.ReadOnly(System.Globalization.DateTimeFormatInfo):System.Globalization.DateTimeFormatInfo</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="TryParseHebrewNumber" uniqueID="TryParseHebrewNumber(System.__DTString;bool;int):bool">
				<signature>System.Globalization.DateTimeFormatInfo.TryParseHebrewNumber(System.__DTString;bool;int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ValidateStyles" uniqueID="ValidateStyles(System.Globalization.DateTimeStyles;string):void">
				<signature>System.Globalization.DateTimeFormatInfo.ValidateStyles(System.Globalization.DateTimeStyles;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_CurrentInfo" uniqueID="get_CurrentInfo():System.Globalization.DateTimeFormatInfo">
				<signature>System.Globalization.DateTimeFormatInfo.get_CurrentInfo():System.Globalization.DateTimeFormatInfo</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="get_InternalSyncObject" uniqueID="get_InternalSyncObject():object">
				<signature>System.Globalization.DateTimeFormatInfo.get_InternalSyncObject():object</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_InvariantInfo" uniqueID="get_InvariantInfo():System.Globalization.DateTimeFormatInfo">
				<signature>System.Globalization.DateTimeFormatInfo.get_InvariantInfo():System.Globalization.DateTimeFormatInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AddDefaultFormat" uniqueID="AddDefaultFormat(string[];string):string[]">
				<signature>System.Globalization.DateTimeFormatInfo.AddDefaultFormat(string[];string):string[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="AddMonthNames" uniqueID="AddMonthNames(System.Globalization.TokenHashValue[];string):void">
				<signature>System.Globalization.DateTimeFormatInfo.AddMonthNames(System.Globalization.TokenHashValue[];string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CheckNullValue" uniqueID="CheckNullValue(string[];int):void">
				<signature>System.Globalization.DateTimeFormatInfo.CheckNullValue(string[];int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ClearTokenHashTable" uniqueID="ClearTokenHashTable(bool):void">
				<signature>System.Globalization.DateTimeFormatInfo.ClearTokenHashTable(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone():object">
				<signature>System.Globalization.DateTimeFormatInfo.Clone():object</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CreateTokenHashTable" uniqueID="CreateTokenHashTable():System.Globalization.TokenHashValue[]">
				<signature>System.Globalization.DateTimeFormatInfo.CreateTokenHashTable():System.Globalization.TokenHashValue[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="DateTimeFormatInfo" uniqueID="DateTimeFormatInfo():void">
				<signature>System.Globalization.DateTimeFormatInfo.DateTimeFormatInfo():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="DateTimeFormatInfo" uniqueID="DateTimeFormatInfo(System.Globalization.CultureTableRecord;int;System.Globalization.Calendar):void">
				<signature>System.Globalization.DateTimeFormatInfo.DateTimeFormatInfo(System.Globalization.CultureTableRecord;int;System.Globalization.Calendar):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAbbreviatedDayName" uniqueID="GetAbbreviatedDayName(System.DayOfWeek):string">
				<signature>System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayName(System.DayOfWeek):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetAbbreviatedDayOfWeekNames" uniqueID="GetAbbreviatedDayOfWeekNames():string[]">
				<signature>System.Globalization.DateTimeFormatInfo.GetAbbreviatedDayOfWeekNames():string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAbbreviatedEraName" uniqueID="GetAbbreviatedEraName(int):string">
				<signature>System.Globalization.DateTimeFormatInfo.GetAbbreviatedEraName(int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAbbreviatedMonthName" uniqueID="GetAbbreviatedMonthName(int):string">
				<signature>System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthName(int):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetAbbreviatedMonthNames" uniqueID="GetAbbreviatedMonthNames():string[]">
				<signature>System.Globalization.DateTimeFormatInfo.GetAbbreviatedMonthNames():string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAllDateTimePatterns" uniqueID="GetAllDateTimePatterns():string[]">
				<signature>System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns():string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetAllDateTimePatterns" uniqueID="GetAllDateTimePatterns(char):string[]">
				<signature>System.Globalization.DateTimeFormatInfo.GetAllDateTimePatterns(char):string[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetCalendarNativeNameFallback" uniqueID="GetCalendarNativeNameFallback(int):string">
				<signature>System.Globalization.DateTimeFormatInfo.GetCalendarNativeNameFallback(int):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetCombinedPatterns" uniqueID="GetCombinedPatterns(string[];string[];string):string[]">
				<signature>System.Globalization.DateTimeFormatInfo.GetCombinedPatterns(string[];string[];string):string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetDayName" uniqueID="GetDayName(System.DayOfWeek):string">
				<signature>System.Globalization.DateTimeFormatInfo.GetDayName(System.DayOfWeek):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetDayOfWeekNames" uniqueID="GetDayOfWeekNames():string[]">
				<signature>System.Globalization.DateTimeFormatInfo.GetDayOfWeekNames():string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEra" uniqueID="GetEra(string):int">
				<signature>System.Globalization.DateTimeFormatInfo.GetEra(string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEraName" uniqueID="GetEraName(int):string">
				<signature>System.Globalization.DateTimeFormatInfo.GetEraName(int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFormat" uniqueID="GetFormat(System.Type):object">
				<signature>System.Globalization.DateTimeFormatInfo.GetFormat(System.Type):object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetLongDatePattern" uniqueID="GetLongDatePattern(int):string">
				<signature>System.Globalization.DateTimeFormatInfo.GetLongDatePattern(int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMonthName" uniqueID="GetMonthName(int):string">
				<signature>System.Globalization.DateTimeFormatInfo.GetMonthName(int):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetMonthNames" uniqueID="GetMonthNames():string[]">
				<signature>System.Globalization.DateTimeFormatInfo.GetMonthNames():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetShortDatePattern" uniqueID="GetShortDatePattern(int):string">
				<signature>System.Globalization.DateTimeFormatInfo.GetShortDatePattern(int):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetShortestDayName" uniqueID="GetShortestDayName(System.DayOfWeek):string">
				<signature>System.Globalization.DateTimeFormatInfo.GetShortestDayName(System.DayOfWeek):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetYearMonthPattern" uniqueID="GetYearMonthPattern(int):string">
				<signature>System.Globalization.DateTimeFormatInfo.GetYearMonthPattern(int):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="InitializeOverridableProperties" uniqueID="InitializeOverridableProperties():void">
				<signature>System.Globalization.DateTimeFormatInfo.InitializeOverridableProperties():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="InsertAtCurrentHashNode" uniqueID="InsertAtCurrentHashNode(System.Globalization.TokenHashValue[];string;char;System.TokenType;int;int;int;int):void">
				<signature>System.Globalization.DateTimeFormatInfo.InsertAtCurrentHashNode(System.Globalization.TokenHashValue[];string;char;System.TokenType;int;int;int;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="InsertHash" uniqueID="InsertHash(System.Globalization.TokenHashValue[];string;System.TokenType;int):void">
				<signature>System.Globalization.DateTimeFormatInfo.InsertHash(System.Globalization.TokenHashValue[];string;System.TokenType;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnDeserialized" uniqueID="OnDeserialized(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Globalization.DateTimeFormatInfo.OnDeserialized(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnSerializing" uniqueID="OnSerializing(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Globalization.DateTimeFormatInfo.OnSerializing(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="SetAllDateTimePatterns" uniqueID="SetAllDateTimePatterns(string[];char):void">
				<signature>System.Globalization.DateTimeFormatInfo.SetAllDateTimePatterns(string[];char):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetDefaultPatternAsFirstItem" uniqueID="SetDefaultPatternAsFirstItem(string[];string):void">
				<signature>System.Globalization.DateTimeFormatInfo.SetDefaultPatternAsFirstItem(string[];string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Tokenize" uniqueID="Tokenize(System.TokenType;System.TokenType;int;System.__DTString):bool">
				<signature>System.Globalization.DateTimeFormatInfo.Tokenize(System.TokenType;System.TokenType;int;System.__DTString):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="VerifyWritable" uniqueID="VerifyWritable():void">
				<signature>System.Globalization.DateTimeFormatInfo.VerifyWritable():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="YearMonthAdjustment" uniqueID="YearMonthAdjustment(int;int;bool):bool">
				<signature>System.Globalization.DateTimeFormatInfo.YearMonthAdjustment(int;int;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AMDesignator" uniqueID="get_AMDesignator():string">
				<signature>System.Globalization.DateTimeFormatInfo.get_AMDesignator():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AbbreviatedDayNames" uniqueID="get_AbbreviatedDayNames():string[]">
				<signature>System.Globalization.DateTimeFormatInfo.get_AbbreviatedDayNames():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_AbbreviatedEnglishEraNames" uniqueID="get_AbbreviatedEnglishEraNames():string[]">
				<signature>System.Globalization.DateTimeFormatInfo.get_AbbreviatedEnglishEraNames():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_AbbreviatedEraNames" uniqueID="get_AbbreviatedEraNames():string[]">
				<signature>System.Globalization.DateTimeFormatInfo.get_AbbreviatedEraNames():string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AbbreviatedMonthGenitiveNames" uniqueID="get_AbbreviatedMonthGenitiveNames():string[]">
				<signature>System.Globalization.DateTimeFormatInfo.get_AbbreviatedMonthGenitiveNames():string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AbbreviatedMonthNames" uniqueID="get_AbbreviatedMonthNames():string[]">
				<signature>System.Globalization.DateTimeFormatInfo.get_AbbreviatedMonthNames():string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Calendar" uniqueID="get_Calendar():System.Globalization.Calendar">
				<signature>System.Globalization.DateTimeFormatInfo.get_Calendar():System.Globalization.Calendar</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CalendarWeekRule" uniqueID="get_CalendarWeekRule():System.Globalization.CalendarWeekRule">
				<signature>System.Globalization.DateTimeFormatInfo.get_CalendarWeekRule():System.Globalization.CalendarWeekRule</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ClonedAllLongDatePatterns" uniqueID="get_ClonedAllLongDatePatterns():string[]">
				<signature>System.Globalization.DateTimeFormatInfo.get_ClonedAllLongDatePatterns():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ClonedAllLongTimePatterns" uniqueID="get_ClonedAllLongTimePatterns():string[]">
				<signature>System.Globalization.DateTimeFormatInfo.get_ClonedAllLongTimePatterns():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ClonedAllShortDatePatterns" uniqueID="get_ClonedAllShortDatePatterns():string[]">
				<signature>System.Globalization.DateTimeFormatInfo.get_ClonedAllShortDatePatterns():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ClonedAllShortTimePatterns" uniqueID="get_ClonedAllShortTimePatterns():string[]">
				<signature>System.Globalization.DateTimeFormatInfo.get_ClonedAllShortTimePatterns():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ClonedAllYearMonthPatterns" uniqueID="get_ClonedAllYearMonthPatterns():string[]">
				<signature>System.Globalization.DateTimeFormatInfo.get_ClonedAllYearMonthPatterns():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_CompareInfo" uniqueID="get_CompareInfo():System.Globalization.CompareInfo">
				<signature>System.Globalization.DateTimeFormatInfo.get_CompareInfo():System.Globalization.CompareInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_CultureId" uniqueID="get_CultureId():int">
				<signature>System.Globalization.DateTimeFormatInfo.get_CultureId():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_CultureName" uniqueID="get_CultureName():string">
				<signature>System.Globalization.DateTimeFormatInfo.get_CultureName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DateSeparator" uniqueID="get_DateSeparator():string">
				<signature>System.Globalization.DateTimeFormatInfo.get_DateSeparator():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_DateTimeOffsetPattern" uniqueID="get_DateTimeOffsetPattern():string">
				<signature>System.Globalization.DateTimeFormatInfo.get_DateTimeOffsetPattern():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_DateWords" uniqueID="get_DateWords():string[]">
				<signature>System.Globalization.DateTimeFormatInfo.get_DateWords():string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DayNames" uniqueID="get_DayNames():string[]">
				<signature>System.Globalization.DateTimeFormatInfo.get_DayNames():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_EraNames" uniqueID="get_EraNames():string[]">
				<signature>System.Globalization.DateTimeFormatInfo.get_EraNames():string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FirstDayOfWeek" uniqueID="get_FirstDayOfWeek():System.DayOfWeek">
				<signature>System.Globalization.DateTimeFormatInfo.get_FirstDayOfWeek():System.DayOfWeek</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_FormatFlags" uniqueID="get_FormatFlags():System.Globalization.DateTimeFormatFlags">
				<signature>System.Globalization.DateTimeFormatInfo.get_FormatFlags():System.Globalization.DateTimeFormatFlags</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_FullDateTimePattern" uniqueID="get_FullDateTimePattern():string">
				<signature>System.Globalization.DateTimeFormatInfo.get_FullDateTimePattern():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_GeneralLongTimePattern" uniqueID="get_GeneralLongTimePattern():string">
				<signature>System.Globalization.DateTimeFormatInfo.get_GeneralLongTimePattern():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_GeneralShortTimePattern" uniqueID="get_GeneralShortTimePattern():string">
				<signature>System.Globalization.DateTimeFormatInfo.get_GeneralShortTimePattern():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_HasForceTwoDigitYears" uniqueID="get_HasForceTwoDigitYears():bool">
				<signature>System.Globalization.DateTimeFormatInfo.get_HasForceTwoDigitYears():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_HasSpacesInDayNames" uniqueID="get_HasSpacesInDayNames():bool">
				<signature>System.Globalization.DateTimeFormatInfo.get_HasSpacesInDayNames():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_HasSpacesInMonthNames" uniqueID="get_HasSpacesInMonthNames():bool">
				<signature>System.Globalization.DateTimeFormatInfo.get_HasSpacesInMonthNames():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_HasYearMonthAdjustment" uniqueID="get_HasYearMonthAdjustment():bool">
				<signature>System.Globalization.DateTimeFormatInfo.get_HasYearMonthAdjustment():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsReadOnly" uniqueID="get_IsReadOnly():bool">
				<signature>System.Globalization.DateTimeFormatInfo.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_LanguageName" uniqueID="get_LanguageName():string">
				<signature>System.Globalization.DateTimeFormatInfo.get_LanguageName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_LongDatePattern" uniqueID="get_LongDatePattern():string">
				<signature>System.Globalization.DateTimeFormatInfo.get_LongDatePattern():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_LongTimePattern" uniqueID="get_LongTimePattern():string">
				<signature>System.Globalization.DateTimeFormatInfo.get_LongTimePattern():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MonthDayPattern" uniqueID="get_MonthDayPattern():string">
				<signature>System.Globalization.DateTimeFormatInfo.get_MonthDayPattern():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MonthGenitiveNames" uniqueID="get_MonthGenitiveNames():string[]">
				<signature>System.Globalization.DateTimeFormatInfo.get_MonthGenitiveNames():string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MonthNames" uniqueID="get_MonthNames():string[]">
				<signature>System.Globalization.DateTimeFormatInfo.get_MonthNames():string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_NativeCalendarName" uniqueID="get_NativeCalendarName():string">
				<signature>System.Globalization.DateTimeFormatInfo.get_NativeCalendarName():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_OptionalCalendars" uniqueID="get_OptionalCalendars():int[]">
				<signature>System.Globalization.DateTimeFormatInfo.get_OptionalCalendars():int[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PMDesignator" uniqueID="get_PMDesignator():string">
				<signature>System.Globalization.DateTimeFormatInfo.get_PMDesignator():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_RFC1123Pattern" uniqueID="get_RFC1123Pattern():string">
				<signature>System.Globalization.DateTimeFormatInfo.get_RFC1123Pattern():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ShortDatePattern" uniqueID="get_ShortDatePattern():string">
				<signature>System.Globalization.DateTimeFormatInfo.get_ShortDatePattern():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ShortTimePattern" uniqueID="get_ShortTimePattern():string">
				<signature>System.Globalization.DateTimeFormatInfo.get_ShortTimePattern():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ShortestDayNames" uniqueID="get_ShortestDayNames():string[]">
				<signature>System.Globalization.DateTimeFormatInfo.get_ShortestDayNames():string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_SortableDateTimePattern" uniqueID="get_SortableDateTimePattern():string">
				<signature>System.Globalization.DateTimeFormatInfo.get_SortableDateTimePattern():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TimeSeparator" uniqueID="get_TimeSeparator():string">
				<signature>System.Globalization.DateTimeFormatInfo.get_TimeSeparator():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_UniversalSortableDateTimePattern" uniqueID="get_UniversalSortableDateTimePattern():string">
				<signature>System.Globalization.DateTimeFormatInfo.get_UniversalSortableDateTimePattern():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_YearMonthPattern" uniqueID="get_YearMonthPattern():string">
				<signature>System.Globalization.DateTimeFormatInfo.get_YearMonthPattern():string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="internalGetGenitiveMonthNames" uniqueID="internalGetGenitiveMonthNames(bool):string[]">
				<signature>System.Globalization.DateTimeFormatInfo.internalGetGenitiveMonthNames(bool):string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="internalGetLeapYearMonthNames" uniqueID="internalGetLeapYearMonthNames():string[]">
				<signature>System.Globalization.DateTimeFormatInfo.internalGetLeapYearMonthNames():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="internalGetMonthName" uniqueID="internalGetMonthName(int;System.Globalization.MonthNameStyles;bool):string">
				<signature>System.Globalization.DateTimeFormatInfo.internalGetMonthName(int;System.Globalization.MonthNameStyles;bool):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="internalGetSuperShortDayNames" uniqueID="internalGetSuperShortDayNames():string[]">
				<signature>System.Globalization.DateTimeFormatInfo.internalGetSuperShortDayNames():string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_AMDesignator" uniqueID="set_AMDesignator(string):void">
				<signature>System.Globalization.DateTimeFormatInfo.set_AMDesignator(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_AbbreviatedDayNames" uniqueID="set_AbbreviatedDayNames(string[]):void">
				<signature>System.Globalization.DateTimeFormatInfo.set_AbbreviatedDayNames(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_AbbreviatedMonthGenitiveNames" uniqueID="set_AbbreviatedMonthGenitiveNames(string[]):void">
				<signature>System.Globalization.DateTimeFormatInfo.set_AbbreviatedMonthGenitiveNames(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_AbbreviatedMonthNames" uniqueID="set_AbbreviatedMonthNames(string[]):void">
				<signature>System.Globalization.DateTimeFormatInfo.set_AbbreviatedMonthNames(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_Calendar" uniqueID="set_Calendar(System.Globalization.Calendar):void">
				<signature>System.Globalization.DateTimeFormatInfo.set_Calendar(System.Globalization.Calendar):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_CalendarWeekRule" uniqueID="set_CalendarWeekRule(System.Globalization.CalendarWeekRule):void">
				<signature>System.Globalization.DateTimeFormatInfo.set_CalendarWeekRule(System.Globalization.CalendarWeekRule):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_DateSeparator" uniqueID="set_DateSeparator(string):void">
				<signature>System.Globalization.DateTimeFormatInfo.set_DateSeparator(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_DayNames" uniqueID="set_DayNames(string[]):void">
				<signature>System.Globalization.DateTimeFormatInfo.set_DayNames(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_FirstDayOfWeek" uniqueID="set_FirstDayOfWeek(System.DayOfWeek):void">
				<signature>System.Globalization.DateTimeFormatInfo.set_FirstDayOfWeek(System.DayOfWeek):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_FullDateTimePattern" uniqueID="set_FullDateTimePattern(string):void">
				<signature>System.Globalization.DateTimeFormatInfo.set_FullDateTimePattern(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_LongDatePattern" uniqueID="set_LongDatePattern(string):void">
				<signature>System.Globalization.DateTimeFormatInfo.set_LongDatePattern(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_LongTimePattern" uniqueID="set_LongTimePattern(string):void">
				<signature>System.Globalization.DateTimeFormatInfo.set_LongTimePattern(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_MonthDayPattern" uniqueID="set_MonthDayPattern(string):void">
				<signature>System.Globalization.DateTimeFormatInfo.set_MonthDayPattern(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_MonthGenitiveNames" uniqueID="set_MonthGenitiveNames(string[]):void">
				<signature>System.Globalization.DateTimeFormatInfo.set_MonthGenitiveNames(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_MonthNames" uniqueID="set_MonthNames(string[]):void">
				<signature>System.Globalization.DateTimeFormatInfo.set_MonthNames(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_PMDesignator" uniqueID="set_PMDesignator(string):void">
				<signature>System.Globalization.DateTimeFormatInfo.set_PMDesignator(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ShortDatePattern" uniqueID="set_ShortDatePattern(string):void">
				<signature>System.Globalization.DateTimeFormatInfo.set_ShortDatePattern(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ShortTimePattern" uniqueID="set_ShortTimePattern(string):void">
				<signature>System.Globalization.DateTimeFormatInfo.set_ShortTimePattern(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ShortestDayNames" uniqueID="set_ShortestDayNames(string[]):void">
				<signature>System.Globalization.DateTimeFormatInfo.set_ShortestDayNames(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_TimeSeparator" uniqueID="set_TimeSeparator(string):void">
				<signature>System.Globalization.DateTimeFormatInfo.set_TimeSeparator(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_YearMonthPattern" uniqueID="set_YearMonthPattern(string):void">
				<signature>System.Globalization.DateTimeFormatInfo.set_YearMonthPattern(string):void</signature>
			</method>
		</class>
		<class name="GlobalizationAssembly" uniqueID="System.Globalization.GlobalizationAssembly">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Globalization.GlobalizationAssembly.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CreateGlobalizationAssembly" uniqueID="CreateGlobalizationAssembly(object):void">
				<signature>System.Globalization.GlobalizationAssembly.CreateGlobalizationAssembly(object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetGlobalizationAssembly" uniqueID="GetGlobalizationAssembly(System.Reflection.Assembly):System.Globalization.GlobalizationAssembly">
				<signature>System.Globalization.GlobalizationAssembly.GetGlobalizationAssembly(System.Reflection.Assembly):System.Globalization.GlobalizationAssembly</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetGlobalizationResourceBytePtr" uniqueID="GetGlobalizationResourceBytePtr(System.Reflection.Assembly;string):byte">
				<signature>System.Globalization.GlobalizationAssembly.GetGlobalizationResourceBytePtr(System.Reflection.Assembly;string):byte</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="_nativeCreateGlobalizationAssembly" uniqueID="_nativeCreateGlobalizationAssembly(System.Reflection.Assembly):void">
				<signature>System.Globalization.GlobalizationAssembly._nativeCreateGlobalizationAssembly(System.Reflection.Assembly):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_DefaultInstance" uniqueID="get_DefaultInstance():System.Globalization.GlobalizationAssembly">
				<signature>System.Globalization.GlobalizationAssembly.get_DefaultInstance():System.Globalization.GlobalizationAssembly</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="nativeCreateGlobalizationAssembly" uniqueID="nativeCreateGlobalizationAssembly(System.Reflection.Assembly):void">
				<signature>System.Globalization.GlobalizationAssembly.nativeCreateGlobalizationAssembly(System.Reflection.Assembly):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GlobalizationAssembly" uniqueID="GlobalizationAssembly():void">
				<signature>System.Globalization.GlobalizationAssembly.GlobalizationAssembly():void</signature>
			</method>
		</class>
		<class name="SortKey" uniqueID="System.Globalization.SortKey">
			<method accessibility="Public" methodKind="Static" name="Compare" uniqueID="Compare(System.Globalization.SortKey;System.Globalization.SortKey):int">
				<signature>System.Globalization.SortKey.Compare(System.Globalization.SortKey;System.Globalization.SortKey):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Globalization.SortKey.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Globalization.SortKey.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SortKey" uniqueID="SortKey(int;string;System.Globalization.CompareOptions):void">
				<signature>System.Globalization.SortKey.SortKey(int;string;System.Globalization.CompareOptions):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SortKey" uniqueID="SortKey(void;int;string;System.Globalization.CompareOptions):void">
				<signature>System.Globalization.SortKey.SortKey(void;int;string;System.Globalization.CompareOptions):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Globalization.SortKey.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_KeyData" uniqueID="get_KeyData():byte[]">
				<signature>System.Globalization.SortKey.get_KeyData():byte[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_OriginalString" uniqueID="get_OriginalString():string">
				<signature>System.Globalization.SortKey.get_OriginalString():string</signature>
			</method>
		</class>
		<class name="TextInfo" uniqueID="System.Globalization.TextInfo">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Globalization.TextInfo.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="AllocateDefaultCasingTable" uniqueID="AllocateDefaultCasingTable(byte):void">
				<signature>System.Globalization.TextInfo.AllocateDefaultCasingTable(byte):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CompareOrdinalIgnoreCase" uniqueID="CompareOrdinalIgnoreCase(string;string):int">
				<signature>System.Globalization.TextInfo.CompareOrdinalIgnoreCase(string;string):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CompareOrdinalIgnoreCaseEx" uniqueID="CompareOrdinalIgnoreCaseEx(string;int;string;int;int):int">
				<signature>System.Globalization.TextInfo.CompareOrdinalIgnoreCaseEx(string;int;string;int;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetHashCodeOrdinalIgnoreCase" uniqueID="GetHashCodeOrdinalIgnoreCase(string):int">
				<signature>System.Globalization.TextInfo.GetHashCodeOrdinalIgnoreCase(string):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetNativeTextInfo" uniqueID="GetNativeTextInfo(int):void">
				<signature>System.Globalization.TextInfo.GetNativeTextInfo(int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="IndexOfStringOrdinalIgnoreCase" uniqueID="IndexOfStringOrdinalIgnoreCase(string;string;int;int):int">
				<signature>System.Globalization.TextInfo.IndexOfStringOrdinalIgnoreCase(string;string;int;int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InternalAllocateCasingTable" uniqueID="InternalAllocateCasingTable(byte;int):void">
				<signature>System.Globalization.TextInfo.InternalAllocateCasingTable(byte;int):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="LastIndexOfStringOrdinalIgnoreCase" uniqueID="LastIndexOfStringOrdinalIgnoreCase(string;string;int;int):int">
				<signature>System.Globalization.TextInfo.LastIndexOfStringOrdinalIgnoreCase(string;string;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ReadOnly" uniqueID="ReadOnly(System.Globalization.TextInfo):System.Globalization.TextInfo">
				<signature>System.Globalization.TextInfo.ReadOnly(System.Globalization.TextInfo):System.Globalization.TextInfo</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="get_InternalSyncObject" uniqueID="get_InternalSyncObject():object">
				<signature>System.Globalization.TextInfo.get_InternalSyncObject():object</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_InvariantNativeTextInfo" uniqueID="get_InvariantNativeTextInfo():void">
				<signature>System.Globalization.TextInfo.get_InvariantNativeTextInfo():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeChangeCaseChar" uniqueID="nativeChangeCaseChar(int;void;char;bool):char">
				<signature>System.Globalization.TextInfo.nativeChangeCaseChar(int;void;char;bool):char</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeChangeCaseString" uniqueID="nativeChangeCaseString(int;void;string;bool):string">
				<signature>System.Globalization.TextInfo.nativeChangeCaseString(int;void;string;bool):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeChangeCaseSurrogate" uniqueID="nativeChangeCaseSurrogate(void;char;char;char;char;bool):void">
				<signature>System.Globalization.TextInfo.nativeChangeCaseSurrogate(void;char;char;char;char;bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="nativeCompareOrdinalIgnoreCase" uniqueID="nativeCompareOrdinalIgnoreCase(void;string;string):int">
				<signature>System.Globalization.TextInfo.nativeCompareOrdinalIgnoreCase(void;string;string):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="nativeCompareOrdinalIgnoreCaseEx" uniqueID="nativeCompareOrdinalIgnoreCaseEx(void;string;int;string;int;int):int">
				<signature>System.Globalization.TextInfo.nativeCompareOrdinalIgnoreCaseEx(void;string;int;string;int;int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="nativeGetCaseInsHash" uniqueID="nativeGetCaseInsHash(string;void):int">
				<signature>System.Globalization.TextInfo.nativeGetCaseInsHash(string;void):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="nativeGetHashCodeOrdinalIgnoreCase" uniqueID="nativeGetHashCodeOrdinalIgnoreCase(void;string):int">
				<signature>System.Globalization.TextInfo.nativeGetHashCodeOrdinalIgnoreCase(void;string):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="nativeGetInvariantTextInfo" uniqueID="nativeGetInvariantTextInfo():void">
				<signature>System.Globalization.TextInfo.nativeGetInvariantTextInfo():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="nativeGetTitleCaseChar" uniqueID="nativeGetTitleCaseChar(void;char):char">
				<signature>System.Globalization.TextInfo.nativeGetTitleCaseChar(void;char):char</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeIndexOfCharOrdinalIgnoreCase" uniqueID="nativeIndexOfCharOrdinalIgnoreCase(void;string;char;int;int):int">
				<signature>System.Globalization.TextInfo.nativeIndexOfCharOrdinalIgnoreCase(void;string;char;int;int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="nativeIndexOfStringOrdinalIgnoreCase" uniqueID="nativeIndexOfStringOrdinalIgnoreCase(void;string;string;int;int):int">
				<signature>System.Globalization.TextInfo.nativeIndexOfStringOrdinalIgnoreCase(void;string;string;int;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeLastIndexOfCharOrdinalIgnoreCase" uniqueID="nativeLastIndexOfCharOrdinalIgnoreCase(void;string;char;int;int):int">
				<signature>System.Globalization.TextInfo.nativeLastIndexOfCharOrdinalIgnoreCase(void;string;char;int;int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="nativeLastIndexOfStringOrdinalIgnoreCase" uniqueID="nativeLastIndexOfStringOrdinalIgnoreCase(void;string;string;int;int):int">
				<signature>System.Globalization.TextInfo.nativeLastIndexOfStringOrdinalIgnoreCase(void;string;string;int;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ChangeCaseSurrogate" uniqueID="ChangeCaseSurrogate(char;char;char;char;bool):void">
				<signature>System.Globalization.TextInfo.ChangeCaseSurrogate(char;char;char;char;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone():object">
				<signature>System.Globalization.TextInfo.Clone():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Globalization.TextInfo.Equals(object):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetCaseInsensitiveHashCode" uniqueID="GetCaseInsensitiveHashCode(string):int">
				<signature>System.Globalization.TextInfo.GetCaseInsensitiveHashCode(string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Globalization.TextInfo.GetHashCode():int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="IsLetterCategory" uniqueID="IsLetterCategory(System.Globalization.UnicodeCategory):bool">
				<signature>System.Globalization.TextInfo.IsLetterCategory(System.Globalization.UnicodeCategory):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="IsWordSeparator" uniqueID="IsWordSeparator(System.Globalization.UnicodeCategory):bool">
				<signature>System.Globalization.TextInfo.IsWordSeparator(System.Globalization.UnicodeCategory):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnDeserialized" uniqueID="OnDeserialized():void">
				<signature>System.Globalization.TextInfo.OnDeserialized():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnDeserialized" uniqueID="OnDeserialized(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Globalization.TextInfo.OnDeserialized(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnDeserializing" uniqueID="OnDeserializing(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Globalization.TextInfo.OnDeserializing(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnSerializing" uniqueID="OnSerializing(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Globalization.TextInfo.OnSerializing(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetReadOnlyState" uniqueID="SetReadOnlyState(bool):void">
				<signature>System.Globalization.TextInfo.SetReadOnlyState(bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization" uniqueID="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object):void">
				<signature>System.Globalization.TextInfo.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="TextInfo" uniqueID="TextInfo(System.Globalization.CultureTableRecord):void">
				<signature>System.Globalization.TextInfo.TextInfo(System.Globalization.CultureTableRecord):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToLower" uniqueID="ToLower(char):char">
				<signature>System.Globalization.TextInfo.ToLower(char):char</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToLower" uniqueID="ToLower(string):string">
				<signature>System.Globalization.TextInfo.ToLower(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Globalization.TextInfo.ToString():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToTitleCase" uniqueID="ToTitleCase(string):string">
				<signature>System.Globalization.TextInfo.ToTitleCase(string):string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToUpper" uniqueID="ToUpper(char):char">
				<signature>System.Globalization.TextInfo.ToUpper(char):char</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToUpper" uniqueID="ToUpper(string):string">
				<signature>System.Globalization.TextInfo.ToUpper(string):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="VerifyWritable" uniqueID="VerifyWritable():void">
				<signature>System.Globalization.TextInfo.VerifyWritable():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ANSICodePage" uniqueID="get_ANSICodePage():int">
				<signature>System.Globalization.TextInfo.get_ANSICodePage():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_CasingTextInfo" uniqueID="get_CasingTextInfo():System.Globalization.TextInfo">
				<signature>System.Globalization.TextInfo.get_CasingTextInfo():System.Globalization.TextInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CultureName" uniqueID="get_CultureName():string">
				<signature>System.Globalization.TextInfo.get_CultureName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_EBCDICCodePage" uniqueID="get_EBCDICCodePage():int">
				<signature>System.Globalization.TextInfo.get_EBCDICCodePage():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsReadOnly" uniqueID="get_IsReadOnly():bool">
				<signature>System.Globalization.TextInfo.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsRightToLeft" uniqueID="get_IsRightToLeft():bool">
				<signature>System.Globalization.TextInfo.get_IsRightToLeft():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_LCID" uniqueID="get_LCID():int">
				<signature>System.Globalization.TextInfo.get_LCID():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ListSeparator" uniqueID="get_ListSeparator():string">
				<signature>System.Globalization.TextInfo.get_ListSeparator():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MacCodePage" uniqueID="get_MacCodePage():int">
				<signature>System.Globalization.TextInfo.get_MacCodePage():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_OEMCodePage" uniqueID="get_OEMCodePage():int">
				<signature>System.Globalization.TextInfo.get_OEMCodePage():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_ListSeparator" uniqueID="set_ListSeparator(string):void">
				<signature>System.Globalization.TextInfo.set_ListSeparator(string):void</signature>
			</method>
		</class>
		<class name="TokenHashValue" uniqueID="System.Globalization.TokenHashValue">
			<method accessibility="Protected" methodKind="Member" name="TokenHashValue" uniqueID="TokenHashValue(string;System.TokenType;int):void">
				<signature>System.Globalization.TokenHashValue.TokenHashValue(string;System.TokenType;int):void</signature>
			</method>
		</class>
		<class name="CompareInfo" uniqueID="System.Globalization.CompareInfo">
			<method accessibility="Protected" methodKind="Static" name="ClearDefaultAssemblyCache" uniqueID="ClearDefaultAssemblyCache():void">
				<signature>System.Globalization.CompareInfo.ClearDefaultAssemblyCache():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="Compare" uniqueID="Compare(void;int;string;string;System.Globalization.CompareOptions):int">
				<signature>System.Globalization.CompareInfo.Compare(void;int;string;string;System.Globalization.CompareOptions):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="CompareRegion" uniqueID="CompareRegion(void;int;string;int;int;string;int;int;System.Globalization.CompareOptions):int">
				<signature>System.Globalization.CompareInfo.CompareRegion(void;int;string;int;int;string;int;int;System.Globalization.CompareOptions):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="FindNLSStringWrap" uniqueID="FindNLSStringWrap(int;int;string;int;int;string;int):int">
				<signature>System.Globalization.CompareInfo.FindNLSStringWrap(int;int;string;int;int;string;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCompareInfo" uniqueID="GetCompareInfo(int):System.Globalization.CompareInfo">
				<signature>System.Globalization.CompareInfo.GetCompareInfo(int):System.Globalization.CompareInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCompareInfo" uniqueID="GetCompareInfo(int;System.Reflection.Assembly):System.Globalization.CompareInfo">
				<signature>System.Globalization.CompareInfo.GetCompareInfo(int;System.Reflection.Assembly):System.Globalization.CompareInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCompareInfo" uniqueID="GetCompareInfo(string):System.Globalization.CompareInfo">
				<signature>System.Globalization.CompareInfo.GetCompareInfo(string):System.Globalization.CompareInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCompareInfo" uniqueID="GetCompareInfo(string;System.Reflection.Assembly):System.Globalization.CompareInfo">
				<signature>System.Globalization.CompareInfo.GetCompareInfo(string;System.Reflection.Assembly):System.Globalization.CompareInfo</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetCompareInfoByName" uniqueID="GetCompareInfoByName(string;System.Reflection.Assembly):System.Globalization.CompareInfo">
				<signature>System.Globalization.CompareInfo.GetCompareInfoByName(string;System.Reflection.Assembly):System.Globalization.CompareInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetNativeCompareFlags" uniqueID="GetNativeCompareFlags(System.Globalization.CompareOptions):int">
				<signature>System.Globalization.CompareInfo.GetNativeCompareFlags(System.Globalization.CompareOptions):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IndexOfChar" uniqueID="IndexOfChar(void;int;string;char;int;int;int):int">
				<signature>System.Globalization.CompareInfo.IndexOfChar(void;int;string;char;int;int;int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IndexOfString" uniqueID="IndexOfString(void;int;string;string;int;int;int):int">
				<signature>System.Globalization.CompareInfo.IndexOfString(void;int;string;string;int;int;int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InitializeCompareInfo" uniqueID="InitializeCompareInfo(void;int):void">
				<signature>System.Globalization.CompareInfo.InitializeCompareInfo(void;int):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InitializeNativeCompareInfo" uniqueID="InitializeNativeCompareInfo(void;int):void">
				<signature>System.Globalization.CompareInfo.InitializeNativeCompareInfo(void;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsSortable" uniqueID="IsSortable(char):bool">
				<signature>System.Globalization.CompareInfo.IsSortable(char):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="IsSortable" uniqueID="IsSortable(string):bool">
				<signature>System.Globalization.CompareInfo.IsSortable(string):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="LastIndexOfChar" uniqueID="LastIndexOfChar(void;int;string;char;int;int;int):int">
				<signature>System.Globalization.CompareInfo.LastIndexOfChar(void;int;string;char;int;int;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="LastIndexOfString" uniqueID="LastIndexOfString(void;int;string;string;int;int;int):int">
				<signature>System.Globalization.CompareInfo.LastIndexOfString(void;int;string;string;int;int;int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="get_InternalSyncObject" uniqueID="get_InternalSyncObject():object">
				<signature>System.Globalization.CompareInfo.get_InternalSyncObject():object</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeCompareString" uniqueID="nativeCompareString(int;string;int;int;string;int;int;int):int">
				<signature>System.Globalization.CompareInfo.nativeCompareString(int;string;int;int;string;int;int;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeCreateSortKey" uniqueID="nativeCreateSortKey(void;string;int;int):byte[]">
				<signature>System.Globalization.CompareInfo.nativeCreateSortKey(void;string;int;int):byte[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeGetGlobalizedHashCode" uniqueID="nativeGetGlobalizedHashCode(void;string;int;int):int">
				<signature>System.Globalization.CompareInfo.nativeGetGlobalizedHashCode(void;string;int;int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="nativeIsPrefix" uniqueID="nativeIsPrefix(void;int;string;string;System.Globalization.CompareOptions):bool">
				<signature>System.Globalization.CompareInfo.nativeIsPrefix(void;int;string;string;System.Globalization.CompareOptions):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeIsSortable" uniqueID="nativeIsSortable(void;string):bool">
				<signature>System.Globalization.CompareInfo.nativeIsSortable(void;string):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="nativeIsSuffix" uniqueID="nativeIsSuffix(void;int;string;string;System.Globalization.CompareOptions):bool">
				<signature>System.Globalization.CompareInfo.nativeIsSuffix(void;int;string;string;System.Globalization.CompareOptions):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Compare" uniqueID="Compare(string;int;int;string;int;int):int">
				<signature>System.Globalization.CompareInfo.Compare(string;int;int;string;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Compare" uniqueID="Compare(string;int;int;string;int;int;System.Globalization.CompareOptions):int">
				<signature>System.Globalization.CompareInfo.Compare(string;int;int;string;int;int;System.Globalization.CompareOptions):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Compare" uniqueID="Compare(string;int;string;int):int">
				<signature>System.Globalization.CompareInfo.Compare(string;int;string;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Compare" uniqueID="Compare(string;int;string;int;System.Globalization.CompareOptions):int">
				<signature>System.Globalization.CompareInfo.Compare(string;int;string;int;System.Globalization.CompareOptions):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Compare" uniqueID="Compare(string;string):int">
				<signature>System.Globalization.CompareInfo.Compare(string;string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Compare" uniqueID="Compare(string;string;System.Globalization.CompareOptions):int">
				<signature>System.Globalization.CompareInfo.Compare(string;string;System.Globalization.CompareOptions):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CompareInfo" uniqueID="CompareInfo(System.Globalization.GlobalizationAssembly;int):void">
				<signature>System.Globalization.CompareInfo.CompareInfo(System.Globalization.GlobalizationAssembly;int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Globalization.CompareInfo.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Globalization.CompareInfo.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetHashCodeOfString" uniqueID="GetHashCodeOfString(string;System.Globalization.CompareOptions):int">
				<signature>System.Globalization.CompareInfo.GetHashCodeOfString(string;System.Globalization.CompareOptions):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSortKey" uniqueID="GetSortKey(string):System.Globalization.SortKey">
				<signature>System.Globalization.CompareInfo.GetSortKey(string):System.Globalization.SortKey</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSortKey" uniqueID="GetSortKey(string;System.Globalization.CompareOptions):System.Globalization.SortKey">
				<signature>System.Globalization.CompareInfo.GetSortKey(string;System.Globalization.CompareOptions):System.Globalization.SortKey</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetSortingLCID" uniqueID="GetSortingLCID(int):int">
				<signature>System.Globalization.CompareInfo.GetSortingLCID(int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(string;char):int">
				<signature>System.Globalization.CompareInfo.IndexOf(string;char):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(string;char;System.Globalization.CompareOptions):int">
				<signature>System.Globalization.CompareInfo.IndexOf(string;char;System.Globalization.CompareOptions):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(string;char;int):int">
				<signature>System.Globalization.CompareInfo.IndexOf(string;char;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(string;char;int;System.Globalization.CompareOptions):int">
				<signature>System.Globalization.CompareInfo.IndexOf(string;char;int;System.Globalization.CompareOptions):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(string;char;int;int):int">
				<signature>System.Globalization.CompareInfo.IndexOf(string;char;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(string;char;int;int;System.Globalization.CompareOptions):int">
				<signature>System.Globalization.CompareInfo.IndexOf(string;char;int;int;System.Globalization.CompareOptions):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(string;string):int">
				<signature>System.Globalization.CompareInfo.IndexOf(string;string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(string;string;System.Globalization.CompareOptions):int">
				<signature>System.Globalization.CompareInfo.IndexOf(string;string;System.Globalization.CompareOptions):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(string;string;int):int">
				<signature>System.Globalization.CompareInfo.IndexOf(string;string;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(string;string;int;System.Globalization.CompareOptions):int">
				<signature>System.Globalization.CompareInfo.IndexOf(string;string;int;System.Globalization.CompareOptions):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(string;string;int;int):int">
				<signature>System.Globalization.CompareInfo.IndexOf(string;string;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IndexOf" uniqueID="IndexOf(string;string;int;int;System.Globalization.CompareOptions):int">
				<signature>System.Globalization.CompareInfo.IndexOf(string;string;int;int;System.Globalization.CompareOptions):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsPrefix" uniqueID="IsPrefix(string;string):bool">
				<signature>System.Globalization.CompareInfo.IsPrefix(string;string):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsPrefix" uniqueID="IsPrefix(string;string;System.Globalization.CompareOptions):bool">
				<signature>System.Globalization.CompareInfo.IsPrefix(string;string;System.Globalization.CompareOptions):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsSuffix" uniqueID="IsSuffix(string;string):bool">
				<signature>System.Globalization.CompareInfo.IsSuffix(string;string):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsSuffix" uniqueID="IsSuffix(string;string;System.Globalization.CompareOptions):bool">
				<signature>System.Globalization.CompareInfo.IsSuffix(string;string;System.Globalization.CompareOptions):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(string;char):int">
				<signature>System.Globalization.CompareInfo.LastIndexOf(string;char):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(string;char;System.Globalization.CompareOptions):int">
				<signature>System.Globalization.CompareInfo.LastIndexOf(string;char;System.Globalization.CompareOptions):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(string;char;int):int">
				<signature>System.Globalization.CompareInfo.LastIndexOf(string;char;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(string;char;int;System.Globalization.CompareOptions):int">
				<signature>System.Globalization.CompareInfo.LastIndexOf(string;char;int;System.Globalization.CompareOptions):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(string;char;int;int):int">
				<signature>System.Globalization.CompareInfo.LastIndexOf(string;char;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(string;char;int;int;System.Globalization.CompareOptions):int">
				<signature>System.Globalization.CompareInfo.LastIndexOf(string;char;int;int;System.Globalization.CompareOptions):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(string;string):int">
				<signature>System.Globalization.CompareInfo.LastIndexOf(string;string):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(string;string;System.Globalization.CompareOptions):int">
				<signature>System.Globalization.CompareInfo.LastIndexOf(string;string;System.Globalization.CompareOptions):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(string;string;int):int">
				<signature>System.Globalization.CompareInfo.LastIndexOf(string;string;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(string;string;int;System.Globalization.CompareOptions):int">
				<signature>System.Globalization.CompareInfo.LastIndexOf(string;string;int;System.Globalization.CompareOptions):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(string;string;int;int):int">
				<signature>System.Globalization.CompareInfo.LastIndexOf(string;string;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="LastIndexOf" uniqueID="LastIndexOf(string;string;int;int;System.Globalization.CompareOptions):int">
				<signature>System.Globalization.CompareInfo.LastIndexOf(string;string;int;int;System.Globalization.CompareOptions):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnDeserialized" uniqueID="OnDeserialized():void">
				<signature>System.Globalization.CompareInfo.OnDeserialized():void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnDeserialized" uniqueID="OnDeserialized(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Globalization.CompareInfo.OnDeserialized(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnDeserializing" uniqueID="OnDeserializing(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Globalization.CompareInfo.OnDeserializing(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnSerializing" uniqueID="OnSerializing(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Globalization.CompareInfo.OnSerializing(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetName" uniqueID="SetName(string):void">
				<signature>System.Globalization.CompareInfo.SetName(string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SyntheticIndexOf" uniqueID="SyntheticIndexOf(string;string;int;int;int):int">
				<signature>System.Globalization.CompareInfo.SyntheticIndexOf(string;string;int;int;int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SyntheticIsPrefix" uniqueID="SyntheticIsPrefix(string;int;int;string;int):bool">
				<signature>System.Globalization.CompareInfo.SyntheticIsPrefix(string;int;int;string;int):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SyntheticIsSuffix" uniqueID="SyntheticIsSuffix(string;int;int;string;int):int">
				<signature>System.Globalization.CompareInfo.SyntheticIsSuffix(string;int;int;string;int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SyntheticLastIndexOf" uniqueID="SyntheticLastIndexOf(string;string;int;int;int):int">
				<signature>System.Globalization.CompareInfo.SyntheticLastIndexOf(string;string;int;int;int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization" uniqueID="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object):void">
				<signature>System.Globalization.CompareInfo.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Globalization.CompareInfo.ToString():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_CultureTableRecord" uniqueID="get_CultureTableRecord():System.Globalization.CultureTableRecord">
				<signature>System.Globalization.CompareInfo.get_CultureTableRecord():System.Globalization.CultureTableRecord</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_IsSynthetic" uniqueID="get_IsSynthetic():bool">
				<signature>System.Globalization.CompareInfo.get_IsSynthetic():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_LCID" uniqueID="get_LCID():int">
				<signature>System.Globalization.CompareInfo.get_LCID():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Globalization.CompareInfo.get_Name():string</signature>
			</method>
		</class>
		<class name="CultureInfo" uniqueID="System.Globalization.CultureInfo">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Globalization.CultureInfo.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CheckDomainSafetyObject" uniqueID="CheckDomainSafetyObject(object;object):void">
				<signature>System.Globalization.CultureInfo.CheckDomainSafetyObject(object;object):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CheckNeutral" uniqueID="CheckNeutral(System.Globalization.CultureInfo):void">
				<signature>System.Globalization.CultureInfo.CheckNeutral(System.Globalization.CultureInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="CreateSpecificCulture" uniqueID="CreateSpecificCulture(string):System.Globalization.CultureInfo">
				<signature>System.Globalization.CultureInfo.CreateSpecificCulture(string):System.Globalization.CultureInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetCalendarInstance" uniqueID="GetCalendarInstance(int):System.Globalization.Calendar">
				<signature>System.Globalization.CultureInfo.GetCalendarInstance(int):System.Globalization.Calendar</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetCalendarInstanceRare" uniqueID="GetCalendarInstanceRare(int):System.Globalization.Calendar">
				<signature>System.Globalization.CultureInfo.GetCalendarInstanceRare(int):System.Globalization.Calendar</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetCultureByLCIDOrName" uniqueID="GetCultureByLCIDOrName(int;string):System.Globalization.CultureInfo">
				<signature>System.Globalization.CultureInfo.GetCultureByLCIDOrName(int;string):System.Globalization.CultureInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCultureInfo" uniqueID="GetCultureInfo(int):System.Globalization.CultureInfo">
				<signature>System.Globalization.CultureInfo.GetCultureInfo(int):System.Globalization.CultureInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCultureInfo" uniqueID="GetCultureInfo(string):System.Globalization.CultureInfo">
				<signature>System.Globalization.CultureInfo.GetCultureInfo(string):System.Globalization.CultureInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCultureInfo" uniqueID="GetCultureInfo(string;string):System.Globalization.CultureInfo">
				<signature>System.Globalization.CultureInfo.GetCultureInfo(string;string):System.Globalization.CultureInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCultureInfoByIetfLanguageTag" uniqueID="GetCultureInfoByIetfLanguageTag(string):System.Globalization.CultureInfo">
				<signature>System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(string):System.Globalization.CultureInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetCultureInfoHelper" uniqueID="GetCultureInfoHelper(int;string;string):System.Globalization.CultureInfo">
				<signature>System.Globalization.CultureInfo.GetCultureInfoHelper(int;string;string):System.Globalization.CultureInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="GetCultures" uniqueID="GetCultures(System.Globalization.CultureTypes):System.Globalization.CultureInfo[]">
				<signature>System.Globalization.CultureInfo.GetCultures(System.Globalization.CultureTypes):System.Globalization.CultureInfo[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetLangID" uniqueID="GetLangID(int):int">
				<signature>System.Globalization.CultureInfo.GetLangID(int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetNativeSortKey" uniqueID="GetNativeSortKey(int;int;string;int;byte[]):int">
				<signature>System.Globalization.CultureInfo.GetNativeSortKey(int;int;string;int;byte[]):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetSortID" uniqueID="GetSortID(int):int">
				<signature>System.Globalization.CultureInfo.GetSortID(int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetSubLangID" uniqueID="GetSubLangID(int):int">
				<signature>System.Globalization.CultureInfo.GetSubLangID(int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InitUserDefaultCulture" uniqueID="InitUserDefaultCulture():System.Globalization.CultureInfo">
				<signature>System.Globalization.CultureInfo.InitUserDefaultCulture():System.Globalization.CultureInfo</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InitUserDefaultUICulture" uniqueID="InitUserDefaultUICulture():System.Globalization.CultureInfo">
				<signature>System.Globalization.CultureInfo.InitUserDefaultUICulture():System.Globalization.CultureInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="IsValidLCID" uniqueID="IsValidLCID(int;int):bool">
				<signature>System.Globalization.CultureInfo.IsValidLCID(int;int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="IsWin9xInstalledCulture" uniqueID="IsWin9xInstalledCulture(string;int):bool">
				<signature>System.Globalization.CultureInfo.IsWin9xInstalledCulture(string;int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ReadOnly" uniqueID="ReadOnly(System.Globalization.CultureInfo):System.Globalization.CultureInfo">
				<signature>System.Globalization.CultureInfo.ReadOnly(System.Globalization.CultureInfo):System.Globalization.CultureInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="VerifyCultureName" uniqueID="VerifyCultureName(System.Globalization.CultureInfo;bool):bool">
				<signature>System.Globalization.CultureInfo.VerifyCultureName(System.Globalization.CultureInfo;bool):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_CurrentCulture" uniqueID="get_CurrentCulture():System.Globalization.CultureInfo">
				<signature>System.Globalization.CultureInfo.get_CurrentCulture():System.Globalization.CultureInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_CurrentUICulture" uniqueID="get_CurrentUICulture():System.Globalization.CultureInfo">
				<signature>System.Globalization.CultureInfo.get_CurrentUICulture():System.Globalization.CultureInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_InstalledUICulture" uniqueID="get_InstalledUICulture():System.Globalization.CultureInfo">
				<signature>System.Globalization.CultureInfo.get_InstalledUICulture():System.Globalization.CultureInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_InvariantCulture" uniqueID="get_InvariantCulture():System.Globalization.CultureInfo">
				<signature>System.Globalization.CultureInfo.get_InvariantCulture():System.Globalization.CultureInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_UserDefaultCulture" uniqueID="get_UserDefaultCulture():System.Globalization.CultureInfo">
				<signature>System.Globalization.CultureInfo.get_UserDefaultCulture():System.Globalization.CultureInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="get_UserDefaultUICulture" uniqueID="get_UserDefaultUICulture():System.Globalization.CultureInfo">
				<signature>System.Globalization.CultureInfo.get_UserDefaultUICulture():System.Globalization.CultureInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeEnumSystemLocales" uniqueID="nativeEnumSystemLocales(int[]):bool">
				<signature>System.Globalization.CultureInfo.nativeEnumSystemLocales(int[]):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeFileExists" uniqueID="nativeFileExists(string):bool">
				<signature>System.Globalization.CultureInfo.nativeFileExists(string):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeGetCultureData" uniqueID="nativeGetCultureData(int;System.Globalization.CultureData):bool">
				<signature>System.Globalization.CultureInfo.nativeGetCultureData(int;System.Globalization.CultureData):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeGetCultureName" uniqueID="nativeGetCultureName(int;bool;bool):string">
				<signature>System.Globalization.CultureInfo.nativeGetCultureName(int;bool;bool):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeGetCurrentCalendar" uniqueID="nativeGetCurrentCalendar():int">
				<signature>System.Globalization.CultureInfo.nativeGetCurrentCalendar():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeGetDTFIUserValues" uniqueID="nativeGetDTFIUserValues(int;System.Globalization.DTFIUserOverrideValues):bool">
				<signature>System.Globalization.CultureInfo.nativeGetDTFIUserValues(int;System.Globalization.DTFIUserOverrideValues):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeGetLocaleInfo" uniqueID="nativeGetLocaleInfo(int;int):string">
				<signature>System.Globalization.CultureInfo.nativeGetLocaleInfo(int;int):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeGetNFIUserValues" uniqueID="nativeGetNFIUserValues(int;System.Globalization.NumberFormatInfo):bool">
				<signature>System.Globalization.CultureInfo.nativeGetNFIUserValues(int;System.Globalization.NumberFormatInfo):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeGetStaticInt32DataTable" uniqueID="nativeGetStaticInt32DataTable(int;int):int">
				<signature>System.Globalization.CultureInfo.nativeGetStaticInt32DataTable(int;int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeGetSystemDefaultUILanguage" uniqueID="nativeGetSystemDefaultUILanguage(int):string">
				<signature>System.Globalization.CultureInfo.nativeGetSystemDefaultUILanguage(int):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeGetUserDefaultLCID" uniqueID="nativeGetUserDefaultLCID(int;int):string">
				<signature>System.Globalization.CultureInfo.nativeGetUserDefaultLCID(int;int):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeGetUserDefaultUILanguage" uniqueID="nativeGetUserDefaultUILanguage(int):string">
				<signature>System.Globalization.CultureInfo.nativeGetUserDefaultUILanguage(int):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeGetWindowsDirectory" uniqueID="nativeGetWindowsDirectory():string">
				<signature>System.Globalization.CultureInfo.nativeGetWindowsDirectory():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeSetThreadLocale" uniqueID="nativeSetThreadLocale(int):bool">
				<signature>System.Globalization.CultureInfo.nativeSetThreadLocale(int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ClearCachedData" uniqueID="ClearCachedData():void">
				<signature>System.Globalization.CultureInfo.ClearCachedData():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone():object">
				<signature>System.Globalization.CultureInfo.Clone():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CultureInfo" uniqueID="CultureInfo(int):void">
				<signature>System.Globalization.CultureInfo.CultureInfo(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CultureInfo" uniqueID="CultureInfo(int;bool):void">
				<signature>System.Globalization.CultureInfo.CultureInfo(int;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CultureInfo" uniqueID="CultureInfo(string):void">
				<signature>System.Globalization.CultureInfo.CultureInfo(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="CultureInfo" uniqueID="CultureInfo(string;bool):void">
				<signature>System.Globalization.CultureInfo.CultureInfo(string;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CultureInfo" uniqueID="CultureInfo(string;string):void">
				<signature>System.Globalization.CultureInfo.CultureInfo(string;string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Globalization.CultureInfo.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetConsoleFallbackUICulture" uniqueID="GetConsoleFallbackUICulture():System.Globalization.CultureInfo">
				<signature>System.Globalization.CultureInfo.GetConsoleFallbackUICulture():System.Globalization.CultureInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFormat" uniqueID="GetFormat(System.Type):object">
				<signature>System.Globalization.CultureInfo.GetFormat(System.Type):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Globalization.CultureInfo.GetHashCode():int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnDeserialized" uniqueID="OnDeserialized(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Globalization.CultureInfo.OnDeserialized(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnSerializing" uniqueID="OnSerializing(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Globalization.CultureInfo.OnSerializing(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="StartCrossDomainTracking" uniqueID="StartCrossDomainTracking():void">
				<signature>System.Globalization.CultureInfo.StartCrossDomainTracking():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToString" uniqueID="ToString():string">
				<signature>System.Globalization.CultureInfo.ToString():string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="VerifyWritable" uniqueID="VerifyWritable():void">
				<signature>System.Globalization.CultureInfo.VerifyWritable():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Calendar" uniqueID="get_Calendar():System.Globalization.Calendar">
				<signature>System.Globalization.CultureInfo.get_Calendar():System.Globalization.Calendar</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CompareInfo" uniqueID="get_CompareInfo():System.Globalization.CompareInfo">
				<signature>System.Globalization.CultureInfo.get_CompareInfo():System.Globalization.CompareInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_CompareInfoId" uniqueID="get_CompareInfoId():int">
				<signature>System.Globalization.CultureInfo.get_CompareInfoId():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_CreatedDomainID" uniqueID="get_CreatedDomainID():int">
				<signature>System.Globalization.CultureInfo.get_CreatedDomainID():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CultureTypes" uniqueID="get_CultureTypes():System.Globalization.CultureTypes">
				<signature>System.Globalization.CultureInfo.get_CultureTypes():System.Globalization.CultureTypes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DateTimeFormat" uniqueID="get_DateTimeFormat():System.Globalization.DateTimeFormatInfo">
				<signature>System.Globalization.CultureInfo.get_DateTimeFormat():System.Globalization.DateTimeFormatInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DisplayName" uniqueID="get_DisplayName():string">
				<signature>System.Globalization.CultureInfo.get_DisplayName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_EnglishName" uniqueID="get_EnglishName():string">
				<signature>System.Globalization.CultureInfo.get_EnglishName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IetfLanguageTag" uniqueID="get_IetfLanguageTag():string">
				<signature>System.Globalization.CultureInfo.get_IetfLanguageTag():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsNeutralCulture" uniqueID="get_IsNeutralCulture():bool">
				<signature>System.Globalization.CultureInfo.get_IsNeutralCulture():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsReadOnly" uniqueID="get_IsReadOnly():bool">
				<signature>System.Globalization.CultureInfo.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IsSafeCrossDomain" uniqueID="get_IsSafeCrossDomain():bool">
				<signature>System.Globalization.CultureInfo.get_IsSafeCrossDomain():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_KeyboardLayoutId" uniqueID="get_KeyboardLayoutId():int">
				<signature>System.Globalization.CultureInfo.get_KeyboardLayoutId():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_LCID" uniqueID="get_LCID():int">
				<signature>System.Globalization.CultureInfo.get_LCID():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Name" uniqueID="get_Name():string">
				<signature>System.Globalization.CultureInfo.get_Name():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_NativeName" uniqueID="get_NativeName():string">
				<signature>System.Globalization.CultureInfo.get_NativeName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_NumberFormat" uniqueID="get_NumberFormat():System.Globalization.NumberFormatInfo">
				<signature>System.Globalization.CultureInfo.get_NumberFormat():System.Globalization.NumberFormatInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_OptionalCalendars" uniqueID="get_OptionalCalendars():System.Globalization.Calendar[]">
				<signature>System.Globalization.CultureInfo.get_OptionalCalendars():System.Globalization.Calendar[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Parent" uniqueID="get_Parent():System.Globalization.CultureInfo">
				<signature>System.Globalization.CultureInfo.get_Parent():System.Globalization.CultureInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SortName" uniqueID="get_SortName():string">
				<signature>System.Globalization.CultureInfo.get_SortName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TextInfo" uniqueID="get_TextInfo():System.Globalization.TextInfo">
				<signature>System.Globalization.CultureInfo.get_TextInfo():System.Globalization.TextInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ThreeLetterISOLanguageName" uniqueID="get_ThreeLetterISOLanguageName():string">
				<signature>System.Globalization.CultureInfo.get_ThreeLetterISOLanguageName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_ThreeLetterWindowsLanguageName" uniqueID="get_ThreeLetterWindowsLanguageName():string">
				<signature>System.Globalization.CultureInfo.get_ThreeLetterWindowsLanguageName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TwoLetterISOLanguageName" uniqueID="get_TwoLetterISOLanguageName():string">
				<signature>System.Globalization.CultureInfo.get_TwoLetterISOLanguageName():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_UseUserOverride" uniqueID="get_UseUserOverride():bool">
				<signature>System.Globalization.CultureInfo.get_UseUserOverride():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_DateTimeFormat" uniqueID="set_DateTimeFormat(System.Globalization.DateTimeFormatInfo):void">
				<signature>System.Globalization.CultureInfo.set_DateTimeFormat(System.Globalization.DateTimeFormatInfo):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_NumberFormat" uniqueID="set_NumberFormat(System.Globalization.NumberFormatInfo):void">
				<signature>System.Globalization.CultureInfo.set_NumberFormat(System.Globalization.NumberFormatInfo):void</signature>
			</method>
		</class>
		<class name="BaseInfoTable" uniqueID="System.Globalization.BaseInfoTable">
			<method accessibility="Protected" methodKind="Member" name="BaseInfoTable" uniqueID="BaseInfoTable(string;bool):void">
				<signature>System.Globalization.BaseInfoTable.BaseInfoTable(string;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CompareStringToStringPoolStringBinary" uniqueID="CompareStringToStringPoolStringBinary(string;int):int">
				<signature>System.Globalization.BaseInfoTable.CompareStringToStringPoolStringBinary(string;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Globalization.BaseInfoTable.Equals(object):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Globalization.BaseInfoTable.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetStringArray" uniqueID="GetStringArray(unsigned int):string[]">
				<signature>System.Globalization.BaseInfoTable.GetStringArray(unsigned int):string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetStringPoolString" uniqueID="GetStringPoolString(unsigned int):string">
				<signature>System.Globalization.BaseInfoTable.GetStringPoolString(unsigned int):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetWordArrayArray" uniqueID="GetWordArrayArray(unsigned int):int[][]">
				<signature>System.Globalization.BaseInfoTable.GetWordArrayArray(unsigned int):int[][]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="InitializeBaseInfoTablePointers" uniqueID="InitializeBaseInfoTablePointers(string;bool):void">
				<signature>System.Globalization.BaseInfoTable.InitializeBaseInfoTablePointers(string;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetDataItemPointers" uniqueID="SetDataItemPointers():void">
				<signature>System.Globalization.BaseInfoTable.SetDataItemPointers():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IsValid" uniqueID="get_IsValid():bool">
				<signature>System.Globalization.BaseInfoTable.get_IsValid():bool</signature>
			</method>
		</class>
		<class name="NumberFormatInfo" uniqueID="System.Globalization.NumberFormatInfo">
			<method accessibility="Public" methodKind="Static" name="GetInstance" uniqueID="GetInstance(System.IFormatProvider):System.Globalization.NumberFormatInfo">
				<signature>System.Globalization.NumberFormatInfo.GetInstance(System.IFormatProvider):System.Globalization.NumberFormatInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ReadOnly" uniqueID="ReadOnly(System.Globalization.NumberFormatInfo):System.Globalization.NumberFormatInfo">
				<signature>System.Globalization.NumberFormatInfo.ReadOnly(System.Globalization.NumberFormatInfo):System.Globalization.NumberFormatInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ValidateParseStyleFloatingPoint" uniqueID="ValidateParseStyleFloatingPoint(System.Globalization.NumberStyles):void">
				<signature>System.Globalization.NumberFormatInfo.ValidateParseStyleFloatingPoint(System.Globalization.NumberStyles):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ValidateParseStyleInteger" uniqueID="ValidateParseStyleInteger(System.Globalization.NumberStyles):void">
				<signature>System.Globalization.NumberFormatInfo.ValidateParseStyleInteger(System.Globalization.NumberStyles):void</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_CurrentInfo" uniqueID="get_CurrentInfo():System.Globalization.NumberFormatInfo">
				<signature>System.Globalization.NumberFormatInfo.get_CurrentInfo():System.Globalization.NumberFormatInfo</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="get_InvariantInfo" uniqueID="get_InvariantInfo():System.Globalization.NumberFormatInfo">
				<signature>System.Globalization.NumberFormatInfo.get_InvariantInfo():System.Globalization.NumberFormatInfo</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CheckGroupSize" uniqueID="CheckGroupSize(string;int[]):void">
				<signature>System.Globalization.NumberFormatInfo.CheckGroupSize(string;int[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone():object">
				<signature>System.Globalization.NumberFormatInfo.Clone():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetFormat" uniqueID="GetFormat(System.Type):object">
				<signature>System.Globalization.NumberFormatInfo.GetFormat(System.Type):object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="NumberFormatInfo" uniqueID="NumberFormatInfo():void">
				<signature>System.Globalization.NumberFormatInfo.NumberFormatInfo():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="NumberFormatInfo" uniqueID="NumberFormatInfo(System.Globalization.CultureTableRecord):void">
				<signature>System.Globalization.NumberFormatInfo.NumberFormatInfo(System.Globalization.CultureTableRecord):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnDeserialized" uniqueID="OnDeserialized(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Globalization.NumberFormatInfo.OnDeserialized(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnDeserializing" uniqueID="OnDeserializing(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Globalization.NumberFormatInfo.OnDeserializing(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="OnSerializing" uniqueID="OnSerializing(System.Runtime.Serialization.StreamingContext):void">
				<signature>System.Globalization.NumberFormatInfo.OnSerializing(System.Runtime.Serialization.StreamingContext):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="VerifyDecimalSeparator" uniqueID="VerifyDecimalSeparator(string;string):void">
				<signature>System.Globalization.NumberFormatInfo.VerifyDecimalSeparator(string;string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="VerifyDigitSubstitution" uniqueID="VerifyDigitSubstitution(System.Globalization.DigitShapes;string):void">
				<signature>System.Globalization.NumberFormatInfo.VerifyDigitSubstitution(System.Globalization.DigitShapes;string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="VerifyGroupSeparator" uniqueID="VerifyGroupSeparator(string;string):void">
				<signature>System.Globalization.NumberFormatInfo.VerifyGroupSeparator(string;string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="VerifyNativeDigits" uniqueID="VerifyNativeDigits(string[];string):void">
				<signature>System.Globalization.NumberFormatInfo.VerifyNativeDigits(string[];string):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="VerifyWritable" uniqueID="VerifyWritable():void">
				<signature>System.Globalization.NumberFormatInfo.VerifyWritable():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CurrencyDecimalDigits" uniqueID="get_CurrencyDecimalDigits():int">
				<signature>System.Globalization.NumberFormatInfo.get_CurrencyDecimalDigits():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CurrencyDecimalSeparator" uniqueID="get_CurrencyDecimalSeparator():string">
				<signature>System.Globalization.NumberFormatInfo.get_CurrencyDecimalSeparator():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CurrencyGroupSeparator" uniqueID="get_CurrencyGroupSeparator():string">
				<signature>System.Globalization.NumberFormatInfo.get_CurrencyGroupSeparator():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CurrencyGroupSizes" uniqueID="get_CurrencyGroupSizes():int[]">
				<signature>System.Globalization.NumberFormatInfo.get_CurrencyGroupSizes():int[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CurrencyNegativePattern" uniqueID="get_CurrencyNegativePattern():int">
				<signature>System.Globalization.NumberFormatInfo.get_CurrencyNegativePattern():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CurrencyPositivePattern" uniqueID="get_CurrencyPositivePattern():int">
				<signature>System.Globalization.NumberFormatInfo.get_CurrencyPositivePattern():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_CurrencySymbol" uniqueID="get_CurrencySymbol():string">
				<signature>System.Globalization.NumberFormatInfo.get_CurrencySymbol():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_DigitSubstitution" uniqueID="get_DigitSubstitution():System.Globalization.DigitShapes">
				<signature>System.Globalization.NumberFormatInfo.get_DigitSubstitution():System.Globalization.DigitShapes</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsReadOnly" uniqueID="get_IsReadOnly():bool">
				<signature>System.Globalization.NumberFormatInfo.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_NaNSymbol" uniqueID="get_NaNSymbol():string">
				<signature>System.Globalization.NumberFormatInfo.get_NaNSymbol():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_NativeDigits" uniqueID="get_NativeDigits():string[]">
				<signature>System.Globalization.NumberFormatInfo.get_NativeDigits():string[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_NegativeInfinitySymbol" uniqueID="get_NegativeInfinitySymbol():string">
				<signature>System.Globalization.NumberFormatInfo.get_NegativeInfinitySymbol():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_NegativeSign" uniqueID="get_NegativeSign():string">
				<signature>System.Globalization.NumberFormatInfo.get_NegativeSign():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_NumberDecimalDigits" uniqueID="get_NumberDecimalDigits():int">
				<signature>System.Globalization.NumberFormatInfo.get_NumberDecimalDigits():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_NumberDecimalSeparator" uniqueID="get_NumberDecimalSeparator():string">
				<signature>System.Globalization.NumberFormatInfo.get_NumberDecimalSeparator():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_NumberGroupSeparator" uniqueID="get_NumberGroupSeparator():string">
				<signature>System.Globalization.NumberFormatInfo.get_NumberGroupSeparator():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_NumberGroupSizes" uniqueID="get_NumberGroupSizes():int[]">
				<signature>System.Globalization.NumberFormatInfo.get_NumberGroupSizes():int[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_NumberNegativePattern" uniqueID="get_NumberNegativePattern():int">
				<signature>System.Globalization.NumberFormatInfo.get_NumberNegativePattern():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PerMilleSymbol" uniqueID="get_PerMilleSymbol():string">
				<signature>System.Globalization.NumberFormatInfo.get_PerMilleSymbol():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PercentDecimalDigits" uniqueID="get_PercentDecimalDigits():int">
				<signature>System.Globalization.NumberFormatInfo.get_PercentDecimalDigits():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PercentDecimalSeparator" uniqueID="get_PercentDecimalSeparator():string">
				<signature>System.Globalization.NumberFormatInfo.get_PercentDecimalSeparator():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PercentGroupSeparator" uniqueID="get_PercentGroupSeparator():string">
				<signature>System.Globalization.NumberFormatInfo.get_PercentGroupSeparator():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PercentGroupSizes" uniqueID="get_PercentGroupSizes():int[]">
				<signature>System.Globalization.NumberFormatInfo.get_PercentGroupSizes():int[]</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PercentNegativePattern" uniqueID="get_PercentNegativePattern():int">
				<signature>System.Globalization.NumberFormatInfo.get_PercentNegativePattern():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PercentPositivePattern" uniqueID="get_PercentPositivePattern():int">
				<signature>System.Globalization.NumberFormatInfo.get_PercentPositivePattern():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PercentSymbol" uniqueID="get_PercentSymbol():string">
				<signature>System.Globalization.NumberFormatInfo.get_PercentSymbol():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PositiveInfinitySymbol" uniqueID="get_PositiveInfinitySymbol():string">
				<signature>System.Globalization.NumberFormatInfo.get_PositiveInfinitySymbol():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_PositiveSign" uniqueID="get_PositiveSign():string">
				<signature>System.Globalization.NumberFormatInfo.get_PositiveSign():string</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_CurrencyDecimalDigits" uniqueID="set_CurrencyDecimalDigits(int):void">
				<signature>System.Globalization.NumberFormatInfo.set_CurrencyDecimalDigits(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_CurrencyDecimalSeparator" uniqueID="set_CurrencyDecimalSeparator(string):void">
				<signature>System.Globalization.NumberFormatInfo.set_CurrencyDecimalSeparator(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_CurrencyGroupSeparator" uniqueID="set_CurrencyGroupSeparator(string):void">
				<signature>System.Globalization.NumberFormatInfo.set_CurrencyGroupSeparator(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_CurrencyGroupSizes" uniqueID="set_CurrencyGroupSizes(int[]):void">
				<signature>System.Globalization.NumberFormatInfo.set_CurrencyGroupSizes(int[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_CurrencyNegativePattern" uniqueID="set_CurrencyNegativePattern(int):void">
				<signature>System.Globalization.NumberFormatInfo.set_CurrencyNegativePattern(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_CurrencyPositivePattern" uniqueID="set_CurrencyPositivePattern(int):void">
				<signature>System.Globalization.NumberFormatInfo.set_CurrencyPositivePattern(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_CurrencySymbol" uniqueID="set_CurrencySymbol(string):void">
				<signature>System.Globalization.NumberFormatInfo.set_CurrencySymbol(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_DigitSubstitution" uniqueID="set_DigitSubstitution(System.Globalization.DigitShapes):void">
				<signature>System.Globalization.NumberFormatInfo.set_DigitSubstitution(System.Globalization.DigitShapes):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_NaNSymbol" uniqueID="set_NaNSymbol(string):void">
				<signature>System.Globalization.NumberFormatInfo.set_NaNSymbol(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_NativeDigits" uniqueID="set_NativeDigits(string[]):void">
				<signature>System.Globalization.NumberFormatInfo.set_NativeDigits(string[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_NegativeInfinitySymbol" uniqueID="set_NegativeInfinitySymbol(string):void">
				<signature>System.Globalization.NumberFormatInfo.set_NegativeInfinitySymbol(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_NegativeSign" uniqueID="set_NegativeSign(string):void">
				<signature>System.Globalization.NumberFormatInfo.set_NegativeSign(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_NumberDecimalDigits" uniqueID="set_NumberDecimalDigits(int):void">
				<signature>System.Globalization.NumberFormatInfo.set_NumberDecimalDigits(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_NumberDecimalSeparator" uniqueID="set_NumberDecimalSeparator(string):void">
				<signature>System.Globalization.NumberFormatInfo.set_NumberDecimalSeparator(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_NumberGroupSeparator" uniqueID="set_NumberGroupSeparator(string):void">
				<signature>System.Globalization.NumberFormatInfo.set_NumberGroupSeparator(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_NumberGroupSizes" uniqueID="set_NumberGroupSizes(int[]):void">
				<signature>System.Globalization.NumberFormatInfo.set_NumberGroupSizes(int[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_NumberNegativePattern" uniqueID="set_NumberNegativePattern(int):void">
				<signature>System.Globalization.NumberFormatInfo.set_NumberNegativePattern(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_PerMilleSymbol" uniqueID="set_PerMilleSymbol(string):void">
				<signature>System.Globalization.NumberFormatInfo.set_PerMilleSymbol(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_PercentDecimalDigits" uniqueID="set_PercentDecimalDigits(int):void">
				<signature>System.Globalization.NumberFormatInfo.set_PercentDecimalDigits(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_PercentDecimalSeparator" uniqueID="set_PercentDecimalSeparator(string):void">
				<signature>System.Globalization.NumberFormatInfo.set_PercentDecimalSeparator(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_PercentGroupSeparator" uniqueID="set_PercentGroupSeparator(string):void">
				<signature>System.Globalization.NumberFormatInfo.set_PercentGroupSeparator(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_PercentGroupSizes" uniqueID="set_PercentGroupSizes(int[]):void">
				<signature>System.Globalization.NumberFormatInfo.set_PercentGroupSizes(int[]):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_PercentNegativePattern" uniqueID="set_PercentNegativePattern(int):void">
				<signature>System.Globalization.NumberFormatInfo.set_PercentNegativePattern(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_PercentPositivePattern" uniqueID="set_PercentPositivePattern(int):void">
				<signature>System.Globalization.NumberFormatInfo.set_PercentPositivePattern(int):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_PercentSymbol" uniqueID="set_PercentSymbol(string):void">
				<signature>System.Globalization.NumberFormatInfo.set_PercentSymbol(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_PositiveInfinitySymbol" uniqueID="set_PositiveInfinitySymbol(string):void">
				<signature>System.Globalization.NumberFormatInfo.set_PositiveInfinitySymbol(string):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_PositiveSign" uniqueID="set_PositiveSign(string):void">
				<signature>System.Globalization.NumberFormatInfo.set_PositiveSign(string):void</signature>
			</method>
		</class>
		<class name="AgileSafeNativeMemoryHandle" uniqueID="System.Globalization.AgileSafeNativeMemoryHandle">
			<method accessibility="Protected" methodKind="Member" name="AgileSafeNativeMemoryHandle" uniqueID="AgileSafeNativeMemoryHandle():void">
				<signature>System.Globalization.AgileSafeNativeMemoryHandle.AgileSafeNativeMemoryHandle():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AgileSafeNativeMemoryHandle" uniqueID="AgileSafeNativeMemoryHandle(native signed int;bool):void">
				<signature>System.Globalization.AgileSafeNativeMemoryHandle.AgileSafeNativeMemoryHandle(native signed int;bool):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AgileSafeNativeMemoryHandle" uniqueID="AgileSafeNativeMemoryHandle(string):void">
				<signature>System.Globalization.AgileSafeNativeMemoryHandle.AgileSafeNativeMemoryHandle(string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="AgileSafeNativeMemoryHandle" uniqueID="AgileSafeNativeMemoryHandle(string;string):void">
				<signature>System.Globalization.AgileSafeNativeMemoryHandle.AgileSafeNativeMemoryHandle(string;string):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetBytePtr" uniqueID="GetBytePtr():byte">
				<signature>System.Globalization.AgileSafeNativeMemoryHandle.GetBytePtr():byte</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="ReleaseHandle" uniqueID="ReleaseHandle():bool">
				<signature>System.Globalization.AgileSafeNativeMemoryHandle.ReleaseHandle():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_FileSize" uniqueID="get_FileSize():long">
				<signature>System.Globalization.AgileSafeNativeMemoryHandle.get_FileSize():long</signature>
			</method>
		</class>
		<class name="Calendar" uniqueID="System.Globalization.Calendar">
			<method accessibility="Protected" methodKind="Static" name="CheckAddResult" uniqueID="CheckAddResult(long;System.DateTime;System.DateTime):void">
				<signature>System.Globalization.Calendar.CheckAddResult(long;System.DateTime;System.DateTime):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetSystemTwoDigitYearSetting" uniqueID="GetSystemTwoDigitYearSetting(int;int):int">
				<signature>System.Globalization.Calendar.GetSystemTwoDigitYearSetting(int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Static" name="ReadOnly" uniqueID="ReadOnly(System.Globalization.Calendar):System.Globalization.Calendar">
				<signature>System.Globalization.Calendar.ReadOnly(System.Globalization.Calendar):System.Globalization.Calendar</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="TimeToTicks" uniqueID="TimeToTicks(int;int;int;int):long">
				<signature>System.Globalization.Calendar.TimeToTicks(int;int;int;int):long</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="nativeGetTwoDigitYearMax" uniqueID="nativeGetTwoDigitYearMax(int):int">
				<signature>System.Globalization.Calendar.nativeGetTwoDigitYearMax(int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Add" uniqueID="Add(System.DateTime;double;int):System.DateTime">
				<signature>System.Globalization.Calendar.Add(System.DateTime;double;int):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddDays" uniqueID="AddDays(System.DateTime;int):System.DateTime">
				<signature>System.Globalization.Calendar.AddDays(System.DateTime;int):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddHours" uniqueID="AddHours(System.DateTime;int):System.DateTime">
				<signature>System.Globalization.Calendar.AddHours(System.DateTime;int):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddMilliseconds" uniqueID="AddMilliseconds(System.DateTime;double):System.DateTime">
				<signature>System.Globalization.Calendar.AddMilliseconds(System.DateTime;double):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddMinutes" uniqueID="AddMinutes(System.DateTime;int):System.DateTime">
				<signature>System.Globalization.Calendar.AddMinutes(System.DateTime;int):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddMonths" uniqueID="AddMonths(System.DateTime;int):System.DateTime">
				<signature>System.Globalization.Calendar.AddMonths(System.DateTime;int):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddSeconds" uniqueID="AddSeconds(System.DateTime;int):System.DateTime">
				<signature>System.Globalization.Calendar.AddSeconds(System.DateTime;int):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddWeeks" uniqueID="AddWeeks(System.DateTime;int):System.DateTime">
				<signature>System.Globalization.Calendar.AddWeeks(System.DateTime;int):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="AddYears" uniqueID="AddYears(System.DateTime;int):System.DateTime">
				<signature>System.Globalization.Calendar.AddYears(System.DateTime;int):System.DateTime</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="Calendar" uniqueID="Calendar():void">
				<signature>System.Globalization.Calendar.Calendar():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Clone" uniqueID="Clone():object">
				<signature>System.Globalization.Calendar.Clone():object</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetDayOfMonth" uniqueID="GetDayOfMonth(System.DateTime):int">
				<signature>System.Globalization.Calendar.GetDayOfMonth(System.DateTime):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetDayOfWeek" uniqueID="GetDayOfWeek(System.DateTime):System.DayOfWeek">
				<signature>System.Globalization.Calendar.GetDayOfWeek(System.DateTime):System.DayOfWeek</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetDayOfYear" uniqueID="GetDayOfYear(System.DateTime):int">
				<signature>System.Globalization.Calendar.GetDayOfYear(System.DateTime):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetDaysInMonth" uniqueID="GetDaysInMonth(int;int):int">
				<signature>System.Globalization.Calendar.GetDaysInMonth(int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetDaysInMonth" uniqueID="GetDaysInMonth(int;int;int):int">
				<signature>System.Globalization.Calendar.GetDaysInMonth(int;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetDaysInYear" uniqueID="GetDaysInYear(int):int">
				<signature>System.Globalization.Calendar.GetDaysInYear(int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetDaysInYear" uniqueID="GetDaysInYear(int;int):int">
				<signature>System.Globalization.Calendar.GetDaysInYear(int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetEra" uniqueID="GetEra(System.DateTime):int">
				<signature>System.Globalization.Calendar.GetEra(System.DateTime):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetFirstDayWeekOfYear" uniqueID="GetFirstDayWeekOfYear(System.DateTime;int):int">
				<signature>System.Globalization.Calendar.GetFirstDayWeekOfYear(System.DateTime;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHour" uniqueID="GetHour(System.DateTime):int">
				<signature>System.Globalization.Calendar.GetHour(System.DateTime):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetLeapMonth" uniqueID="GetLeapMonth(int):int">
				<signature>System.Globalization.Calendar.GetLeapMonth(int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetLeapMonth" uniqueID="GetLeapMonth(int;int):int">
				<signature>System.Globalization.Calendar.GetLeapMonth(int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMilliseconds" uniqueID="GetMilliseconds(System.DateTime):double">
				<signature>System.Globalization.Calendar.GetMilliseconds(System.DateTime):double</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMinute" uniqueID="GetMinute(System.DateTime):int">
				<signature>System.Globalization.Calendar.GetMinute(System.DateTime):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMonth" uniqueID="GetMonth(System.DateTime):int">
				<signature>System.Globalization.Calendar.GetMonth(System.DateTime):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMonthsInYear" uniqueID="GetMonthsInYear(int):int">
				<signature>System.Globalization.Calendar.GetMonthsInYear(int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetMonthsInYear" uniqueID="GetMonthsInYear(int;int):int">
				<signature>System.Globalization.Calendar.GetMonthsInYear(int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetSecond" uniqueID="GetSecond(System.DateTime):int">
				<signature>System.Globalization.Calendar.GetSecond(System.DateTime):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetWeekOfYear" uniqueID="GetWeekOfYear(System.DateTime;System.Globalization.CalendarWeekRule;System.DayOfWeek):int">
				<signature>System.Globalization.Calendar.GetWeekOfYear(System.DateTime;System.Globalization.CalendarWeekRule;System.DayOfWeek):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetWeekOfYearFullDays" uniqueID="GetWeekOfYearFullDays(System.DateTime;System.Globalization.CalendarWeekRule;int;int):int">
				<signature>System.Globalization.Calendar.GetWeekOfYearFullDays(System.DateTime;System.Globalization.CalendarWeekRule;int;int):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetYear" uniqueID="GetYear(System.DateTime):int">
				<signature>System.Globalization.Calendar.GetYear(System.DateTime):int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsLeapDay" uniqueID="IsLeapDay(int;int;int):bool">
				<signature>System.Globalization.Calendar.IsLeapDay(int;int;int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsLeapDay" uniqueID="IsLeapDay(int;int;int;int):bool">
				<signature>System.Globalization.Calendar.IsLeapDay(int;int;int;int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsLeapMonth" uniqueID="IsLeapMonth(int;int):bool">
				<signature>System.Globalization.Calendar.IsLeapMonth(int;int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsLeapMonth" uniqueID="IsLeapMonth(int;int;int):bool">
				<signature>System.Globalization.Calendar.IsLeapMonth(int;int;int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsLeapYear" uniqueID="IsLeapYear(int):bool">
				<signature>System.Globalization.Calendar.IsLeapYear(int):bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="IsLeapYear" uniqueID="IsLeapYear(int;int):bool">
				<signature>System.Globalization.Calendar.IsLeapYear(int;int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsValidDay" uniqueID="IsValidDay(int;int;int;int):bool">
				<signature>System.Globalization.Calendar.IsValidDay(int;int;int;int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsValidMonth" uniqueID="IsValidMonth(int;int;int):bool">
				<signature>System.Globalization.Calendar.IsValidMonth(int;int;int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsValidYear" uniqueID="IsValidYear(int;int):bool">
				<signature>System.Globalization.Calendar.IsValidYear(int;int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="SetReadOnlyState" uniqueID="SetReadOnlyState(bool):void">
				<signature>System.Globalization.Calendar.SetReadOnlyState(bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToDateTime" uniqueID="ToDateTime(int;int;int;int;int;int;int):System.DateTime">
				<signature>System.Globalization.Calendar.ToDateTime(int;int;int;int;int;int;int):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToDateTime" uniqueID="ToDateTime(int;int;int;int;int;int;int;int):System.DateTime">
				<signature>System.Globalization.Calendar.ToDateTime(int;int;int;int;int;int;int;int):System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="ToFourDigitYear" uniqueID="ToFourDigitYear(int):int">
				<signature>System.Globalization.Calendar.ToFourDigitYear(int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="TryToDateTime" uniqueID="TryToDateTime(int;int;int;int;int;int;int;int;System.DateTime):bool">
				<signature>System.Globalization.Calendar.TryToDateTime(int;int;int;int;int;int;int;int;System.DateTime):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="VerifyWritable" uniqueID="VerifyWritable():void">
				<signature>System.Globalization.Calendar.VerifyWritable():void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_AlgorithmType" uniqueID="get_AlgorithmType():System.Globalization.CalendarAlgorithmType">
				<signature>System.Globalization.Calendar.get_AlgorithmType():System.Globalization.CalendarAlgorithmType</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_BaseCalendarID" uniqueID="get_BaseCalendarID():int">
				<signature>System.Globalization.Calendar.get_BaseCalendarID():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_CurrentEraValue" uniqueID="get_CurrentEraValue():int">
				<signature>System.Globalization.Calendar.get_CurrentEraValue():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_Eras" uniqueID="get_Eras():int[]">
				<signature>System.Globalization.Calendar.get_Eras():int[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ID" uniqueID="get_ID():int">
				<signature>System.Globalization.Calendar.get_ID():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_IsReadOnly" uniqueID="get_IsReadOnly():bool">
				<signature>System.Globalization.Calendar.get_IsReadOnly():bool</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MaxSupportedDateTime" uniqueID="get_MaxSupportedDateTime():System.DateTime">
				<signature>System.Globalization.Calendar.get_MaxSupportedDateTime():System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_MinSupportedDateTime" uniqueID="get_MinSupportedDateTime():System.DateTime">
				<signature>System.Globalization.Calendar.get_MinSupportedDateTime():System.DateTime</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="get_TwoDigitYearMax" uniqueID="get_TwoDigitYearMax():int">
				<signature>System.Globalization.Calendar.get_TwoDigitYearMax():int</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="set_TwoDigitYearMax" uniqueID="set_TwoDigitYearMax(int):void">
				<signature>System.Globalization.Calendar.set_TwoDigitYearMax(int):void</signature>
			</method>
		</class>
		<class name="CultureTableRecord" uniqueID="System.Globalization.CultureTableRecord">
			<method accessibility="Private" methodKind="Static" name="&lt;cctor&gt;" uniqueID="&lt;cctor&gt;():void">
				<signature>System.Globalization.CultureTableRecord.&lt;cctor&gt;():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="AdjustSyntheticCalendars" uniqueID="AdjustSyntheticCalendars(System.Globalization.CultureData;System.Globalization.CultureTableRecord+CompositeCultureData):void">
				<signature>System.Globalization.CultureTableRecord.AdjustSyntheticCalendars(System.Globalization.CultureData;System.Globalization.CultureTableRecord+CompositeCultureData):void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="AnsiToLower" uniqueID="AnsiToLower(string):string">
				<signature>System.Globalization.CultureTableRecord.AnsiToLower(string):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="CacheSyntheticNameLcidMapping" uniqueID="CacheSyntheticNameLcidMapping():void">
				<signature>System.Globalization.CultureTableRecord.CacheSyntheticNameLcidMapping():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="Concatenate" uniqueID="Concatenate(System.Text.StringBuilder;string[]):string">
				<signature>System.Globalization.CultureTableRecord.Concatenate(System.Text.StringBuilder;string[]):string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ConvertWin32GroupString" uniqueID="ConvertWin32GroupString(string):int[]">
				<signature>System.Globalization.CultureTableRecord.ConvertWin32GroupString(string):int[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetAdjustedNames" uniqueID="GetAdjustedNames(int;System.Globalization.CultureTableRecord+AdjustedSyntheticCultureName):void">
				<signature>System.Globalization.CultureTableRecord.GetAdjustedNames(int;System.Globalization.CultureTableRecord+AdjustedSyntheticCultureName):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetCasedName" uniqueID="GetCasedName(string):string">
				<signature>System.Globalization.CultureTableRecord.GetCasedName(string):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetCultureNamesUsingSNameLCType" uniqueID="GetCultureNamesUsingSNameLCType(int[];System.Collections.Hashtable;System.Collections.Hashtable):bool">
				<signature>System.Globalization.CultureTableRecord.GetCultureNamesUsingSNameLCType(int[];System.Collections.Hashtable;System.Collections.Hashtable):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetCultureTableRecord" uniqueID="GetCultureTableRecord(int;bool):System.Globalization.CultureTableRecord">
				<signature>System.Globalization.CultureTableRecord.GetCultureTableRecord(int;bool):System.Globalization.CultureTableRecord</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetCultureTableRecord" uniqueID="GetCultureTableRecord(string;bool):System.Globalization.CultureTableRecord">
				<signature>System.Globalization.CultureTableRecord.GetCultureTableRecord(string;bool):System.Globalization.CultureTableRecord</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetCultureTableRecordForRegion" uniqueID="GetCultureTableRecordForRegion(string;bool):System.Globalization.CultureTableRecord">
				<signature>System.Globalization.CultureTableRecord.GetCultureTableRecordForRegion(string;bool):System.Globalization.CultureTableRecord</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetDateSeparator" uniqueID="GetDateSeparator(string):string">
				<signature>System.Globalization.CultureTableRecord.GetDateSeparator(string):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="GetNamesHashtable" uniqueID="GetNamesHashtable():System.Collections.Hashtable">
				<signature>System.Globalization.CultureTableRecord.GetNamesHashtable():System.Collections.Hashtable</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetQualifiedName" uniqueID="GetQualifiedName(string):string">
				<signature>System.Globalization.CultureTableRecord.GetQualifiedName(string):string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetScriptTag" uniqueID="GetScriptTag(int;string):bool">
				<signature>System.Globalization.CultureTableRecord.GetScriptTag(int;string):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetSyntheticConsoleFallback" uniqueID="GetSyntheticConsoleFallback(System.Globalization.CultureData;System.Globalization.CultureTableRecord+CompositeCultureData):void">
				<signature>System.Globalization.CultureTableRecord.GetSyntheticConsoleFallback(System.Globalization.CultureData;System.Globalization.CultureTableRecord+CompositeCultureData):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetSyntheticParentData" uniqueID="GetSyntheticParentData(System.Globalization.CultureData;System.Globalization.CultureTableRecord+CompositeCultureData):void">
				<signature>System.Globalization.CultureTableRecord.GetSyntheticParentData(System.Globalization.CultureData;System.Globalization.CultureTableRecord+CompositeCultureData):void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="GetTimeSeparator" uniqueID="GetTimeSeparator(string):string">
				<signature>System.Globalization.CultureTableRecord.GetTimeSeparator(string):string</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="IdFromEverettDataItem" uniqueID="IdFromEverettDataItem(int):int">
				<signature>System.Globalization.CultureTableRecord.IdFromEverettDataItem(int):int</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="IdFromEverettRegionInfoDataItem" uniqueID="IdFromEverettRegionInfoDataItem(int):int">
				<signature>System.Globalization.CultureTableRecord.IdFromEverettRegionInfoDataItem(int):int</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InitEverettCultureDataItemMapping" uniqueID="InitEverettCultureDataItemMapping():void">
				<signature>System.Globalization.CultureTableRecord.InitEverettCultureDataItemMapping():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InitEverettDataItemToLCIDMappings" uniqueID="InitEverettDataItemToLCIDMappings():void">
				<signature>System.Globalization.CultureTableRecord.InitEverettDataItemToLCIDMappings():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InitEverettRegionDataItemMapping" uniqueID="InitEverettRegionDataItemMapping():void">
				<signature>System.Globalization.CultureTableRecord.InitEverettRegionDataItemMapping():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="InitEverettRegionDataItemToLCIDMappings" uniqueID="InitEverettRegionDataItemToLCIDMappings():void">
				<signature>System.Globalization.CultureTableRecord.InitEverettRegionDataItemToLCIDMappings():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="InitSyntheticMapping" uniqueID="InitSyntheticMapping():void">
				<signature>System.Globalization.CultureTableRecord.InitSyntheticMapping():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="IsBuiltInCulture" uniqueID="IsBuiltInCulture(int):bool">
				<signature>System.Globalization.CultureTableRecord.IsBuiltInCulture(int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="IsCustomCultureId" uniqueID="IsCustomCultureId(int):bool">
				<signature>System.Globalization.CultureTableRecord.IsCustomCultureId(int):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ReescapeWin32String" uniqueID="ReescapeWin32String(string):string">
				<signature>System.Globalization.CultureTableRecord.ReescapeWin32String(string):string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ReescapeWin32Strings" uniqueID="ReescapeWin32Strings(string[]):string[]">
				<signature>System.Globalization.CultureTableRecord.ReescapeWin32Strings(string[]):string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Static" name="ResetCustomCulturesCache" uniqueID="ResetCustomCulturesCache():void">
				<signature>System.Globalization.CultureTableRecord.ResetCustomCulturesCache():void</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="UnescapeWin32String" uniqueID="UnescapeWin32String(string;int;int):string">
				<signature>System.Globalization.CultureTableRecord.UnescapeWin32String(string;int;int):string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="ValidateCulturePieceToLower" uniqueID="ValidateCulturePieceToLower(string;string;int):string">
				<signature>System.Globalization.CultureTableRecord.ValidateCulturePieceToLower(string;string;int):string</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="get_AdjustedSyntheticNames" uniqueID="get_AdjustedSyntheticNames():System.Globalization.CultureTableRecord+AdjustedSyntheticCultureName[]">
				<signature>System.Globalization.CultureTableRecord.get_AdjustedSyntheticNames():System.Globalization.CultureTableRecord+AdjustedSyntheticCultureName[]</signature>
			</method>
			<method accessibility="Private" methodKind="Static" name="get_InternalSyncObject" uniqueID="get_InternalSyncObject():object">
				<signature>System.Globalization.CultureTableRecord.get_InternalSyncObject():object</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CheckCustomSynthetic" uniqueID="CheckCustomSynthetic():void">
				<signature>System.Globalization.CultureTableRecord.CheckCustomSynthetic():void</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CloneWithUserOverride" uniqueID="CloneWithUserOverride(bool):System.Globalization.CultureTableRecord">
				<signature>System.Globalization.CultureTableRecord.CloneWithUserOverride(bool):System.Globalization.CultureTableRecord</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="ConvertFirstDayOfWeekMonToSun" uniqueID="ConvertFirstDayOfWeekMonToSun(int):unsigned short">
				<signature>System.Globalization.CultureTableRecord.ConvertFirstDayOfWeekMonToSun(int):unsigned short</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="CultureTableRecord" uniqueID="CultureTableRecord(int;bool):void">
				<signature>System.Globalization.CultureTableRecord.CultureTableRecord(int;bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CultureTableRecord" uniqueID="CultureTableRecord(string;bool):void">
				<signature>System.Globalization.CultureTableRecord.CultureTableRecord(string;bool):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="CultureTableRecord" uniqueID="CultureTableRecord(string;int;bool):void">
				<signature>System.Globalization.CultureTableRecord.CultureTableRecord(string;int;bool):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="Equals" uniqueID="Equals(object):bool">
				<signature>System.Globalization.CultureTableRecord.Equals(object):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EverettDataItem" uniqueID="EverettDataItem():int">
				<signature>System.Globalization.CultureTableRecord.EverettDataItem():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="EverettRegionDataItem" uniqueID="EverettRegionDataItem():int">
				<signature>System.Globalization.CultureTableRecord.EverettRegionDataItem():int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="FillCultureDataMemory" uniqueID="FillCultureDataMemory(int;System.Globalization.CultureData;System.Globalization.CultureTableRecord+CompositeCultureData):unsigned int">
				<signature>System.Globalization.CultureTableRecord.FillCultureDataMemory(int;System.Globalization.CultureData;System.Globalization.CultureTableRecord+CompositeCultureData):unsigned int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetCultureDataSize" uniqueID="GetCultureDataSize(int;System.Globalization.CultureData;System.Globalization.CultureTableRecord+CompositeCultureData):int">
				<signature>System.Globalization.CultureTableRecord.GetCultureDataSize(int;System.Globalization.CultureData;System.Globalization.CultureTableRecord+CompositeCultureData):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetCustomCultureFile" uniqueID="GetCustomCultureFile(string):string">
				<signature>System.Globalization.CultureTableRecord.GetCustomCultureFile(string):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetCustomCultureTable" uniqueID="GetCustomCultureTable(string):System.Globalization.CultureTable">
				<signature>System.Globalization.CultureTableRecord.GetCustomCultureTable(string):System.Globalization.CultureTable</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetDTFIOverrideValues" uniqueID="GetDTFIOverrideValues(System.Globalization.DTFIUserOverrideValues):void">
				<signature>System.Globalization.CultureTableRecord.GetDTFIOverrideValues(System.Globalization.DTFIUserOverrideValues):void</signature>
			</method>
			<method accessibility="Public" methodKind="Member" name="GetHashCode" uniqueID="GetHashCode():int">
				<signature>System.Globalization.CultureTableRecord.GetHashCode():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="GetNFIOverrideValues" uniqueID="GetNFIOverrideValues(System.Globalization.NumberFormatInfo):void">
				<signature>System.Globalization.CultureTableRecord.GetNFIOverrideValues(System.Globalization.NumberFormatInfo):void</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetOverrideGrouping" uniqueID="GetOverrideGrouping(unsigned int;int):int[]">
				<signature>System.Globalization.CultureTableRecord.GetOverrideGrouping(unsigned int;int):int[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetOverrideString" uniqueID="GetOverrideString(unsigned int;int):string">
				<signature>System.Globalization.CultureTableRecord.GetOverrideString(unsigned int;int):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetOverrideStringArrayDefault" uniqueID="GetOverrideStringArrayDefault(unsigned int;int):string">
				<signature>System.Globalization.CultureTableRecord.GetOverrideStringArrayDefault(unsigned int;int):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetOverrideUSHORT" uniqueID="GetOverrideUSHORT(unsigned short;int):unsigned short">
				<signature>System.Globalization.CultureTableRecord.GetOverrideUSHORT(unsigned short;int):unsigned short</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetPoolStringArraySize" uniqueID="GetPoolStringArraySize(System.Collections.Hashtable;string[]):int">
				<signature>System.Globalization.CultureTableRecord.GetPoolStringArraySize(System.Collections.Hashtable;string[]):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetPoolStringArraySize" uniqueID="GetPoolStringArraySize(string;System.Collections.Hashtable):int">
				<signature>System.Globalization.CultureTableRecord.GetPoolStringArraySize(string;System.Collections.Hashtable):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetPoolStringSize" uniqueID="GetPoolStringSize(string;System.Collections.Hashtable):int">
				<signature>System.Globalization.CultureTableRecord.GetPoolStringSize(string;System.Collections.Hashtable):int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetString" uniqueID="GetString(unsigned int):string">
				<signature>System.Globalization.CultureTableRecord.GetString(unsigned int):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetStringArray" uniqueID="GetStringArray(unsigned int):string[]">
				<signature>System.Globalization.CultureTableRecord.GetStringArray(unsigned int):string[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetStringArrayDefault" uniqueID="GetStringArrayDefault(unsigned int):string">
				<signature>System.Globalization.CultureTableRecord.GetStringArrayDefault(unsigned int):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetSyntheticCulture" uniqueID="GetSyntheticCulture(int):bool">
				<signature>System.Globalization.CultureTableRecord.GetSyntheticCulture(int):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GetWordArray" uniqueID="GetWordArray(unsigned int):int[]">
				<signature>System.Globalization.CultureTableRecord.GetWordArray(unsigned int):int[]</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="GroupSizesConstruction" uniqueID="GroupSizesConstruction(string):string">
				<signature>System.Globalization.CultureTableRecord.GroupSizesConstruction(string):string</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="IsOptionalCalendar" uniqueID="IsOptionalCalendar(int):bool">
				<signature>System.Globalization.CultureTableRecord.IsOptionalCalendar(int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="IsValidSortID" uniqueID="IsValidSortID(int):bool">
				<signature>System.Globalization.CultureTableRecord.IsValidSortID(int):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="NameHasScriptTag" uniqueID="NameHasScriptTag(string):bool">
				<signature>System.Globalization.CultureTableRecord.NameHasScriptTag(string):bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SetPoolString" uniqueID="SetPoolString(string;System.Collections.Hashtable;unsigned int):unsigned int">
				<signature>System.Globalization.CultureTableRecord.SetPoolString(string;System.Collections.Hashtable;unsigned int):unsigned int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SetPoolStringArray" uniqueID="SetPoolStringArray(System.Collections.Hashtable;unsigned int;string[]):unsigned int">
				<signature>System.Globalization.CultureTableRecord.SetPoolStringArray(System.Collections.Hashtable;unsigned int;string[]):unsigned int</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="SetPoolStringArrayFromSingleString" uniqueID="SetPoolStringArrayFromSingleString(string;System.Collections.Hashtable;unsigned int):unsigned int">
				<signature>System.Globalization.CultureTableRecord.SetPoolStringArrayFromSingleString(string;System.Collections.Hashtable;unsigned int):unsigned int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="TryCreateReplacementCulture" uniqueID="TryCreateReplacementCulture(string;int):System.Globalization.CultureTable">
				<signature>System.Globalization.CultureTableRecord.TryCreateReplacementCulture(string;int):System.Globalization.CultureTable</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="UseCurrentCalendar" uniqueID="UseCurrentCalendar(int):bool">
				<signature>System.Globalization.CultureTableRecord.UseCurrentCalendar(int):bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ActualCultureID" uniqueID="get_ActualCultureID():int">
				<signature>System.Globalization.CultureTableRecord.get_ActualCultureID():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ActualName" uniqueID="get_ActualName():string">
				<signature>System.Globalization.CultureTableRecord.get_ActualName():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_CultureID" uniqueID="get_CultureID():int">
				<signature>System.Globalization.CultureTableRecord.get_CultureID():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_CultureName" uniqueID="get_CultureName():string">
				<signature>System.Globalization.CultureTableRecord.get_CultureName():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_CultureNativeDisplayName" uniqueID="get_CultureNativeDisplayName():string">
				<signature>System.Globalization.CultureTableRecord.get_CultureNativeDisplayName():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ICALENDARTYPE" uniqueID="get_ICALENDARTYPE():unsigned short">
				<signature>System.Globalization.CultureTableRecord.get_ICALENDARTYPE():unsigned short</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ICOMPAREINFO" uniqueID="get_ICOMPAREINFO():unsigned int">
				<signature>System.Globalization.CultureTableRecord.get_ICOMPAREINFO():unsigned int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ICURRDIGITS" uniqueID="get_ICURRDIGITS():unsigned short">
				<signature>System.Globalization.CultureTableRecord.get_ICURRDIGITS():unsigned short</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ICURRENCY" uniqueID="get_ICURRENCY():unsigned short">
				<signature>System.Globalization.CultureTableRecord.get_ICURRENCY():unsigned short</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IDEFAULTANSICODEPAGE" uniqueID="get_IDEFAULTANSICODEPAGE():unsigned short">
				<signature>System.Globalization.CultureTableRecord.get_IDEFAULTANSICODEPAGE():unsigned short</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IDEFAULTEBCDICCODEPAGE" uniqueID="get_IDEFAULTEBCDICCODEPAGE():unsigned short">
				<signature>System.Globalization.CultureTableRecord.get_IDEFAULTEBCDICCODEPAGE():unsigned short</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IDEFAULTMACCODEPAGE" uniqueID="get_IDEFAULTMACCODEPAGE():unsigned short">
				<signature>System.Globalization.CultureTableRecord.get_IDEFAULTMACCODEPAGE():unsigned short</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IDEFAULTOEMCODEPAGE" uniqueID="get_IDEFAULTOEMCODEPAGE():unsigned short">
				<signature>System.Globalization.CultureTableRecord.get_IDEFAULTOEMCODEPAGE():unsigned short</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IDIGITS" uniqueID="get_IDIGITS():unsigned short">
				<signature>System.Globalization.CultureTableRecord.get_IDIGITS():unsigned short</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IDIGITSUBSTITUTION" uniqueID="get_IDIGITSUBSTITUTION():unsigned short">
				<signature>System.Globalization.CultureTableRecord.get_IDIGITSUBSTITUTION():unsigned short</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IFIRSTDAYOFWEEK" uniqueID="get_IFIRSTDAYOFWEEK():unsigned short">
				<signature>System.Globalization.CultureTableRecord.get_IFIRSTDAYOFWEEK():unsigned short</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IFIRSTWEEKOFYEAR" uniqueID="get_IFIRSTWEEKOFYEAR():unsigned short">
				<signature>System.Globalization.CultureTableRecord.get_IFIRSTWEEKOFYEAR():unsigned short</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IFLAGS" uniqueID="get_IFLAGS():unsigned int">
				<signature>System.Globalization.CultureTableRecord.get_IFLAGS():unsigned int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IFORMATFLAGS" uniqueID="get_IFORMATFLAGS():System.Globalization.DateTimeFormatFlags">
				<signature>System.Globalization.CultureTableRecord.get_IFORMATFLAGS():System.Globalization.DateTimeFormatFlags</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IGEOID" uniqueID="get_IGEOID():unsigned short">
				<signature>System.Globalization.CultureTableRecord.get_IGEOID():unsigned short</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IINPUTLANGUAGEHANDLE" uniqueID="get_IINPUTLANGUAGEHANDLE():unsigned short">
				<signature>System.Globalization.CultureTableRecord.get_IINPUTLANGUAGEHANDLE():unsigned short</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ILANGUAGE" uniqueID="get_ILANGUAGE():unsigned short">
				<signature>System.Globalization.CultureTableRecord.get_ILANGUAGE():unsigned short</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ILINEORIENTATIONS" uniqueID="get_ILINEORIENTATIONS():unsigned short">
				<signature>System.Globalization.CultureTableRecord.get_ILINEORIENTATIONS():unsigned short</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IMEASURE" uniqueID="get_IMEASURE():unsigned short">
				<signature>System.Globalization.CultureTableRecord.get_IMEASURE():unsigned short</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_INEGATIVEPERCENT" uniqueID="get_INEGATIVEPERCENT():unsigned short">
				<signature>System.Globalization.CultureTableRecord.get_INEGATIVEPERCENT():unsigned short</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_INEGCURR" uniqueID="get_INEGCURR():unsigned short">
				<signature>System.Globalization.CultureTableRecord.get_INEGCURR():unsigned short</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_INEGNUMBER" uniqueID="get_INEGNUMBER():unsigned short">
				<signature>System.Globalization.CultureTableRecord.get_INEGNUMBER():unsigned short</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IOPTIONALCALENDARS" uniqueID="get_IOPTIONALCALENDARS():int[]">
				<signature>System.Globalization.CultureTableRecord.get_IOPTIONALCALENDARS():int[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IPARENT" uniqueID="get_IPARENT():unsigned short">
				<signature>System.Globalization.CultureTableRecord.get_IPARENT():unsigned short</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IPOSITIVEPERCENT" uniqueID="get_IPOSITIVEPERCENT():unsigned short">
				<signature>System.Globalization.CultureTableRecord.get_IPOSITIVEPERCENT():unsigned short</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_ITEXTINFO" uniqueID="get_ITEXTINFO():unsigned short">
				<signature>System.Globalization.CultureTableRecord.get_ITEXTINFO():unsigned short</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_InteropLCID" uniqueID="get_InteropLCID():int">
				<signature>System.Globalization.CultureTableRecord.get_InteropLCID():int</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IsCustomCulture" uniqueID="get_IsCustomCulture():bool">
				<signature>System.Globalization.CultureTableRecord.get_IsCustomCulture():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IsNeutralCulture" uniqueID="get_IsNeutralCulture():bool">
				<signature>System.Globalization.CultureTableRecord.get_IsNeutralCulture():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IsReplacementCulture" uniqueID="get_IsReplacementCulture():bool">
				<signature>System.Globalization.CultureTableRecord.get_IsReplacementCulture():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_IsSynthetic" uniqueID="get_IsSynthetic():bool">
				<signature>System.Globalization.CultureTableRecord.get_IsSynthetic():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_RegionNativeDisplayName" uniqueID="get_RegionNativeDisplayName():string">
				<signature>System.Globalization.CultureTableRecord.get_RegionNativeDisplayName():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_S1159" uniqueID="get_S1159():string">
				<signature>System.Globalization.CultureTableRecord.get_S1159():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_S2359" uniqueID="get_S2359():string">
				<signature>System.Globalization.CultureTableRecord.get_S2359():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SABBREVADERA" uniqueID="get_SABBREVADERA():string">
				<signature>System.Globalization.CultureTableRecord.get_SABBREVADERA():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SABBREVCTRYNAME" uniqueID="get_SABBREVCTRYNAME():string">
				<signature>System.Globalization.CultureTableRecord.get_SABBREVCTRYNAME():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SABBREVDAYNAMES" uniqueID="get_SABBREVDAYNAMES():string[]">
				<signature>System.Globalization.CultureTableRecord.get_SABBREVDAYNAMES():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SABBREVLANGNAME" uniqueID="get_SABBREVLANGNAME():string">
				<signature>System.Globalization.CultureTableRecord.get_SABBREVLANGNAME():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SABBREVMONTHGENITIVENAMES" uniqueID="get_SABBREVMONTHGENITIVENAMES():string[]">
				<signature>System.Globalization.CultureTableRecord.get_SABBREVMONTHGENITIVENAMES():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SABBREVMONTHNAMES" uniqueID="get_SABBREVMONTHNAMES():string[]">
				<signature>System.Globalization.CultureTableRecord.get_SABBREVMONTHNAMES():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SADERA" uniqueID="get_SADERA():string">
				<signature>System.Globalization.CultureTableRecord.get_SADERA():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SALTSORTID" uniqueID="get_SALTSORTID():string[]">
				<signature>System.Globalization.CultureTableRecord.get_SALTSORTID():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SCONSOLEFALLBACKNAME" uniqueID="get_SCONSOLEFALLBACKNAME():string">
				<signature>System.Globalization.CultureTableRecord.get_SCONSOLEFALLBACKNAME():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SCURRENCY" uniqueID="get_SCURRENCY():string">
				<signature>System.Globalization.CultureTableRecord.get_SCURRENCY():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SDATE" uniqueID="get_SDATE():string">
				<signature>System.Globalization.CultureTableRecord.get_SDATE():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SDATEWORDS" uniqueID="get_SDATEWORDS():string[]">
				<signature>System.Globalization.CultureTableRecord.get_SDATEWORDS():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SDAYNAMES" uniqueID="get_SDAYNAMES():string[]">
				<signature>System.Globalization.CultureTableRecord.get_SDAYNAMES():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SDECIMAL" uniqueID="get_SDECIMAL():string">
				<signature>System.Globalization.CultureTableRecord.get_SDECIMAL():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SENGCOUNTRY" uniqueID="get_SENGCOUNTRY():string">
				<signature>System.Globalization.CultureTableRecord.get_SENGCOUNTRY():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SENGDISPLAYNAME" uniqueID="get_SENGDISPLAYNAME():string">
				<signature>System.Globalization.CultureTableRecord.get_SENGDISPLAYNAME():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SENGLISHCURRENCY" uniqueID="get_SENGLISHCURRENCY():string">
				<signature>System.Globalization.CultureTableRecord.get_SENGLISHCURRENCY():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SGROUPING" uniqueID="get_SGROUPING():int[]">
				<signature>System.Globalization.CultureTableRecord.get_SGROUPING():int[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SINTLSYMBOL" uniqueID="get_SINTLSYMBOL():string">
				<signature>System.Globalization.CultureTableRecord.get_SINTLSYMBOL():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SISO3166CTRYNAME" uniqueID="get_SISO3166CTRYNAME():string">
				<signature>System.Globalization.CultureTableRecord.get_SISO3166CTRYNAME():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SISO3166CTRYNAME2" uniqueID="get_SISO3166CTRYNAME2():string">
				<signature>System.Globalization.CultureTableRecord.get_SISO3166CTRYNAME2():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SISO639LANGNAME" uniqueID="get_SISO639LANGNAME():string">
				<signature>System.Globalization.CultureTableRecord.get_SISO639LANGNAME():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SISO639LANGNAME2" uniqueID="get_SISO639LANGNAME2():string">
				<signature>System.Globalization.CultureTableRecord.get_SISO639LANGNAME2():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SLIST" uniqueID="get_SLIST():string">
				<signature>System.Globalization.CultureTableRecord.get_SLIST():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SLONGDATE" uniqueID="get_SLONGDATE():string">
				<signature>System.Globalization.CultureTableRecord.get_SLONGDATE():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SLONGDATES" uniqueID="get_SLONGDATES():string[]">
				<signature>System.Globalization.CultureTableRecord.get_SLONGDATES():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SMONDECIMALSEP" uniqueID="get_SMONDECIMALSEP():string">
				<signature>System.Globalization.CultureTableRecord.get_SMONDECIMALSEP():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SMONGROUPING" uniqueID="get_SMONGROUPING():int[]">
				<signature>System.Globalization.CultureTableRecord.get_SMONGROUPING():int[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SMONTHDAY" uniqueID="get_SMONTHDAY():string">
				<signature>System.Globalization.CultureTableRecord.get_SMONTHDAY():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SMONTHGENITIVENAMES" uniqueID="get_SMONTHGENITIVENAMES():string[]">
				<signature>System.Globalization.CultureTableRecord.get_SMONTHGENITIVENAMES():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SMONTHNAMES" uniqueID="get_SMONTHNAMES():string[]">
				<signature>System.Globalization.CultureTableRecord.get_SMONTHNAMES():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SMONTHOUSANDSEP" uniqueID="get_SMONTHOUSANDSEP():string">
				<signature>System.Globalization.CultureTableRecord.get_SMONTHOUSANDSEP():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SNAME" uniqueID="get_SNAME():string">
				<signature>System.Globalization.CultureTableRecord.get_SNAME():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SNAN" uniqueID="get_SNAN():string">
				<signature>System.Globalization.CultureTableRecord.get_SNAN():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SNATIVECALNAMES" uniqueID="get_SNATIVECALNAMES():string[]">
				<signature>System.Globalization.CultureTableRecord.get_SNATIVECALNAMES():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SNATIVECOUNTRY" uniqueID="get_SNATIVECOUNTRY():string">
				<signature>System.Globalization.CultureTableRecord.get_SNATIVECOUNTRY():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SNATIVECURRENCY" uniqueID="get_SNATIVECURRENCY():string">
				<signature>System.Globalization.CultureTableRecord.get_SNATIVECURRENCY():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SNATIVEDIGITS" uniqueID="get_SNATIVEDIGITS():string[]">
				<signature>System.Globalization.CultureTableRecord.get_SNATIVEDIGITS():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SNATIVEDISPLAYNAME" uniqueID="get_SNATIVEDISPLAYNAME():string">
				<signature>System.Globalization.CultureTableRecord.get_SNATIVEDISPLAYNAME():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SNEGATIVESIGN" uniqueID="get_SNEGATIVESIGN():string">
				<signature>System.Globalization.CultureTableRecord.get_SNEGATIVESIGN():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SNEGINFINITY" uniqueID="get_SNEGINFINITY():string">
				<signature>System.Globalization.CultureTableRecord.get_SNEGINFINITY():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SPARENT" uniqueID="get_SPARENT():string">
				<signature>System.Globalization.CultureTableRecord.get_SPARENT():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SPERCENT" uniqueID="get_SPERCENT():string">
				<signature>System.Globalization.CultureTableRecord.get_SPERCENT():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SPOSINFINITY" uniqueID="get_SPOSINFINITY():string">
				<signature>System.Globalization.CultureTableRecord.get_SPOSINFINITY():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SPOSITIVESIGN" uniqueID="get_SPOSITIVESIGN():string">
				<signature>System.Globalization.CultureTableRecord.get_SPOSITIVESIGN():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SREGIONNAME" uniqueID="get_SREGIONNAME():string">
				<signature>System.Globalization.CultureTableRecord.get_SREGIONNAME():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SSHORTDATE" uniqueID="get_SSHORTDATE():string">
				<signature>System.Globalization.CultureTableRecord.get_SSHORTDATE():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SSHORTDATES" uniqueID="get_SSHORTDATES():string[]">
				<signature>System.Globalization.CultureTableRecord.get_SSHORTDATES():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SSHORTTIME" uniqueID="get_SSHORTTIME():string">
				<signature>System.Globalization.CultureTableRecord.get_SSHORTTIME():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SSHORTTIMES" uniqueID="get_SSHORTTIMES():string[]">
				<signature>System.Globalization.CultureTableRecord.get_SSHORTTIMES():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SSPECIFICCULTURE" uniqueID="get_SSPECIFICCULTURE():string">
				<signature>System.Globalization.CultureTableRecord.get_SSPECIFICCULTURE():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SSUPERSHORTDAYNAMES" uniqueID="get_SSUPERSHORTDAYNAMES():string[]">
				<signature>System.Globalization.CultureTableRecord.get_SSUPERSHORTDAYNAMES():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_STHOUSAND" uniqueID="get_STHOUSAND():string">
				<signature>System.Globalization.CultureTableRecord.get_STHOUSAND():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_STIME" uniqueID="get_STIME():string">
				<signature>System.Globalization.CultureTableRecord.get_STIME():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_STIMEFORMAT" uniqueID="get_STIMEFORMAT():string">
				<signature>System.Globalization.CultureTableRecord.get_STIMEFORMAT():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_STIMEFORMATS" uniqueID="get_STIMEFORMATS():string[]">
				<signature>System.Globalization.CultureTableRecord.get_STIMEFORMATS():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SYEARMONTH" uniqueID="get_SYEARMONTH():string">
				<signature>System.Globalization.CultureTableRecord.get_SYEARMONTH():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_SYEARMONTHS" uniqueID="get_SYEARMONTHS():string[]">
				<signature>System.Globalization.CultureTableRecord.get_SYEARMONTHS():string[]</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_UseGetLocaleInfo" uniqueID="get_UseGetLocaleInfo():bool">
				<signature>System.Globalization.CultureTableRecord.get_UseGetLocaleInfo():bool</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="get_UseUserOverride" uniqueID="get_UseUserOverride():bool">
				<signature>System.Globalization.CultureTableRecord.get_UseUserOverride():bool</signature>
			</method>
			<method accessibility="Private" methodKind="Member" name="get_WindowsPath" uniqueID="get_WindowsPath():string">
				<signature>System.Globalization.CultureTableRecord.get_WindowsPath():string</signature>
			</method>
			<method accessibility="Protected" methodKind="Member" name="set_CultureName" uniqueID="set_CultureName(string):void">
				<signature>System.Globalization.CultureTableRecord.set_CultureName(string):void</signature>
			</method>
		</class>
		<class name="CultureTableRecord+AdjustedSyntheticCultureName" uniqueID="System.Globalization.CultureTableRecord+AdjustedSyntheticCultureName">
			<method accessibility="Protected" methodKind="Member" name="CultureTableRecord+AdjustedSyntheticCultureName" uniqueID="CultureTableRecord+AdjustedSyntheticCultureName(int;string;string;string):void">
				<signature>System.Globalization.CultureTableRecord+AdjustedSyntheticCultureName.CultureTableRecord+AdjustedSyntheticCultureName(int;string;string;string):void</signature>
			</method>
		</class>
	</package>
</api_info>
